


Executing BufDelete Autocommands for "*"
autocommand call LanguageClient#handleBufDelete()

Executing BufDelete Autocommands for "*"
autocommand call s:HandleBufDelete(expand('<afile>'), expand('<abuf>'))

chdir(C:\Users\wsdjeg\.SpaceVim)
chdir(term:~\.SpaceVim)
chdir(C:\Users\wsdjeg\.SpaceVim)
chdir(C:\Users\wsdjeg\.SpaceVim)
chdir(term:~\.SpaceVim)
chdir(C:\Users\wsdjeg\.SpaceVim)
chdir(C:\Users\wsdjeg\.SpaceVim)
chdir(term:~\.SpaceVim)
chdir(C:\Users\wsdjeg\.SpaceVim)
chdir(C:\Users\wsdjeg\.SpaceVim)
chdir(term:~\.SpaceVim)
chdir(C:\Users\wsdjeg\.SpaceVim)
chdir(C:\Users\wsdjeg\.SpaceVim)
chdir(term:~\.SpaceVim)
chdir(C:\Users\wsdjeg\.SpaceVim)
chdir(C:\Users\wsdjeg\.SpaceVim)
chdir(term:~\.SpaceVim)
chdir(C:\Users\wsdjeg\.SpaceVim)
Error detected while processing function startify#insane_in_the_membrane:
line  115:
E490: No fold found
Executing FileType Autocommands for "*"
autocommand call <SID>add_buffer_head()

Executing FileType Autocommands for "*"
autocommand let &l:statusline = SpaceVim#layers#core#statusline#get(1)

Executing FuncUndefined Autocommands for "*"
autocommand call dein#autoload#_on_func(expand('<afile>'))

not found in 'runtimepath': "autoload/fugitive.vim"
Executing FileType Autocommands for "*?"
autocommand call dein#autoload#_on_default_event('FileType')

Executing FileType Autocommands for "startify"
autocommand nnoremap <buffer> <F2> <Nop>

autocommand call <SID>update_logo()

autocommand setl nowrap

Executing FileType Autocommands for "*"
autocommand call s:maybe_reconfigure_buffer(expand('<abuf>'))

not found in 'runtimepath': "autoload/neomake/makers/ft/startify.vim"
Neomake: [-.-:7:1] Using setting automake.ignore_filetypes=['startify'] from 'global'.
Neomake: [-.-:7:1] automake: ignoring buffer with filetype=startify.
Executing FileType Autocommands for "*"
autocommand if exists('b:neomake.project_root') | unlet b:neomake.project_root | endif

Executing FileType Autocommands for "*"
autocommand call SpaceVim#mapping#space#refrashLSPC()

Executing FileType Autocommands for "*"
autocommand call s:ftplugin()

not found in 'runtimepath': "ftplugin/startify.vim ftplugin/startify_*.vim ftplugin/startify/*.vim"
Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

not found in 'runtimepath': "indent/startify.vim"
Executing FileType Autocommands for "*"
autocommand exe "set syntax=" . expand("<amatch>")

Executing Syntax Autocommands for "*"
autocommand call s:SynSet()

line 24: sourcing "C:\Users\wsdjeg\.SpaceVim\bundle\vim-startify\syntax\startify.vim"
finished sourcing C:\Users\wsdjeg\.SpaceVim\bundle\vim-startify\syntax\startify.vim
continuing in function <SNR>150_SynSet
Executing Syntax Autocommands for "*"
autocommand call s:InitColor()

Executing FileType Autocommands for "*"
autocommand call matchup#loader#init_buffer()

Executing FileType Autocommands for "*"
autocommand call LanguageClient#handleFileType()

Executing FileType Autocommands for "*"
autocommand call <SID>setup()

Executing FileType Autocommands for "*"
autocommand :call s:SetUpForNewFiletype(&filetype, 1)

Executing FileType Autocommands for "*"
autocommand call s:Disable()

Executing FileType Autocommands for "*"
autocommand call s:AutoUpdate(fnamemodify(expand('<afile>'), ':p'), 0)

Executing WinEnter Autocommands for "*"
autocommand let &l:statusline = SpaceVim#layers#core#statusline#get(1)

Executing FuncUndefined Autocommands for "*"
autocommand call dein#autoload#_on_func(expand('<afile>'))

not found in 'runtimepath': "autoload/fugitive.vim"
Executing WinEnter Autocommands for "*"
autocommand call SpaceVim#plugins#windowsmanager#MarkBaseWin()

autocommand if &nu | set rnu   | endif

autocommand call s:enable_cursorline()

Executing WinEnter Autocommands for "*"
autocommand call rpcnotify(0, 'Dir', getcwd())

Executing WinEnter Autocommands for "*"
autocommand call s:matchparen.highlight(1)

Executing WinEnter Autocommands for "*"
autocommand call s:HandleOnlyWindow()

autocommand if bufwinnr(s:TagbarBufName()) == -1 |     call s:ShrinkIfExpanded() | endif

Executing CursorMoved Autocommands for "*"
autocommand call <SID>neomake_cursor_move_delay()

Executing CursorMoved Autocommands for "*"
autocommand call <SID>GuiCursorMoved()

Executing CursorMoved Autocommands for "*"
autocommand call neomake#CursorMovedDelayed()

Executing CursorMoved Autocommands for "*"
autocommand call s:matchparen.highlight_deferred()

Executing CursorMoved Autocommands for "*"
autocommand call LanguageClient#handleCursorMoved()

Executing CursorMoved Autocommands for "<buffer=7>"
autocommand call s:set_cursor()

Executing TextChanged Autocommands for "*"
autocommand call s:matchparen.highlight_deferred()

Executing TextChanged Autocommands for "*"
autocommand call LanguageClient#handleTextChanged()

chdir(C:\Users\wsdjeg\.SpaceVim)
chdir(.vim)
chdir(C:\Users\wsdjeg\.SpaceVim)


chdir(C:/Users/wsdjeg/.SpaceVim\)
Executing DirChanged Autocommands for "*"
autocommand call rpcnotify(3, "python_chdir", v:event.cwd)

Executing DirChanged Autocommands for "*"
autocommand call rpcnotify(0, 'Dir', getcwd())

Executing DirChanged Autocommands for "<buffer=7>"
autocommand if getcwd() !=# get(get(b:, 'startify', {}), 'cwd') | Startify | endif

C:\Users\wsdjeg\.SpaceVim
Executing FuncUndefined Autocommands for "*"
autocommand call dein#autoload#_on_func(expand('<afile>'))

not found in 'runtimepath': "autoload/fugitive.vim"
Executing BufLeave Autocommands for "*"
autocommand if &nu | set nornu | endif

autocommand call s:disable_cursorline()

Executing BufLeave Autocommands for "*"
autocommand call s:matchparen.clear()

Executing BufLeave Autocommands for "*"
autocommand if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif

Executing WinLeave Autocommands for "*"
autocommand call SpaceVim#layers#core#statusline#remove_section('search status')

Executing FuncUndefined Autocommands for "*"
autocommand call dein#autoload#_on_func(expand('<afile>'))

not found in 'runtimepath': "autoload/fugitive.vim"
autocommand let &l:statusline = SpaceVim#layers#core#statusline#get()

Executing FuncUndefined Autocommands for "*"
autocommand call dein#autoload#_on_func(expand('<afile>'))

not found in 'runtimepath': "autoload/fugitive.vim"
Executing WinLeave Autocommands for "*"
autocommand call <SID>neomake_signatures_clear()

Executing WinLeave Autocommands for "*"
autocommand if &nu | set nornu | endif

autocommand call s:disable_cursorline()

Executing WinLeave Autocommands for "*"
autocommand call s:matchparen.clear()

Executing WinEnter Autocommands for "*"
autocommand let &l:statusline = SpaceVim#layers#core#statusline#get(1)

Executing WinEnter Autocommands for "*"
autocommand call SpaceVim#plugins#windowsmanager#MarkBaseWin()

autocommand if &nu | set rnu   | endif

autocommand call s:enable_cursorline()

Executing WinEnter Autocommands for "*"
autocommand call rpcnotify(0, 'Dir', getcwd())

Executing WinEnter Autocommands for "*"
autocommand call s:matchparen.highlight(1)

Executing WinEnter Autocommands for "*"
autocommand call s:HandleOnlyWindow()

autocommand if bufwinnr(s:TagbarBufName()) == -1 |     call s:ShrinkIfExpanded() | endif

Executing BufEnter Autocommands for "*"
autocommand call SpaceVim#plugins#projectmanager#current_root()

chdir(C:\Users\wsdjeg\.SpaceVim)
chdir(.git)
chdir(C:\Users\wsdjeg\.SpaceVim)
chdir(C:\Users\wsdjeg\.SpaceVim)
chdir(.SpaceVim.d)
chdir(C:\Users\wsdjeg\.SpaceVim)
chdir(C:/Users/wsdjeg/.SpaceVim\)
C:\Users\wsdjeg\.SpaceVim
Executing FuncUndefined Autocommands for "*"
autocommand call dein#autoload#_on_func(expand('<afile>'))

not found in 'runtimepath': "autoload/fugitive.vim"
Executing BufEnter Autocommands for "*"
autocommand if empty(&buftype) && &filetype != 'help'|      nnoremap <silent><buffer> <Leader>] :call MyTagfunc()<CR>|      nnoremap <silent><buffer> <Leader>[ :call MyTagfuncBack()<CR>|  endif

Executing BufEnter Autocommands for "*"
autocommand if (!has('vim_starting') && winnr('$') == 1  && g:_spacevim_autoclose_filetree && &filetype ==# 'defx') | call s:close_last_vimfiler_windows() | endif

Executing BufEnter Autocommands for "*"
autocommand if (winnr('$') == 1 && &buftype ==# 'quickfix' ) |   bd|   q | endif

autocommand if &nu | set rnu   | endif

autocommand call s:enable_cursorline()

autocommand set cpoptions+=d " NOTE: ctags find the tags file from the current path instead of the path of currect file

autocommand :syntax sync fromstart " ensure every file does syntax highlighting (full)

autocommand call SpaceVim#mapping#space#refrashLSPC()

autocommand let b:_spacevim_project_name = get(g:, '_spacevim_project_name', '')

Executing BufEnter Autocommands for "*"
autocommand call s:append(expand('<amatch>'))

Executing BufEnter Autocommands for "*"
autocommand call LanguageClient#handleBufEnter()

Executing BufEnter Autocommands for "*"
autocommand if !exists('b:delimitMate_was_here') |   call <SID>setup() |   let b:delimitMate_was_here = 1 | endif

Error detected while processing function <SNR>215_setup[36]..<SNR>215_Map[11]..<SNR>215_AutoClose:
line    9:
E225: global mapping already exists for (
Executing BufEnter Autocommands for "*"
autocommand call lfMru#record(expand('<afile>:p')) | call lfMru#recordBuffer(expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand call s:on_bufenter()

Executing BufEnter Autocommands for "*"
autocommand :call s:SetUpForNewFiletype(&filetype, 0)

Executing BufEnter Autocommands for "*"
autocommand sil call s:LocalBrowse(expand("<amatch>"))

Executing BufEnter Autocommands for "*"
autocommand if &ft == 'floaterm' | call floaterm#util#startinsert() | endif

Executing BufEnter Autocommands for "*"
autocommand if expand('<amatch>') !~ '__Tagbar__.*' |     let s:last_alt_bufnr = bufnr('#') | endif

autocommand call s:AutoUpdate(fnamemodify(expand('<afile>'), ':p'), 0)

Executing CursorMoved Autocommands for "*"
autocommand call <SID>neomake_cursor_move_delay()

Executing CursorMoved Autocommands for "*"
autocommand call <SID>GuiCursorMoved()

Executing CursorMoved Autocommands for "*"
autocommand call neomake#CursorMovedDelayed()

Executing CursorMoved Autocommands for "*"
autocommand call s:matchparen.highlight_deferred()

Executing CursorMoved Autocommands for "*"
autocommand call LanguageClient#handleCursorMoved()

Executing WinLeave Autocommands for "*"
autocommand call SpaceVim#layers#core#statusline#remove_section('search status')

autocommand let &l:statusline = SpaceVim#layers#core#statusline#get()

Executing WinLeave Autocommands for "*"
autocommand call <SID>neomake_signatures_clear()

Executing WinLeave Autocommands for "*"
autocommand if &nu | set nornu | endif

autocommand call s:disable_cursorline()

Executing WinLeave Autocommands for "*"
autocommand call s:matchparen.clear()

Executing WinEnter Autocommands for "*"
autocommand let &l:statusline = SpaceVim#layers#core#statusline#get(1)

Executing WinEnter Autocommands for "*"
autocommand call SpaceVim#plugins#windowsmanager#MarkBaseWin()

autocommand if &nu | set rnu   | endif

autocommand call s:enable_cursorline()

Executing WinEnter Autocommands for "*"
autocommand call rpcnotify(0, 'Dir', getcwd())

Executing WinEnter Autocommands for "*"
autocommand call s:matchparen.highlight(1)

Executing WinEnter Autocommands for "*"
autocommand call s:HandleOnlyWindow()

autocommand if bufwinnr(s:TagbarBufName()) == -1 |     call s:ShrinkIfExpanded() | endif

Executing CursorMoved Autocommands for "*"
autocommand call <SID>neomake_cursor_move_delay()

Executing CursorMoved Autocommands for "*"
autocommand call <SID>GuiCursorMoved()

Executing CursorMoved Autocommands for "*"
autocommand call neomake#CursorMovedDelayed()

Executing CursorMoved Autocommands for "*"
autocommand call s:matchparen.highlight_deferred()

Executing CursorMoved Autocommands for "*"
autocommand call LanguageClient#handleCursorMoved()

Executing BufAdd Autocommands for "*"
autocommand call lfMru#record(expand('<afile>:p')) | call lfMru#recordBuffer(expand('<abuf>'))

Executing BufLeave Autocommands for "*"
autocommand if &nu | set nornu | endif

autocommand call s:disable_cursorline()

Executing BufLeave Autocommands for "*"
autocommand call s:matchparen.clear()

Executing BufLeave Autocommands for "*"
autocommand if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif

Executing BufEnter Autocommands for "*"
autocommand call SpaceVim#plugins#projectmanager#current_root()

chdir(C:\Users\wsdjeg\.SpaceVim)
chdir(.git)
chdir(C:\Users\wsdjeg\.SpaceVim)
chdir(C:\Users\wsdjeg\.SpaceVim)
chdir(.SpaceVim.d)
chdir(C:\Users\wsdjeg\.SpaceVim)
chdir(C:/Users/wsdjeg/.SpaceVim\)
C:\Users\wsdjeg\.SpaceVim
Executing FuncUndefined Autocommands for "*"
autocommand call dein#autoload#_on_func(expand('<afile>'))

not found in 'runtimepath': "autoload/fugitive.vim"
Executing BufEnter Autocommands for "*"
autocommand if empty(&buftype) && &filetype != 'help'|      nnoremap <silent><buffer> <Leader>] :call MyTagfunc()<CR>|      nnoremap <silent><buffer> <Leader>[ :call MyTagfuncBack()<CR>|  endif

Executing BufEnter Autocommands for "*"
autocommand if (!has('vim_starting') && winnr('$') == 1  && g:_spacevim_autoclose_filetree && &filetype ==# 'defx') | call s:close_last_vimfiler_windows() | endif

Executing BufEnter Autocommands for "*"
autocommand if (winnr('$') == 1 && &buftype ==# 'quickfix' ) |   bd|   q | endif

autocommand if &nu | set rnu   | endif

autocommand call s:enable_cursorline()

autocommand set cpoptions+=d " NOTE: ctags find the tags file from the current path instead of the path of currect file

autocommand :syntax sync fromstart " ensure every file does syntax highlighting (full)

autocommand call SpaceVim#mapping#space#refrashLSPC()

autocommand let b:_spacevim_project_name = get(g:, '_spacevim_project_name', '')

Executing BufEnter Autocommands for "*"
autocommand call s:append(expand('<amatch>'))

Executing BufEnter Autocommands for "*"
autocommand call LanguageClient#handleBufEnter()

Executing BufEnter Autocommands for "*"
autocommand if !exists('b:delimitMate_was_here') |   call <SID>setup() |   let b:delimitMate_was_here = 1 | endif

Error detected while processing function <SNR>215_setup[36]..<SNR>215_Map[11]..<SNR>215_AutoClose:
line    9:
E225: global mapping already exists for (
Executing BufEnter Autocommands for "*"
autocommand call lfMru#record(expand('<afile>:p')) | call lfMru#recordBuffer(expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand call s:on_bufenter()

Executing BufEnter Autocommands for "*"
autocommand :call s:SetUpForNewFiletype(&filetype, 0)

Executing BufEnter Autocommands for "*"
autocommand sil call s:LocalBrowse(expand("<amatch>"))

Executing BufEnter Autocommands for "*"
autocommand if &ft == 'floaterm' | call floaterm#util#startinsert() | endif

Executing BufEnter Autocommands for "*"
autocommand if expand('<amatch>') !~ '__Tagbar__.*' |     let s:last_alt_bufnr = bufnr('#') | endif

autocommand call s:AutoUpdate(fnamemodify(expand('<afile>'), ':p'), 0)

Executing BufWinEnter Autocommands for "*"
autocommand let &l:statusline = SpaceVim#layers#core#statusline#get(1)

Executing BufWinEnter Autocommands for "*"
autocommand if(exists('b:_winview')) | call winrestview(b:_winview) | endif

Executing BufWinEnter Autocommands for "*"
autocommand call s:append(expand('<amatch>'))

Executing BufWinEnter Autocommands for "*"
autocommand call matchup#loader#bufwinenter()

Executing BufWinEnter Autocommands for "*"
autocommand call s:IndentLinesDisable() | call s:LeadingSpaceDisable() | call s:Setup()

Executing OptionSet Autocommands for "buftype"
autocommand call s:update_buffer_options()

Executing TermOpen Autocommands for "*"
autocommand let g:last_terminal_job_id = b:terminal_job_id | IndentLinesDisable

Executing WinEnter Autocommands for "*"
autocommand let &l:statusline = SpaceVim#layers#core#statusline#get(1)

Executing WinEnter Autocommands for "*"
autocommand call SpaceVim#plugins#windowsmanager#MarkBaseWin()

autocommand if &nu | set rnu   | endif

autocommand call s:enable_cursorline()

Executing WinEnter Autocommands for "term://*"
autocommand startinsert | IndentLinesDisable

Executing WinEnter Autocommands for "*"
autocommand call rpcnotify(0, 'Dir', getcwd())

Executing WinEnter Autocommands for "*"
autocommand call s:matchparen.highlight(1)

Executing WinEnter Autocommands for "*"
autocommand call s:HandleOnlyWindow()

autocommand if bufwinnr(s:TagbarBufName()) == -1 |     call s:ShrinkIfExpanded() | endif

Executing BufDelete Autocommands for "*"
autocommand call LanguageClient#handleBufDelete()

Executing BufDelete Autocommands for "*"
autocommand call s:HandleBufDelete(expand('<afile>'), expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <SID>neomake_cursor_move_delay()

Executing CursorMoved Autocommands for "*"
autocommand call <SID>GuiCursorMoved()

Executing CursorMoved Autocommands for "*"
autocommand call neomake#CursorMovedDelayed()

Executing CursorMoved Autocommands for "*"
autocommand call s:matchparen.highlight_deferred()

Executing CursorMoved Autocommands for "*"
autocommand call LanguageClient#handleCursorMoved()

Executing TextChanged Autocommands for "*"
autocommand call s:matchparen.highlight_deferred()

Executing TextChanged Autocommands for "*"
autocommand call LanguageClient#handleTextChanged()

Executing CursorMoved Autocommands for "*"
autocommand call <SID>neomake_cursor_move_delay()

Executing CursorMoved Autocommands for "*"
autocommand call <SID>GuiCursorMoved()

Executing CursorMoved Autocommands for "*"
autocommand call neomake#CursorMovedDelayed()

Executing CursorMoved Autocommands for "*"
autocommand call s:matchparen.highlight_deferred()

Executing CursorMoved Autocommands for "*"
autocommand call LanguageClient#handleCursorMoved()

Executing TextChanged Autocommands for "*"
autocommand call s:matchparen.highlight_deferred()

Executing TextChanged Autocommands for "*"
autocommand call LanguageClient#handleTextChanged()

Executing TermClose Autocommands for "*"
autocommand let g:_spacevim_termclose_abuf = expand('<abuf>') | call timer_start(5, 'SpaceVim#mapping#close_term_buffer')

Executing BufAdd Autocommands for "*"
autocommand call lfMru#record(expand('<afile>:p')) | call lfMru#recordBuffer(expand('<abuf>'))

Executing BufLeave Autocommands for "*"
autocommand if &nu | set nornu | endif

autocommand call s:disable_cursorline()

Executing BufLeave Autocommands for "*"
autocommand call s:matchparen.clear()

Executing BufLeave Autocommands for "term://*"
autocommand call gitgutter#all(1)

Executing BufLeave Autocommands for "*"
autocommand if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif

Executing BufWinLeave Autocommands for "*"
autocommand let &l:statusline = SpaceVim#layers#core#statusline#get()

Executing BufWinLeave Autocommands for "*"
autocommand let b:_winview = winsaveview()

Executing BufEnter Autocommands for "*"
autocommand call SpaceVim#plugins#projectmanager#current_root()

chdir(C:\Users\wsdjeg\.SpaceVim)
chdir(.git)
chdir(C:\Users\wsdjeg\.SpaceVim)
chdir(C:\Users\wsdjeg\.SpaceVim)
chdir(.SpaceVim.d)
chdir(C:\Users\wsdjeg\.SpaceVim)
chdir(C:/Users/wsdjeg/.SpaceVim\)
C:\Users\wsdjeg\.SpaceVim
Executing FuncUndefined Autocommands for "*"
autocommand call dein#autoload#_on_func(expand('<afile>'))

not found in 'runtimepath': "autoload/fugitive.vim"
Executing BufEnter Autocommands for "*"
autocommand if empty(&buftype) && &filetype != 'help'|      nnoremap <silent><buffer> <Leader>] :call MyTagfunc()<CR>|      nnoremap <silent><buffer> <Leader>[ :call MyTagfuncBack()<CR>|  endif

Executing BufEnter Autocommands for "*"
autocommand if (!has('vim_starting') && winnr('$') == 1  && g:_spacevim_autoclose_filetree && &filetype ==# 'defx') | call s:close_last_vimfiler_windows() | endif

Executing BufEnter Autocommands for "*"
autocommand if (winnr('$') == 1 && &buftype ==# 'quickfix' ) |   bd|   q | endif

autocommand if &nu | set rnu   | endif

autocommand call s:enable_cursorline()

autocommand set cpoptions+=d " NOTE: ctags find the tags file from the current path instead of the path of currect file

autocommand :syntax sync fromstart " ensure every file does syntax highlighting (full)

autocommand call SpaceVim#mapping#space#refrashLSPC()

autocommand let b:_spacevim_project_name = get(g:, '_spacevim_project_name', '')

Executing BufEnter Autocommands for "*"
autocommand call s:append(expand('<amatch>'))

Executing BufEnter Autocommands for "*"
autocommand call LanguageClient#handleBufEnter()

Executing BufEnter Autocommands for "*"
autocommand if !exists('b:delimitMate_was_here') |   call <SID>setup() |   let b:delimitMate_was_here = 1 | endif

Error detected while processing function <SNR>215_setup[36]..<SNR>215_Map[11]..<SNR>215_AutoClose:
line    9:
E225: global mapping already exists for (
Executing BufEnter Autocommands for "*"
autocommand call lfMru#record(expand('<afile>:p')) | call lfMru#recordBuffer(expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand call s:on_bufenter()

Executing BufEnter Autocommands for "*"
autocommand :call s:SetUpForNewFiletype(&filetype, 0)

Executing BufEnter Autocommands for "*"
autocommand sil call s:LocalBrowse(expand("<amatch>"))

Executing BufEnter Autocommands for "*"
autocommand if &ft == 'floaterm' | call floaterm#util#startinsert() | endif

Executing BufEnter Autocommands for "*"
autocommand if expand('<amatch>') !~ '__Tagbar__.*' |     let s:last_alt_bufnr = bufnr('#') | endif

autocommand call s:AutoUpdate(fnamemodify(expand('<afile>'), ':p'), 0)

Executing BufWinEnter Autocommands for "*"
autocommand let &l:statusline = SpaceVim#layers#core#statusline#get(1)

Executing BufWinEnter Autocommands for "*"
autocommand if(exists('b:_winview')) | call winrestview(b:_winview) | endif

Executing BufWinEnter Autocommands for "*"
autocommand call s:append(expand('<amatch>'))

Executing BufWinEnter Autocommands for "*"
autocommand call matchup#loader#bufwinenter()

Executing BufWinEnter Autocommands for "*"
autocommand call s:IndentLinesDisable() | call s:LeadingSpaceDisable() | call s:Setup()

Executing BufWipeout Autocommands for "*"
autocommand call s:clear_cache(expand('<abuf>'))

Executing BufWipeout Autocommands for "*"
autocommand call s:HandleBufDelete(expand('<afile>'), expand('<abuf>'))

Executing BufLeave Autocommands for "*"
autocommand if &nu | set nornu | endif

autocommand call s:disable_cursorline()

Executing BufLeave Autocommands for "*"
autocommand call s:matchparen.clear()

Executing BufLeave Autocommands for "*"
autocommand if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif

Executing WinLeave Autocommands for "*"
autocommand call SpaceVim#layers#core#statusline#remove_section('search status')

autocommand let &l:statusline = SpaceVim#layers#core#statusline#get()

Executing WinLeave Autocommands for "*"
autocommand call <SID>neomake_signatures_clear()

Executing WinLeave Autocommands for "*"
autocommand if &nu | set nornu | endif

autocommand call s:disable_cursorline()

Executing WinLeave Autocommands for "*"
autocommand call s:matchparen.clear()

Executing BufWinLeave Autocommands for "*"
autocommand let &l:statusline = SpaceVim#layers#core#statusline#get()

Executing BufWinLeave Autocommands for "*"
autocommand let b:_winview = winsaveview()

Executing WinEnter Autocommands for "*"
autocommand let &l:statusline = SpaceVim#layers#core#statusline#get(1)

Executing WinEnter Autocommands for "*"
autocommand call SpaceVim#plugins#windowsmanager#MarkBaseWin()

autocommand if &nu | set rnu   | endif

autocommand call s:enable_cursorline()

Executing WinEnter Autocommands for "*"
autocommand call rpcnotify(0, 'Dir', getcwd())

Executing WinEnter Autocommands for "*"
autocommand call s:matchparen.highlight(1)

Executing WinEnter Autocommands for "*"
autocommand call s:HandleOnlyWindow()

autocommand if bufwinnr(s:TagbarBufName()) == -1 |     call s:ShrinkIfExpanded() | endif

Executing CursorMoved Autocommands for "*"
autocommand call <SID>neomake_cursor_move_delay()

Executing CursorMoved Autocommands for "*"
autocommand call <SID>GuiCursorMoved()

Executing CursorMoved Autocommands for "*"
autocommand call neomake#CursorMovedDelayed()

Executing CursorMoved Autocommands for "*"
autocommand call s:matchparen.highlight_deferred()

Executing CursorMoved Autocommands for "*"
autocommand call LanguageClient#handleCursorMoved()

Executing BufEnter Autocommands for "*"
autocommand call SpaceVim#plugins#projectmanager#current_root()

chdir(C:/Users/wsdjeg/.SpaceVim\)
C:\Users\wsdjeg\.SpaceVim
Executing FuncUndefined Autocommands for "*"
autocommand call dein#autoload#_on_func(expand('<afile>'))

not found in 'runtimepath': "autoload/fugitive.vim"
Executing BufEnter Autocommands for "*"
autocommand if empty(&buftype) && &filetype != 'help'|      nnoremap <silent><buffer> <Leader>] :call MyTagfunc()<CR>|      nnoremap <silent><buffer> <Leader>[ :call MyTagfuncBack()<CR>|  endif

Executing BufEnter Autocommands for "*"
autocommand if (!has('vim_starting') && winnr('$') == 1  && g:_spacevim_autoclose_filetree && &filetype ==# 'defx') | call s:close_last_vimfiler_windows() | endif

Executing BufEnter Autocommands for "*"
autocommand if (winnr('$') == 1 && &buftype ==# 'quickfix' ) |   bd|   q | endif

autocommand if &nu | set rnu   | endif

autocommand call s:enable_cursorline()

autocommand set cpoptions+=d " NOTE: ctags find the tags file from the current path instead of the path of currect file

autocommand :syntax sync fromstart " ensure every file does syntax highlighting (full)

autocommand call SpaceVim#mapping#space#refrashLSPC()

autocommand let b:_spacevim_project_name = get(g:, '_spacevim_project_name', '')

Executing BufEnter Autocommands for "*"
autocommand call s:append(expand('<amatch>'))

Executing BufEnter Autocommands for "*"
autocommand call LanguageClient#handleBufEnter()

Executing BufEnter Autocommands for "*"
autocommand if !exists('b:delimitMate_was_here') |   call <SID>setup() |   let b:delimitMate_was_here = 1 | endif

Executing BufEnter Autocommands for "*"
autocommand call lfMru#record(expand('<afile>:p')) | call lfMru#recordBuffer(expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand call s:on_bufenter()

Executing BufEnter Autocommands for "*"
autocommand :call s:SetUpForNewFiletype(&filetype, 0)

Executing BufEnter Autocommands for "*"
autocommand sil call s:LocalBrowse(expand("<amatch>"))

Executing BufEnter Autocommands for "*"
autocommand if &ft == 'floaterm' | call floaterm#util#startinsert() | endif

Executing BufEnter Autocommands for "*"
autocommand if expand('<amatch>') !~ '__Tagbar__.*' |     let s:last_alt_bufnr = bufnr('#') | endif

autocommand call s:AutoUpdate(fnamemodify(expand('<afile>'), ':p'), 0)

Executing TextChanged Autocommands for "*"
autocommand call s:matchparen.highlight_deferred()

Executing TextChanged Autocommands for "*"
autocommand call LanguageClient#handleTextChanged()


Executing BufLeave Autocommands for "*"
autocommand if &nu | set nornu | endif

autocommand call s:disable_cursorline()

Executing BufLeave Autocommands for "*"
autocommand call s:matchparen.clear()

Executing BufLeave Autocommands for "*"
autocommand if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif

Executing WinLeave Autocommands for "*"
autocommand call SpaceVim#layers#core#statusline#remove_section('search status')

autocommand let &l:statusline = SpaceVim#layers#core#statusline#get()

Executing WinLeave Autocommands for "*"
autocommand call <SID>neomake_signatures_clear()

Executing WinLeave Autocommands for "*"
autocommand if &nu | set nornu | endif

autocommand call s:disable_cursorline()

Executing WinLeave Autocommands for "*"
autocommand call s:matchparen.clear()

Executing BufWinLeave Autocommands for "*"
autocommand let &l:statusline = SpaceVim#layers#core#statusline#get()

Executing BufWinLeave Autocommands for "*"
autocommand let b:_winview = winsaveview()

Executing WinEnter Autocommands for "*"
autocommand let &l:statusline = SpaceVim#layers#core#statusline#get(1)

Executing FuncUndefined Autocommands for "*"
autocommand call dein#autoload#_on_func(expand('<afile>'))

not found in 'runtimepath': "autoload/fugitive.vim"
Executing WinEnter Autocommands for "*"
autocommand call SpaceVim#plugins#windowsmanager#MarkBaseWin()

autocommand if &nu | set rnu   | endif

autocommand call s:enable_cursorline()

Executing WinEnter Autocommands for "*"
autocommand call rpcnotify(0, 'Dir', getcwd())

Executing WinEnter Autocommands for "*"
autocommand call s:matchparen.highlight(1)

Executing WinEnter Autocommands for "*"
autocommand call s:HandleOnlyWindow()

autocommand if bufwinnr(s:TagbarBufName()) == -1 |     call s:ShrinkIfExpanded() | endif

Executing CursorMoved Autocommands for "*"
autocommand call <SID>neomake_cursor_move_delay()

Executing CursorMoved Autocommands for "*"
autocommand call <SID>GuiCursorMoved()

Executing CursorMoved Autocommands for "*"
autocommand call neomake#CursorMovedDelayed()

Executing CursorMoved Autocommands for "*"
autocommand call s:matchparen.highlight_deferred()

Executing CursorMoved Autocommands for "*"
autocommand call LanguageClient#handleCursorMoved()

Executing CursorMoved Autocommands for "<buffer=7>"
autocommand call s:set_cursor()

Executing BufEnter Autocommands for "*"
autocommand call SpaceVim#plugins#projectmanager#current_root()

chdir(C:/Users/wsdjeg/.SpaceVim\)
                                 C:\Users\wsdjeg\.SpaceVim
Executing FuncUndefined Autocommands for "*"
autocommand call dein#autoload#_on_func(expand('<afile>'))

not found in 'runtimepath': "autoload/fugitive.vim"
Executing BufEnter Autocommands for "*"
autocommand if empty(&buftype) && &filetype != 'help'|      nnoremap <silent><buffer> <Leader>] :call MyTagfunc()<CR>|      nnoremap <silent><buffer> <Leader>[ :call MyTagfuncBack()<CR>|  endif

Executing BufEnter Autocommands for "*"
autocommand if (!has('vim_starting') && winnr('$') == 1  && g:_spacevim_autoclose_filetree && &filetype ==# 'defx') | call s:close_last_vimfiler_windows() | endif

Executing BufEnter Autocommands for "*"
autocommand if (winnr('$') == 1 && &buftype ==# 'quickfix' ) |   bd|   q | endif

autocommand if &nu | set rnu   | endif

autocommand call s:enable_cursorline()

autocommand set cpoptions+=d " NOTE: ctags find the tags file from the current path instead of the path of currect file

autocommand :syntax sync fromstart " ensure every file does syntax highlighting (full)

autocommand call SpaceVim#mapping#space#refrashLSPC()

autocommand let b:_spacevim_project_name = get(g:, '_spacevim_project_name', '')

Executing BufEnter Autocommands for "*"
autocommand call s:append(expand('<amatch>'))

Executing BufEnter Autocommands for "*"
autocommand call LanguageClient#handleBufEnter()

Executing BufEnter Autocommands for "*"
autocommand if !exists('b:delimitMate_was_here') |   call <SID>setup() |   let b:delimitMate_was_here = 1 | endif

Executing BufEnter Autocommands for "*"
autocommand call lfMru#record(expand('<afile>:p')) | call lfMru#recordBuffer(expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand call s:on_bufenter()

Executing FuncUndefined Autocommands for "*"
autocommand call dein#autoload#_on_func(expand('<afile>'))

line 1: sourcing "C:\Users\wsdjeg\.cache\vimfiles\repos\github.com\airblade\vim-gitgutter\autoload\gitgutter\debug.vim"
finished sourcing C:\Users\wsdjeg\.cache\vimfiles\repos\github.com\airblade\vim-gitgutter\autoload\gitgutter\debug.vim
continuing in function <SNR>224_on_bufenter[7]..gitgutter#process_buffer[10]..<SNR>281_setup_path[3]..gitgutter#utility#set_repo_path[12]..gitgutter#async#execute
Executing BufEnter Autocommands for "*"
autocommand :call s:SetUpForNewFiletype(&filetype, 0)

Executing BufEnter Autocommands for "*"
autocommand sil call s:LocalBrowse(expand("<amatch>"))

Executing BufEnter Autocommands for "*"
autocommand if &ft == 'floaterm' | call floaterm#util#startinsert() | endif

Executing BufEnter Autocommands for "*"
autocommand if expand('<amatch>') !~ '__Tagbar__.*' |     let s:last_alt_bufnr = bufnr('#') | endif

autocommand call s:AutoUpdate(fnamemodify(expand('<afile>'), ':p'), 0)


Executing BufDelete Autocommands for "*"
autocommand call LanguageClient#handleBufDelete()

Executing BufDelete Autocommands for "*"
autocommand call s:HandleBufDelete(expand('<afile>'), expand('<abuf>'))


chdir(C:/Users/wsdjeg/.SpaceVim\)
Executing DirChanged Autocommands for "*"
autocommand call rpcnotify(3, "python_chdir", v:event.cwd)

Executing DirChanged Autocommands for "*"
autocommand call rpcnotify(0, 'Dir', getcwd())

Executing DirChanged Autocommands for "<buffer=7>"
autocommand if getcwd() !=# get(get(b:, 'startify', {}), 'cwd') | Startify | endif

C:\Users\wsdjeg\.SpaceVim
Executing FuncUndefined Autocommands for "*"
autocommand call dein#autoload#_on_func(expand('<afile>'))

not found in 'runtimepath': "autoload/fugitive.vim"
Executing WinLeave Autocommands for "*"
autocommand call SpaceVim#layers#core#statusline#remove_section('search status')

Executing FuncUndefined Autocommands for "*"
autocommand call dein#autoload#_on_func(expand('<afile>'))

not found in 'runtimepath': "autoload/fugitive.vim"
autocommand let &l:statusline = SpaceVim#layers#core#statusline#get()

Executing FuncUndefined Autocommands for "*"
autocommand call dein#autoload#_on_func(expand('<afile>'))

not found in 'runtimepath': "autoload/fugitive.vim"
Executing WinLeave Autocommands for "*"
autocommand call <SID>neomake_signatures_clear()

Executing WinLeave Autocommands for "*"
autocommand if &nu | set nornu | endif

autocommand call s:disable_cursorline()

Executing WinLeave Autocommands for "*"
autocommand call s:matchparen.clear()

Executing WinEnter Autocommands for "*"
autocommand let &l:statusline = SpaceVim#layers#core#statusline#get(1)

Executing FuncUndefined Autocommands for "*"
autocommand call dein#autoload#_on_func(expand('<afile>'))

not found in 'runtimepath': "autoload/fugitive.vim"
Executing WinEnter Autocommands for "*"
autocommand call SpaceVim#plugins#windowsmanager#MarkBaseWin()

autocommand if &nu | set rnu   | endif

autocommand call s:enable_cursorline()

Executing WinEnter Autocommands for "*"
autocommand call rpcnotify(0, 'Dir', getcwd())

Executing WinEnter Autocommands for "*"
autocommand call s:matchparen.highlight(1)

Executing WinEnter Autocommands for "*"
autocommand call s:HandleOnlyWindow()

autocommand if bufwinnr(s:TagbarBufName()) == -1 |     call s:ShrinkIfExpanded() | endif

Executing CursorMoved Autocommands for "*"
autocommand call <SID>neomake_cursor_move_delay()

Executing CursorMoved Autocommands for "*"
autocommand call <SID>GuiCursorMoved()

Executing CursorMoved Autocommands for "*"
autocommand call neomake#CursorMovedDelayed()

Executing CursorMoved Autocommands for "*"
autocommand call s:matchparen.highlight_deferred()

Executing CursorMoved Autocommands for "*"
autocommand call LanguageClient#handleCursorMoved()

Executing CursorMoved Autocommands for "<buffer=7>"
autocommand call s:set_cursor()

Executing BufAdd Autocommands for "*"
autocommand call lfMru#record(expand('<afile>:p')) | call lfMru#recordBuffer(expand('<abuf>'))

Executing BufLeave Autocommands for "*"
autocommand if &nu | set nornu | endif

autocommand call s:disable_cursorline()

Executing BufLeave Autocommands for "*"
autocommand call s:matchparen.clear()

Executing BufLeave Autocommands for "*"
autocommand if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif

Executing BufEnter Autocommands for "*"
autocommand call SpaceVim#plugins#projectmanager#current_root()

chdir(C:\Users\wsdjeg\.SpaceVim)
chdir(.git)
chdir(C:\Users\wsdjeg\.SpaceVim)
chdir(C:\Users\wsdjeg\.SpaceVim)
chdir(.SpaceVim.d)
chdir(C:\Users\wsdjeg\.SpaceVim)
chdir(C:/Users/wsdjeg/.SpaceVim\)
C:\Users\wsdjeg\.SpaceVim
Executing FuncUndefined Autocommands for "*"
autocommand call dein#autoload#_on_func(expand('<afile>'))

not found in 'runtimepath': "autoload/fugitive.vim"
Executing BufEnter Autocommands for "*"
autocommand if empty(&buftype) && &filetype != 'help'|      nnoremap <silent><buffer> <Leader>] :call MyTagfunc()<CR>|      nnoremap <silent><buffer> <Leader>[ :call MyTagfuncBack()<CR>|  endif

Executing BufEnter Autocommands for "*"
autocommand if (!has('vim_starting') && winnr('$') == 1  && g:_spacevim_autoclose_filetree && &filetype ==# 'defx') | call s:close_last_vimfiler_windows() | endif

Executing BufEnter Autocommands for "*"
autocommand if (winnr('$') == 1 && &buftype ==# 'quickfix' ) |   bd|   q | endif

autocommand if &nu | set rnu   | endif

autocommand call s:enable_cursorline()

autocommand set cpoptions+=d " NOTE: ctags find the tags file from the current path instead of the path of currect file

autocommand :syntax sync fromstart " ensure every file does syntax highlighting (full)

autocommand call SpaceVim#mapping#space#refrashLSPC()

autocommand let b:_spacevim_project_name = get(g:, '_spacevim_project_name', '')

Executing BufEnter Autocommands for "*"
autocommand call s:append(expand('<amatch>'))

Executing BufEnter Autocommands for "*"
autocommand call LanguageClient#handleBufEnter()

Executing BufEnter Autocommands for "*"
autocommand if !exists('b:delimitMate_was_here') |   call <SID>setup() |   let b:delimitMate_was_here = 1 | endif

Error detected while processing function <SNR>215_setup[36]..<SNR>215_Map[11]..<SNR>215_AutoClose:
line    9:
E225: global mapping already exists for (
Executing BufEnter Autocommands for "*"
autocommand call lfMru#record(expand('<afile>:p')) | call lfMru#recordBuffer(expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand call s:on_bufenter()

Executing BufEnter Autocommands for "*"
autocommand :call s:SetUpForNewFiletype(&filetype, 0)

Executing BufEnter Autocommands for "*"
autocommand sil call s:LocalBrowse(expand("<amatch>"))

Executing BufEnter Autocommands for "*"
autocommand if &ft == 'floaterm' | call floaterm#util#startinsert() | endif

Executing BufEnter Autocommands for "*"
autocommand if expand('<amatch>') !~ '__Tagbar__.*' |     let s:last_alt_bufnr = bufnr('#') | endif

autocommand call s:AutoUpdate(fnamemodify(expand('<afile>'), ':p'), 0)

Executing BufWinEnter Autocommands for "*"
autocommand let &l:statusline = SpaceVim#layers#core#statusline#get(1)

Executing BufWinEnter Autocommands for "*"
autocommand if(exists('b:_winview')) | call winrestview(b:_winview) | endif

Executing BufWinEnter Autocommands for "*"
autocommand call s:append(expand('<amatch>'))

Executing BufWinEnter Autocommands for "*"
autocommand call matchup#loader#bufwinenter()

Executing BufWinEnter Autocommands for "*"
autocommand call s:IndentLinesDisable() | call s:LeadingSpaceDisable() | call s:Setup()

Executing OptionSet Autocommands for "buftype"
autocommand call s:update_buffer_options()

Executing TermOpen Autocommands for "*"
autocommand let g:last_terminal_job_id = b:terminal_job_id | IndentLinesDisable

Executing WinEnter Autocommands for "*"
autocommand let &l:statusline = SpaceVim#layers#core#statusline#get(1)

Executing WinEnter Autocommands for "*"
autocommand call SpaceVim#plugins#windowsmanager#MarkBaseWin()

autocommand if &nu | set rnu   | endif

autocommand call s:enable_cursorline()

Executing WinEnter Autocommands for "term://*"
autocommand startinsert | IndentLinesDisable

Executing WinEnter Autocommands for "*"
autocommand call rpcnotify(0, 'Dir', getcwd())

Executing WinEnter Autocommands for "*"
autocommand call s:matchparen.highlight(1)

Executing WinEnter Autocommands for "*"
autocommand call s:HandleOnlyWindow()

autocommand if bufwinnr(s:TagbarBufName()) == -1 |     call s:ShrinkIfExpanded() | endif

Executing BufDelete Autocommands for "*"
autocommand call LanguageClient#handleBufDelete()

Executing BufDelete Autocommands for "*"
autocommand call s:HandleBufDelete(expand('<afile>'), expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <SID>neomake_cursor_move_delay()

Executing CursorMoved Autocommands for "*"
autocommand call <SID>GuiCursorMoved()

Executing CursorMoved Autocommands for "*"
autocommand call neomake#CursorMovedDelayed()

Executing CursorMoved Autocommands for "*"
autocommand call s:matchparen.highlight_deferred()

Executing CursorMoved Autocommands for "*"
autocommand call LanguageClient#handleCursorMoved()

Executing TextChanged Autocommands for "*"
autocommand call s:matchparen.highlight_deferred()

Executing TextChanged Autocommands for "*"
autocommand call LanguageClient#handleTextChanged()

Executing CursorMoved Autocommands for "*"
autocommand call <SID>neomake_cursor_move_delay()

Executing CursorMoved Autocommands for "*"
autocommand call <SID>GuiCursorMoved()

Executing CursorMoved Autocommands for "*"
autocommand call neomake#CursorMovedDelayed()

Executing CursorMoved Autocommands for "*"
autocommand call s:matchparen.highlight_deferred()

Executing CursorMoved Autocommands for "*"
autocommand call LanguageClient#handleCursorMoved()

Executing TextChanged Autocommands for "*"
autocommand call s:matchparen.highlight_deferred()

Executing TextChanged Autocommands for "*"
autocommand call LanguageClient#handleTextChanged()

Executing TermClose Autocommands for "*"
autocommand let g:_spacevim_termclose_abuf = expand('<abuf>') | call timer_start(5, 'SpaceVim#mapping#close_term_buffer')

Executing BufAdd Autocommands for "*"
autocommand call lfMru#record(expand('<afile>:p')) | call lfMru#recordBuffer(expand('<abuf>'))

Executing BufLeave Autocommands for "*"
autocommand if &nu | set nornu | endif

autocommand call s:disable_cursorline()

Executing BufLeave Autocommands for "*"
autocommand call s:matchparen.clear()

Executing BufLeave Autocommands for "term://*"
autocommand call gitgutter#all(1)

Executing BufLeave Autocommands for "*"
autocommand if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif

Executing BufWinLeave Autocommands for "*"
autocommand let &l:statusline = SpaceVim#layers#core#statusline#get()

Executing BufWinLeave Autocommands for "*"
autocommand let b:_winview = winsaveview()

Executing BufEnter Autocommands for "*"
autocommand call SpaceVim#plugins#projectmanager#current_root()

chdir(C:\Users\wsdjeg\.SpaceVim)
chdir(.git)
chdir(C:\Users\wsdjeg\.SpaceVim)
chdir(C:\Users\wsdjeg\.SpaceVim)
chdir(.SpaceVim.d)
chdir(C:\Users\wsdjeg\.SpaceVim)
chdir(C:/Users/wsdjeg/.SpaceVim\)
C:\Users\wsdjeg\.SpaceVim
Executing FuncUndefined Autocommands for "*"
autocommand call dein#autoload#_on_func(expand('<afile>'))

not found in 'runtimepath': "autoload/fugitive.vim"
Executing BufEnter Autocommands for "*"
autocommand if empty(&buftype) && &filetype != 'help'|      nnoremap <silent><buffer> <Leader>] :call MyTagfunc()<CR>|      nnoremap <silent><buffer> <Leader>[ :call MyTagfuncBack()<CR>|  endif

Executing BufEnter Autocommands for "*"
autocommand if (!has('vim_starting') && winnr('$') == 1  && g:_spacevim_autoclose_filetree && &filetype ==# 'defx') | call s:close_last_vimfiler_windows() | endif

Executing BufEnter Autocommands for "*"
autocommand if (winnr('$') == 1 && &buftype ==# 'quickfix' ) |   bd|   q | endif

autocommand if &nu | set rnu   | endif

autocommand call s:enable_cursorline()

autocommand set cpoptions+=d " NOTE: ctags find the tags file from the current path instead of the path of currect file

autocommand :syntax sync fromstart " ensure every file does syntax highlighting (full)

autocommand call SpaceVim#mapping#space#refrashLSPC()

autocommand let b:_spacevim_project_name = get(g:, '_spacevim_project_name', '')

Executing BufEnter Autocommands for "*"
autocommand call s:append(expand('<amatch>'))

Executing BufEnter Autocommands for "*"
autocommand call LanguageClient#handleBufEnter()

Executing BufEnter Autocommands for "*"
autocommand if !exists('b:delimitMate_was_here') |   call <SID>setup() |   let b:delimitMate_was_here = 1 | endif

Error detected while processing function <SNR>215_setup[36]..<SNR>215_Map[11]..<SNR>215_AutoClose:
line    9:
E225: global mapping already exists for (
Executing BufEnter Autocommands for "*"
autocommand call lfMru#record(expand('<afile>:p')) | call lfMru#recordBuffer(expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand call s:on_bufenter()

Executing BufEnter Autocommands for "*"
autocommand :call s:SetUpForNewFiletype(&filetype, 0)

Executing BufEnter Autocommands for "*"
autocommand sil call s:LocalBrowse(expand("<amatch>"))

Executing BufEnter Autocommands for "*"
autocommand if &ft == 'floaterm' | call floaterm#util#startinsert() | endif

Executing BufEnter Autocommands for "*"
autocommand if expand('<amatch>') !~ '__Tagbar__.*' |     let s:last_alt_bufnr = bufnr('#') | endif

autocommand call s:AutoUpdate(fnamemodify(expand('<afile>'), ':p'), 0)

Executing BufWinEnter Autocommands for "*"
autocommand let &l:statusline = SpaceVim#layers#core#statusline#get(1)

Executing BufWinEnter Autocommands for "*"
autocommand if(exists('b:_winview')) | call winrestview(b:_winview) | endif

Executing BufWinEnter Autocommands for "*"
autocommand call s:append(expand('<amatch>'))

Executing BufWinEnter Autocommands for "*"
autocommand call matchup#loader#bufwinenter()

Executing BufWinEnter Autocommands for "*"
autocommand call s:IndentLinesDisable() | call s:LeadingSpaceDisable() | call s:Setup()

Executing BufWipeout Autocommands for "*"
autocommand call s:clear_cache(expand('<abuf>'))

Executing BufWipeout Autocommands for "*"
autocommand call s:HandleBufDelete(expand('<afile>'), expand('<abuf>'))

Executing BufLeave Autocommands for "*"
autocommand if &nu | set nornu | endif

autocommand call s:disable_cursorline()

Executing BufLeave Autocommands for "*"
autocommand call s:matchparen.clear()

Executing BufLeave Autocommands for "*"
autocommand if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif

Executing WinLeave Autocommands for "*"
autocommand call SpaceVim#layers#core#statusline#remove_section('search status')

autocommand let &l:statusline = SpaceVim#layers#core#statusline#get()

Executing WinLeave Autocommands for "*"
autocommand call <SID>neomake_signatures_clear()

Executing WinLeave Autocommands for "*"
autocommand if &nu | set nornu | endif

autocommand call s:disable_cursorline()

Executing WinLeave Autocommands for "*"
autocommand call s:matchparen.clear()

Executing BufWinLeave Autocommands for "*"
autocommand let &l:statusline = SpaceVim#layers#core#statusline#get()

Executing BufWinLeave Autocommands for "*"
autocommand let b:_winview = winsaveview()

Executing WinEnter Autocommands for "*"
autocommand let &l:statusline = SpaceVim#layers#core#statusline#get(1)

Executing FuncUndefined Autocommands for "*"
autocommand call dein#autoload#_on_func(expand('<afile>'))

not found in 'runtimepath': "autoload/fugitive.vim"
Executing WinEnter Autocommands for "*"
autocommand call SpaceVim#plugins#windowsmanager#MarkBaseWin()

autocommand if &nu | set rnu   | endif

autocommand call s:enable_cursorline()

Executing WinEnter Autocommands for "*"
autocommand call rpcnotify(0, 'Dir', getcwd())

Executing WinEnter Autocommands for "*"
autocommand call s:matchparen.highlight(1)

Executing WinEnter Autocommands for "*"
autocommand call s:HandleOnlyWindow()

autocommand if bufwinnr(s:TagbarBufName()) == -1 |     call s:ShrinkIfExpanded() | endif

Executing CursorMoved Autocommands for "*"
autocommand call <SID>neomake_cursor_move_delay()

Executing CursorMoved Autocommands for "*"
autocommand call <SID>GuiCursorMoved()

Executing CursorMoved Autocommands for "*"
autocommand call neomake#CursorMovedDelayed()

Executing CursorMoved Autocommands for "*"
autocommand call s:matchparen.highlight_deferred()

Executing CursorMoved Autocommands for "*"
autocommand call LanguageClient#handleCursorMoved()

Executing CursorMoved Autocommands for "<buffer=7>"
autocommand call s:set_cursor()

Executing BufEnter Autocommands for "*"
autocommand call SpaceVim#plugins#projectmanager#current_root()

chdir(C:/Users/wsdjeg/.SpaceVim\)
C:\Users\wsdjeg\.SpaceVim
Executing FuncUndefined Autocommands for "*"
autocommand call dein#autoload#_on_func(expand('<afile>'))

not found in 'runtimepath': "autoload/fugitive.vim"
Executing BufEnter Autocommands for "*"
autocommand if empty(&buftype) && &filetype != 'help'|      nnoremap <silent><buffer> <Leader>] :call MyTagfunc()<CR>|      nnoremap <silent><buffer> <Leader>[ :call MyTagfuncBack()<CR>|  endif

Executing BufEnter Autocommands for "*"
autocommand if (!has('vim_starting') && winnr('$') == 1  && g:_spacevim_autoclose_filetree && &filetype ==# 'defx') | call s:close_last_vimfiler_windows() | endif

Executing BufEnter Autocommands for "*"
autocommand if (winnr('$') == 1 && &buftype ==# 'quickfix' ) |   bd|   q | endif

autocommand if &nu | set rnu   | endif

autocommand call s:enable_cursorline()

autocommand set cpoptions+=d " NOTE: ctags find the tags file from the current path instead of the path of currect file

autocommand :syntax sync fromstart " ensure every file does syntax highlighting (full)

autocommand call SpaceVim#mapping#space#refrashLSPC()

autocommand let b:_spacevim_project_name = get(g:, '_spacevim_project_name', '')

Executing BufEnter Autocommands for "*"
autocommand call s:append(expand('<amatch>'))

Executing BufEnter Autocommands for "*"
autocommand call LanguageClient#handleBufEnter()

Executing BufEnter Autocommands for "*"
autocommand if !exists('b:delimitMate_was_here') |   call <SID>setup() |   let b:delimitMate_was_here = 1 | endif

Executing BufEnter Autocommands for "*"
autocommand call lfMru#record(expand('<afile>:p')) | call lfMru#recordBuffer(expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand call s:on_bufenter()

Executing BufEnter Autocommands for "*"
autocommand :call s:SetUpForNewFiletype(&filetype, 0)

Executing BufEnter Autocommands for "*"
autocommand sil call s:LocalBrowse(expand("<amatch>"))

Executing BufEnter Autocommands for "*"
autocommand if &ft == 'floaterm' | call floaterm#util#startinsert() | endif

Executing BufEnter Autocommands for "*"
autocommand if expand('<amatch>') !~ '__Tagbar__.*' |     let s:last_alt_bufnr = bufnr('#') | endif

autocommand call s:AutoUpdate(fnamemodify(expand('<afile>'), ':p'), 0)

Executing CursorHold Autocommands for "*"
autocommand rshada|wshada

Reading ShaDa file "C:\Users\wsdjeg\AppData\Local\nvim-data\shada\main.shada" info marks oldfiles
Writing ShaDa file "C:\Users\wsdjeg\AppData\Local\nvim-data\shada\main.shada"
Executing CursorHold Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

Executing CursorHold Autocommands for "*"
autocommand call s:do_delayed_update()

Executing FuncUndefined Autocommands for "*"
autocommand call dein#autoload#_on_func(expand('<afile>'))

line 1: sourcing "C:\Users\wsdjeg\.SpaceVim\bundle\tagbar\autoload\tagbar\state.vim"
finished sourcing C:\Users\wsdjeg\.SpaceVim\bundle\tagbar\autoload\tagbar\state.vim
continuing in function <SNR>273_do_delayed_update
autocommand call s:AutoUpdate(fnamemodify(expand('<afile>'), ':p'), 0)


[11]

Executing BufDelete Autocommands for "*"
autocommand call LanguageClient#handleBufDelete()

Executing BufDelete Autocommands for "*"
autocommand call s:HandleBufDelete(expand('<afile>'), expand('<abuf>'))


chdir(C:/Users/wsdjeg/.SpaceVim\)
Executing DirChanged Autocommands for "*"
autocommand call rpcnotify(3, "python_chdir", v:event.cwd)

Executing DirChanged Autocommands for "*"
autocommand call rpcnotify(0, 'Dir', getcwd())

Executing DirChanged Autocommands for "<buffer=7>"
autocommand if getcwd() !=# get(get(b:, 'startify', {}), 'cwd') | Startify | endif

C:\Users\wsdjeg\.SpaceVim
Executing FuncUndefined Autocommands for "*"
autocommand call dein#autoload#_on_func(expand('<afile>'))

not found in 'runtimepath': "autoload/fugitive.vim"
Executing WinLeave Autocommands for "*"
autocommand call SpaceVim#layers#core#statusline#remove_section('search status')

Executing FuncUndefined Autocommands for "*"
autocommand call dein#autoload#_on_func(expand('<afile>'))

not found in 'runtimepath': "autoload/fugitive.vim"
autocommand let &l:statusline = SpaceVim#layers#core#statusline#get()

Executing FuncUndefined Autocommands for "*"
autocommand call dein#autoload#_on_func(expand('<afile>'))

not found in 'runtimepath': "autoload/fugitive.vim"
Executing WinLeave Autocommands for "*"
autocommand call <SID>neomake_signatures_clear()

Executing WinLeave Autocommands for "*"
autocommand if &nu | set nornu | endif

autocommand call s:disable_cursorline()

Executing WinLeave Autocommands for "*"
autocommand call s:matchparen.clear()

Executing WinEnter Autocommands for "*"
autocommand let &l:statusline = SpaceVim#layers#core#statusline#get(1)

Executing FuncUndefined Autocommands for "*"
autocommand call dein#autoload#_on_func(expand('<afile>'))

not found in 'runtimepath': "autoload/fugitive.vim"
Executing WinEnter Autocommands for "*"
autocommand call SpaceVim#plugins#windowsmanager#MarkBaseWin()

autocommand if &nu | set rnu   | endif

autocommand call s:enable_cursorline()

Executing WinEnter Autocommands for "*"
autocommand call rpcnotify(0, 'Dir', getcwd())

Executing WinEnter Autocommands for "*"
autocommand call s:matchparen.highlight(1)

Executing WinEnter Autocommands for "*"
autocommand call s:HandleOnlyWindow()

autocommand if bufwinnr(s:TagbarBufName()) == -1 |     call s:ShrinkIfExpanded() | endif

Executing CursorMoved Autocommands for "*"
autocommand call <SID>neomake_cursor_move_delay()

Executing CursorMoved Autocommands for "*"
autocommand call <SID>GuiCursorMoved()

Executing CursorMoved Autocommands for "*"
autocommand call neomake#CursorMovedDelayed()

Executing CursorMoved Autocommands for "*"
autocommand call s:matchparen.highlight_deferred()

Executing CursorMoved Autocommands for "*"
autocommand call LanguageClient#handleCursorMoved()

Executing CursorMoved Autocommands for "<buffer=7>"
autocommand call s:set_cursor()

Executing BufAdd Autocommands for "*"
autocommand call lfMru#record(expand('<afile>:p')) | call lfMru#recordBuffer(expand('<abuf>'))

Executing BufLeave Autocommands for "*"
autocommand if &nu | set nornu | endif

autocommand call s:disable_cursorline()

Executing BufLeave Autocommands for "*"
autocommand call s:matchparen.clear()

Executing BufLeave Autocommands for "*"
autocommand if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif

Executing BufEnter Autocommands for "*"
autocommand call SpaceVim#plugins#projectmanager#current_root()

chdir(C:\Users\wsdjeg\.SpaceVim)
chdir(.git)
chdir(C:\Users\wsdjeg\.SpaceVim)
chdir(C:\Users\wsdjeg\.SpaceVim)
chdir(.SpaceVim.d)
chdir(C:\Users\wsdjeg\.SpaceVim)
chdir(C:/Users/wsdjeg/.SpaceVim\)
C:\Users\wsdjeg\.SpaceVim
Executing FuncUndefined Autocommands for "*"
autocommand call dein#autoload#_on_func(expand('<afile>'))

not found in 'runtimepath': "autoload/fugitive.vim"
Executing BufEnter Autocommands for "*"
autocommand if empty(&buftype) && &filetype != 'help'|      nnoremap <silent><buffer> <Leader>] :call MyTagfunc()<CR>|      nnoremap <silent><buffer> <Leader>[ :call MyTagfuncBack()<CR>|  endif

Executing BufEnter Autocommands for "*"
autocommand if (!has('vim_starting') && winnr('$') == 1  && g:_spacevim_autoclose_filetree && &filetype ==# 'defx') | call s:close_last_vimfiler_windows() | endif

Executing BufEnter Autocommands for "*"
autocommand if (winnr('$') == 1 && &buftype ==# 'quickfix' ) |   bd|   q | endif

autocommand if &nu | set rnu   | endif

autocommand call s:enable_cursorline()

autocommand set cpoptions+=d " NOTE: ctags find the tags file from the current path instead of the path of currect file

autocommand :syntax sync fromstart " ensure every file does syntax highlighting (full)

autocommand call SpaceVim#mapping#space#refrashLSPC()

autocommand let b:_spacevim_project_name = get(g:, '_spacevim_project_name', '')

Executing BufEnter Autocommands for "*"
autocommand call s:append(expand('<amatch>'))

Executing BufEnter Autocommands for "*"
autocommand call LanguageClient#handleBufEnter()

Executing BufEnter Autocommands for "*"
autocommand if !exists('b:delimitMate_was_here') |   call <SID>setup() |   let b:delimitMate_was_here = 1 | endif

Error detected while processing function <SNR>215_setup[36]..<SNR>215_Map[11]..<SNR>215_AutoClose:
line    9:
E225: global mapping already exists for (
Executing BufEnter Autocommands for "*"
autocommand call lfMru#record(expand('<afile>:p')) | call lfMru#recordBuffer(expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand call s:on_bufenter()

Executing BufEnter Autocommands for "*"
autocommand :call s:SetUpForNewFiletype(&filetype, 0)

Executing BufEnter Autocommands for "*"
autocommand sil call s:LocalBrowse(expand("<amatch>"))

Executing BufEnter Autocommands for "*"
autocommand if &ft == 'floaterm' | call floaterm#util#startinsert() | endif

Executing BufEnter Autocommands for "*"
autocommand if expand('<amatch>') !~ '__Tagbar__.*' |     let s:last_alt_bufnr = bufnr('#') | endif

autocommand call s:AutoUpdate(fnamemodify(expand('<afile>'), ':p'), 0)

Executing BufWinEnter Autocommands for "*"
autocommand let &l:statusline = SpaceVim#layers#core#statusline#get(1)

Executing BufWinEnter Autocommands for "*"
autocommand if(exists('b:_winview')) | call winrestview(b:_winview) | endif

Executing BufWinEnter Autocommands for "*"
autocommand call s:append(expand('<amatch>'))

Executing BufWinEnter Autocommands for "*"
autocommand call matchup#loader#bufwinenter()

Executing BufWinEnter Autocommands for "*"
autocommand call s:IndentLinesDisable() | call s:LeadingSpaceDisable() | call s:Setup()

Executing OptionSet Autocommands for "buftype"
autocommand call s:update_buffer_options()

Executing TermOpen Autocommands for "*"
autocommand let g:last_terminal_job_id = b:terminal_job_id | IndentLinesDisable

Executing WinEnter Autocommands for "*"
autocommand let &l:statusline = SpaceVim#layers#core#statusline#get(1)

Executing WinEnter Autocommands for "*"
autocommand call SpaceVim#plugins#windowsmanager#MarkBaseWin()

autocommand if &nu | set rnu   | endif

autocommand call s:enable_cursorline()

Executing WinEnter Autocommands for "term://*"
autocommand startinsert | IndentLinesDisable

Executing WinEnter Autocommands for "*"
autocommand call rpcnotify(0, 'Dir', getcwd())

Executing WinEnter Autocommands for "*"
autocommand call s:matchparen.highlight(1)

Executing WinEnter Autocommands for "*"
autocommand call s:HandleOnlyWindow()

autocommand if bufwinnr(s:TagbarBufName()) == -1 |     call s:ShrinkIfExpanded() | endif

Executing BufDelete Autocommands for "*"
autocommand call LanguageClient#handleBufDelete()

Executing BufDelete Autocommands for "*"
autocommand call s:HandleBufDelete(expand('<afile>'), expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <SID>neomake_cursor_move_delay()

Executing CursorMoved Autocommands for "*"
autocommand call <SID>GuiCursorMoved()

Executing CursorMoved Autocommands for "*"
autocommand call neomake#CursorMovedDelayed()

Executing CursorMoved Autocommands for "*"
autocommand call s:matchparen.highlight_deferred()

Executing CursorMoved Autocommands for "*"
autocommand call LanguageClient#handleCursorMoved()

Executing TextChanged Autocommands for "*"
autocommand call s:matchparen.highlight_deferred()

Executing TextChanged Autocommands for "*"
autocommand call LanguageClient#handleTextChanged()

Executing CursorMoved Autocommands for "*"
autocommand call <SID>neomake_cursor_move_delay()

Executing CursorMoved Autocommands for "*"
autocommand call <SID>GuiCursorMoved()

Executing CursorMoved Autocommands for "*"
autocommand call neomake#CursorMovedDelayed()

Executing CursorMoved Autocommands for "*"
autocommand call s:matchparen.highlight_deferred()

Executing CursorMoved Autocommands for "*"
autocommand call LanguageClient#handleCursorMoved()

Executing TextChanged Autocommands for "*"
autocommand call s:matchparen.highlight_deferred()

Executing TextChanged Autocommands for "*"
autocommand call LanguageClient#handleTextChanged()

Executing TermClose Autocommands for "*"
autocommand let g:_spacevim_termclose_abuf = expand('<abuf>') | call timer_start(5, 'SpaceVim#mapping#close_term_buffer')

Executing BufAdd Autocommands for "*"
autocommand call lfMru#record(expand('<afile>:p')) | call lfMru#recordBuffer(expand('<abuf>'))

Executing BufLeave Autocommands for "*"
autocommand if &nu | set nornu | endif

autocommand call s:disable_cursorline()

Executing BufLeave Autocommands for "*"
autocommand call s:matchparen.clear()

Executing BufLeave Autocommands for "term://*"
autocommand call gitgutter#all(1)

Executing BufLeave Autocommands for "*"
autocommand if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif

Executing BufWinLeave Autocommands for "*"
autocommand let &l:statusline = SpaceVim#layers#core#statusline#get()

Executing BufWinLeave Autocommands for "*"
autocommand let b:_winview = winsaveview()

Executing BufEnter Autocommands for "*"
autocommand call SpaceVim#plugins#projectmanager#current_root()

chdir(C:\Users\wsdjeg\.SpaceVim)
chdir(.git)
chdir(C:\Users\wsdjeg\.SpaceVim)
chdir(C:\Users\wsdjeg\.SpaceVim)
chdir(.SpaceVim.d)
chdir(C:\Users\wsdjeg\.SpaceVim)
chdir(C:/Users/wsdjeg/.SpaceVim\)
C:\Users\wsdjeg\.SpaceVim
Executing FuncUndefined Autocommands for "*"
autocommand call dein#autoload#_on_func(expand('<afile>'))

not found in 'runtimepath': "autoload/fugitive.vim"
Executing BufEnter Autocommands for "*"
autocommand if empty(&buftype) && &filetype != 'help'|      nnoremap <silent><buffer> <Leader>] :call MyTagfunc()<CR>|      nnoremap <silent><buffer> <Leader>[ :call MyTagfuncBack()<CR>|  endif

Executing BufEnter Autocommands for "*"
autocommand if (!has('vim_starting') && winnr('$') == 1  && g:_spacevim_autoclose_filetree && &filetype ==# 'defx') | call s:close_last_vimfiler_windows() | endif

Executing BufEnter Autocommands for "*"
autocommand if (winnr('$') == 1 && &buftype ==# 'quickfix' ) |   bd|   q | endif

autocommand if &nu | set rnu   | endif

autocommand call s:enable_cursorline()

autocommand set cpoptions+=d " NOTE: ctags find the tags file from the current path instead of the path of currect file

autocommand :syntax sync fromstart " ensure every file does syntax highlighting (full)

autocommand call SpaceVim#mapping#space#refrashLSPC()

autocommand let b:_spacevim_project_name = get(g:, '_spacevim_project_name', '')

Executing BufEnter Autocommands for "*"
autocommand call s:append(expand('<amatch>'))

Executing BufEnter Autocommands for "*"
autocommand call LanguageClient#handleBufEnter()

Executing BufEnter Autocommands for "*"
autocommand if !exists('b:delimitMate_was_here') |   call <SID>setup() |   let b:delimitMate_was_here = 1 | endif

Error detected while processing function <SNR>215_setup[36]..<SNR>215_Map[11]..<SNR>215_AutoClose:
line    9:
E225: global mapping already exists for (
Executing BufEnter Autocommands for "*"
autocommand call lfMru#record(expand('<afile>:p')) | call lfMru#recordBuffer(expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand call s:on_bufenter()

Executing BufEnter Autocommands for "*"
autocommand :call s:SetUpForNewFiletype(&filetype, 0)

Executing BufEnter Autocommands for "*"
autocommand sil call s:LocalBrowse(expand("<amatch>"))

Executing BufEnter Autocommands for "*"
autocommand if &ft == 'floaterm' | call floaterm#util#startinsert() | endif

Executing BufEnter Autocommands for "*"
autocommand if expand('<amatch>') !~ '__Tagbar__.*' |     let s:last_alt_bufnr = bufnr('#') | endif

autocommand call s:AutoUpdate(fnamemodify(expand('<afile>'), ':p'), 0)

Executing BufWinEnter Autocommands for "*"
autocommand let &l:statusline = SpaceVim#layers#core#statusline#get(1)

Executing BufWinEnter Autocommands for "*"
autocommand if(exists('b:_winview')) | call winrestview(b:_winview) | endif

Executing BufWinEnter Autocommands for "*"
autocommand call s:append(expand('<amatch>'))

Executing BufWinEnter Autocommands for "*"
autocommand call matchup#loader#bufwinenter()

Executing BufWinEnter Autocommands for "*"
autocommand call s:IndentLinesDisable() | call s:LeadingSpaceDisable() | call s:Setup()

Executing BufWipeout Autocommands for "*"
autocommand call s:clear_cache(expand('<abuf>'))

Executing BufWipeout Autocommands for "*"
autocommand call s:HandleBufDelete(expand('<afile>'), expand('<abuf>'))

Executing BufLeave Autocommands for "*"
autocommand if &nu | set nornu | endif

autocommand call s:disable_cursorline()

Executing BufLeave Autocommands for "*"
autocommand call s:matchparen.clear()

Executing BufLeave Autocommands for "*"
autocommand if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif

Executing WinLeave Autocommands for "*"
autocommand call SpaceVim#layers#core#statusline#remove_section('search status')

autocommand let &l:statusline = SpaceVim#layers#core#statusline#get()

Executing WinLeave Autocommands for "*"
autocommand call <SID>neomake_signatures_clear()

Executing WinLeave Autocommands for "*"
autocommand if &nu | set nornu | endif

autocommand call s:disable_cursorline()

Executing WinLeave Autocommands for "*"
autocommand call s:matchparen.clear()

Executing BufWinLeave Autocommands for "*"
autocommand let &l:statusline = SpaceVim#layers#core#statusline#get()

Executing BufWinLeave Autocommands for "*"
autocommand let b:_winview = winsaveview()

Executing WinEnter Autocommands for "*"
autocommand let &l:statusline = SpaceVim#layers#core#statusline#get(1)

Executing FuncUndefined Autocommands for "*"
autocommand call dein#autoload#_on_func(expand('<afile>'))

not found in 'runtimepath': "autoload/fugitive.vim"
Executing WinEnter Autocommands for "*"
autocommand call SpaceVim#plugins#windowsmanager#MarkBaseWin()

autocommand if &nu | set rnu   | endif

autocommand call s:enable_cursorline()

Executing WinEnter Autocommands for "*"
autocommand call rpcnotify(0, 'Dir', getcwd())

Executing WinEnter Autocommands for "*"
autocommand call s:matchparen.highlight(1)

Executing WinEnter Autocommands for "*"
autocommand call s:HandleOnlyWindow()

autocommand if bufwinnr(s:TagbarBufName()) == -1 |     call s:ShrinkIfExpanded() | endif

Executing CursorMoved Autocommands for "*"
autocommand call <SID>neomake_cursor_move_delay()

Executing CursorMoved Autocommands for "*"
autocommand call <SID>GuiCursorMoved()

Executing CursorMoved Autocommands for "*"
autocommand call neomake#CursorMovedDelayed()

Executing CursorMoved Autocommands for "*"
autocommand call s:matchparen.highlight_deferred()

Executing CursorMoved Autocommands for "*"
autocommand call LanguageClient#handleCursorMoved()

Executing CursorMoved Autocommands for "<buffer=7>"
autocommand call s:set_cursor()

Executing BufEnter Autocommands for "*"
autocommand call SpaceVim#plugins#projectmanager#current_root()

chdir(C:/Users/wsdjeg/.SpaceVim\)
C:\Users\wsdjeg\.SpaceVim
Executing FuncUndefined Autocommands for "*"
autocommand call dein#autoload#_on_func(expand('<afile>'))

not found in 'runtimepath': "autoload/fugitive.vim"
Executing BufEnter Autocommands for "*"
autocommand if empty(&buftype) && &filetype != 'help'|      nnoremap <silent><buffer> <Leader>] :call MyTagfunc()<CR>|      nnoremap <silent><buffer> <Leader>[ :call MyTagfuncBack()<CR>|  endif

Executing BufEnter Autocommands for "*"
autocommand if (!has('vim_starting') && winnr('$') == 1  && g:_spacevim_autoclose_filetree && &filetype ==# 'defx') | call s:close_last_vimfiler_windows() | endif

Executing BufEnter Autocommands for "*"
autocommand if (winnr('$') == 1 && &buftype ==# 'quickfix' ) |   bd|   q | endif

autocommand if &nu | set rnu   | endif

autocommand call s:enable_cursorline()

autocommand set cpoptions+=d " NOTE: ctags find the tags file from the current path instead of the path of currect file

autocommand :syntax sync fromstart " ensure every file does syntax highlighting (full)

autocommand call SpaceVim#mapping#space#refrashLSPC()

autocommand let b:_spacevim_project_name = get(g:, '_spacevim_project_name', '')

Executing BufEnter Autocommands for "*"
autocommand call s:append(expand('<amatch>'))

Executing BufEnter Autocommands for "*"
autocommand call LanguageClient#handleBufEnter()

Executing BufEnter Autocommands for "*"
autocommand if !exists('b:delimitMate_was_here') |   call <SID>setup() |   let b:delimitMate_was_here = 1 | endif

Executing BufEnter Autocommands for "*"
autocommand call lfMru#record(expand('<afile>:p')) | call lfMru#recordBuffer(expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand call s:on_bufenter()

Executing BufEnter Autocommands for "*"
autocommand :call s:SetUpForNewFiletype(&filetype, 0)

Executing BufEnter Autocommands for "*"
autocommand sil call s:LocalBrowse(expand("<amatch>"))

Executing BufEnter Autocommands for "*"
autocommand if &ft == 'floaterm' | call floaterm#util#startinsert() | endif

Executing BufEnter Autocommands for "*"
autocommand if expand('<amatch>') !~ '__Tagbar__.*' |     let s:last_alt_bufnr = bufnr('#') | endif

autocommand call s:AutoUpdate(fnamemodify(expand('<afile>'), ':p'), 0)

Executing CursorHold Autocommands for "*"
autocommand rshada|wshada

Reading ShaDa file "C:\Users\wsdjeg\AppData\Local\nvim-data\shada\main.shada" info marks oldfiles
Writing ShaDa file "C:\Users\wsdjeg\AppData\Local\nvim-data\shada\main.shada"
Executing CursorHold Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

Executing CursorHold Autocommands for "*"
autocommand call s:do_delayed_update()

autocommand call s:AutoUpdate(fnamemodify(expand('<afile>'), ':p'), 0)



"fuck.txt" [noeol][unix] 1989L, 69632C

Cursor         xxx ctermbg=69 guifg=bg guibg=#528bff

!  <Plug>(_incsearch-searchforward) * <Nop>
!  <Plug>(_incsearch-hlsearch) * <Nop>
!  <Plug>(_incsearch-esc) * <Nop>
!  <Plug>(_incsearch-gv) * <Nop>
!  <Plug>(_incsearch-winrestview) * <Nop>
c  <C-A>       * <Home>
c  <C-B>       * <Left>
c  <C-F>       * <Right>
c  <C-K>       * repeat('<Del>', strchars(getcmdline()) - getcmdpos() + 1)
c  <C-S>       * <C-U>w<CR>/ 

!  <Plug>(_incsearch-searchforward) * <Nop>
!  <Plug>(_incsearch-hlsearch) * <Nop>
!  <Plug>(_incsearch-esc) * <Nop>
!  <Plug>(_incsearch-gv) * <Nop>
!  <Plug>(_incsearch-winrestview) * <Nop>
c  <C-A>       * <Home>
c  <C-B>       * <Left>
c  <C-F>       * <Right>
c  <C-K>       * repeat('<Del>', strchars(getcmdline()) - getcmdpos() + 1)
c  <C-S>       * <C-U>w<CR>/c 

!  <Plug>(_incsearch-searchforward) * <Nop>
!  <Plug>(_incsearch-hlsearch) * <Nop>
!  <Plug>(_incsearch-esc) * <Nop>
!  <Plug>(_incsearch-gv) * <Nop>
!  <Plug>(_incsearch-winrestview) * <Nop>
c  <C-A>       * <Home>
c  <C-B>       * <Left>
c  <C-F>       * <Right>
c  <C-K>       * repeat('<Del>', strchars(getcmdline()) - getcmdpos() + 1)
c  <C-S>       * <C-U>w<CR>/cl 

!  <Plug>(_incsearch-searchforward) * <Nop>
!  <Plug>(_incsearch-hlsearch) * <Nop>
!  <Plug>(_incsearch-esc) * <Nop>
!  <Plug>(_incsearch-gv) * <Nop>
!  <Plug>(_incsearch-winrestview) * <Nop>
c  <C-A>       * <Home>
c  <C-B>       * <Left>
c  <C-F>       * <Right>
c  <C-K>       * repeat('<Del>', strchars(getcmdline()) - getcmdpos() + 1)
c  <C-S>       * <C-U>w<CR>/clo 

!  <Plug>(_incsearch-searchforward) * <Nop>
!  <Plug>(_incsearch-hlsearch) * <Nop>
!  <Plug>(_incsearch-esc) * <Nop>
!  <Plug>(_incsearch-gv) * <Nop>
!  <Plug>(_incsearch-winrestview) * <Nop>
c  <C-A>       * <Home>
c  <C-B>       * <Left>
c  <C-F>       * <Right>
c  <C-K>       * repeat('<Del>', strchars(getcmdline()) - getcmdpos() + 1)
c  <C-S>       * <C-U>w<CR>/clos 

!  <Plug>(_incsearch-searchforward) * <Nop>
!  <Plug>(_incsearch-hlsearch) * <Nop>
!  <Plug>(_incsearch-esc) * <Nop>
!  <Plug>(_incsearch-gv) * <Nop>
!  <Plug>(_incsearch-winrestview) * <Nop>
c  <C-A>       * <Home>
c  <C-B>       * <Left>
c  <C-F>       * <Right>
c  <C-K>       * repeat('<Del>', strchars(getcmdline()) - getcmdpos() + 1)
c  <C-S>       * <C-U>w<CR>/close 

!  <Plug>(_incsearch-searchforward) * <Nop>
!  <Plug>(_incsearch-hlsearch) * <Nop>
!  <Plug>(_incsearch-esc) * <Nop>
!  <Plug>(_incsearch-gv) * <Nop>
!  <Plug>(_incsearch-winrestview) * <Nop>
c  <C-A>       * <Home>
c  <C-B>       * <Left>
c  <C-F>       * <Right>
c  <C-K>       * repeat('<Del>', strchars(getcmdline()) - getcmdpos() + 1)
c  <C-S>       * <C-U>w<CR>/close_ 

!  <Plug>(_incsearch-searchforward) * <Nop>
!  <Plug>(_incsearch-hlsearch) * <Nop>
!  <Plug>(_incsearch-esc) * <Nop>
!  <Plug>(_incsearch-gv) * <Nop>
!  <Plug>(_incsearch-winrestview) * <Nop>
c  <C-A>       * <Home>
c  <C-B>       * <Left>
c  <C-F>       * <Right>
c  <C-K>       * repeat('<Del>', strchars(getcmdline()) - getcmdpos() + 1)
c  <C-S>       * <C-U>w<CR>/close_t 

!  <Plug>(_incsearch-searchforward) * <Nop>
!  <Plug>(_incsearch-hlsearch) * <Nop>
!  <Plug>(_incsearch-esc) * <Nop>
!  <Plug>(_incsearch-gv) * <Nop>
!  <Plug>(_incsearch-winrestview) * <Nop>
c  <C-A>       * <Home>
c  <C-B>       * <Left>
c  <C-F>       * <Right>
c  <C-K>       * repeat('<Del>', strchars(getcmdline()) - getcmdpos() + 1)
c  <C-S>       * <C-U>w<CR>/close_te 

!  <Plug>(_incsearch-searchforward) * <Nop>
!  <Plug>(_incsearch-hlsearch) * <Nop>
!  <Plug>(_incsearch-esc) * <Nop>
!  <Plug>(_incsearch-gv) * <Nop>
!  <Plug>(_incsearch-winrestview) * <Nop>
c  <C-A>       * <Home>
c  <C-B>       * <Left>
c  <C-F>       * <Right>
c  <C-K>       * repeat('<Del>', strchars(getcmdline()) - getcmdpos() + 1)
c  <C-S>       * <C-U>w<CR>
/close_te
/close_te                                                                                                                             

/close_te                                                                                                                        [1/3]
/close_te                                                                                                                        [1/3]


/close_te                                                                                                                             

/close_te                                                                                                                        [1/3]
/close_te                                                                                                                        [1/3]



!  <Plug>(_incsearch-nohlsearch) * incsearch#autocmd#auto_nohlsearch(0)
!  <Plug>(_incsearch-searchforward) * <Nop>
!  <Plug>(_incsearch-hlsearch) * <Nop>
!  <Plug>(_incsearch-esc) * <Nop>
!  <Plug>(_incsearch-gv) * <Nop>
!  <Plug>(_incsearch-winrestview) * <Nop>
c  <C-A>       * <Home>
c  <C-B>       * <Left>
c  <C-F>       * <Right>
c  <C-K>       * repeat('<Del>', strchars(getcmdline()) - getcmdpos() + 1)
c  <C-S>       * <C-U>w<CR>/ 

!  <Plug>(_incsearch-nohlsearch) * incsearch#autocmd#auto_nohlsearch(0)
!  <Plug>(_incsearch-searchforward) * <Nop>
!  <Plug>(_incsearch-hlsearch) * <Nop>
!  <Plug>(_incsearch-esc) * <Nop>
!  <Plug>(_incsearch-gv) * <Nop>
!  <Plug>(_incsearch-winrestview) * <Nop>
c  <C-A>       * <Home>
c  <C-B>       * <Left>
c  <C-F>       * <Right>
c  <C-K>       * repeat('<Del>', strchars(getcmdline()) - getcmdpos() + 1)
c  <C-S>       * <C-U>w<CR>/close_te 

!  <Plug>(_incsearch-nohlsearch) * incsearch#autocmd#auto_nohlsearch(0)
!  <Plug>(_incsearch-searchforward) * <Nop>
!  <Plug>(_incsearch-hlsearch) * <Nop>
!  <Plug>(_incsearch-esc) * <Nop>
!  <Plug>(_incsearch-gv) * <Nop>
!  <Plug>(_incsearch-winrestview) * <Nop>
c  <C-A>       * <Home>
c  <C-B>       * <Left>
c  <C-F>       * <Right>
c  <C-K>       * repeat('<Del>', strchars(getcmdline()) - getcmdpos() + 1)
c  <C-S>       * <C-U>w<CR>
/close_te
/close_te                                                                                                                             

/close_te                                                                                                                        [1/3]
/close_te                                                                                                                        [1/3]




!  <Plug>(_incsearch-nohlsearch) * incsearch#autocmd#auto_nohlsearch(0)
!  <Plug>(_incsearch-searchforward) * <Nop>
!  <Plug>(_incsearch-hlsearch) * <Nop>
!  <Plug>(_incsearch-esc) * <Nop>
!  <Plug>(_incsearch-gv) * <Nop>
!  <Plug>(_incsearch-winrestview) * <Nop>
c  <C-A>       * <Home>
c  <C-B>       * <Left>
c  <C-F>       * <Right>
c  <C-K>       * repeat('<Del>', strchars(getcmdline()) - getcmdpos() + 1)
c  <C-S>       * <C-U>w<CR>/ 

!  <Plug>(_incsearch-nohlsearch) * incsearch#autocmd#auto_nohlsearch(0)
!  <Plug>(_incsearch-searchforward) * <Nop>
!  <Plug>(_incsearch-hlsearch) * <Nop>
!  <Plug>(_incsearch-esc) * <Nop>
!  <Plug>(_incsearch-gv) * <Nop>
!  <Plug>(_incsearch-winrestview) * <Nop>
c  <C-A>       * <Home>
c  <C-B>       * <Left>
c  <C-F>       * <Right>
c  <C-K>       * repeat('<Del>', strchars(getcmdline()) - getcmdpos() + 1)
c  <C-S>       * <C-U>w<CR>/close_te 

!  <Plug>(_incsearch-nohlsearch) * incsearch#autocmd#auto_nohlsearch(0)
!  <Plug>(_incsearch-searchforward) * <Nop>
!  <Plug>(_incsearch-hlsearch) * <Nop>
!  <Plug>(_incsearch-esc) * <Nop>
!  <Plug>(_incsearch-gv) * <Nop>
!  <Plug>(_incsearch-winrestview) * <Nop>
c  <C-A>       * <Home>
c  <C-B>       * <Left>
c  <C-F>       * <Right>
c  <C-K>       * repeat('<Del>', strchars(getcmdline()) - getcmdpos() + 1)
c  <C-S>       * <C-U>w<CR>/ 

!  <Plug>(_incsearch-nohlsearch) * incsearch#autocmd#auto_nohlsearch(0)
!  <Plug>(_incsearch-searchforward) * <Nop>
!  <Plug>(_incsearch-hlsearch) * <Nop>
!  <Plug>(_incsearch-esc) * <Nop>
!  <Plug>(_incsearch-gv) * <Nop>
!  <Plug>(_incsearch-winrestview) * <Nop>
c  <C-A>       * <Home>
c  <C-B>       * <Left>
c  <C-F>       * <Right>
c  <C-K>       * repeat('<Del>', strchars(getcmdline()) - getcmdpos() + 1)
c  <C-S>       * <C-U>w<CR>/t 

!  <Plug>(_incsearch-nohlsearch) * incsearch#autocmd#auto_nohlsearch(0)
!  <Plug>(_incsearch-searchforward) * <Nop>
!  <Plug>(_incsearch-hlsearch) * <Nop>
!  <Plug>(_incsearch-esc) * <Nop>
!  <Plug>(_incsearch-gv) * <Nop>
!  <Plug>(_incsearch-winrestview) * <Nop>
c  <C-A>       * <Home>
c  <C-B>       * <Left>
c  <C-F>       * <Right>
c  <C-K>       * repeat('<Del>', strchars(getcmdline()) - getcmdpos() + 1)
c  <C-S>       * <C-U>w<CR>/te 

!  <Plug>(_incsearch-nohlsearch) * incsearch#autocmd#auto_nohlsearch(0)
!  <Plug>(_incsearch-searchforward) * <Nop>
!  <Plug>(_incsearch-hlsearch) * <Nop>
!  <Plug>(_incsearch-esc) * <Nop>
!  <Plug>(_incsearch-gv) * <Nop>
!  <Plug>(_incsearch-winrestview) * <Nop>
c  <C-A>       * <Home>
c  <C-B>       * <Left>
c  <C-F>       * <Right>
c  <C-K>       * repeat('<Del>', strchars(getcmdline()) - getcmdpos() + 1)
c  <C-S>       * <C-U>w<CR>/ter 

!  <Plug>(_incsearch-nohlsearch) * incsearch#autocmd#auto_nohlsearch(0)
!  <Plug>(_incsearch-searchforward) * <Nop>
!  <Plug>(_incsearch-hlsearch) * <Nop>
!  <Plug>(_incsearch-esc) * <Nop>
!  <Plug>(_incsearch-gv) * <Nop>
!  <Plug>(_incsearch-winrestview) * <Nop>
c  <C-A>       * <Home>
c  <C-B>       * <Left>
c  <C-F>       * <Right>
c  <C-K>       * repeat('<Del>', strchars(getcmdline()) - getcmdpos() + 1)
c  <C-S>       * <C-U>w<CR>/term 

!  <Plug>(_incsearch-nohlsearch) * incsearch#autocmd#auto_nohlsearch(0)
!  <Plug>(_incsearch-searchforward) * <Nop>
!  <Plug>(_incsearch-hlsearch) * <Nop>
!  <Plug>(_incsearch-esc) * <Nop>
!  <Plug>(_incsearch-gv) * <Nop>
!  <Plug>(_incsearch-winrestview) * <Nop>
c  <C-A>       * <Home>
c  <C-B>       * <Left>
c  <C-F>       * <Right>
c  <C-K>       * repeat('<Del>', strchars(getcmdline()) - getcmdpos() + 1)
c  <C-S>       * <C-U>w<CR>
/term
/term                                                                                                                                 

/term                                                                                                                           [7/46]
/term                                                                                                                           [7/46]


/term                                                                                                                                 

/term                                                                                                                           [7/46]
/term                                                                                                                           [7/46]

/term                                                                                                                                 

/term                                                                                                                           [7/46]
/term                                                                                                                           [7/46]
/term                                                                                                                                 

/term                                                                                                                           [7/46]
/term                                                                                                                           [7/46]
/term                                                                                                                                 

/term                                                                                                                           [7/46]
/term                                                                                                                           [7/46]
/term                                                                                                                                 

/term                                                                                                                           [7/46]
/term                                                                                                                           [7/46]
/term                                                                                                                                 

/term                                                                                                                           [7/46]
/term                                                                                                                           [7/46]
/term                                                                                                                                 

/term                                                                                                                           [7/46]
/term                                                                                                                           [7/46]
/term                                                                                                                                 

/term                                                                                                                           [7/46]
/term                                                                                                                           [7/46]
/term                                                                                                                                 

/term                                                                                                                           [7/46]
/term                                                                                                                           [7/46]
/term                                                                                                                                 

/term                                                                                                                           [7/46]
/term                                                                                                                           [7/46]
/term                                                                                                                                 

/term                                                                                                                           [7/46]
/term                                                                                                                           [7/46]
/term                                                                                                                                 

/term                                                                                                                           [7/46]
/term                                                                                                                           [7/46]
/term                                                                                                                                 

/term                                                                                                                           [7/46]
/term                                                                                                                           [7/46]
/term                                                                                                                                 

/term                                                                                                                           [7/46]
/term                                                                                                                           [7/46]
/term                                                                                                                                 

/term                                                                                                                           [7/46]
/term                                                                                                                           [7/46]
/term                                                                                                                                 

/term                                                                                                                           [7/46]
/term                                                                                                                           [7/46]

/close_ter                                                                                                                            

/close_ter                                                                                                                       [1/3]
/close_ter                                                                                                                       [1/3]



"fuck.txt" [noeol][unix] 2309L, 84286C
