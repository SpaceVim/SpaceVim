# This file is autogenerated by tools/create_ultisnips.sh, any edits will be overwritten.
# (Edit /Users/jdonaldson/.vim/bundle/vaxe/snippets/haxe.snippets instead.)
snippet doc "doc"
/**
  ${1}
 **/
endsnippet

snippet switch "switch"
switch(${1}){
	case ${2}: ${3}
}
endsnippet

snippet case "case"
case ${1}: ${2}
endsnippet

snippet try "try"
try{
	${1}
}catch(e:${2}){
  ${3:// Ignore any errors.}
}
endsnippet

snippet for "for"
for( ${1:var} in ${2:itr} ){
	${3}
}
endsnippet

snippet class "HAXE"
class `!v expand('%:t:r')` {
	public function new(${1}) {
		${2://initialize variables}
	}
	static function main() {
		${3:trace("hello world");}
	}
}
endsnippet

snippet main "main"
static function main() {
	${1:trace("hello world");}
}
endsnippet

snippet new "new"
public function new(${1:arg}) {
	super($1);
}
endsnippet

snippet fn "func"
function(${1:arg}) {
	${2}
}
endsnippet

snippet fu "function"
function ${1:name}(${2:arg}) {
	${3}
}
endsnippet

snippet prifu "private function"
private function ${1:name}(${2:arg}) {
	${3}
}
endsnippet

snippet pufu "public function"
public function ${1:name}(${2:arg}) {
	${3}
}
endsnippet

snippet pustafu "public static function"
public static function ${1:name}(${2:arg}) {
	${3}
}
endsnippet

snippet pristafu "private static function"
private static function ${1:name}(${2:arg}) {
	${3}
}
endsnippet

snippet trace "trace"
trace(${1});
endsnippet

snippet desc "function"
trace(${1} + " is the value for $1");
endsnippet

snippet cast "cast"
cast(${1:cast_this}, ${2:type})
endsnippet

snippet interface "interface"
interface ${1:name}${2: implements this}${3:, implements other}{
	${4}
}
endsnippet

snippet #if "#if"
#if js, php, cpp, flash
${1}
#end{2}
endsnippet

snippet typedef "typedef"
typedef ${1}${2:<T>} = {
	var ${3}:$2;
}${4}
endsnippet

snippet untyped "untyped"
untyped{ ${1} }${2}
endsnippet

snippet enum "enum"
enum ${1:Name} {
	${2:Construct}
}
endsnippet


