Describe gina#command#reflog
  Before all
    let Path = vital#gina#import('System.Filepath')
    let slit1 = Slit(tempname(), 1)
    call slit1.write('A/foo.txt', [])
    call slit1.write('B/foo.txt', [])
    call slit1.write('C/foo.txt', [])

    call slit1.execute('add %s', slit1.path('A/foo.txt'))
    call slit1.execute('commit --quiet -m "First"')
    call slit1.execute('checkout -b develop')
    call slit1.execute('add %s', slit1.path('B/foo.txt'))
    call slit1.execute('commit --quiet -m "Second"')
    call slit1.execute('checkout master')
    call slit1.execute('add %s', slit1.path('C/foo.txt'))
    call slit1.execute('commit --quiet -m "Thrid"')
  End

  After all
    %bwipeout!
  End

  Before
    %bwipeout!
    execute 'edit' fnameescape(Path.join(slit1.worktree, 'A', 'foo.txt'))
  End

  Describe Use cases
    It might be called without arguments
      GinaSync reflog
      Assert Equals(winnr('$'), 1)
      Assert Equals(bufname('%'), printf('gina://%s:reflog', slit1.refname))
      Assert Match(getline(1), 'HEAD@{0}: commit: Thrid')
      Assert Match(getline(2), 'HEAD@{1}: checkout: moving from develop to master')
      Assert Match(getline(3), 'HEAD@{2}: commit: Second')
      Assert Match(getline(4), 'HEAD@{3}: checkout: moving from master to develop')
      Assert Match(getline(5), 'HEAD@{4}: commit (initial): First')
    End
  End
End
