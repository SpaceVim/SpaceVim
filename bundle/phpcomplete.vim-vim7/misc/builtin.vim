let g:phpcomplete_builtin = {
\ 'functions':{},
\ 'classes':{},
\ 'interfaces':{},
\ 'constants':{},
\ }
let g:phpcomplete_builtin['functions']['math'] = {
\ 'abs(': 'mixed $number | number',
\ 'acos(': 'float $arg | float',
\ 'acosh(': 'float $arg | float',
\ 'asin(': 'float $arg | float',
\ 'asinh(': 'float $arg | float',
\ 'atan(': 'float $arg | float',
\ 'atan2(': 'float $y, float $x | float',
\ 'atanh(': 'float $arg | float',
\ 'base_convert(': 'string $number, int $frombase, int $tobase | string',
\ 'bindec(': 'string $binary_string | number',
\ 'ceil(': 'float $value | float',
\ 'cos(': 'float $arg | float',
\ 'cosh(': 'float $arg | float',
\ 'decbin(': 'int $number | string',
\ 'dechex(': 'int $number | string',
\ 'decoct(': 'int $number | string',
\ 'deg2rad(': 'float $number | float',
\ 'exp(': 'float $arg | float',
\ 'expm1(': 'float $arg | float',
\ 'floor(': 'float $value | float',
\ 'fmod(': 'float $x, float $y | float',
\ 'getrandmax(': 'void | int',
\ 'hexdec(': 'string $hex_string | number',
\ 'hypot(': 'float $x, float $y | float',
\ 'intdiv(': 'int $dividend, int $divisor | int',
\ 'is_finite(': 'float $val | bool',
\ 'is_infinite(': 'float $val | bool',
\ 'is_nan(': 'float $val | bool',
\ 'lcg_value(': 'void | float',
\ 'log(': 'float $arg [, float $base = M_E] | float',
\ 'log10(': 'float $arg | float',
\ 'log1p(': 'float $number | float',
\ 'max(': 'array $values | mixed',
\ 'min(': 'array $values | mixed',
\ 'mt_getrandmax(': 'void | int',
\ 'mt_rand(': 'void | int',
\ 'mt_srand(': '[ int $seed [, int $mode = MT_RAND_MT19937]] | void',
\ 'octdec(': 'string $octal_string | number',
\ 'pi(': 'void | float',
\ 'pow(': 'number $base, number $exp | number',
\ 'rad2deg(': 'float $number | float',
\ 'rand(': 'void | int',
\ 'round(': 'float $val [, int $precision = 0 [, int $mode = PHP_ROUND_HALF_UP]] | float',
\ 'sin(': 'float $arg | float',
\ 'sinh(': 'float $arg | float',
\ 'sqrt(': 'float $arg | float',
\ 'srand(': '[ int $seed] | void',
\ 'tan(': 'float $arg | float',
\ 'tanh(': 'float $arg | float',
\ }
let g:phpcomplete_builtin['functions']['strings'] = {
\ 'addcslashes(': 'string $str, string $charlist | string',
\ 'addslashes(': 'string $str | string',
\ 'bin2hex(': 'string $str | string',
\ 'chop(': 'chop — Alias of rtrim()',
\ 'chr(': 'int $bytevalue | string',
\ 'chunk_split(': 'string $body [, int $chunklen = 76 [, string $end = "\r\n"]] | string',
\ 'convert_cyr_string(': 'string $str, string $from, string $to | string',
\ 'convert_uudecode(': 'string $data | string',
\ 'convert_uuencode(': 'string $data | string',
\ 'count_chars(': 'string $string [, int $mode = 0] | mixed',
\ 'crc32(': 'string $str | int',
\ 'crypt(': 'string $str [, string $salt] | string',
\ 'echo(': 'string $arg1 [, string $...] | void',
\ 'explode(': 'string $delimiter, string $string [, int $limit = PHP_INT_MAX] | array',
\ 'fprintf(': 'resource $handle, string $format [, mixed $...] | int',
\ 'get_html_translation_table(': '[ int $table = HTML_SPECIALCHARS [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = "UTF-8"]]] | array',
\ 'hebrev(': 'string $hebrew_text [, int $max_chars_per_line = 0] | string',
\ 'hebrevc(': 'string $hebrew_text [, int $max_chars_per_line = 0] | string',
\ 'hex2bin(': 'string $data | string',
\ 'html_entity_decode(': 'string $string [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = ini_get("default_charset")]] | string',
\ 'htmlentities(': 'string $string [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = ini_get("default_charset") [, bool $double_encode = TRUE]]] | string',
\ 'htmlspecialchars_decode(': 'string $string [, int $flags = ENT_COMPAT | ENT_HTML401] | string',
\ 'htmlspecialchars(': 'string $string [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = ini_get("default_charset") [, bool $double_encode = TRUE]]] | string',
\ 'implode(': 'string $glue, array $pieces | string',
\ 'join(': 'join — Alias of implode()',
\ 'lcfirst(': 'string $str | string',
\ 'levenshtein(': 'string $str1, string $str2 | int',
\ 'localeconv(': 'void | array',
\ 'ltrim(': 'string $str [, string $character_mask] | string',
\ 'md5_file(': 'string $filename [, bool $raw_output = FALSE] | string',
\ 'md5(': 'string $str [, bool $raw_output = FALSE] | string',
\ 'metaphone(': 'string $str [, int $phonemes = 0] | string',
\ 'money_format(': 'string $format, float $number | string',
\ 'nl_langinfo(': 'int $item | string',
\ 'nl2br(': 'string $string [, bool $is_xhtml = TRUE] | string',
\ 'number_format(': 'float $number [, int $decimals = 0] | string',
\ 'ord(': 'string $string | int',
\ 'parse_str(': 'string $encoded_string [, array &$result] | void',
\ 'print(': 'string $arg | int',
\ 'printf(': 'string $format [, mixed $...] | int',
\ 'quoted_printable_decode(': 'string $str | string',
\ 'quoted_printable_encode(': 'string $str | string',
\ 'quotemeta(': 'string $str | string',
\ 'rtrim(': 'string $str [, string $character_mask] | string',
\ 'setlocale(': 'int $category, string $locale [, string $...] | string',
\ 'sha1_file(': 'string $filename [, bool $raw_output = FALSE] | string',
\ 'sha1(': 'string $str [, bool $raw_output = FALSE] | string',
\ 'similar_text(': 'string $first, string $second [, float &$percent] | int',
\ 'soundex(': 'string $str | string',
\ 'sprintf(': 'string $format [, mixed $...] | string',
\ 'sscanf(': 'string $str, string $format [, mixed &$...] | mixed',
\ 'str_getcsv(': 'string $input [, string $delimiter = "," [, string $enclosure = ''"'' [, string $escape = "\\"]]] | array',
\ 'str_ireplace(': 'mixed $search, mixed $replace, mixed $subject [, int &$count] | mixed',
\ 'str_pad(': 'string $input, int $pad_length [, string $pad_string = " " [, int $pad_type = STR_PAD_RIGHT]] | string',
\ 'str_repeat(': 'string $input, int $multiplier | string',
\ 'str_replace(': 'mixed $search, mixed $replace, mixed $subject [, int &$count] | mixed',
\ 'str_rot13(': 'string $str | string',
\ 'str_shuffle(': 'string $str | string',
\ 'str_split(': 'string $string [, int $split_length = 1] | array',
\ 'str_word_count(': 'string $string [, int $format = 0 [, string $charlist]] | mixed',
\ 'strcasecmp(': 'string $str1, string $str2 | int',
\ 'strchr(': 'strchr — Alias of strstr()',
\ 'strcmp(': 'string $str1, string $str2 | int',
\ 'strcoll(': 'string $str1, string $str2 | int',
\ 'strcspn(': 'string $subject, string $mask [, int $start [, int $length]] | int',
\ 'strip_tags(': 'string $str [, string $allowable_tags] | string',
\ 'stripcslashes(': 'string $str | string',
\ 'stripos(': 'string $haystack, mixed $needle [, int $offset = 0] | int',
\ 'stripslashes(': 'string $str | string',
\ 'stristr(': 'string $haystack, mixed $needle [, bool $before_needle = FALSE] | string',
\ 'strlen(': 'string $string | int',
\ 'strnatcasecmp(': 'string $str1, string $str2 | int',
\ 'strnatcmp(': 'string $str1, string $str2 | int',
\ 'strncasecmp(': 'string $str1, string $str2, int $len | int',
\ 'strncmp(': 'string $str1, string $str2, int $len | int',
\ 'strpbrk(': 'string $haystack, string $char_list | string',
\ 'strpos(': 'string $haystack, mixed $needle [, int $offset = 0] | int',
\ 'strrchr(': 'string $haystack, mixed $needle | string',
\ 'strrev(': 'string $string | string',
\ 'strripos(': 'string $haystack, mixed $needle [, int $offset = 0] | int',
\ 'strrpos(': 'string $haystack, mixed $needle [, int $offset = 0] | int',
\ 'strspn(': 'string $subject, string $mask [, int $start [, int $length]] | int',
\ 'strstr(': 'string $haystack, mixed $needle [, bool $before_needle = FALSE] | string',
\ 'strtok(': 'string $str, string $token | string',
\ 'strtolower(': 'string $string | string',
\ 'strtoupper(': 'string $string | string',
\ 'strtr(': 'string $str, string $from, string $to | string',
\ 'substr_compare(': 'string $main_str, string $str, int $offset [, int $length [, bool $case_insensitivity = FALSE]] | int',
\ 'substr_count(': 'string $haystack, string $needle [, int $offset = 0 [, int $length]] | int',
\ 'substr_replace(': 'mixed $string, mixed $replacement, mixed $start [, mixed $length] | mixed',
\ 'substr(': 'string $string, int $start [, int $length] | string',
\ 'trim(': 'string $str [, string $character_mask = " \t\n\r\0\x0B"] | string',
\ 'ucfirst(': 'string $str | string',
\ 'ucwords(': 'string $str [, string $delimiters = " \t\r\n\f\v"] | string',
\ 'vfprintf(': 'resource $handle, string $format, array $args | int',
\ 'vprintf(': 'string $format, array $args | int',
\ 'vsprintf(': 'string $format, array $args | string',
\ 'wordwrap(': 'string $str [, int $width = 75 [, string $break = "\n" [, bool $cut = FALSE]]] | string',
\ }
let g:phpcomplete_builtin['functions']['apache'] = {
\ 'apache_child_terminate(': 'void | bool',
\ 'apache_get_modules(': 'void | array',
\ 'apache_get_version(': 'void | string',
\ 'apache_getenv(': 'string $variable [, bool $walk_to_top = FALSE] | string',
\ 'apache_lookup_uri(': 'string $filename | object',
\ 'apache_note(': 'string $note_name [, string $note_value = ""] | string',
\ 'apache_request_headers(': 'void | array',
\ 'apache_reset_timeout(': 'void | bool',
\ 'apache_response_headers(': 'void | array',
\ 'apache_setenv(': 'string $variable, string $value [, bool $walk_to_top = FALSE] | bool',
\ 'getallheaders(': 'void | array',
\ 'virtual(': 'string $filename | bool',
\ }
let g:phpcomplete_builtin['functions']['apc'] = {
\ 'apc_add(': 'string $key, mixed $var [, int $ttl = 0] | bool',
\ 'apc_bin_dump(': '[ array $files = NULL [, array $user_vars = NULL]] | string',
\ 'apc_bin_dumpfile(': 'array $files, array $user_vars, string $filename [, int $flags = 0 [, resource $context = NULL]] | int',
\ 'apc_bin_load(': 'string $data [, int $flags = 0] | bool',
\ 'apc_bin_loadfile(': 'string $filename [, resource $context = NULL [, int $flags = 0]] | bool',
\ 'apc_cache_info(': '[ string $cache_type = "" [, bool $limited = FALSE]] | array',
\ 'apc_cas(': 'string $key, int $old, int $new | bool',
\ 'apc_clear_cache(': '[ string $cache_type = ""] | bool',
\ 'apc_compile_file(': 'string $filename [, bool $atomic = TRUE] | mixed',
\ 'apc_dec(': 'string $key [, int $step = 1 [, bool &$success]] | int',
\ 'apc_define_constants(': 'string $key, array $constants [, bool $case_sensitive = TRUE] | bool',
\ 'apc_delete_file(': 'mixed $keys | mixed',
\ 'apc_delete(': 'string $key | mixed',
\ 'apc_exists(': 'mixed $keys | mixed',
\ 'apc_fetch(': 'mixed $key [, bool &$success] | mixed',
\ 'apc_inc(': 'string $key [, int $step = 1 [, bool &$success]] | int',
\ 'apc_load_constants(': 'string $key [, bool $case_sensitive = TRUE] | bool',
\ 'apc_sma_info(': '[ bool $limited = FALSE] | array',
\ 'apc_store(': 'string $key, mixed $var [, int $ttl = 0] | bool',
\ }
let g:phpcomplete_builtin['functions']['apcu'] = {
\ 'apcu_add(': 'string $key, mixed $var [, int $ttl = 0] | bool',
\ 'apcu_cache_info(': '[ bool $limited = FALSE] | array',
\ 'apcu_cas(': 'string $key, int $old, int $new | bool',
\ 'apcu_clear_cache(': 'void | bool',
\ 'apcu_dec(': 'string $key [, int $step = 1 [, bool &$success]] | int',
\ 'apcu_delete(': 'mixed $key | bool',
\ 'apcu_entry(': 'string $key, callable $generator [, int $ttl = 0] | mixed',
\ 'apcu_exists(': 'mixed $keys | mixed',
\ 'apcu_fetch(': 'mixed $key [, bool &$success] | mixed',
\ 'apcu_inc(': 'string $key [, int $step = 1 [, bool &$success]] | int',
\ 'apcu_sma_info(': '[ bool $limited = FALSE] | array',
\ 'apcu_store(': 'string $key, mixed $var [, int $ttl = 0] | bool',
\ }
let g:phpcomplete_builtin['functions']['apd'] = {
\ 'apd_breakpoint(': 'int $debug_level | bool',
\ 'apd_callstack(': 'void | array',
\ 'apd_clunk(': 'string $warning [, string $delimiter = "<BR />"] | void',
\ 'apd_continue(': 'int $debug_level | bool',
\ 'apd_croak(': 'string $warning [, string $delimiter = "<BR />"] | void',
\ 'apd_dump_function_table(': 'void | void',
\ 'apd_dump_persistent_resources(': 'void | array',
\ 'apd_dump_regular_resources(': 'void | array',
\ 'apd_echo(': 'string $output | bool',
\ 'apd_get_active_symbols(': 'void | array',
\ 'apd_set_pprof_trace(': '[ string $dump_directory = ini_get("apd.dumpdir") [, string $fragment = "pprof"]] | string',
\ 'apd_set_session_trace_socket(': 'string $tcp_server, int $socket_type, int $port, int $debug_level | bool',
\ 'apd_set_session_trace(': 'int $debug_level [, string $dump_directory = ini_get("apd.dumpdir")] | void',
\ 'apd_set_session(': 'int $debug_level | void',
\ 'override_function(': 'string $function_name, string $function_args, string $function_code | bool',
\ 'rename_function(': 'string $original_name, string $new_name | bool',
\ }
let g:phpcomplete_builtin['functions']['arrays'] = {
\ 'array_change_key_case(': 'array $array [, int $case = CASE_LOWER] | array',
\ 'array_chunk(': 'array $array, int $size [, bool $preserve_keys = FALSE] | array',
\ 'array_column(': 'array $input, mixed $column_key [, mixed $index_key = NULL] | array',
\ 'array_combine(': 'array $keys, array $values | array',
\ 'array_count_values(': 'array $array | array',
\ 'array_diff_assoc(': 'array $array1, array $array2 [, array $...] | array',
\ 'array_diff_key(': 'array $array1, array $array2 [, array $...] | array',
\ 'array_diff_uassoc(': 'array $array1, array $array2 [, array $... [, callable $key_compare_func]] | array',
\ 'array_diff_ukey(': 'array $array1, array $array2 [, array $... [, callable $key_compare_func]] | array',
\ 'array_diff(': 'array $array1, array $array2 [, array $...] | array',
\ 'array_fill_keys(': 'array $keys, mixed $value | array',
\ 'array_fill(': 'int $start_index, int $num, mixed $value | array',
\ 'array_filter(': 'array $array [, callable $callback [, int $flag = 0]] | array',
\ 'array_flip(': 'array $array | array',
\ 'array_intersect_assoc(': 'array $array1, array $array2 [, array $...] | array',
\ 'array_intersect_key(': 'array $array1, array $array2 [, array $...] | array',
\ 'array_intersect_uassoc(': 'array $array1, array $array2 [, array $... [, callable $key_compare_func]] | array',
\ 'array_intersect_ukey(': 'array $array1, array $array2 [, array $... [, callable $key_compare_func]] | array',
\ 'array_intersect(': 'array $array1, array $array2 [, array $...] | array',
\ 'array_key_exists(': 'mixed $key, array $array | bool',
\ 'array_key_first(': 'array $array | mixed',
\ 'array_key_last(': 'array $array | mixed',
\ 'array_keys(': 'array $array | array',
\ 'array_map(': 'callable $callback, array $array1 [, array $...] | array',
\ 'array_merge_recursive(': '[ array $...] | array',
\ 'array_merge(': '[ array $...] | array',
\ 'array_multisort(': 'array &$array1 [, mixed $array1_sort_order = SORT_ASC [, mixed $array1_sort_flags = SORT_REGULAR [, mixed $...]]] | bool',
\ 'array_pad(': 'array $array, int $size, mixed $value | array',
\ 'array_pop(': 'array &$array | mixed',
\ 'array_product(': 'array $array | number',
\ 'array_push(': 'array &$array [, mixed $...] | int',
\ 'array_rand(': 'array $array [, int $num = 1] | mixed',
\ 'array_reduce(': 'array $array, callable $callback [, mixed $initial = NULL] | mixed',
\ 'array_replace_recursive(': 'array $array1 [, array $...] | array',
\ 'array_replace(': 'array $array1 [, array $...] | array',
\ 'array_reverse(': 'array $array [, bool $preserve_keys = FALSE] | array',
\ 'array_search(': 'mixed $needle, array $haystack [, bool $strict = FALSE] | mixed',
\ 'array_shift(': 'array &$array | mixed',
\ 'array_slice(': 'array $array, int $offset [, int $length = NULL [, bool $preserve_keys = FALSE]] | array',
\ 'array_splice(': 'array &$input, int $offset [, int $length = count($input) [, mixed $replacement = array()]] | array',
\ 'array_sum(': 'array $array | number',
\ 'array_udiff_assoc(': 'array $array1, array $array2 [, array $... [, callable $value_compare_func]] | array',
\ 'array_udiff_uassoc(': 'array $array1, array $array2 [, array $... [, callable $value_compare_func [, callable $key_compare_func]]] | array',
\ 'array_udiff(': 'array $array1, array $array2 [, array $... [, callable $value_compare_func]] | array',
\ 'array_uintersect_assoc(': 'array $array1, array $array2 [, array $... [, callable $value_compare_func]] | array',
\ 'array_uintersect_uassoc(': 'array $array1, array $array2 [, array $... [, callable $value_compare_func [, callable $key_compare_func]]] | array',
\ 'array_uintersect(': 'array $array1, array $array2 [, array $... [, callable $value_compare_func]] | array',
\ 'array_unique(': 'array $array [, int $sort_flags = SORT_STRING] | array',
\ 'array_unshift(': 'array &$array [, mixed $...] | int',
\ 'array_values(': 'array $array | array',
\ 'array_walk_recursive(': 'array &$array, callable $callback [, mixed $userdata = NULL] | bool',
\ 'array_walk(': 'array &$array, callable $callback [, mixed $userdata = NULL] | bool',
\ 'array(': '[ mixed $...] | array',
\ 'arsort(': 'array &$array [, int $sort_flags = SORT_REGULAR] | bool',
\ 'asort(': 'array &$array [, int $sort_flags = SORT_REGULAR] | bool',
\ 'compact(': 'mixed $varname1 [, mixed $...] | array',
\ 'count(': 'mixed $array_or_countable [, int $mode = COUNT_NORMAL] | int',
\ 'current(': 'array $array | mixed',
\ 'each(': 'array &$array | array',
\ 'end(': 'array &$array | mixed',
\ 'extract(': 'array &$array [, int $flags = EXTR_OVERWRITE [, string $prefix = NULL]] | int',
\ 'in_array(': 'mixed $needle, array $haystack [, bool $strict = FALSE] | bool',
\ 'key_exists(': 'key_exists — Alias of array_key_exists()',
\ 'key(': 'array $array | mixed',
\ 'krsort(': 'array &$array [, int $sort_flags = SORT_REGULAR] | bool',
\ 'ksort(': 'array &$array [, int $sort_flags = SORT_REGULAR] | bool',
\ 'list(': 'mixed $var1 [, mixed $...] | array',
\ 'natcasesort(': 'array &$array | bool',
\ 'natsort(': 'array &$array | bool',
\ 'next(': 'array &$array | mixed',
\ 'pos(': 'pos — Alias of current()',
\ 'prev(': 'array &$array | mixed',
\ 'range(': 'mixed $start, mixed $end [, number $step = 1] | array',
\ 'reset(': 'array &$array | mixed',
\ 'rsort(': 'array &$array [, int $sort_flags = SORT_REGULAR] | bool',
\ 'shuffle(': 'array &$array | bool',
\ 'sizeof(': 'sizeof — Alias of count()',
\ 'sort(': 'array &$array [, int $sort_flags = SORT_REGULAR] | bool',
\ 'uasort(': 'array &$array, callable $value_compare_func | bool',
\ 'uksort(': 'array &$array, callable $key_compare_func | bool',
\ 'usort(': 'array &$array, callable $value_compare_func | bool',
\ }
let g:phpcomplete_builtin['functions']['php_options_info'] = {
\ 'assert_options(': 'int $what [, mixed $value] | mixed',
\ 'assert(': 'mixed $assertion [, string $description] | bool',
\ 'cli_get_process_title(': 'void | string',
\ 'cli_set_process_title(': 'string $title | bool',
\ 'dl(': 'string $library | bool',
\ 'extension_loaded(': 'string $name | bool',
\ 'gc_collect_cycles(': 'void | int',
\ 'gc_disable(': 'void | void',
\ 'gc_enable(': 'void | void',
\ 'gc_enabled(': 'void | bool',
\ 'gc_mem_caches(': 'void | int',
\ 'gc_status(': 'void | array',
\ 'get_cfg_var(': 'string $option | mixed',
\ 'get_current_user(': 'void | string',
\ 'get_defined_constants(': '[ bool $categorize = FALSE] | array',
\ 'get_extension_funcs(': 'string $module_name | array',
\ 'get_include_path(': 'void | string',
\ 'get_included_files(': 'void | array',
\ 'get_loaded_extensions(': '[ bool $zend_extensions = FALSE] | array',
\ 'get_magic_quotes_gpc(': 'void | bool',
\ 'get_magic_quotes_runtime(': 'void | bool',
\ 'get_required_files(': 'get_required_files — Alias of get_included_files()',
\ 'get_resources(': '[ string $type] | array',
\ 'getenv(': 'string $varname [, bool $local_only = FALSE] | string',
\ 'getlastmod(': 'void | int',
\ 'getmygid(': 'void | int',
\ 'getmyinode(': 'void | int',
\ 'getmypid(': 'void | int',
\ 'getmyuid(': 'void | int',
\ 'getopt(': 'string $options [, array $longopts [, int &$optind]] | array',
\ 'getrusage(': '[ int $who = 0] | array',
\ 'ini_alter(': 'ini_alter — Alias of ini_set()',
\ 'ini_get_all(': '[ string $extension [, bool $details = TRUE]] | array',
\ 'ini_get(': 'string $varname | string',
\ 'ini_restore(': 'string $varname | void',
\ 'ini_set(': 'string $varname, string $newvalue | string',
\ 'magic_quotes_runtime(': 'magic_quotes_runtime — Alias of set_magic_quotes_runtime()',
\ 'memory_get_peak_usage(': '[ bool $real_usage = FALSE] | int',
\ 'memory_get_usage(': '[ bool $real_usage = FALSE] | int',
\ 'php_ini_loaded_file(': 'void | string',
\ 'php_ini_scanned_files(': 'void | string',
\ 'php_logo_guid(': 'void | string',
\ 'php_sapi_name(': 'void | string',
\ 'php_uname(': '[ string $mode = "a"] | string',
\ 'phpcredits(': '[ int $flag = CREDITS_ALL] | bool',
\ 'phpinfo(': '[ int $what = INFO_ALL] | bool',
\ 'phpversion(': '[ string $extension] | string',
\ 'putenv(': 'string $setting | bool',
\ 'restore_include_path(': 'void | void',
\ 'set_include_path(': 'string $new_include_path | string',
\ 'set_magic_quotes_runtime(': 'bool $new_setting | bool',
\ 'set_time_limit(': 'int $seconds | bool',
\ 'sys_get_temp_dir(': 'void | string',
\ 'version_compare(': 'string $version1, string $version2 | int',
\ 'zend_logo_guid(': 'void | string',
\ 'zend_thread_id(': 'void | int',
\ 'zend_version(': 'void | string',
\ }
let g:phpcomplete_builtin['functions']['classes_objects'] = {
\ '__autoload(': 'string $class | void',
\ 'class_alias(': 'string $original, string $alias [, bool $autoload = TRUE] | bool',
\ 'class_exists(': 'string $class_name [, bool $autoload = TRUE] | bool',
\ 'get_called_class(': 'void | string',
\ 'get_class_methods(': 'mixed $class_name | array',
\ 'get_class_vars(': 'string $class_name | array',
\ 'get_class(': '[ object $object] | string',
\ 'get_declared_classes(': 'void | array',
\ 'get_declared_interfaces(': 'void | array',
\ 'get_declared_traits(': 'void | array',
\ 'get_object_vars(': 'object $object | array',
\ 'get_parent_class(': '[ mixed $object] | string',
\ 'interface_exists(': 'string $interface_name [, bool $autoload = TRUE] | bool',
\ 'is_a(': 'mixed $object, string $class_name [, bool $allow_string = FALSE] | bool',
\ 'is_subclass_of(': 'mixed $object, string $class_name [, bool $allow_string = TRUE] | bool',
\ 'method_exists(': 'mixed $object, string $method_name | bool',
\ 'property_exists(': 'mixed $class, string $property | bool',
\ 'trait_exists(': 'string $traitname [, bool $autoload] | bool',
\ }
let g:phpcomplete_builtin['functions']['urls'] = {
\ 'base64_decode(': 'string $data [, bool $strict = FALSE] | string',
\ 'base64_encode(': 'string $data | string',
\ 'get_headers(': 'string $url [, int $format = 0 [, resource $context]] | array',
\ 'get_meta_tags(': 'string $filename [, bool $use_include_path = FALSE] | array',
\ 'http_build_query(': 'mixed $query_data [, string $numeric_prefix [, string $arg_separator [, int $enc_type = PHP_QUERY_RFC1738]]] | string',
\ 'parse_url(': 'string $url [, int $component = -1] | mixed',
\ 'rawurldecode(': 'string $str | string',
\ 'rawurlencode(': 'string $str | string',
\ 'urldecode(': 'string $str | string',
\ 'urlencode(': 'string $str | string',
\ }
let g:phpcomplete_builtin['functions']['filesystem'] = {
\ 'basename(': 'string $path [, string $suffix] | string',
\ 'chgrp(': 'string $filename, mixed $group | bool',
\ 'chmod(': 'string $filename, int $mode | bool',
\ 'chown(': 'string $filename, mixed $user | bool',
\ 'clearstatcache(': '[ bool $clear_realpath_cache = FALSE [, string $filename]] | void',
\ 'copy(': 'string $source, string $dest [, resource $context] | bool',
\ 'dirname(': 'string $path [, int $levels = 1] | string',
\ 'disk_free_space(': 'string $directory | float',
\ 'disk_total_space(': 'string $directory | float',
\ 'diskfreespace(': 'diskfreespace — Alias of disk_free_space()',
\ 'fclose(': 'resource $handle | bool',
\ 'feof(': 'resource $handle | bool',
\ 'fflush(': 'resource $handle | bool',
\ 'fgetc(': 'resource $handle | string',
\ 'fgetcsv(': 'resource $handle [, int $length = 0 [, string $delimiter = "," [, string $enclosure = ''"'' [, string $escape = "\\"]]]] | array',
\ 'fgets(': 'resource $handle [, int $length] | string',
\ 'fgetss(': 'resource $handle [, int $length [, string $allowable_tags]] | string',
\ 'file_exists(': 'string $filename | bool',
\ 'file_get_contents(': 'string $filename [, bool $use_include_path = FALSE [, resource $context [, int $offset = 0 [, int $maxlen]]]] | string',
\ 'file_put_contents(': 'string $filename, mixed $data [, int $flags = 0 [, resource $context]] | int',
\ 'file(': 'string $filename [, int $flags = 0 [, resource $context]] | array',
\ 'fileatime(': 'string $filename | int',
\ 'filectime(': 'string $filename | int',
\ 'filegroup(': 'string $filename | int',
\ 'fileinode(': 'string $filename | int',
\ 'filemtime(': 'string $filename | int',
\ 'fileowner(': 'string $filename | int',
\ 'fileperms(': 'string $filename | int',
\ 'filesize(': 'string $filename | int',
\ 'filetype(': 'string $filename | string',
\ 'flock(': 'resource $handle, int $operation [, int &$wouldblock] | bool',
\ 'fnmatch(': 'string $pattern, string $string [, int $flags = 0] | bool',
\ 'fopen(': 'string $filename, string $mode [, bool $use_include_path = FALSE [, resource $context]] | resource',
\ 'fpassthru(': 'resource $handle | int',
\ 'fputcsv(': 'resource $handle, array $fields [, string $delimiter = "," [, string $enclosure = ''"'' [, string $escape_char = "\\"]]] | int',
\ 'fputs(': 'fputs — Alias of fwrite()',
\ 'fread(': 'resource $handle, int $length | string',
\ 'fscanf(': 'resource $handle, string $format [, mixed &$...] | mixed',
\ 'fseek(': 'resource $handle, int $offset [, int $whence = SEEK_SET] | int',
\ 'fstat(': 'resource $handle | array',
\ 'ftell(': 'resource $handle | int',
\ 'ftruncate(': 'resource $handle, int $size | bool',
\ 'fwrite(': 'resource $handle, string $string [, int $length] | int',
\ 'glob(': 'string $pattern [, int $flags = 0] | array',
\ 'is_dir(': 'string $filename | bool',
\ 'is_executable(': 'string $filename | bool',
\ 'is_file(': 'string $filename | bool',
\ 'is_link(': 'string $filename | bool',
\ 'is_readable(': 'string $filename | bool',
\ 'is_uploaded_file(': 'string $filename | bool',
\ 'is_writable(': 'string $filename | bool',
\ 'is_writeable(': 'is_writeable — Alias of is_writable()',
\ 'lchgrp(': 'string $filename, mixed $group | bool',
\ 'lchown(': 'string $filename, mixed $user | bool',
\ 'link(': 'string $target, string $link | bool',
\ 'linkinfo(': 'string $path | int',
\ 'lstat(': 'string $filename | array',
\ 'mkdir(': 'string $pathname [, int $mode = 0777 [, bool $recursive = FALSE [, resource $context]]] | bool',
\ 'move_uploaded_file(': 'string $filename, string $destination | bool',
\ 'parse_ini_file(': 'string $filename [, bool $process_sections = FALSE [, int $scanner_mode = INI_SCANNER_NORMAL]] | array',
\ 'parse_ini_string(': 'string $ini [, bool $process_sections = FALSE [, int $scanner_mode = INI_SCANNER_NORMAL]] | array',
\ 'pathinfo(': 'string $path [, int $options = PATHINFO_DIRNAME | PATHINFO_BASENAME | PATHINFO_EXTENSION | PATHINFO_FILENAME] | mixed',
\ 'pclose(': 'resource $handle | int',
\ 'popen(': 'string $command, string $mode | resource',
\ 'readfile(': 'string $filename [, bool $use_include_path = FALSE [, resource $context]] | int',
\ 'readlink(': 'string $path | string',
\ 'realpath_cache_get(': 'void | array',
\ 'realpath_cache_size(': 'void | int',
\ 'realpath(': 'string $path | string',
\ 'rename(': 'string $oldname, string $newname [, resource $context] | bool',
\ 'rewind(': 'resource $handle | bool',
\ 'rmdir(': 'string $dirname [, resource $context] | bool',
\ 'set_file_buffer(': 'set_file_buffer — Alias of stream_set_write_buffer()',
\ 'stat(': 'string $filename | array',
\ 'symlink(': 'string $target, string $link | bool',
\ 'tempnam(': 'string $dir, string $prefix | string',
\ 'tmpfile(': 'void | resource',
\ 'touch(': 'string $filename [, int $time = time() [, int $atime]] | bool',
\ 'umask(': '[ int $mask] | int',
\ 'unlink(': 'string $filename [, resource $context] | bool',
\ }
let g:phpcomplete_builtin['functions']['bbcode'] = {
\ 'bbcode_add_element(': 'resource $bbcode_container, string $tag_name, array $tag_rules | bool',
\ 'bbcode_add_smiley(': 'resource $bbcode_container, string $smiley, string $replace_by | bool',
\ 'bbcode_create(': '[ array $bbcode_initial_tags = NULL] | resource',
\ 'bbcode_destroy(': 'resource $bbcode_container | bool',
\ 'bbcode_parse(': 'resource $bbcode_container, string $to_parse | string',
\ 'bbcode_set_arg_parser(': 'resource $bbcode_container, resource $bbcode_arg_parser | bool',
\ 'bbcode_set_flags(': 'resource $bbcode_container, int $flags [, int $mode = BBCODE_SET_FLAGS_SET] | bool',
\ }
let g:phpcomplete_builtin['functions']['bc_math'] = {
\ 'bcadd(': 'string $left_operand, string $right_operand [, int $scale = 0] | string',
\ 'bccomp(': 'string $left_operand, string $right_operand [, int $scale = 0] | int',
\ 'bcdiv(': 'string $dividend, string $divisor [, int $scale = 0] | string',
\ 'bcmod(': 'string $dividend, string $divisor [, int $scale = 0] | string',
\ 'bcmul(': 'string $left_operand, string $right_operand [, int $scale = 0] | string',
\ 'bcpow(': 'string $base, string $exponent [, int $scale = 0] | string',
\ 'bcpowmod(': 'string $base, string $exponent, string $modulus [, int $scale = 0] | string',
\ 'bcscale(': 'int $scale | int',
\ 'bcsqrt(': 'string $operand [, int $scale = 0] | string',
\ 'bcsub(': 'string $left_operand, string $right_operand [, int $scale = 0] | string',
\ }
let g:phpcomplete_builtin['functions']['bcompiler'] = {
\ 'bcompiler_load_exe(': 'string $filename | bool',
\ 'bcompiler_load(': 'string $filename | bool',
\ 'bcompiler_parse_class(': 'string $class, string $callback | bool',
\ 'bcompiler_read(': 'resource $filehandle | bool',
\ 'bcompiler_write_class(': 'resource $filehandle, string $className [, string $extends] | bool',
\ 'bcompiler_write_constant(': 'resource $filehandle, string $constantName | bool',
\ 'bcompiler_write_exe_footer(': 'resource $filehandle, int $startpos | bool',
\ 'bcompiler_write_file(': 'resource $filehandle, string $filename | bool',
\ 'bcompiler_write_footer(': 'resource $filehandle | bool',
\ 'bcompiler_write_function(': 'resource $filehandle, string $functionName | bool',
\ 'bcompiler_write_functions_from_file(': 'resource $filehandle, string $fileName | bool',
\ 'bcompiler_write_header(': 'resource $filehandle [, string $write_ver] | bool',
\ 'bcompiler_write_included_filename(': 'resource $filehandle, string $filename | bool',
\ }
let g:phpcomplete_builtin['functions']['gettext'] = {
\ 'bind_textdomain_codeset(': 'string $domain, string $codeset | string',
\ 'bindtextdomain(': 'string $domain, string $directory | string',
\ 'dcgettext(': 'string $domain, string $message, int $category | string',
\ 'dcngettext(': 'string $domain, string $msgid1, string $msgid2, int $n, int $category | string',
\ 'dgettext(': 'string $domain, string $message | string',
\ 'dngettext(': 'string $domain, string $msgid1, string $msgid2, int $n | string',
\ 'gettext(': 'string $message | string',
\ 'ngettext(': 'string $msgid1, string $msgid2, int $n | string',
\ 'textdomain(': '[ string $text_domain = NULL] | string',
\ }
let g:phpcomplete_builtin['functions']['blenc'] = {
\ 'blenc_encrypt(': 'string $plaintext, string $encodedfile [, string $encryption_key] | string',
\ }
let g:phpcomplete_builtin['functions']['variable_handling'] = {
\ 'boolval(': 'mixed $var | bool',
\ 'debug_zval_dump(': 'mixed $variable [, mixed $...] | void',
\ 'doubleval(': 'doubleval — Alias of floatval()',
\ 'empty(': 'mixed $var | bool',
\ 'floatval(': 'mixed $var | float',
\ 'get_defined_vars(': 'void | array',
\ 'get_resource_type(': 'resource $handle | string',
\ 'gettype(': 'mixed $var | string',
\ 'import_request_variables(': 'string $types [, string $prefix] | bool',
\ 'intval(': 'mixed $var [, int $base = 10] | int',
\ 'is_array(': 'mixed $var | bool',
\ 'is_bool(': 'mixed $var | bool',
\ 'is_callable(': 'mixed $var [, bool $syntax_only = FALSE [, string &$callable_name]] | bool',
\ 'is_countable(': 'mixed $var | bool',
\ 'is_double(': 'is_double — Alias of is_float()',
\ 'is_float(': 'mixed $var | bool',
\ 'is_int(': 'mixed $var | bool',
\ 'is_integer(': 'is_integer — Alias of is_int()',
\ 'is_iterable(': 'mixed $var | bool',
\ 'is_long(': 'is_long — Alias of is_int()',
\ 'is_null(': 'mixed $var | bool',
\ 'is_numeric(': 'mixed $var | bool',
\ 'is_object(': 'mixed $var | bool',
\ 'is_real(': 'is_real — Alias of is_float()',
\ 'is_resource(': 'mixed $var | bool',
\ 'is_scalar(': 'mixed $var | bool',
\ 'is_string(': 'mixed $var | bool',
\ 'isset(': 'mixed $var [, mixed $...] | bool',
\ 'print_r(': 'mixed $expression [, bool $return = FALSE] | mixed',
\ 'serialize(': 'mixed $value | string',
\ 'settype(': 'mixed &$var, string $type | bool',
\ 'strval(': 'mixed $var | string',
\ 'unserialize(': 'string $str [, array $options] | mixed',
\ 'unset(': 'mixed $var [, mixed $...] | void',
\ 'var_dump(': 'mixed $expression [, mixed $...] | void',
\ 'var_export(': 'mixed $expression [, bool $return = FALSE] | mixed',
\ }
let g:phpcomplete_builtin['functions']['mongo'] = {
\ 'bson_decode(': 'string $bson | array',
\ 'bson_encode(': 'mixed $anything | string',
\ 'log_cmd_delete(': 'array $server, array $writeOptions, array $deleteOptions, array $protocolOptions | void',
\ 'log_cmd_insert(': 'array $server, array $document, array $writeOptions, array $protocolOptions | void',
\ 'log_cmd_update(': 'array $server, array $writeOptions, array $updateOptions, array $protocolOptions | void',
\ 'log_getmore(': 'array $server, array $info | void',
\ 'log_killcursor(': 'array $server, array $info | void',
\ 'log_reply(': 'array $server, array $messageHeaders, array $operationHeaders | void',
\ 'log_write_batch(': 'array $server, array $writeOptions, array $batch, array $protocolOptions | void',
\ }
let g:phpcomplete_builtin['functions']['bzip2'] = {
\ 'bzclose(': 'resource $bz | bool',
\ 'bzcompress(': 'string $source [, int $blocksize = 4 [, int $workfactor = 0]] | mixed',
\ 'bzdecompress(': 'string $source [, int $small = 0] | mixed',
\ 'bzerrno(': 'resource $bz | int',
\ 'bzerror(': 'resource $bz | array',
\ 'bzerrstr(': 'resource $bz | string',
\ 'bzflush(': 'resource $bz | bool',
\ 'bzopen(': 'mixed $file, string $mode | resource',
\ 'bzread(': 'resource $bz [, int $length = 1024] | string',
\ 'bzwrite(': 'resource $bz, string $data [, int $length] | int',
\ }
let g:phpcomplete_builtin['functions']['cairo'] = {
\ 'cairo_create(': 'CairoSurface $surface | CairoContext',
\ 'cairo_font_options_create(': 'void | CairoFontOptions',
\ 'cairo_font_options_equal(': 'CairoFontOptions $options, CairoFontOptions $other | bool',
\ 'cairo_font_options_get_antialias(': 'CairoFontOptions $options | int',
\ 'cairo_font_options_get_hint_metrics(': 'CairoFontOptions $options | int',
\ 'cairo_font_options_get_hint_style(': 'CairoFontOptions $options | int',
\ 'cairo_font_options_get_subpixel_order(': 'CairoFontOptions $options | int',
\ 'cairo_font_options_hash(': 'CairoFontOptions $options | int',
\ 'cairo_font_options_merge(': 'CairoFontOptions $options, CairoFontOptions $other | void',
\ 'cairo_font_options_set_antialias(': 'CairoFontOptions $options, int $antialias | void',
\ 'cairo_font_options_set_hint_metrics(': 'CairoFontOptions $options, int $hint_metrics | void',
\ 'cairo_font_options_set_hint_style(': 'CairoFontOptions $options, int $hint_style | void',
\ 'cairo_font_options_set_subpixel_order(': 'CairoFontOptions $options, int $subpixel_order | void',
\ 'cairo_font_options_status(': 'CairoFontOptions $options | int',
\ 'cairo_format_stride_for_width(': 'int $format, int $width | int',
\ 'cairo_image_surface_create_for_data(': 'string $data, int $format, int $width, int $height [, int $stride = -1] | CairoImageSurface',
\ 'cairo_image_surface_create_from_png(': 'mixed $file | CairoImageSurface',
\ 'cairo_image_surface_create(': 'int $format, int $width, int $height | CairoImageSurface',
\ 'cairo_image_surface_get_data(': 'CairoImageSurface $surface | string',
\ 'cairo_image_surface_get_format(': 'CairoImageSurface $surface | int',
\ 'cairo_image_surface_get_height(': 'CairoImageSurface $surface | int',
\ 'cairo_image_surface_get_stride(': 'CairoImageSurface $surface | int',
\ 'cairo_image_surface_get_width(': 'CairoImageSurface $surface | int',
\ 'cairo_matrix_create_scale(': 'cairo_matrix_create_scale — Alias of CairoMatrix::initScale()',
\ 'cairo_matrix_create_translate(': 'cairo_matrix_create_translate — Alias of CairoMatrix::initTranslate()',
\ 'cairo_matrix_invert(': 'CairoMatrix $matrix | void',
\ 'cairo_matrix_multiply(': 'CairoMatrix $matrix1, CairoMatrix $matrix2 | CairoMatrix',
\ 'cairo_matrix_transform_distance(': 'CairoMatrix $matrix, float $dx, float $dy | array',
\ 'cairo_matrix_transform_point(': 'CairoMatrix $matrix, float $dx, float $dy | array',
\ 'cairo_matrix_translate(': 'CairoMatrix $matrix, float $tx, float $ty | void',
\ 'cairo_pattern_add_color_stop_rgb(': 'CairoGradientPattern $pattern, float $offset, float $red, float $green, float $blue | void',
\ 'cairo_pattern_add_color_stop_rgba(': 'CairoGradientPattern $pattern, float $offset, float $red, float $green, float $blue, float $alpha | void',
\ 'cairo_pattern_create_for_surface(': 'CairoSurface $surface | CairoPattern',
\ 'cairo_pattern_create_linear(': 'float $x0, float $y0, float $x1, float $y1 | CairoPattern',
\ 'cairo_pattern_create_radial(': 'float $x0, float $y0, float $r0, float $x1, float $y1, float $r1 | CairoPattern',
\ 'cairo_pattern_create_rgb(': 'float $red, float $green, float $blue | CairoPattern',
\ 'cairo_pattern_create_rgba(': 'float $red, float $green, float $blue, float $alpha | CairoPattern',
\ 'cairo_pattern_get_color_stop_count(': 'CairoGradientPattern $pattern | int',
\ 'cairo_pattern_get_color_stop_rgba(': 'CairoGradientPattern $pattern, int $index | array',
\ 'cairo_pattern_get_extend(': 'string $pattern | int',
\ 'cairo_pattern_get_filter(': 'CairoSurfacePattern $pattern | int',
\ 'cairo_pattern_get_linear_points(': 'CairoLinearGradient $pattern | array',
\ 'cairo_pattern_get_matrix(': 'CairoPattern $pattern | CairoMatrix',
\ 'cairo_pattern_get_radial_circles(': 'CairoRadialGradient $pattern | array',
\ 'cairo_pattern_get_rgba(': 'CairoSolidPattern $pattern | array',
\ 'cairo_pattern_get_surface(': 'CairoSurfacePattern $pattern | CairoSurface',
\ 'cairo_pattern_get_type(': 'CairoPattern $pattern | int',
\ 'cairo_pattern_set_extend(': 'string $pattern, string $extend | void',
\ 'cairo_pattern_set_filter(': 'CairoSurfacePattern $pattern, int $filter | void',
\ 'cairo_pattern_set_matrix(': 'CairoPattern $pattern, CairoMatrix $matrix | void',
\ 'cairo_pattern_status(': 'CairoPattern $pattern | int',
\ 'cairo_pdf_surface_create(': 'string $file, float $width, float $height | CairoPdfSurface',
\ 'cairo_pdf_surface_set_size(': 'CairoPdfSurface $surface, float $width, float $height | void',
\ 'cairo_ps_get_levels(': 'void | array',
\ 'cairo_ps_level_to_string(': 'int $level | string',
\ 'cairo_ps_surface_create(': 'string $file, float $width, float $height | CairoPsSurface',
\ 'cairo_ps_surface_dsc_begin_page_setup(': 'CairoPsSurface $surface | void',
\ 'cairo_ps_surface_dsc_begin_setup(': 'CairoPsSurface $surface | void',
\ 'cairo_ps_surface_dsc_comment(': 'CairoPsSurface $surface, string $comment | void',
\ 'cairo_ps_surface_get_eps(': 'CairoPsSurface $surface | bool',
\ 'cairo_ps_surface_restrict_to_level(': 'CairoPsSurface $surface, int $level | void',
\ 'cairo_ps_surface_set_eps(': 'CairoPsSurface $surface, bool $level | void',
\ 'cairo_ps_surface_set_size(': 'CairoPsSurface $surface, float $width, float $height | void',
\ 'cairo_scaled_font_create(': 'CairoFontFace $fontface, CairoMatrix $matrix, CairoMatrix $ctm, CairoFontOptions $fontoptions | CairoScaledFont',
\ 'cairo_scaled_font_extents(': 'CairoScaledFont $scaledfont | array',
\ 'cairo_scaled_font_get_ctm(': 'CairoScaledFont $scaledfont | CairoMatrix',
\ 'cairo_scaled_font_get_font_face(': 'CairoScaledFont $scaledfont | CairoFontFace',
\ 'cairo_scaled_font_get_font_matrix(': 'CairoScaledFont $scaledfont | CairoFontOptions',
\ 'cairo_scaled_font_get_font_options(': 'CairoScaledFont $scaledfont | CairoFontOptions',
\ 'cairo_scaled_font_get_scale_matrix(': 'CairoScaledFont $scaledfont | CairoMatrix',
\ 'cairo_scaled_font_get_type(': 'CairoScaledFont $scaledfont | int',
\ 'cairo_scaled_font_glyph_extents(': 'CairoScaledFont $scaledfont, array $glyphs | array',
\ 'cairo_scaled_font_status(': 'CairoScaledFont $scaledfont | int',
\ 'cairo_scaled_font_text_extents(': 'CairoScaledFont $scaledfont, string $text | array',
\ 'cairo_surface_copy_page(': 'CairoSurface $surface | void',
\ 'cairo_surface_create_similar(': 'CairoSurface $surface, int $content, float $width, float $height | CairoSurface',
\ 'cairo_surface_finish(': 'CairoSurface $surface | void',
\ 'cairo_surface_flush(': 'CairoSurface $surface | void',
\ 'cairo_surface_get_content(': 'CairoSurface $surface | int',
\ 'cairo_surface_get_device_offset(': 'CairoSurface $surface | array',
\ 'cairo_surface_get_font_options(': 'CairoSurface $surface | CairoFontOptions',
\ 'cairo_surface_get_type(': 'CairoSurface $surface | int',
\ 'cairo_surface_mark_dirty_rectangle(': 'CairoSurface $surface, float $x, float $y, float $width, float $height | void',
\ 'cairo_surface_mark_dirty(': 'CairoSurface $surface | void',
\ 'cairo_surface_set_device_offset(': 'CairoSurface $surface, float $x, float $y | void',
\ 'cairo_surface_set_fallback_resolution(': 'CairoSurface $surface, float $x, float $y | void',
\ 'cairo_surface_show_page(': 'CairoSurface $surface | void',
\ 'cairo_surface_status(': 'CairoSurface $surface | int',
\ 'cairo_surface_write_to_png(': 'CairoSurface $surface, resource $stream | void',
\ 'cairo_svg_surface_create(': 'string $file, float $width, float $height | CairoSvgSurface',
\ 'cairo_svg_surface_restrict_to_version(': 'CairoSvgSurface $surface, int $version | void',
\ 'cairo_svg_version_to_string(': 'int $version | string',
\ 'cairo_scale(': 'CairoContext $context, float $x, float $y | void',
\ 'cairo_get_line_cap(': 'CairoContext $context | int',
\ 'cairo_device_to_user(': 'CairoContext $context, float $x, float $y | array',
\ 'cairo_push_group_with_content(': 'CairoContext $context, int $content | void',
\ 'cairo_get_matrix(': 'CairoContext $context | void',
\ 'cairo_fill(': 'CairoContext $context | void',
\ 'cairo_status(': 'CairoContext $context | int',
\ 'cairo_get_dash_count(': 'CairoContext $context | int',
\ 'cairo_device_to_user_distance(': 'CairoContext $context, float $x, float $y | array',
\ 'cairo_get_font_matrix(': 'CairoContext $context | void',
\ 'cairo_set_font_matrix(': 'CairoContext $context, CairoMatrix $matrix | void',
\ 'cairo_translate(': 'CairoContext $context, float $x, float $y | void',
\ 'cairo_fill_preserve(': 'CairoContext $context | void',
\ 'cairo_arc(': 'CairoContext $context, float $x, float $y, float $radius, float $angle1, float $angle2 | void',
\ 'cairo_available_fonts(': 'void | array',
\ 'cairo_set_line_width(': 'CairoContext $context, float $width | void',
\ 'cairo_copy_page(': 'CairoContext $context | void',
\ 'cairo_get_tolerance(': 'CairoContext $context | float',
\ 'cairo_matrix_init_identity(': 'void | object',
\ 'cairo_paint(': 'CairoContext $context | void',
\ 'cairo_show_page(': 'CairoContext $context | void',
\ 'cairo_set_miter_limit(': 'CairoContext $context, float $limit | void',
\ 'cairo_append_path(': 'CairoContext $context, CairoPath $path | void',
\ 'cairo_set_fill_rule(': 'CairoContext $context, int $setting | void',
\ 'cairo_font_extents(': 'CairoContext $context | array',
\ 'cairo_get_miter_limit(': 'CairoContext $context | float',
\ 'cairo_text_extents(': 'CairoContext $context | array',
\ 'cairo_set_matrix(': 'CairoContext $context, CairoMatrix $matrix | void',
\ 'cairo_clip_rectangle_list(': 'CairoContext $context | array',
\ 'cairo_get_line_width(': 'CairoContext $context | float',
\ 'cairo_set_tolerance(': 'CairoContext $context, float $tolerance | void',
\ 'cairo_svg_get_versions(': 'void | array',
\ 'cairo_get_font_face(': 'CairoContext $context | void',
\ 'cairo_matrix_init_rotate(': 'float $radians | object',
\ 'cairo_path_extents(': 'CairoContext $context | array',
\ 'cairo_font_face_get_type(': 'CairoFontFace $fontface | int',
\ 'cairo_curve_to(': 'CairoContext $context, float $x1, float $y1, float $x2, float $y2, float $x3, float $y3 | void',
\ 'cairo_mask_surface(': 'CairoContext $context, CairoSurface $surface [, float $x [, float $y]] | void',
\ 'cairo_get_font_options(': 'CairoContext $context | void',
\ 'cairo_mask(': 'CairoContext $context, CairoPattern $pattern | void',
\ 'cairo_rel_move_to(': 'CairoContext $context, float $x, float $y | void',
\ 'cairo_arc_negative(': 'CairoContext $context, float $x, float $y, float $radius, float $angle1, float $angle2 | void',
\ 'cairo_matrix_scale(': 'CairoContext $context, float $sx, float $sy | void',
\ 'cairo_set_operator(': 'CairoContext $context, int $setting | void',
\ 'cairo_font_face_status(': 'CairoFontFace $fontface | int',
\ 'cairo_in_fill(': 'CairoContext $context, float $x, float $y | bool',
\ 'cairo_line_to(': 'CairoContext $context, float $x, float $y | void',
\ 'cairo_stroke_extents(': 'CairoContext $context | array',
\ 'cairo_set_font_options(': 'CairoContext $context, CairoFontOptions $fontoptions | void',
\ 'cairo_reset_clip(': 'CairoContext $context | void',
\ 'cairo_matrix_rotate(': 'CairoContext $context, string $radians | void',
\ 'cairo_get_line_join(': 'CairoContext $context | int',
\ 'cairo_rectangle(': 'CairoContext $context, float $x, float $y, float $width, float $height | void',
\ 'cairo_set_line_join(': 'CairoContext $context, int $setting | void',
\ 'cairo_close_path(': 'CairoContext $context | void',
\ 'cairo_get_target(': 'CairoContext $context | void',
\ 'cairo_status_to_string(': 'int $status | string',
\ 'cairo_push_group(': 'CairoContext $context | void',
\ 'cairo_move_to(': 'CairoContext $context, float $x, float $y | void',
\ 'cairo_text_path(': 'CairoContext $context, string $text | void',
\ 'cairo_stroke_preserve(': 'CairoContext $context | void',
\ 'cairo_get_source(': 'CairoContext $context | void',
\ 'cairo_save(': 'CairoContext $context | void',
\ 'cairo_user_to_device_distance(': 'CairoContext $context, float $x, float $y | array',
\ 'cairo_get_operator(': 'CairoContext $context | int',
\ 'cairo_new_sub_path(': 'CairoContext $context | void',
\ 'cairo_set_antialias(': 'CairoContext $context [, int $antialias] | void',
\ 'cairo_rel_line_to(': 'CairoContext $context, float $x, float $y | void',
\ 'cairo_get_dash(': 'CairoContext $context | array',
\ 'cairo_user_to_device(': 'CairoContext $context, float $x, float $y | array',
\ 'cairo_rotate(': 'CairoContext $context, float $angle | void',
\ 'cairo_restore(': 'CairoContext $context | void',
\ 'cairo_clip_preserve(': 'CairoContext $context | void',
\ 'cairo_set_source(': 'CairoContext $context, float $red, float $green, float $blue | void',
\ 'cairo_version(': 'void | int',
\ 'cairo_matrix_init_scale(': 'float $sx, float $sy | object',
\ 'cairo_stroke(': 'CairoContext $context | void',
\ 'cairo_set_source_surface(': 'CairoContext $context, CairoSurface $surface [, float $x [, float $y]] | void',
\ 'cairo_set_font_face(': 'CairoContext $context, CairoFontFace $fontface | void',
\ 'cairo_show_text(': 'CairoContext $context, string $text | void',
\ 'cairo_available_surfaces(': 'void | array',
\ 'cairo_set_dash(': 'CairoContext $context, array $dashes [, float $offset] | void',
\ 'cairo_copy_path(': 'CairoContext $context | CairoPath',
\ 'cairo_select_font_face(': 'CairoContext $context, string $family [, int $slant [, int $weight]] | void',
\ 'cairo_get_antialias(': 'CairoContext $context | int',
\ 'cairo_get_fill_rule(': 'CairoContext $context | int',
\ 'cairo_set_font_size(': 'CairoContext $context, float $size | void',
\ 'cairo_transform(': 'CairoContext $context, CairoMatrix $matrix | void',
\ 'cairo_copy_path_flat(': 'CairoContext $context | CairoPath',
\ 'cairo_clip(': 'CairoContext $context | void',
\ 'cairo_glyph_path(': 'CairoContext $context, array $glyphs | void',
\ 'cairo_identity_matrix(': 'CairoContext $context | void',
\ 'cairo_matrix_init_translate(': 'float $tx, float $ty | object',
\ 'cairo_rel_curve_to(': 'CairoContext $context, float $x1, float $y1, float $x2, float $y2, float $x3, float $y3 | void',
\ 'cairo_new_path(': 'CairoContext $context | void',
\ 'cairo_get_group_target(': 'CairoContext $context | void',
\ 'cairo_has_current_point(': 'CairoContext $context | bool',
\ 'cairo_pop_group_to_source(': 'CairoContext $context | void',
\ 'cairo_clip_extents(': 'CairoContext $context | array',
\ 'cairo_matrix_init(': '[ float $xx = 1.0 [, float $yx = 0.0 [, float $xy = 0.0 [, float $yy = 1.0 [, float $x0 = 0.0 [, float $y0 = 0.0]]]]]] | object',
\ 'cairo_paint_with_alpha(': 'CairoContext $context, float $alpha | void',
\ 'cairo_version_string(': 'void | string',
\ 'cairo_get_current_point(': 'CairoContext $context | array',
\ 'cairo_pop_group(': 'CairoContext $context | void',
\ 'cairo_get_scaled_font(': 'CairoContext $context | void',
\ 'cairo_set_line_cap(': 'CairoContext $context, int $setting | void',
\ 'cairo_fill_extents(': 'CairoContext $context | array',
\ 'cairo_in_stroke(': 'CairoContext $context, float $x, float $y | bool',
\ 'cairo_set_scaled_font(': 'CairoContext $context, CairoScaledFont $scaledfont | void',
\ }
let g:phpcomplete_builtin['functions']['calendar'] = {
\ 'cal_days_in_month(': 'int $calendar, int $month, int $year | int',
\ 'cal_from_jd(': 'int $jd, int $calendar | array',
\ 'cal_info(': '[ int $calendar = -1] | array',
\ 'cal_to_jd(': 'int $calendar, int $month, int $day, int $year | int',
\ 'easter_date(': '[ int $year = date("Y") [, int $method = CAL_EASTER_DEFAULT]] | int',
\ 'easter_days(': '[ int $year = date("Y") [, int $method = CAL_EASTER_DEFAULT]] | int',
\ 'frenchtojd(': 'int $month, int $day, int $year | int',
\ 'gregoriantojd(': 'int $month, int $day, int $year | int',
\ 'jddayofweek(': 'int $julianday [, int $mode = CAL_DOW_DAYNO] | mixed',
\ 'jdmonthname(': 'int $julianday, int $mode | string',
\ 'jdtofrench(': 'int $juliandaycount | string',
\ 'jdtogregorian(': 'int $julianday | string',
\ 'jdtojewish(': 'int $juliandaycount [, bool $hebrew = FALSE [, int $fl = 0]] | string',
\ 'jdtojulian(': 'int $julianday | string',
\ 'jdtounix(': 'int $jday | int',
\ 'jewishtojd(': 'int $month, int $day, int $year | int',
\ 'juliantojd(': 'int $month, int $day, int $year | int',
\ 'unixtojd(': '[ int $timestamp = time()] | int',
\ }
let g:phpcomplete_builtin['functions']['function_handling'] = {
\ 'call_user_func_array(': 'callable $callback, array $param_arr | mixed',
\ 'call_user_func(': 'callable $callback [, mixed $...] | mixed',
\ 'create_function(': 'string $args, string $code | string',
\ 'forward_static_call_array(': 'callable $function, array $parameters | mixed',
\ 'forward_static_call(': 'callable $function [, mixed $...] | mixed',
\ 'func_get_arg(': 'int $arg_num | mixed',
\ 'func_get_args(': 'void | array',
\ 'func_num_args(': 'void | int',
\ 'function_exists(': 'string $function_name | bool',
\ 'get_defined_functions(': '[ bool $exclude_disabled = FALSE] | array',
\ 'register_shutdown_function(': 'callable $callback [, mixed $...] | void',
\ 'register_tick_function(': 'callable $function [, mixed $...] | bool',
\ 'unregister_tick_function(': 'callable $function | void',
\ }
let g:phpcomplete_builtin['functions']['chdb'] = {
\ 'chdb_create(': 'string $pathname, array $data | bool',
\ }
let g:phpcomplete_builtin['functions']['directories'] = {
\ 'chdir(': 'string $directory | bool',
\ 'chroot(': 'string $directory | bool',
\ 'closedir(': '[ resource $dir_handle] | void',
\ 'dir(': 'string $directory [, resource $context] | Directory',
\ 'getcwd(': 'void | string',
\ 'opendir(': 'string $path [, resource $context] | resource',
\ 'readdir(': '[ resource $dir_handle] | string',
\ 'rewinddir(': '[ resource $dir_handle] | void',
\ 'scandir(': 'string $directory [, int $sorting_order = SCANDIR_SORT_ASCENDING [, resource $context]] | array',
\ }
let g:phpcomplete_builtin['functions']['date_time'] = {
\ 'checkdate(': 'int $month, int $day, int $year | bool',
\ 'date_default_timezone_get(': 'void | string',
\ 'date_default_timezone_set(': 'string $timezone_identifier | bool',
\ 'date_parse_from_format(': 'string $format, string $date | array',
\ 'date_parse(': 'string $date | array',
\ 'date_sun_info(': 'int $time, float $latitude, float $longitude | array',
\ 'date_sunrise(': 'int $timestamp [, int $format = SUNFUNCS_RET_STRING [, float $latitude = ini_get("date.default_latitude") [, float $longitude = ini_get("date.default_longitude") [, float $zenith = ini_get("date.sunrise_zenith") [, float $gmt_offset = 0]]]]] | mixed',
\ 'date_sunset(': 'int $timestamp [, int $format = SUNFUNCS_RET_STRING [, float $latitude = ini_get("date.default_latitude") [, float $longitude = ini_get("date.default_longitude") [, float $zenith = ini_get("date.sunset_zenith") [, float $gmt_offset = 0]]]]] | mixed',
\ 'date(': 'string $format [, int $timestamp = time()] | string',
\ 'getdate(': '[ int $timestamp = time()] | array',
\ 'gettimeofday(': '[ bool $return_float = FALSE] | mixed',
\ 'gmdate(': 'string $format [, int $timestamp = time()] | string',
\ 'gmmktime(': '[ int $hour = gmdate("H") [, int $minute = gmdate("i") [, int $second = gmdate("s") [, int $month = gmdate("n") [, int $day = gmdate("j") [, int $year = gmdate("Y") [, int $is_dst = -1]]]]]]] | int',
\ 'gmstrftime(': 'string $format [, int $timestamp = time()] | string',
\ 'idate(': 'string $format [, int $timestamp = time()] | int',
\ 'localtime(': '[ int $timestamp = time() [, bool $is_associative = FALSE]] | array',
\ 'microtime(': '[ bool $get_as_float = FALSE] | mixed',
\ 'mktime(': '[ int $hour = date("H") [, int $minute = date("i") [, int $second = date("s") [, int $month = date("n") [, int $day = date("j") [, int $year = date("Y") [, int $is_dst = -1]]]]]]] | int',
\ 'strftime(': 'string $format [, int $timestamp = time()] | string',
\ 'strptime(': 'string $date, string $format | array',
\ 'strtotime(': 'string $time [, int $now = time()] | int',
\ 'time(': 'void | int',
\ 'timezone_name_from_abbr(': 'string $abbr [, int $gmtOffset = -1 [, int $isdst = -1]] | string',
\ 'timezone_version_get(': 'void | string',
\ 'timezone_location_get(': 'DateTimeZone $object | array',
\ 'date_create_immutable_from_format(': 'string $format, string $time [, DateTimeZone $timezone] | DateTimeImmutable',
\ 'date_create_from_format(': 'string $format, string $time [, DateTimeZone $timezone] | DateTime',
\ 'date_create(': '[ string $time = "now" [, DateTimeZone $timezone = NULL]] | DateTime',
\ 'date_time_set(': 'DateTime $object, int $hour, int $minute [, int $second = 0 [, int $microseconds = 0]] | DateTime',
\ 'timezone_offset_get(': 'DateTimeZone $object, DateTimeInterface $datetime | int',
\ 'date_create_immutable(': '[ string $time = "now" [, DateTimeZone $timezone = NULL]] | DateTimeImmutable',
\ 'date_get_last_errors(': 'void | array',
\ 'timezone_name_get(': 'DateTimeZone $object | string',
\ 'date_diff(': 'DateTimeInterface $datetime1, DateTimeInterface $datetime2 [, bool $absolute = FALSE] | DateInterval',
\ 'date_timezone_get(': 'DateTimeInterface $object | DateTimeZone',
\ 'date_sub(': 'DateTime $object, DateInterval $interval | DateTime',
\ 'date_timezone_set(': 'DateTime $object, DateTimeZone $timezone | DateTime',
\ 'date_format(': 'DateTimeInterface $object, string $format | string',
\ 'date_add(': 'DateTime $object, DateInterval $interval | DateTime',
\ 'date_timestamp_get(': 'DateTimeInterface $object | int',
\ 'timezone_abbreviations_list(': 'void | array',
\ 'timezone_transitions_get(': 'DateTimeZone $object [, int $timestamp_begin = PHP_INT_MIN [, int $timestamp_end = PHP_INT_MAX]] | array',
\ 'date_offset_get(': 'DateTimeInterface $object | int',
\ 'date_modify(': 'DateTime $object, string $modify | DateTime',
\ 'date_timestamp_set(': 'DateTime $object, int $unixtimestamp | DateTime',
\ 'date_date_set(': 'DateTime $object, int $year, int $month, int $day | DateTime',
\ 'timezone_open(': 'string $timezone | DateTimeZone',
\ 'date_isodate_set(': 'DateTime $object, int $year, int $week [, int $day = 1] | DateTime',
\ }
let g:phpcomplete_builtin['functions']['network'] = {
\ 'checkdnsrr(': 'string $host [, string $type = "MX"] | bool',
\ 'closelog(': 'void | bool',
\ 'define_syslog_variables(': 'void | void',
\ 'dns_get_record(': 'string $hostname [, int $type = DNS_ANY [, array &$authns [, array &$addtl [, bool $raw = FALSE]]]] | array',
\ 'fsockopen(': 'string $hostname [, int $port = -1 [, int &$errno [, string &$errstr [, float $timeout = ini_get("default_socket_timeout")]]]] | resource',
\ 'gethostbyaddr(': 'string $ip_address | string',
\ 'gethostbyname(': 'string $hostname | string',
\ 'gethostbynamel(': 'string $hostname | array',
\ 'gethostname(': 'void | string',
\ 'getmxrr(': 'string $hostname, array &$mxhosts [, array &$weight] | bool',
\ 'getprotobyname(': 'string $name | int',
\ 'getprotobynumber(': 'int $number | string',
\ 'getservbyname(': 'string $service, string $protocol | int',
\ 'getservbyport(': 'int $port, string $protocol | string',
\ 'header_register_callback(': 'callable $callback | bool',
\ 'header_remove(': '[ string $name] | void',
\ 'header(': 'string $header [, bool $replace = TRUE [, int $http_response_code]] | void',
\ 'headers_list(': 'void | array',
\ 'headers_sent(': '[ string &$file [, int &$line]] | bool',
\ 'http_response_code(': '[ int $response_code] | mixed',
\ 'inet_ntop(': 'string $in_addr | string',
\ 'inet_pton(': 'string $address | string',
\ 'ip2long(': 'string $ip_address | int',
\ 'long2ip(': 'int $proper_address | string',
\ 'openlog(': 'string $ident, int $option, int $facility | bool',
\ 'pfsockopen(': 'string $hostname [, int $port = -1 [, int &$errno [, string &$errstr [, float $timeout = ini_get("default_socket_timeout")]]]] | resource',
\ 'setcookie(': 'string $name [, string $value = "" [, int $expires = 0 [, string $path = "" [, string $domain = "" [, bool $secure = FALSE [, bool $httponly = FALSE]]]]]] | bool',
\ 'setrawcookie(': 'string $name [, string $value [, int $expires = 0 [, string $path [, string $domain [, bool $secure = FALSE [, bool $httponly = FALSE]]]]]] | bool',
\ 'socket_get_status(': 'socket_get_status — Alias of stream_get_meta_data()',
\ 'socket_set_blocking(': 'socket_set_blocking — Alias of stream_set_blocking()',
\ 'socket_set_timeout(': 'socket_set_timeout — Alias of stream_set_timeout()',
\ 'syslog(': 'int $priority, string $message | bool',
\ }
let g:phpcomplete_builtin['functions']['spl'] = {
\ 'class_implements(': 'mixed $class [, bool $autoload = TRUE] | array',
\ 'class_parents(': 'mixed $class [, bool $autoload = TRUE] | array',
\ 'class_uses(': 'mixed $class [, bool $autoload = TRUE] | array',
\ 'iterator_apply(': 'Traversable $iterator, callable $function [, array $args = NULL] | int',
\ 'iterator_count(': 'Traversable $iterator | int',
\ 'iterator_to_array(': 'Traversable $iterator [, bool $use_keys = TRUE] | array',
\ 'spl_autoload_call(': 'string $class_name | void',
\ 'spl_autoload_extensions(': '[ string $file_extensions] | string',
\ 'spl_autoload_functions(': 'void | array',
\ 'spl_autoload_register(': '[ callable $autoload_function [, bool $throw = TRUE [, bool $prepend = FALSE]]] | bool',
\ 'spl_autoload_unregister(': 'mixed $autoload_function | bool',
\ 'spl_autoload(': 'string $class_name [, string $file_extensions = spl_autoload_extensions()] | void',
\ 'spl_classes(': 'void | array',
\ 'spl_object_hash(': 'object $obj | string',
\ 'spl_object_id(': 'object $obj | int',
\ }
let g:phpcomplete_builtin['functions']['classkit'] = {
\ 'classkit_import(': 'string $filename | array',
\ 'classkit_method_add(': 'string $classname, string $methodname, string $args, string $code [, int $flags = CLASSKIT_ACC_PUBLIC] | bool',
\ 'classkit_method_copy(': 'string $dClass, string $dMethod, string $sClass [, string $sMethod] | bool',
\ 'classkit_method_redefine(': 'string $classname, string $methodname, string $args, string $code [, int $flags = CLASSKIT_ACC_PUBLIC] | bool',
\ 'classkit_method_remove(': 'string $classname, string $methodname | bool',
\ 'classkit_method_rename(': 'string $classname, string $methodname, string $newname | bool',
\ }
let g:phpcomplete_builtin['functions']['com'] = {
\ 'com_create_guid(': 'void | string',
\ 'com_event_sink(': 'variant $comobject, object $sinkobject [, mixed $sinkinterface] | bool',
\ 'com_get_active_object(': 'string $progid [, int $code_page] | variant',
\ 'com_load_typelib(': 'string $typelib_name [, bool $case_sensitive = TRUE] | bool',
\ 'com_message_pump(': '[ int $timeoutms = 0] | bool',
\ 'com_print_typeinfo(': 'object $comobject [, string $dispinterface = NULL [, bool $wantsink = FALSE]] | bool',
\ 'variant_abs(': 'mixed $val | variant',
\ 'variant_add(': 'mixed $left, mixed $right | variant',
\ 'variant_and(': 'mixed $left, mixed $right | variant',
\ 'variant_cast(': 'variant $variant, int $type | variant',
\ 'variant_cat(': 'mixed $left, mixed $right | variant',
\ 'variant_cmp(': 'mixed $left, mixed $right [, int $lcid [, int $flags]] | int',
\ 'variant_date_from_timestamp(': 'int $timestamp | variant',
\ 'variant_date_to_timestamp(': 'variant $variant | int',
\ 'variant_div(': 'mixed $left, mixed $right | variant',
\ 'variant_eqv(': 'mixed $left, mixed $right | variant',
\ 'variant_fix(': 'mixed $variant | variant',
\ 'variant_get_type(': 'variant $variant | int',
\ 'variant_idiv(': 'mixed $left, mixed $right | variant',
\ 'variant_imp(': 'mixed $left, mixed $right | variant',
\ 'variant_int(': 'mixed $variant | variant',
\ 'variant_mod(': 'mixed $left, mixed $right | variant',
\ 'variant_mul(': 'mixed $left, mixed $right | variant',
\ 'variant_neg(': 'mixed $variant | variant',
\ 'variant_not(': 'mixed $variant | variant',
\ 'variant_or(': 'mixed $left, mixed $right | variant',
\ 'variant_pow(': 'mixed $left, mixed $right | variant',
\ 'variant_round(': 'mixed $variant, int $decimals | mixed',
\ 'variant_set_type(': 'variant $variant, int $type | void',
\ 'variant_set(': 'variant $variant, mixed $value | void',
\ 'variant_sub(': 'mixed $left, mixed $right | variant',
\ 'variant_xor(': 'mixed $left, mixed $right | variant',
\ }
let g:phpcomplete_builtin['functions']['commonmark'] = {
\ 'CommonMark\Parse(': 'string $content [, int $options] | CommonMark\Node',
\ 'CommonMark\Render\HTML(': 'CommonMark\Node $node [, int $options] | string',
\ 'CommonMark\Render\Latex(': 'CommonMark\Node $node [, int $options [, int $width]] | string',
\ 'CommonMark\Render\Man(': 'CommonMark\Node $node [, int $options [, int $width]] | string',
\ 'CommonMark\Render\XML(': 'CommonMark\Node $node [, int $options] | string',
\ 'CommonMark\Render(': 'CommonMark\Node $node [, int $options [, int $width]] | string',
\ }
let g:phpcomplete_builtin['functions']['misc'] = {
\ 'connection_aborted(': 'void | int',
\ 'connection_status(': 'void | int',
\ 'constant(': 'string $name | mixed',
\ 'define(': 'string $name, mixed $value [, bool $case_insensitive = FALSE] | bool',
\ 'defined(': 'string $name | bool',
\ 'eval(': 'string $code | mixed',
\ 'exit(': '[ string $status] | void',
\ 'get_browser(': '[ string $user_agent [, bool $return_array = FALSE]] | mixed',
\ '__halt_compiler(': 'void | void',
\ 'highlight_file(': 'string $filename [, bool $return = FALSE] | mixed',
\ 'highlight_string(': 'string $str [, bool $return = FALSE] | mixed',
\ 'hrtime(': '[ bool $get_as_number = FALSE] | mixed',
\ 'ignore_user_abort(': '[ bool $value] | int',
\ 'pack(': 'string $format [, mixed $...] | string',
\ 'php_check_syntax(': 'string $filename [, string &$error_message] | bool',
\ 'php_strip_whitespace(': 'string $filename | string',
\ 'sapi_windows_cp_conv(': 'int|string $in_codepage, int|string $out_codepage, string $subject | string',
\ 'sapi_windows_cp_get(': 'string $kind | int',
\ 'sapi_windows_cp_is_utf8(': 'void | bool',
\ 'sapi_windows_cp_set(': 'int $cp | bool',
\ 'sapi_windows_vt100_support(': 'resource $stream [, bool $enable] | bool',
\ 'show_source(': 'show_source — Alias of highlight_file()',
\ 'sleep(': 'int $seconds | int',
\ 'sys_getloadavg(': 'void | array',
\ 'time_nanosleep(': 'int $seconds, int $nanoseconds | mixed',
\ 'time_sleep_until(': 'float $timestamp | bool',
\ 'uniqid(': '[ string $prefix = "" [, bool $more_entropy = FALSE]] | string',
\ 'unpack(': 'string $format, string $data [, int $offset = 0] | array',
\ 'usleep(': 'int $micro_seconds | void',
\ }
let g:phpcomplete_builtin['functions']['crack'] = {
\ 'crack_check(': 'resource $dictionary, string $password | bool',
\ 'crack_closedict(': '[ resource $dictionary] | bool',
\ 'crack_getlastmessage(': 'void | string',
\ 'crack_opendict(': 'string $dictionary | resource',
\ }
let g:phpcomplete_builtin['functions']['ctype'] = {
\ 'ctype_alnum(': 'string $text | bool',
\ 'ctype_alpha(': 'string $text | bool',
\ 'ctype_cntrl(': 'string $text | bool',
\ 'ctype_digit(': 'string $text | bool',
\ 'ctype_graph(': 'string $text | bool',
\ 'ctype_lower(': 'string $text | bool',
\ 'ctype_print(': 'string $text | bool',
\ 'ctype_punct(': 'string $text | bool',
\ 'ctype_space(': 'string $text | bool',
\ 'ctype_upper(': 'string $text | bool',
\ 'ctype_xdigit(': 'string $text | bool',
\ }
let g:phpcomplete_builtin['functions']['cubrid'] = {
\ 'cubrid_affected_rows(': '[ resource $conn_identifier] | int',
\ 'cubrid_bind(': 'resource $req_identifier, int $bind_index, mixed $bind_value [, string $bind_value_type] | bool',
\ 'cubrid_client_encoding(': '[ resource $conn_identifier] | string',
\ 'cubrid_close_prepare(': 'resource $req_identifier | bool',
\ 'cubrid_close_request(': 'resource $req_identifier | bool',
\ 'cubrid_close(': '[ resource $conn_identifier] | bool',
\ 'cubrid_col_get(': 'resource $conn_identifier, string $oid, string $attr_name | array',
\ 'cubrid_col_size(': 'resource $conn_identifier, string $oid, string $attr_name | int',
\ 'cubrid_column_names(': 'resource $req_identifier | array',
\ 'cubrid_column_types(': 'resource $req_identifier | array',
\ 'cubrid_commit(': 'resource $conn_identifier | bool',
\ 'cubrid_connect_with_url(': 'string $conn_url [, string $userid [, string $passwd [, bool $new_link = FALSE]]] | resource',
\ 'cubrid_connect(': 'string $host, int $port, string $dbname [, string $userid [, string $passwd [, bool $new_link = FALSE]]] | resource',
\ 'cubrid_current_oid(': 'resource $req_identifier | string',
\ 'cubrid_data_seek(': 'resource $result, int $row_number | bool',
\ 'cubrid_db_name(': 'array $result, int $index | string',
\ 'cubrid_disconnect(': '[ resource $conn_identifier] | bool',
\ 'cubrid_drop(': 'resource $conn_identifier, string $oid | bool',
\ 'cubrid_errno(': '[ resource $conn_identifier] | int',
\ 'cubrid_error_code_facility(': 'void | int',
\ 'cubrid_error_code(': 'void | int',
\ 'cubrid_error_msg(': 'void | string',
\ 'cubrid_error(': '[ resource $connection] | string',
\ 'cubrid_execute(': 'resource $conn_identifier, string $sql [, int $option = 0] | resource',
\ 'cubrid_fetch_array(': 'resource $result [, int $type = CUBRID_BOTH] | array',
\ 'cubrid_fetch_assoc(': 'resource $result [, int $type] | array',
\ 'cubrid_fetch_field(': 'resource $result [, int $field_offset = 0] | object',
\ 'cubrid_fetch_lengths(': 'resource $result | array',
\ 'cubrid_fetch_object(': 'resource $result [, string $class_name [, array $params [, int $type]]] | object',
\ 'cubrid_fetch_row(': 'resource $result [, int $type] | array',
\ 'cubrid_fetch(': 'resource $result [, int $type = CUBRID_BOTH] | mixed',
\ 'cubrid_field_flags(': 'resource $result, int $field_offset | string',
\ 'cubrid_field_len(': 'resource $result, int $field_offset | int',
\ 'cubrid_field_name(': 'resource $result, int $field_offset | string',
\ 'cubrid_field_seek(': 'resource $result [, int $field_offset = 0] | bool',
\ 'cubrid_field_table(': 'resource $result, int $field_offset | string',
\ 'cubrid_field_type(': 'resource $result, int $field_offset | string',
\ 'cubrid_free_result(': 'resource $req_identifier | bool',
\ 'cubrid_get_autocommit(': 'resource $conn_identifier | bool',
\ 'cubrid_get_charset(': 'resource $conn_identifier | string',
\ 'cubrid_get_class_name(': 'resource $conn_identifier, string $oid | string',
\ 'cubrid_get_client_info(': 'void | string',
\ 'cubrid_get_db_parameter(': 'resource $conn_identifier | array',
\ 'cubrid_get_query_timeout(': 'resource $req_identifier | int',
\ 'cubrid_get_server_info(': 'resource $conn_identifier | string',
\ 'cubrid_get(': 'resource $conn_identifier, string $oid [, mixed $attr] | mixed',
\ 'cubrid_insert_id(': '[ resource $conn_identifier] | string',
\ 'cubrid_is_instance(': 'resource $conn_identifier, string $oid | int',
\ 'cubrid_list_dbs(': '[ resource $conn_identifier] | array',
\ 'cubrid_load_from_glo(': 'resource $conn_identifier, string $oid, string $file_name | int',
\ 'cubrid_lob_close(': 'array $lob_identifier_array | bool',
\ 'cubrid_lob_export(': 'resource $conn_identifier, resource $lob_identifier, string $path_name | bool',
\ 'cubrid_lob_get(': 'resource $conn_identifier, string $sql | array',
\ 'cubrid_lob_send(': 'resource $conn_identifier, resource $lob_identifier | bool',
\ 'cubrid_lob_size(': 'resource $lob_identifier | string',
\ 'cubrid_lob2_bind(': 'resource $req_identifier, int $bind_index, mixed $bind_value [, string $bind_value_type] | bool',
\ 'cubrid_lob2_close(': 'resource $lob_identifier | bool',
\ 'cubrid_lob2_export(': 'resource $lob_identifier, string $file_name | bool',
\ 'cubrid_lob2_import(': 'resource $lob_identifier, string $file_name | bool',
\ 'cubrid_lob2_new(': '[ resource $conn_identifier [, string $type = "BLOB"]] | resource',
\ 'cubrid_lob2_read(': 'resource $lob_identifier, int $len | string',
\ 'cubrid_lob2_seek(': 'resource $lob_identifier, int $offset [, int $origin = CUBRID_CURSOR_CURRENT] | bool',
\ 'cubrid_lob2_seek64(': 'resource $lob_identifier, string $offset [, int $origin = CUBRID_CURSOR_CURRENT] | bool',
\ 'cubrid_lob2_size(': 'resource $lob_identifier | int',
\ 'cubrid_lob2_size64(': 'resource $lob_identifier | string',
\ 'cubrid_lob2_tell(': 'resource $lob_identifier | int',
\ 'cubrid_lob2_tell64(': 'resource $lob_identifier | string',
\ 'cubrid_lob2_write(': 'resource $lob_identifier, string $buf | bool',
\ 'cubrid_lock_read(': 'resource $conn_identifier, string $oid | bool',
\ 'cubrid_lock_write(': 'resource $conn_identifier, string $oid | bool',
\ 'cubrid_move_cursor(': 'resource $req_identifier, int $offset [, int $origin = CUBRID_CURSOR_CURRENT] | bool',
\ 'cubrid_new_glo(': 'resource $conn_identifier, string $class_name, string $file_name | string',
\ 'cubrid_next_result(': 'resource $result | bool',
\ 'cubrid_num_cols(': 'resource $result | int',
\ 'cubrid_num_fields(': 'resource $result | int',
\ 'cubrid_num_rows(': 'resource $result | int',
\ 'cubrid_pconnect_with_url(': 'string $conn_url [, string $userid [, string $passwd]] | resource',
\ 'cubrid_pconnect(': 'string $host, int $port, string $dbname [, string $userid [, string $passwd]] | resource',
\ 'cubrid_ping(': '[ resource $conn_identifier] | bool',
\ 'cubrid_prepare(': 'resource $conn_identifier, string $prepare_stmt [, int $option = 0] | resource',
\ 'cubrid_put(': 'resource $conn_identifier, string $oid [, string $attr [, mixed $value]] | bool',
\ 'cubrid_query(': 'string $query [, resource $conn_identifier] | resource',
\ 'cubrid_real_escape_string(': 'string $unescaped_string [, resource $conn_identifier] | string',
\ 'cubrid_result(': 'resource $result, int $row [, mixed $field = 0] | string',
\ 'cubrid_rollback(': 'resource $conn_identifier | bool',
\ 'cubrid_save_to_glo(': 'resource $conn_identifier, string $oid, string $file_name | int',
\ 'cubrid_schema(': 'resource $conn_identifier, int $schema_type [, string $class_name [, string $attr_name]] | array',
\ 'cubrid_send_glo(': 'resource $conn_identifier, string $oid | int',
\ 'cubrid_seq_drop(': 'resource $conn_identifier, string $oid, string $attr_name, int $index | bool',
\ 'cubrid_seq_insert(': 'resource $conn_identifier, string $oid, string $attr_name, int $index, string $seq_element | bool',
\ 'cubrid_seq_put(': 'resource $conn_identifier, string $oid, string $attr_name, int $index, string $seq_element | bool',
\ 'cubrid_set_add(': 'resource $conn_identifier, string $oid, string $attr_name, string $set_element | bool',
\ 'cubrid_set_autocommit(': 'resource $conn_identifier, bool $mode | bool',
\ 'cubrid_set_db_parameter(': 'resource $conn_identifier, int $param_type, int $param_value | bool',
\ 'cubrid_set_drop(': 'resource $conn_identifier, string $oid, string $attr_name, string $set_element | bool',
\ 'cubrid_set_query_timeout(': 'resource $req_identifier, int $timeout | bool',
\ 'cubrid_unbuffered_query(': 'string $query [, resource $conn_identifier] | resource',
\ 'cubrid_version(': 'void | string',
\ }
let g:phpcomplete_builtin['functions']['curl'] = {
\ 'curl_close(': 'resource $ch | void',
\ 'curl_copy_handle(': 'resource $ch | resource',
\ 'curl_errno(': 'resource $ch | int',
\ 'curl_error(': 'resource $ch | string',
\ 'curl_escape(': 'resource $ch, string $str | string',
\ 'curl_exec(': 'resource $ch | mixed',
\ 'curl_getinfo(': 'resource $ch [, int $opt] | mixed',
\ 'curl_init(': '[ string $url = NULL] | resource',
\ 'curl_multi_add_handle(': 'resource $mh, resource $ch | int',
\ 'curl_multi_close(': 'resource $mh | void',
\ 'curl_multi_errno(': 'resource $mh | int',
\ 'curl_multi_exec(': 'resource $mh, int &$still_running | int',
\ 'curl_multi_getcontent(': 'resource $ch | string',
\ 'curl_multi_info_read(': 'resource $mh [, int &$msgs_in_queue = NULL] | array',
\ 'curl_multi_init(': 'void | resource',
\ 'curl_multi_remove_handle(': 'resource $mh, resource $ch | int',
\ 'curl_multi_select(': 'resource $mh [, float $timeout = 1.0] | int',
\ 'curl_multi_setopt(': 'resource $mh, int $option, mixed $value | bool',
\ 'curl_multi_strerror(': 'int $errornum | string',
\ 'curl_pause(': 'resource $ch, int $bitmask | int',
\ 'curl_reset(': 'resource $ch | void',
\ 'curl_setopt_array(': 'resource $ch, array $options | bool',
\ 'curl_setopt(': 'resource $ch, int $option, mixed $value | bool',
\ 'curl_share_close(': 'resource $sh | void',
\ 'curl_share_errno(': 'resource $sh | int',
\ 'curl_share_init(': 'void | resource',
\ 'curl_share_setopt(': 'resource $sh, int $option, string $value | bool',
\ 'curl_share_strerror(': 'int $errornum | string',
\ 'curl_strerror(': 'int $errornum | string',
\ 'curl_unescape(': 'resource $ch, string $str | string',
\ 'curl_version(': '[ int $age = CURLVERSION_NOW] | array',
\ 'curl_file_create(': 'string $filename [, string $mimetype [, string $postname]] | CURLFile',
\ }
let g:phpcomplete_builtin['functions']['cyrus'] = {
\ 'cyrus_authenticate(': 'resource $connection [, string $mechlist [, string $service [, string $user [, int $minssf [, int $maxssf [, string $authname [, string $password]]]]]]] | void',
\ 'cyrus_bind(': 'resource $connection, array $callbacks | bool',
\ 'cyrus_close(': 'resource $connection | bool',
\ 'cyrus_connect(': '[ string $host [, string $port [, int $flags]]] | resource',
\ 'cyrus_query(': 'resource $connection, string $query | array',
\ 'cyrus_unbind(': 'resource $connection, string $trigger_name | bool',
\ }
let g:phpcomplete_builtin['functions']['ibm_db2'] = {
\ 'db2_autocommit(': 'resource $connection [, bool $value] | mixed',
\ 'db2_bind_param(': 'resource $stmt, int $parameter_number, string $variable_name [, int $parameter_type [, int $data_type = 0 [, int $precision = -1 [, int $scale = 0]]]] | bool',
\ 'db2_client_info(': 'resource $connection | object',
\ 'db2_close(': 'resource $connection | bool',
\ 'db2_column_privileges(': 'resource $connection [, string $qualifier [, string $schema [, string $table-name [, string $column-name]]]] | resource',
\ 'db2_columns(': 'resource $connection [, string $qualifier [, string $schema [, string $table-name [, string $column-name]]]] | resource',
\ 'db2_commit(': 'resource $connection | bool',
\ 'db2_conn_error(': '[ resource $connection] | string',
\ 'db2_conn_errormsg(': '[ resource $connection] | string',
\ 'db2_connect(': 'string $database, string $username, string $password [, array $options] | resource',
\ 'db2_cursor_type(': 'resource $stmt | int',
\ 'db2_escape_string(': 'string $string_literal | string',
\ 'db2_exec(': 'resource $connection, string $statement [, array $options] | resource',
\ 'db2_execute(': 'resource $stmt [, array $parameters] | bool',
\ 'db2_fetch_array(': 'resource $stmt [, int $row_number = -1] | array',
\ 'db2_fetch_assoc(': 'resource $stmt [, int $row_number = -1] | array',
\ 'db2_fetch_both(': 'resource $stmt [, int $row_number = -1] | array',
\ 'db2_fetch_object(': 'resource $stmt [, int $row_number = -1] | object',
\ 'db2_fetch_row(': 'resource $stmt [, int $row_number] | bool',
\ 'db2_field_display_size(': 'resource $stmt, mixed $column | int',
\ 'db2_field_name(': 'resource $stmt, mixed $column | string',
\ 'db2_field_num(': 'resource $stmt, mixed $column | int',
\ 'db2_field_precision(': 'resource $stmt, mixed $column | int',
\ 'db2_field_scale(': 'resource $stmt, mixed $column | int',
\ 'db2_field_type(': 'resource $stmt, mixed $column | string',
\ 'db2_field_width(': 'resource $stmt, mixed $column | int',
\ 'db2_foreign_keys(': 'resource $connection, string $qualifier, string $schema, string $table-name | resource',
\ 'db2_free_result(': 'resource $stmt | bool',
\ 'db2_free_stmt(': 'resource $stmt | bool',
\ 'db2_get_option(': 'resource $resource, string $option | string',
\ 'db2_last_insert_id(': 'resource $resource | string',
\ 'db2_lob_read(': 'resource $stmt, int $colnum, int $length | string',
\ 'db2_next_result(': 'resource $stmt | resource',
\ 'db2_num_fields(': 'resource $stmt | int',
\ 'db2_num_rows(': 'resource $stmt | int',
\ 'db2_pclose(': 'resource $resource | bool',
\ 'db2_pconnect(': 'string $database, string $username, string $password [, array $options] | resource',
\ 'db2_prepare(': 'resource $connection, string $statement [, array $options] | resource',
\ 'db2_primary_keys(': 'resource $connection, string $qualifier, string $schema, string $table-name | resource',
\ 'db2_procedure_columns(': 'resource $connection, string $qualifier, string $schema, string $procedure, string $parameter | resource',
\ 'db2_procedures(': 'resource $connection, string $qualifier, string $schema, string $procedure | resource',
\ 'db2_result(': 'resource $stmt, mixed $column | mixed',
\ 'db2_rollback(': 'resource $connection | bool',
\ 'db2_server_info(': 'resource $connection | object',
\ 'db2_set_option(': 'resource $resource, array $options, int $type | bool',
\ 'db2_special_columns(': 'resource $connection, string $qualifier, string $schema, string $table_name, int $scope | resource',
\ 'db2_statistics(': 'resource $connection, string $qualifier, string $schema, string $table-name, bool $unique | resource',
\ 'db2_stmt_error(': '[ resource $stmt] | string',
\ 'db2_stmt_errormsg(': '[ resource $stmt] | string',
\ 'db2_table_privileges(': 'resource $connection [, string $qualifier [, string $schema [, string $table_name]]] | resource',
\ 'db2_tables(': 'resource $connection [, string $qualifier [, string $schema [, string $table-name [, string $table-type]]]] | resource',
\ }
let g:phpcomplete_builtin['functions']['dba'] = {
\ 'dba_close(': 'resource $handle | void',
\ 'dba_delete(': 'string $key, resource $handle | bool',
\ 'dba_exists(': 'string $key, resource $handle | bool',
\ 'dba_fetch(': 'string $key, resource $handle | string',
\ 'dba_firstkey(': 'resource $handle | string',
\ 'dba_handlers(': '[ bool $full_info = FALSE] | array',
\ 'dba_insert(': 'string $key, string $value, resource $handle | bool',
\ 'dba_key_split(': 'mixed $key | mixed',
\ 'dba_list(': 'void | array',
\ 'dba_nextkey(': 'resource $handle | string',
\ 'dba_open(': 'string $path, string $mode [, string $handler [, mixed $...]] | resource',
\ 'dba_optimize(': 'resource $handle | bool',
\ 'dba_popen(': 'string $path, string $mode [, string $handler [, mixed $...]] | resource',
\ 'dba_replace(': 'string $key, string $value, resource $handle | bool',
\ 'dba_sync(': 'resource $handle | bool',
\ }
let g:phpcomplete_builtin['functions']['dbase'] = {
\ 'dbase_add_record(': 'resource $dbase_identifier, array $record | bool',
\ 'dbase_close(': 'resource $dbase_identifier | bool',
\ 'dbase_create(': 'string $filename, array $fields [, int $type = DBASE_TYPE_DBASE] | resource',
\ 'dbase_delete_record(': 'resource $dbase_identifier, int $record_number | bool',
\ 'dbase_get_header_info(': 'resource $dbase_identifier | array',
\ 'dbase_get_record_with_names(': 'resource $dbase_identifier, int $record_number | array',
\ 'dbase_get_record(': 'resource $dbase_identifier, int $record_number | array',
\ 'dbase_numfields(': 'resource $dbase_identifier | int',
\ 'dbase_numrecords(': 'resource $dbase_identifier | int',
\ 'dbase_open(': 'string $filename, int $mode | resource',
\ 'dbase_pack(': 'resource $dbase_identifier | bool',
\ 'dbase_replace_record(': 'resource $dbase_identifier, array $record, int $record_number | bool',
\ }
let g:phpcomplete_builtin['functions']['db_'] = {
\ 'dbplus_add(': 'resource $relation, array $tuple | int',
\ 'dbplus_aql(': 'string $query [, string $server [, string $dbpath]] | resource',
\ 'dbplus_chdir(': '[ string $newdir] | string',
\ 'dbplus_close(': 'resource $relation | mixed',
\ 'dbplus_curr(': 'resource $relation, array &$tuple | int',
\ 'dbplus_errcode(': '[ int $errno] | string',
\ 'dbplus_errno(': 'void | int',
\ 'dbplus_find(': 'resource $relation, array $constraints, mixed $tuple | int',
\ 'dbplus_first(': 'resource $relation, array &$tuple | int',
\ 'dbplus_flush(': 'resource $relation | int',
\ 'dbplus_freealllocks(': 'void | int',
\ 'dbplus_freelock(': 'resource $relation, string $tuple | int',
\ 'dbplus_freerlocks(': 'resource $relation | int',
\ 'dbplus_getlock(': 'resource $relation, string $tuple | int',
\ 'dbplus_getunique(': 'resource $relation, int $uniqueid | int',
\ 'dbplus_info(': 'resource $relation, string $key, array &$result | int',
\ 'dbplus_last(': 'resource $relation, array &$tuple | int',
\ 'dbplus_lockrel(': 'resource $relation | int',
\ 'dbplus_next(': 'resource $relation, array &$tuple | int',
\ 'dbplus_open(': 'string $name | resource',
\ 'dbplus_prev(': 'resource $relation, array &$tuple | int',
\ 'dbplus_rchperm(': 'resource $relation, int $mask, string $user, string $group | int',
\ 'dbplus_rcreate(': 'string $name, mixed $domlist [, bool $overwrite] | resource',
\ 'dbplus_rcrtexact(': 'string $name, resource $relation [, bool $overwrite] | mixed',
\ 'dbplus_rcrtlike(': 'string $name, resource $relation [, int $overwrite] | mixed',
\ 'dbplus_resolve(': 'string $relation_name | array',
\ 'dbplus_restorepos(': 'resource $relation, array $tuple | int',
\ 'dbplus_rkeys(': 'resource $relation, mixed $domlist | mixed',
\ 'dbplus_ropen(': 'string $name | resource',
\ 'dbplus_rquery(': 'string $query [, string $dbpath] | resource',
\ 'dbplus_rrename(': 'resource $relation, string $name | int',
\ 'dbplus_rsecindex(': 'resource $relation, mixed $domlist, int $type | mixed',
\ 'dbplus_runlink(': 'resource $relation | int',
\ 'dbplus_rzap(': 'resource $relation | int',
\ 'dbplus_savepos(': 'resource $relation | int',
\ 'dbplus_setindex(': 'resource $relation, string $idx_name | int',
\ 'dbplus_setindexbynumber(': 'resource $relation, int $idx_number | int',
\ 'dbplus_sql(': 'string $query [, string $server [, string $dbpath]] | resource',
\ 'dbplus_tcl(': 'int $sid, string $script | string',
\ 'dbplus_tremove(': 'resource $relation, array $tuple [, array &$current] | int',
\ 'dbplus_undo(': 'resource $relation | int',
\ 'dbplus_undoprepare(': 'resource $relation | int',
\ 'dbplus_unlockrel(': 'resource $relation | int',
\ 'dbplus_unselect(': 'resource $relation | int',
\ 'dbplus_update(': 'resource $relation, array $old, array $new | int',
\ 'dbplus_xlockrel(': 'resource $relation | int',
\ 'dbplus_xunlockrel(': 'resource $relation | int',
\ }
let g:phpcomplete_builtin['functions']['dbx'] = {
\ 'dbx_close(': 'object $link_identifier | int',
\ 'dbx_compare(': 'array $row_a, array $row_b, string $column_key [, int $flags = DBX_CMP_ASC | DBX_CMP_NATIVE] | int',
\ 'dbx_connect(': 'mixed $module, string $host, string $database, string $username, string $password [, int $persistent] | object',
\ 'dbx_error(': 'object $link_identifier | string',
\ 'dbx_escape_string(': 'object $link_identifier, string $text | string',
\ 'dbx_fetch_row(': 'object $result_identifier | mixed',
\ 'dbx_query(': 'object $link_identifier, string $sql_statement [, int $flags] | mixed',
\ 'dbx_sort(': 'object $result, string $user_compare_function | bool',
\ }
let g:phpcomplete_builtin['functions']['error_handling'] = {
\ 'debug_backtrace(': '[ int $options = DEBUG_BACKTRACE_PROVIDE_OBJECT [, int $limit = 0]] | array',
\ 'debug_print_backtrace(': '[ int $options = 0 [, int $limit = 0]] | void',
\ 'error_clear_last(': 'void | void',
\ 'error_get_last(': 'void | array',
\ 'error_log(': 'string $message [, int $message_type = 0 [, string $destination [, string $extra_headers]]] | bool',
\ 'error_reporting(': '[ int $level] | int',
\ 'restore_error_handler(': 'void | bool',
\ 'restore_exception_handler(': 'void | bool',
\ 'set_error_handler(': 'callable $error_handler [, int $error_types = E_ALL | E_STRICT] | mixed',
\ 'set_exception_handler(': 'callable $exception_handler | callable',
\ 'trigger_error(': 'string $error_msg [, int $error_type = E_USER_NOTICE] | bool',
\ }
let g:phpcomplete_builtin['functions']['zlib'] = {
\ 'deflate_add(': 'resource $context, string $data [, int $flush_mode = ZLIB_SYNC_FLUSH] | string',
\ 'deflate_init(': 'int $encoding [, array $options = array()] | resource',
\ 'gzclose(': 'resource $zp | bool',
\ 'gzcompress(': 'string $data [, int $level = -1 [, int $encoding = ZLIB_ENCODING_DEFLATE]] | string',
\ 'gzdecode(': 'string $data [, int $length] | string',
\ 'gzdeflate(': 'string $data [, int $level = -1 [, int $encoding = ZLIB_ENCODING_RAW]] | string',
\ 'gzencode(': 'string $data [, int $level = -1 [, int $encoding_mode = FORCE_GZIP]] | string',
\ 'gzeof(': 'resource $zp | int',
\ 'gzfile(': 'string $filename [, int $use_include_path = 0] | array',
\ 'gzgetc(': 'resource $zp | string',
\ 'gzgets(': 'resource $zp [, int $length] | string',
\ 'gzgetss(': 'resource $zp, int $length [, string $allowable_tags] | string',
\ 'gzinflate(': 'string $data [, int $length = 0] | string',
\ 'gzopen(': 'string $filename, string $mode [, int $use_include_path = 0] | resource',
\ 'gzpassthru(': 'resource $zp | int',
\ 'gzputs(': 'gzputs — Alias of gzwrite()',
\ 'gzread(': 'resource $zp, int $length | string',
\ 'gzrewind(': 'resource $zp | bool',
\ 'gzseek(': 'resource $zp, int $offset [, int $whence = SEEK_SET] | int',
\ 'gztell(': 'resource $zp | int',
\ 'gzuncompress(': 'string $data [, int $length = 0] | string',
\ 'gzwrite(': 'resource $zp, string $string [, int $length] | int',
\ 'inflate_add(': 'resource $context, string $encoded_data [, int $flush_mode = ZLIB_SYNC_FLUSH] | string',
\ 'inflate_get_read_len(': 'resource $resource | int',
\ 'inflate_get_status(': 'resource $resource | int',
\ 'inflate_init(': 'int $encoding [, array $options = array()] | resource',
\ 'readgzfile(': 'string $filename [, int $use_include_path = 0] | int',
\ 'zlib_decode(': 'string $data [, string $max_decoded_len] | string',
\ 'zlib_encode(': 'string $data, int $encoding [, int $level = -1] | string',
\ 'zlib_get_coding_type(': 'void | string',
\ }
let g:phpcomplete_builtin['functions']['direct_io'] = {
\ 'dio_close(': 'resource $fd | void',
\ 'dio_fcntl(': 'resource $fd, int $cmd [, mixed $args] | mixed',
\ 'dio_open(': 'string $filename, int $flags [, int $mode = 0] | resource',
\ 'dio_read(': 'resource $fd [, int $len = 1024] | string',
\ 'dio_seek(': 'resource $fd, int $pos [, int $whence = SEEK_SET] | int',
\ 'dio_stat(': 'resource $fd | array',
\ 'dio_tcsetattr(': 'resource $fd, array $options | bool',
\ 'dio_truncate(': 'resource $fd, int $offset | bool',
\ 'dio_write(': 'resource $fd, string $data [, int $len = 0] | int',
\ }
let g:phpcomplete_builtin['functions']['dom'] = {
\ 'dom_import_simplexml(': 'SimpleXMLElement $node | DOMElement',
\ }
let g:phpcomplete_builtin['functions']['eio'] = {
\ 'eio_busy(': 'int $delay [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]] | resource',
\ 'eio_cancel(': 'resource $req | void',
\ 'eio_chmod(': 'string $path, int $mode [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]] | resource',
\ 'eio_chown(': 'string $path, int $uid [, int $gid = -1 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]] | resource',
\ 'eio_close(': 'mixed $fd [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]] | resource',
\ 'eio_custom(': 'callable $execute, int $pri, callable $callback [, mixed $data = NULL] | resource',
\ 'eio_dup2(': 'mixed $fd, mixed $fd2 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]] | resource',
\ 'eio_event_loop(': 'void | bool',
\ 'eio_fallocate(': 'mixed $fd, int $mode, int $offset, int $length [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]] | resource',
\ 'eio_fchmod(': 'mixed $fd, int $mode [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]] | resource',
\ 'eio_fchown(': 'mixed $fd, int $uid [, int $gid = -1 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]] | resource',
\ 'eio_fdatasync(': 'mixed $fd [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]] | resource',
\ 'eio_fstat(': 'mixed $fd, int $pri, callable $callback [, mixed $data] | resource',
\ 'eio_fstatvfs(': 'mixed $fd, int $pri, callable $callback [, mixed $data] | resource',
\ 'eio_fsync(': 'mixed $fd [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]] | resource',
\ 'eio_ftruncate(': 'mixed $fd [, int $offset = 0 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]] | resource',
\ 'eio_futime(': 'mixed $fd, float $atime, float $mtime [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]] | resource',
\ 'eio_get_event_stream(': 'void | mixed',
\ 'eio_get_last_error(': 'resource $req | string',
\ 'eio_grp_add(': 'resource $grp, resource $req | void',
\ 'eio_grp_cancel(': 'resource $grp | void',
\ 'eio_grp_limit(': 'resource $grp, int $limit | void',
\ 'eio_grp(': 'callable $callback [, string $data = NULL] | resource',
\ 'eio_init(': 'void | void',
\ 'eio_link(': 'string $path, string $new_path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]] | resource',
\ 'eio_lstat(': 'string $path, int $pri, callable $callback [, mixed $data = NULL] | resource',
\ 'eio_mkdir(': 'string $path, int $mode [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]] | resource',
\ 'eio_mknod(': 'string $path, int $mode, int $dev [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]] | resource',
\ 'eio_nop(': '[ int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]] | resource',
\ 'eio_npending(': 'void | int',
\ 'eio_nready(': 'void | int',
\ 'eio_nreqs(': 'void | int',
\ 'eio_nthreads(': 'void | int',
\ 'eio_open(': 'string $path, int $flags, int $mode, int $pri, callable $callback [, mixed $data = NULL] | resource',
\ 'eio_poll(': 'void | int',
\ 'eio_read(': 'mixed $fd, int $length, int $offset, int $pri, callable $callback [, mixed $data = NULL] | resource',
\ 'eio_readahead(': 'mixed $fd, int $offset, int $length [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]] | resource',
\ 'eio_readdir(': 'string $path, int $flags, int $pri, callable $callback [, string $data = NULL] | resource',
\ 'eio_readlink(': 'string $path, int $pri, callable $callback [, string $data = NULL] | resource',
\ 'eio_realpath(': 'string $path, int $pri, callable $callback [, string $data = NULL] | resource',
\ 'eio_rename(': 'string $path, string $new_path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]] | resource',
\ 'eio_rmdir(': 'string $path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]] | resource',
\ 'eio_seek(': 'mixed $fd, int $offset, int $whence [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]] | resource',
\ 'eio_sendfile(': 'mixed $out_fd, mixed $in_fd, int $offset, int $length [, int $pri [, callable $callback [, string $data]]] | resource',
\ 'eio_set_max_idle(': 'int $nthreads | void',
\ 'eio_set_max_parallel(': 'int $nthreads | void',
\ 'eio_set_max_poll_reqs(': 'int $nreqs | void',
\ 'eio_set_max_poll_time(': 'float $nseconds | void',
\ 'eio_set_min_parallel(': 'string $nthreads | void',
\ 'eio_stat(': 'string $path, int $pri, callable $callback [, mixed $data = NULL] | resource',
\ 'eio_statvfs(': 'string $path, int $pri, callable $callback [, mixed $data] | resource',
\ 'eio_symlink(': 'string $path, string $new_path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]] | resource',
\ 'eio_sync_file_range(': 'mixed $fd, int $offset, int $nbytes, int $flags [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]] | resource',
\ 'eio_sync(': '[ int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]] | resource',
\ 'eio_syncfs(': 'mixed $fd [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]] | resource',
\ 'eio_truncate(': 'string $path [, int $offset = 0 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]] | resource',
\ 'eio_unlink(': 'string $path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]] | resource',
\ 'eio_utime(': 'string $path, float $atime, float $mtime [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]] | resource',
\ 'eio_write(': 'mixed $fd, string $str [, int $length = 0 [, int $offset = 0 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]]] | resource',
\ }
let g:phpcomplete_builtin['functions']['enchant'] = {
\ 'enchant_broker_describe(': 'resource $broker | array',
\ 'enchant_broker_dict_exists(': 'resource $broker, string $tag | bool',
\ 'enchant_broker_free_dict(': 'resource $dict | bool',
\ 'enchant_broker_free(': 'resource $broker | bool',
\ 'enchant_broker_get_dict_path(': 'resource $broker, int $dict_type | bool',
\ 'enchant_broker_get_error(': 'resource $broker | string',
\ 'enchant_broker_init(': 'void | resource',
\ 'enchant_broker_list_dicts(': 'resource $broker | mixed',
\ 'enchant_broker_request_dict(': 'resource $broker, string $tag | resource',
\ 'enchant_broker_request_pwl_dict(': 'resource $broker, string $filename | resource',
\ 'enchant_broker_set_dict_path(': 'resource $broker, int $dict_type, string $value | bool',
\ 'enchant_broker_set_ordering(': 'resource $broker, string $tag, string $ordering | bool',
\ 'enchant_dict_add_to_personal(': 'resource $dict, string $word | void',
\ 'enchant_dict_add_to_session(': 'resource $dict, string $word | void',
\ 'enchant_dict_check(': 'resource $dict, string $word | bool',
\ 'enchant_dict_describe(': 'resource $dict | mixed',
\ 'enchant_dict_get_error(': 'resource $dict | string',
\ 'enchant_dict_is_in_session(': 'resource $dict, string $word | bool',
\ 'enchant_dict_quick_check(': 'resource $dict, string $word [, array &$suggestions] | bool',
\ 'enchant_dict_store_replacement(': 'resource $dict, string $mis, string $cor | void',
\ 'enchant_dict_suggest(': 'resource $dict, string $word | array',
\ }
let g:phpcomplete_builtin['functions']['program_execution'] = {
\ 'escapeshellarg(': 'string $arg | string',
\ 'escapeshellcmd(': 'string $command | string',
\ 'exec(': 'string $command [, array &$output [, int &$return_var]] | string',
\ 'passthru(': 'string $command [, int &$return_var] | void',
\ 'proc_close(': 'resource $process | int',
\ 'proc_get_status(': 'resource $process | array',
\ 'proc_nice(': 'int $increment | bool',
\ 'proc_open(': 'string $cmd, array $descriptorspec, array &$pipes [, string $cwd = NULL [, array $env = NULL [, array $other_options = NULL]]] | resource',
\ 'proc_terminate(': 'resource $process [, int $signal = 15] | bool',
\ 'shell_exec(': 'string $cmd | string',
\ 'system(': 'string $command [, int &$return_var] | string',
\ }
let g:phpcomplete_builtin['functions']['libevent'] = {
\ 'event_add(': 'resource $event [, int $timeout = -1] | bool',
\ 'event_base_free(': 'resource $event_base | void',
\ 'event_base_loop(': 'resource $event_base [, int $flags = 0] | int',
\ 'event_base_loopbreak(': 'resource $event_base | bool',
\ 'event_base_loopexit(': 'resource $event_base [, int $timeout = -1] | bool',
\ 'event_base_new(': 'void | resource',
\ 'event_base_priority_init(': 'resource $event_base, int $npriorities | bool',
\ 'event_base_reinit(': 'resource $event_base | bool',
\ 'event_base_set(': 'resource $event, resource $event_base | bool',
\ 'event_buffer_base_set(': 'resource $bevent, resource $event_base | bool',
\ 'event_buffer_disable(': 'resource $bevent, int $events | bool',
\ 'event_buffer_enable(': 'resource $bevent, int $events | bool',
\ 'event_buffer_fd_set(': 'resource $bevent, resource $fd | void',
\ 'event_buffer_free(': 'resource $bevent | void',
\ 'event_buffer_new(': 'resource $stream, mixed $readcb, mixed $writecb, mixed $errorcb [, mixed $arg] | resource',
\ 'event_buffer_priority_set(': 'resource $bevent, int $priority | bool',
\ 'event_buffer_read(': 'resource $bevent, int $data_size | string',
\ 'event_buffer_set_callback(': 'resource $event, mixed $readcb, mixed $writecb, mixed $errorcb [, mixed $arg] | bool',
\ 'event_buffer_timeout_set(': 'resource $bevent, int $read_timeout, int $write_timeout | void',
\ 'event_buffer_watermark_set(': 'resource $bevent, int $events, int $lowmark, int $highmark | void',
\ 'event_buffer_write(': 'resource $bevent, string $data [, int $data_size = -1] | bool',
\ 'event_del(': 'resource $event | bool',
\ 'event_free(': 'resource $event | void',
\ 'event_new(': 'void | resource',
\ 'event_priority_set(': 'resource $event, int $priority | bool',
\ 'event_set(': 'resource $event, mixed $fd, int $events, mixed $callback [, mixed $arg] | bool',
\ 'event_timer_add(': 'event_timer_add — Alias of event_add()',
\ 'event_timer_del(': 'event_timer_del — Alias of event_del()',
\ 'event_timer_new(': 'event_timer_new — Alias of event_new()',
\ 'event_timer_set(': 'resource $event, callable $callback [, mixed $arg] | bool',
\ }
let g:phpcomplete_builtin['functions']['exif'] = {
\ 'exif_imagetype(': 'string $filename | int',
\ 'exif_read_data(': 'mixed $stream [, string $sections = NULL [, bool $arrays = FALSE [, bool $thumbnail = FALSE]]] | array',
\ 'exif_tagname(': 'int $index | string',
\ 'exif_thumbnail(': 'mixed $stream [, int &$width [, int &$height [, int &$imagetype]]] | string',
\ 'read_exif_data(': 'read_exif_data — Alias of exif_read_data()',
\ }
let g:phpcomplete_builtin['functions']['expect'] = {
\ 'expect_expectl(': 'resource $expect, array $cases [, array &$match] | int',
\ 'expect_popen(': 'string $command | resource',
\ }
let g:phpcomplete_builtin['functions']['mail'] = {
\ 'ezmlm_hash(': 'string $addr | int',
\ 'mail(': 'string $to, string $subject, string $message [, mixed $additional_headers [, string $additional_parameters]] | bool',
\ }
let g:phpcomplete_builtin['functions']['fam'] = {
\ 'fam_cancel_monitor(': 'resource $fam, resource $fam_monitor | bool',
\ 'fam_close(': 'resource $fam | void',
\ 'fam_monitor_collection(': 'resource $fam, string $dirname, int $depth, string $mask | resource',
\ 'fam_monitor_directory(': 'resource $fam, string $dirname | resource',
\ 'fam_monitor_file(': 'resource $fam, string $filename | resource',
\ 'fam_next_event(': 'resource $fam | array',
\ 'fam_open(': '[ string $appname] | resource',
\ 'fam_pending(': 'resource $fam | int',
\ 'fam_resume_monitor(': 'resource $fam, resource $fam_monitor | bool',
\ 'fam_suspend_monitor(': 'resource $fam, resource $fam_monitor | bool',
\ }
let g:phpcomplete_builtin['functions']['fann'] = {
\ 'fann_cascadetrain_on_data(': 'resource $ann, resource $data, int $max_neurons, int $neurons_between_reports, float $desired_error | bool',
\ 'fann_cascadetrain_on_file(': 'resource $ann, string $filename, int $max_neurons, int $neurons_between_reports, float $desired_error | bool',
\ 'fann_clear_scaling_params(': 'resource $ann | bool',
\ 'fann_copy(': 'resource $ann | resource',
\ 'fann_create_from_file(': 'string $configuration_file | resource',
\ 'fann_create_shortcut_array(': 'int $num_layers, array $layers | resource',
\ 'fann_create_shortcut(': 'int $num_layers, int $num_neurons1, int $num_neurons2 [, int $...] | resource',
\ 'fann_create_sparse_array(': 'float $connection_rate, int $num_layers, array $layers | resource',
\ 'fann_create_sparse(': 'float $connection_rate, int $num_layers, int $num_neurons1, int $num_neurons2 [, int $...] | resource',
\ 'fann_create_standard_array(': 'int $num_layers, array $layers | resource',
\ 'fann_create_standard(': 'int $num_layers, int $num_neurons1, int $num_neurons2 [, int $...] | resource',
\ 'fann_create_train_from_callback(': 'int $num_data, int $num_input, int $num_output, callable $user_function | resource',
\ 'fann_create_train(': 'int $num_data, int $num_input, int $num_output | resource',
\ 'fann_descale_input(': 'resource $ann, array $input_vector | bool',
\ 'fann_descale_output(': 'resource $ann, array $output_vector | bool',
\ 'fann_descale_train(': 'resource $ann, resource $train_data | bool',
\ 'fann_destroy_train(': 'resource $train_data | bool',
\ 'fann_destroy(': 'resource $ann | bool',
\ 'fann_duplicate_train_data(': 'resource $data | resource',
\ 'fann_get_activation_function(': 'resource $ann, int $layer, int $neuron | int',
\ 'fann_get_activation_steepness(': 'resource $ann, int $layer, int $neuron | float',
\ 'fann_get_bias_array(': 'resource $ann | array',
\ 'fann_get_bit_fail_limit(': 'resource $ann | float',
\ 'fann_get_bit_fail(': 'resource $ann | int',
\ 'fann_get_cascade_activation_functions_count(': 'resource $ann | int',
\ 'fann_get_cascade_activation_functions(': 'resource $ann | array',
\ 'fann_get_cascade_activation_steepnesses_count(': 'resource $ann | int',
\ 'fann_get_cascade_activation_steepnesses(': 'resource $ann | array',
\ 'fann_get_cascade_candidate_change_fraction(': 'resource $ann | float',
\ 'fann_get_cascade_candidate_limit(': 'resource $ann | float',
\ 'fann_get_cascade_candidate_stagnation_epochs(': 'resource $ann | int',
\ 'fann_get_cascade_max_cand_epochs(': 'resource $ann | int',
\ 'fann_get_cascade_max_out_epochs(': 'resource $ann | int',
\ 'fann_get_cascade_min_cand_epochs(': 'resource $ann | int',
\ 'fann_get_cascade_min_out_epochs(': 'resource $ann | int',
\ 'fann_get_cascade_num_candidate_groups(': 'resource $ann | int',
\ 'fann_get_cascade_num_candidates(': 'resource $ann | int',
\ 'fann_get_cascade_output_change_fraction(': 'resource $ann | float',
\ 'fann_get_cascade_output_stagnation_epochs(': 'resource $ann | int',
\ 'fann_get_cascade_weight_multiplier(': 'resource $ann | float',
\ 'fann_get_connection_array(': 'resource $ann | array',
\ 'fann_get_connection_rate(': 'resource $ann | float',
\ 'fann_get_errno(': 'resource $errdat | int',
\ 'fann_get_errstr(': 'resource $errdat | string',
\ 'fann_get_layer_array(': 'resource $ann | array',
\ 'fann_get_learning_momentum(': 'resource $ann | float',
\ 'fann_get_learning_rate(': 'resource $ann | float',
\ 'fann_get_MSE(': 'resource $ann | float',
\ 'fann_get_network_type(': 'resource $ann | int',
\ 'fann_get_num_input(': 'resource $ann | int',
\ 'fann_get_num_layers(': 'resource $ann | int',
\ 'fann_get_num_output(': 'resource $ann | int',
\ 'fann_get_quickprop_decay(': 'resource $ann | float',
\ 'fann_get_quickprop_mu(': 'resource $ann | float',
\ 'fann_get_rprop_decrease_factor(': 'resource $ann | float',
\ 'fann_get_rprop_delta_max(': 'resource $ann | float',
\ 'fann_get_rprop_delta_min(': 'resource $ann | float',
\ 'fann_get_rprop_delta_zero(': 'resource $ann | int',
\ 'fann_get_rprop_increase_factor(': 'resource $ann | float',
\ 'fann_get_sarprop_step_error_shift(': 'resource $ann | float',
\ 'fann_get_sarprop_step_error_threshold_factor(': 'resource $ann | float',
\ 'fann_get_sarprop_temperature(': 'resource $ann | float',
\ 'fann_get_sarprop_weight_decay_shift(': 'resource $ann | float',
\ 'fann_get_total_connections(': 'resource $ann | int',
\ 'fann_get_total_neurons(': 'resource $ann | int',
\ 'fann_get_train_error_function(': 'resource $ann | int',
\ 'fann_get_train_stop_function(': 'resource $ann | int',
\ 'fann_get_training_algorithm(': 'resource $ann | int',
\ 'fann_init_weights(': 'resource $ann, resource $train_data | bool',
\ 'fann_length_train_data(': 'resource $data | int',
\ 'fann_merge_train_data(': 'resource $data1, resource $data2 | resource',
\ 'fann_num_input_train_data(': 'resource $data | int',
\ 'fann_num_output_train_data(': 'resource $data | int',
\ 'fann_print_error(': 'resource $errdat | void',
\ 'fann_randomize_weights(': 'resource $ann, float $min_weight, float $max_weight | bool',
\ 'fann_read_train_from_file(': 'string $filename | resource',
\ 'fann_reset_errno(': 'resource $errdat | void',
\ 'fann_reset_errstr(': 'resource $errdat | void',
\ 'fann_reset_MSE(': 'string $ann | bool',
\ 'fann_run(': 'resource $ann, array $input | array',
\ 'fann_save_train(': 'resource $data, string $file_name | bool',
\ 'fann_save(': 'resource $ann, string $configuration_file | bool',
\ 'fann_scale_input_train_data(': 'resource $train_data, float $new_min, float $new_max | bool',
\ 'fann_scale_input(': 'resource $ann, array $input_vector | bool',
\ 'fann_scale_output_train_data(': 'resource $train_data, float $new_min, float $new_max | bool',
\ 'fann_scale_output(': 'resource $ann, array $output_vector | bool',
\ 'fann_scale_train_data(': 'resource $train_data, float $new_min, float $new_max | bool',
\ 'fann_scale_train(': 'resource $ann, resource $train_data | bool',
\ 'fann_set_activation_function_hidden(': 'resource $ann, int $activation_function | bool',
\ 'fann_set_activation_function_layer(': 'resource $ann, int $activation_function, int $layer | bool',
\ 'fann_set_activation_function_output(': 'resource $ann, int $activation_function | bool',
\ 'fann_set_activation_function(': 'resource $ann, int $activation_function, int $layer, int $neuron | bool',
\ 'fann_set_activation_steepness_hidden(': 'resource $ann, float $activation_steepness | bool',
\ 'fann_set_activation_steepness_layer(': 'resource $ann, float $activation_steepness, int $layer | bool',
\ 'fann_set_activation_steepness_output(': 'resource $ann, float $activation_steepness | bool',
\ 'fann_set_activation_steepness(': 'resource $ann, float $activation_steepness, int $layer, int $neuron | bool',
\ 'fann_set_bit_fail_limit(': 'resource $ann, float $bit_fail_limit | bool',
\ 'fann_set_callback(': 'resource $ann, collable $callback | bool',
\ 'fann_set_cascade_activation_functions(': 'resource $ann, array $cascade_activation_functions | bool',
\ 'fann_set_cascade_activation_steepnesses(': 'resource $ann, array $cascade_activation_steepnesses_count | bool',
\ 'fann_set_cascade_candidate_change_fraction(': 'resource $ann, float $cascade_candidate_change_fraction | bool',
\ 'fann_set_cascade_candidate_limit(': 'resource $ann, float $cascade_candidate_limit | bool',
\ 'fann_set_cascade_candidate_stagnation_epochs(': 'resource $ann, int $cascade_candidate_stagnation_epochs | bool',
\ 'fann_set_cascade_max_cand_epochs(': 'resource $ann, int $cascade_max_cand_epochs | bool',
\ 'fann_set_cascade_max_out_epochs(': 'resource $ann, int $cascade_max_out_epochs | bool',
\ 'fann_set_cascade_min_cand_epochs(': 'resource $ann, int $cascade_min_cand_epochs | bool',
\ 'fann_set_cascade_min_out_epochs(': 'resource $ann, int $cascade_min_out_epochs | bool',
\ 'fann_set_cascade_num_candidate_groups(': 'resource $ann, int $cascade_num_candidate_groups | bool',
\ 'fann_set_cascade_output_change_fraction(': 'resource $ann, float $cascade_output_change_fraction | bool',
\ 'fann_set_cascade_output_stagnation_epochs(': 'resource $ann, int $cascade_output_stagnation_epochs | bool',
\ 'fann_set_cascade_weight_multiplier(': 'resource $ann, float $cascade_weight_multiplier | bool',
\ 'fann_set_error_log(': 'resource $errdat, string $log_file | void',
\ 'fann_set_input_scaling_params(': 'resource $ann, resource $train_data, float $new_input_min, float $new_input_max | bool',
\ 'fann_set_learning_momentum(': 'resource $ann, float $learning_momentum | bool',
\ 'fann_set_learning_rate(': 'resource $ann, float $learning_rate | bool',
\ 'fann_set_output_scaling_params(': 'resource $ann, resource $train_data, float $new_output_min, float $new_output_max | bool',
\ 'fann_set_quickprop_decay(': 'resource $ann, float $quickprop_decay | bool',
\ 'fann_set_quickprop_mu(': 'resource $ann, float $quickprop_mu | bool',
\ 'fann_set_rprop_decrease_factor(': 'resource $ann, float $rprop_decrease_factor | bool',
\ 'fann_set_rprop_delta_max(': 'resource $ann, float $rprop_delta_max | bool',
\ 'fann_set_rprop_delta_min(': 'resource $ann, float $rprop_delta_min | bool',
\ 'fann_set_rprop_delta_zero(': 'resource $ann, float $rprop_delta_zero | bool',
\ 'fann_set_rprop_increase_factor(': 'resource $ann, float $rprop_increase_factor | bool',
\ 'fann_set_sarprop_step_error_shift(': 'resource $ann, float $sarprop_step_error_shift | bool',
\ 'fann_set_sarprop_step_error_threshold_factor(': 'resource $ann, float $sarprop_step_error_threshold_factor | bool',
\ 'fann_set_sarprop_temperature(': 'resource $ann, float $sarprop_temperature | bool',
\ 'fann_set_sarprop_weight_decay_shift(': 'resource $ann, float $sarprop_weight_decay_shift | bool',
\ 'fann_set_scaling_params(': 'resource $ann, resource $train_data, float $new_input_min, float $new_input_max, float $new_output_min, float $new_output_max | bool',
\ 'fann_set_train_error_function(': 'resource $ann, int $error_function | bool',
\ 'fann_set_train_stop_function(': 'resource $ann, int $stop_function | bool',
\ 'fann_set_training_algorithm(': 'resource $ann, int $training_algorithm | bool',
\ 'fann_set_weight_array(': 'resource $ann, array $connections | bool',
\ 'fann_set_weight(': 'resource $ann, int $from_neuron, int $to_neuron, float $weight | bool',
\ 'fann_shuffle_train_data(': 'resource $train_data | bool',
\ 'fann_subset_train_data(': 'resource $data, int $pos, int $length | resource',
\ 'fann_test_data(': 'resource $ann, resource $data | float',
\ 'fann_test(': 'resource $ann, array $input, array $desired_output | array',
\ 'fann_train_epoch(': 'resource $ann, resource $data | float',
\ 'fann_train_on_data(': 'resource $ann, resource $data, int $max_epochs, int $epochs_between_reports, float $desired_error | bool',
\ 'fann_train_on_file(': 'resource $ann, string $filename, int $max_epochs, int $epochs_between_reports, float $desired_error | bool',
\ 'fann_train(': 'resource $ann, array $input, array $desired_output | bool',
\ }
let g:phpcomplete_builtin['functions']['fastcgi_process_manager'] = {
\ 'fastcgi_finish_request(': 'void | bool',
\ }
let g:phpcomplete_builtin['functions']['firebird_interbase'] = {
\ 'fbird_add_user(': 'fbird_add_user — Alias of ibase_add_user()',
\ 'fbird_affected_rows(': 'fbird_affected_rows — Alias of ibase_affected_rows()',
\ 'fbird_backup(': 'fbird_backup — Alias of ibase_backup()',
\ 'fbird_blob_add(': 'fbird_blob_add — Alias of ibase_blob_add()',
\ 'fbird_blob_cancel(': 'resource $blob_handle | bool',
\ 'fbird_blob_close(': 'fbird_blob_close — Alias of ibase_blob_close()',
\ 'fbird_blob_create(': 'fbird_blob_create — Alias of ibase_blob_create()',
\ 'fbird_blob_echo(': 'fbird_blob_echo — Alias of ibase_blob_echo()',
\ 'fbird_blob_get(': 'fbird_blob_get — Alias of ibase_blob_get()',
\ 'fbird_blob_import(': 'fbird_blob_import — Alias of ibase_blob_import()',
\ 'fbird_blob_info(': 'fbird_blob_info — Alias of ibase_blob_info()',
\ 'fbird_blob_open(': 'fbird_blob_open — Alias of ibase_blob_open()',
\ 'fbird_close(': 'fbird_close — Alias of ibase_close()',
\ 'fbird_commit_ret(': 'fbird_commit_ret — Alias of ibase_commit_ret()',
\ 'fbird_commit(': 'fbird_commit — Alias of ibase_commit()',
\ 'fbird_connect(': 'fbird_connect — Alias of ibase_connect()',
\ 'fbird_db_info(': 'fbird_db_info — Alias of ibase_db_info()',
\ 'fbird_delete_user(': 'fbird_delete_user — Alias of ibase_delete_user()',
\ 'fbird_drop_db(': 'fbird_drop_db — Alias of ibase_drop_db()',
\ 'fbird_errcode(': 'fbird_errcode — Alias of ibase_errcode()',
\ 'fbird_errmsg(': 'fbird_errmsg — Alias of ibase_errmsg()',
\ 'fbird_execute(': 'fbird_execute — Alias of ibase_execute()',
\ 'fbird_fetch_assoc(': 'fbird_fetch_assoc — Alias of ibase_fetch_assoc()',
\ 'fbird_fetch_object(': 'fbird_fetch_object — Alias of ibase_fetch_object()',
\ 'fbird_fetch_row(': 'fbird_fetch_row — Alias of ibase_fetch_row()',
\ 'fbird_field_info(': 'fbird_field_info — Alias of ibase_field_info()',
\ 'fbird_free_event_handler(': 'fbird_free_event_handler — Alias of ibase_free_event_handler()',
\ 'fbird_free_query(': 'fbird_free_query — Alias of ibase_free_query()',
\ 'fbird_free_result(': 'fbird_free_result — Alias of ibase_free_result()',
\ 'fbird_gen_id(': 'fbird_gen_id — Alias of ibase_gen_id()',
\ 'fbird_maintain_db(': 'fbird_maintain_db — Alias of ibase_maintain_db()',
\ 'fbird_modify_user(': 'fbird_modify_user — Alias of ibase_modify_user()',
\ 'fbird_name_result(': 'fbird_name_result — Alias of ibase_name_result()',
\ 'fbird_num_fields(': 'fbird_num_fields — Alias of ibase_num_fields()',
\ 'fbird_num_params(': 'fbird_num_params — Alias of ibase_num_params()',
\ 'fbird_param_info(': 'fbird_param_info — Alias of ibase_param_info()',
\ 'fbird_pconnect(': 'fbird_pconnect — Alias of ibase_pconnect()',
\ 'fbird_prepare(': 'fbird_prepare — Alias of ibase_prepare()',
\ 'fbird_query(': 'fbird_query — Alias of ibase_query()',
\ 'fbird_restore(': 'fbird_restore — Alias of ibase_restore()',
\ 'fbird_rollback_ret(': 'fbird_rollback_ret — Alias of ibase_rollback_ret()',
\ 'fbird_rollback(': 'fbird_rollback — Alias of ibase_rollback()',
\ 'fbird_server_info(': 'fbird_server_info — Alias of ibase_server_info()',
\ 'fbird_service_attach(': 'fbird_service_attach — Alias of ibase_service_attach()',
\ 'fbird_service_detach(': 'fbird_service_detach — Alias of ibase_service_detach()',
\ 'fbird_set_event_handler(': 'fbird_set_event_handler — Alias of ibase_set_event_handler()',
\ 'fbird_trans(': 'fbird_trans — Alias of ibase_trans()',
\ 'fbird_wait_event(': 'fbird_wait_event — Alias of ibase_wait_event()',
\ 'ibase_add_user(': 'resource $service_handle, string $user_name, string $password [, string $first_name [, string $middle_name [, string $last_name]]] | bool',
\ 'ibase_affected_rows(': '[ resource $link_identifier] | int',
\ 'ibase_backup(': 'resource $service_handle, string $source_db, string $dest_file [, int $options = 0 [, bool $verbose = FALSE]] | mixed',
\ 'ibase_blob_add(': 'resource $blob_handle, string $data | void',
\ 'ibase_blob_cancel(': 'resource $blob_handle | bool',
\ 'ibase_blob_close(': 'resource $blob_handle | mixed',
\ 'ibase_blob_create(': '[ resource $link_identifier = NULL] | resource',
\ 'ibase_blob_echo(': 'string $blob_id | bool',
\ 'ibase_blob_get(': 'resource $blob_handle, int $len | string',
\ 'ibase_blob_import(': 'resource $link_identifier, resource $file_handle | string',
\ 'ibase_blob_info(': 'resource $link_identifier, string $blob_id | array',
\ 'ibase_blob_open(': 'resource $link_identifier, string $blob_id | resource',
\ 'ibase_close(': '[ resource $connection_id = NULL] | bool',
\ 'ibase_commit_ret(': '[ resource $link_or_trans_identifier = NULL] | bool',
\ 'ibase_commit(': '[ resource $link_or_trans_identifier = NULL] | bool',
\ 'ibase_connect(': '[ string $database [, string $username [, string $password [, string $charset [, int $buffers [, int $dialect [, string $role [, int $sync]]]]]]]] | resource',
\ 'ibase_db_info(': 'resource $service_handle, string $db, int $action [, int $argument = 0] | string',
\ 'ibase_delete_user(': 'resource $service_handle, string $user_name | bool',
\ 'ibase_drop_db(': '[ resource $connection = NULL] | bool',
\ 'ibase_errcode(': 'void | int',
\ 'ibase_errmsg(': 'void | string',
\ 'ibase_execute(': 'resource $query [, mixed $...] | resource',
\ 'ibase_fetch_assoc(': 'resource $result [, int $fetch_flag = 0] | array',
\ 'ibase_fetch_object(': 'resource $result_id [, int $fetch_flag = 0] | object',
\ 'ibase_fetch_row(': 'resource $result_identifier [, int $fetch_flag = 0] | array',
\ 'ibase_field_info(': 'resource $result, int $field_number | array',
\ 'ibase_free_event_handler(': 'resource $event | bool',
\ 'ibase_free_query(': 'resource $query | bool',
\ 'ibase_free_result(': 'resource $result_identifier | bool',
\ 'ibase_gen_id(': 'string $generator [, int $increment = 1 [, resource $link_identifier = NULL]] | mixed',
\ 'ibase_maintain_db(': 'resource $service_handle, string $db, int $action [, int $argument = 0] | bool',
\ 'ibase_modify_user(': 'resource $service_handle, string $user_name, string $password [, string $first_name [, string $middle_name [, string $last_name]]] | bool',
\ 'ibase_name_result(': 'resource $result, string $name | bool',
\ 'ibase_num_fields(': 'resource $result_id | int',
\ 'ibase_num_params(': 'resource $query | int',
\ 'ibase_param_info(': 'resource $query, int $param_number | array',
\ 'ibase_pconnect(': '[ string $database [, string $username [, string $password [, string $charset [, int $buffers [, int $dialect [, string $role [, int $sync]]]]]]]] | resource',
\ 'ibase_prepare(': 'string $query | resource',
\ 'ibase_query(': '[ resource $link_identifier [, string $query [, int $bind_args]]] | resource',
\ 'ibase_restore(': 'resource $service_handle, string $source_file, string $dest_db [, int $options = 0 [, bool $verbose = FALSE]] | mixed',
\ 'ibase_rollback_ret(': '[ resource $link_or_trans_identifier = NULL] | bool',
\ 'ibase_rollback(': '[ resource $link_or_trans_identifier = NULL] | bool',
\ 'ibase_server_info(': 'resource $service_handle, int $action | string',
\ 'ibase_service_attach(': 'string $host, string $dba_username, string $dba_password | resource',
\ 'ibase_service_detach(': 'resource $service_handle | bool',
\ 'ibase_set_event_handler(': 'callable $event_handler, string $event_name1 [, string $...] | resource',
\ 'ibase_trans(': '[ int $trans_args [, resource $link_identifier]] | resource',
\ 'ibase_wait_event(': 'string $event_name1 [, string $...] | string',
\ }
let g:phpcomplete_builtin['functions']['frontbase'] = {
\ 'fbsql_affected_rows(': '[ resource $link_identifier] | int',
\ 'fbsql_autocommit(': 'resource $link_identifier [, bool $OnOff] | bool',
\ 'fbsql_blob_size(': 'string $blob_handle [, resource $link_identifier] | int',
\ 'fbsql_change_user(': 'string $user, string $password [, string $database [, resource $link_identifier]] | bool',
\ 'fbsql_clob_size(': 'string $clob_handle [, resource $link_identifier] | int',
\ 'fbsql_close(': '[ resource $link_identifier] | bool',
\ 'fbsql_commit(': '[ resource $link_identifier] | bool',
\ 'fbsql_connect(': '[ string $hostname = ini_get("fbsql.default_host") [, string $username = ini_get("fbsql.default_user") [, string $password = ini_get("fbsql.default_password")]]] | resource',
\ 'fbsql_create_blob(': 'string $blob_data [, resource $link_identifier] | string',
\ 'fbsql_create_clob(': 'string $clob_data [, resource $link_identifier] | string',
\ 'fbsql_create_db(': 'string $database_name [, resource $link_identifier [, string $database_options]] | bool',
\ 'fbsql_data_seek(': 'resource $result, int $row_number | bool',
\ 'fbsql_database_password(': 'resource $link_identifier [, string $database_password] | string',
\ 'fbsql_database(': 'resource $link_identifier [, string $database] | string',
\ 'fbsql_db_query(': 'string $database, string $query [, resource $link_identifier] | resource',
\ 'fbsql_db_status(': 'string $database_name [, resource $link_identifier] | int',
\ 'fbsql_drop_db(': 'string $database_name [, resource $link_identifier] | bool',
\ 'fbsql_errno(': '[ resource $link_identifier] | int',
\ 'fbsql_error(': '[ resource $link_identifier] | string',
\ 'fbsql_fetch_array(': 'resource $result [, int $result_type] | array',
\ 'fbsql_fetch_assoc(': 'resource $result | array',
\ 'fbsql_fetch_field(': 'resource $result [, int $field_offset] | object',
\ 'fbsql_fetch_lengths(': 'resource $result | array',
\ 'fbsql_fetch_object(': 'resource $result | object',
\ 'fbsql_fetch_row(': 'resource $result | array',
\ 'fbsql_field_flags(': 'resource $result [, int $field_offset] | string',
\ 'fbsql_field_len(': 'resource $result [, int $field_offset] | int',
\ 'fbsql_field_name(': 'resource $result [, int $field_index] | string',
\ 'fbsql_field_seek(': 'resource $result [, int $field_offset] | bool',
\ 'fbsql_field_table(': 'resource $result [, int $field_offset] | string',
\ 'fbsql_field_type(': 'resource $result [, int $field_offset] | string',
\ 'fbsql_free_result(': 'resource $result | bool',
\ 'fbsql_get_autostart_info(': '[ resource $link_identifier] | array',
\ 'fbsql_hostname(': 'resource $link_identifier [, string $host_name] | string',
\ 'fbsql_insert_id(': '[ resource $link_identifier] | int',
\ 'fbsql_list_dbs(': '[ resource $link_identifier] | resource',
\ 'fbsql_list_fields(': 'string $database_name, string $table_name [, resource $link_identifier] | resource',
\ 'fbsql_list_tables(': 'string $database [, resource $link_identifier] | resource',
\ 'fbsql_next_result(': 'resource $result | bool',
\ 'fbsql_num_fields(': 'resource $result | int',
\ 'fbsql_num_rows(': 'resource $result | int',
\ 'fbsql_password(': 'resource $link_identifier [, string $password] | string',
\ 'fbsql_pconnect(': '[ string $hostname = ini_get("fbsql.default_host") [, string $username = ini_get("fbsql.default_user") [, string $password = ini_get("fbsql.default_password")]]] | resource',
\ 'fbsql_query(': 'string $query [, resource $link_identifier [, int $batch_size]] | resource',
\ 'fbsql_read_blob(': 'string $blob_handle [, resource $link_identifier] | string',
\ 'fbsql_read_clob(': 'string $clob_handle [, resource $link_identifier] | string',
\ 'fbsql_result(': 'resource $result [, int $row [, mixed $field]] | mixed',
\ 'fbsql_rollback(': '[ resource $link_identifier] | bool',
\ 'fbsql_rows_fetched(': 'resource $result | int',
\ 'fbsql_select_db(': '[ string $database_name [, resource $link_identifier]] | bool',
\ 'fbsql_set_characterset(': 'resource $link_identifier, int $characterset [, int $in_out_both] | void',
\ 'fbsql_set_lob_mode(': 'resource $result, int $lob_mode | bool',
\ 'fbsql_set_password(': 'resource $link_identifier, string $user, string $password, string $old_password | bool',
\ 'fbsql_set_transaction(': 'resource $link_identifier, int $locking, int $isolation | void',
\ 'fbsql_start_db(': 'string $database_name [, resource $link_identifier [, string $database_options]] | bool',
\ 'fbsql_stop_db(': 'string $database_name [, resource $link_identifier] | bool',
\ 'fbsql_table_name(': 'resource $result, int $index | string',
\ 'fbsql_username(': 'resource $link_identifier [, string $username] | string',
\ 'fbsql_warnings(': '[ bool $OnOff] | bool',
\ }
let g:phpcomplete_builtin['functions']['fdf'] = {
\ 'fdf_add_doc_javascript(': 'resource $fdf_document, string $script_name, string $script_code | bool',
\ 'fdf_add_template(': 'resource $fdf_document, int $newpage, string $filename, string $template, int $rename | bool',
\ 'fdf_close(': 'resource $fdf_document | void',
\ 'fdf_create(': 'void | resource',
\ 'fdf_enum_values(': 'resource $fdf_document, callable $function [, mixed $userdata] | bool',
\ 'fdf_errno(': 'void | int',
\ 'fdf_error(': '[ int $error_code = -1] | string',
\ 'fdf_get_ap(': 'resource $fdf_document, string $field, int $face, string $filename | bool',
\ 'fdf_get_attachment(': 'resource $fdf_document, string $fieldname, string $savepath | array',
\ 'fdf_get_encoding(': 'resource $fdf_document | string',
\ 'fdf_get_file(': 'resource $fdf_document | string',
\ 'fdf_get_flags(': 'resource $fdf_document, string $fieldname, int $whichflags | int',
\ 'fdf_get_opt(': 'resource $fdf_document, string $fieldname [, int $element = -1] | mixed',
\ 'fdf_get_status(': 'resource $fdf_document | string',
\ 'fdf_get_value(': 'resource $fdf_document, string $fieldname [, int $which = -1] | mixed',
\ 'fdf_get_version(': '[ resource $fdf_document] | string',
\ 'fdf_header(': 'void | void',
\ 'fdf_next_field_name(': 'resource $fdf_document [, string $fieldname] | string',
\ 'fdf_open_string(': 'string $fdf_data | resource',
\ 'fdf_open(': 'string $filename | resource',
\ 'fdf_remove_item(': 'resource $fdf_document, string $fieldname, int $item | bool',
\ 'fdf_save_string(': 'resource $fdf_document | string',
\ 'fdf_save(': 'resource $fdf_document [, string $filename] | bool',
\ 'fdf_set_ap(': 'resource $fdf_document, string $field_name, int $face, string $filename, int $page_number | bool',
\ 'fdf_set_encoding(': 'resource $fdf_document, string $encoding | bool',
\ 'fdf_set_file(': 'resource $fdf_document, string $url [, string $target_frame] | bool',
\ 'fdf_set_flags(': 'resource $fdf_document, string $fieldname, int $whichFlags, int $newFlags | bool',
\ 'fdf_set_javascript_action(': 'resource $fdf_document, string $fieldname, int $trigger, string $script | bool',
\ 'fdf_set_on_import_javascript(': 'resource $fdf_document, string $script, bool $before_data_import | bool',
\ 'fdf_set_opt(': 'resource $fdf_document, string $fieldname, int $element, string $str1, string $str2 | bool',
\ 'fdf_set_status(': 'resource $fdf_document, string $status | bool',
\ 'fdf_set_submit_form_action(': 'resource $fdf_document, string $fieldname, int $trigger, string $script, int $flags | bool',
\ 'fdf_set_target_frame(': 'resource $fdf_document, string $frame_name | bool',
\ 'fdf_set_value(': 'resource $fdf_document, string $fieldname, mixed $value [, int $isName] | bool',
\ 'fdf_set_version(': 'resource $fdf_document, string $version | bool',
\ }
let g:phpcomplete_builtin['functions']['filepro'] = {
\ 'filepro_fieldcount(': 'void | int',
\ 'filepro_fieldname(': 'int $field_number | string',
\ 'filepro_fieldtype(': 'int $field_number | string',
\ 'filepro_fieldwidth(': 'int $field_number | int',
\ 'filepro_retrieve(': 'int $row_number, int $field_number | string',
\ 'filepro_rowcount(': 'void | int',
\ 'filepro(': 'string $directory | bool',
\ }
let g:phpcomplete_builtin['functions']['filter'] = {
\ 'filter_has_var(': 'int $type, string $variable_name | bool',
\ 'filter_id(': 'string $filtername | int',
\ 'filter_input_array(': 'int $type [, mixed $definition [, bool $add_empty = TRUE]] | mixed',
\ 'filter_input(': 'int $type, string $variable_name [, int $filter = FILTER_DEFAULT [, mixed $options]] | mixed',
\ 'filter_list(': 'void | array',
\ 'filter_var_array(': 'array $data [, mixed $definition [, bool $add_empty = TRUE]] | mixed',
\ 'filter_var(': 'mixed $variable [, int $filter = FILTER_DEFAULT [, mixed $options]] | mixed',
\ }
let g:phpcomplete_builtin['functions']['fileinfo'] = {
\ 'finfo_buffer(': 'resource $finfo, string $string [, int $options = FILEINFO_NONE [, resource $context]] | string',
\ 'finfo_close(': 'resource $finfo | bool',
\ 'finfo_file(': 'resource $finfo, string $file_name [, int $options = FILEINFO_NONE [, resource $context]] | string',
\ 'finfo_open(': '[ int $options = FILEINFO_NONE [, string $magic_file = ""]] | resource',
\ 'finfo_set_flags(': 'resource $finfo, int $options | bool',
\ 'mime_content_type(': 'string $filename | string',
\ }
let g:phpcomplete_builtin['functions']['output_control'] = {
\ 'flush(': 'void | void',
\ 'ob_clean(': 'void | void',
\ 'ob_end_clean(': 'void | bool',
\ 'ob_end_flush(': 'void | bool',
\ 'ob_flush(': 'void | void',
\ 'ob_get_clean(': 'void | string',
\ 'ob_get_contents(': 'void | string',
\ 'ob_get_flush(': 'void | string',
\ 'ob_get_length(': 'void | int',
\ 'ob_get_level(': 'void | int',
\ 'ob_get_status(': '[ bool $full_status = FALSE] | array',
\ 'ob_gzhandler(': 'string $buffer, int $mode | string',
\ 'ob_implicit_flush(': '[ int $flag = 1] | void',
\ 'ob_list_handlers(': 'void | array',
\ 'ob_start(': '[ callable $output_callback = NULL [, int $chunk_size = 0 [, int $flags = PHP_OUTPUT_HANDLER_STDFLAGS]]] | bool',
\ 'output_add_rewrite_var(': 'string $name, string $value | bool',
\ 'output_reset_rewrite_vars(': 'void | bool',
\ }
let g:phpcomplete_builtin['functions']['fribidi'] = {
\ 'fribidi_log2vis(': 'string $str, string $direction, int $charset | string',
\ }
let g:phpcomplete_builtin['functions']['semaphore'] = {
\ 'ftok(': 'string $pathname, string $proj | int',
\ 'msg_get_queue(': 'int $key [, int $perms = 0666] | resource',
\ 'msg_queue_exists(': 'int $key | bool',
\ 'msg_receive(': 'resource $queue, int $desiredmsgtype, int &$msgtype, int $maxsize, mixed &$message [, bool $unserialize = TRUE [, int $flags = 0 [, int &$errorcode]]] | bool',
\ 'msg_remove_queue(': 'resource $queue | bool',
\ 'msg_send(': 'resource $queue, int $msgtype, mixed $message [, bool $serialize = TRUE [, bool $blocking = TRUE [, int &$errorcode]]] | bool',
\ 'msg_set_queue(': 'resource $queue, array $data | bool',
\ 'msg_stat_queue(': 'resource $queue | array',
\ 'sem_acquire(': 'resource $sem_identifier [, bool $nowait = FALSE] | bool',
\ 'sem_get(': 'int $key [, int $max_acquire = 1 [, int $perm = 0666 [, int $auto_release = 1]]] | resource',
\ 'sem_release(': 'resource $sem_identifier | bool',
\ 'sem_remove(': 'resource $sem_identifier | bool',
\ 'shm_attach(': 'int $key [, int $memsize [, int $perm = 0666]] | resource',
\ 'shm_detach(': 'resource $shm_identifier | bool',
\ 'shm_get_var(': 'resource $shm_identifier, int $variable_key | mixed',
\ 'shm_has_var(': 'resource $shm_identifier, int $variable_key | bool',
\ 'shm_put_var(': 'resource $shm_identifier, int $variable_key, mixed $variable | bool',
\ 'shm_remove_var(': 'resource $shm_identifier, int $variable_key | bool',
\ 'shm_remove(': 'resource $shm_identifier | bool',
\ }
let g:phpcomplete_builtin['functions']['ftp'] = {
\ 'ftp_alloc(': 'resource $ftp_stream, int $filesize [, string &$result] | bool',
\ 'ftp_append(': 'resource $ftp, string $remote_file, string $local_file [, int $mode = FTP_IMAGE] | bool',
\ 'ftp_cdup(': 'resource $ftp_stream | bool',
\ 'ftp_chdir(': 'resource $ftp_stream, string $directory | bool',
\ 'ftp_chmod(': 'resource $ftp_stream, int $mode, string $filename | int',
\ 'ftp_close(': 'resource $ftp_stream | bool',
\ 'ftp_connect(': 'string $host [, int $port = 21 [, int $timeout = 90]] | resource',
\ 'ftp_delete(': 'resource $ftp_stream, string $path | bool',
\ 'ftp_exec(': 'resource $ftp_stream, string $command | bool',
\ 'ftp_fget(': 'resource $ftp_stream, resource $handle, string $remote_file [, int $mode = FTP_IMAGE [, int $resumepos = 0]] | bool',
\ 'ftp_fput(': 'resource $ftp_stream, string $remote_file, resource $handle [, int $mode = FTP_IMAGE [, int $startpos = 0]] | bool',
\ 'ftp_get_option(': 'resource $ftp_stream, int $option | mixed',
\ 'ftp_get(': 'resource $ftp_stream, string $local_file, string $remote_file [, int $mode = FTP_BINARY [, int $resumepos = 0]] | bool',
\ 'ftp_login(': 'resource $ftp_stream, string $username, string $password | bool',
\ 'ftp_mdtm(': 'resource $ftp_stream, string $remote_file | int',
\ 'ftp_mkdir(': 'resource $ftp_stream, string $directory | string',
\ 'ftp_mlsd(': 'resource $ftp_stream, string $directory | array',
\ 'ftp_nb_continue(': 'resource $ftp_stream | int',
\ 'ftp_nb_fget(': 'resource $ftp_stream, resource $handle, string $remote_file [, int $mode = FTP_IMAGE [, int $resumepos = 0]] | int',
\ 'ftp_nb_fput(': 'resource $ftp_stream, string $remote_file, resource $handle [, int $mode = FTP_IMAGE [, int $startpos = 0]] | int',
\ 'ftp_nb_get(': 'resource $ftp_stream, string $local_file, string $remote_file [, int $mode = FTP_IMAGE [, int $resumepos = 0]] | int',
\ 'ftp_nb_put(': 'resource $ftp_stream, string $remote_file, string $local_file [, int $mode = FTP_IMAGE [, int $startpos = 0]] | int',
\ 'ftp_nlist(': 'resource $ftp_stream, string $directory | array',
\ 'ftp_pasv(': 'resource $ftp_stream, bool $pasv | bool',
\ 'ftp_put(': 'resource $ftp_stream, string $remote_file, string $local_file [, int $mode = FTP_IMAGE [, int $startpos = 0]] | bool',
\ 'ftp_pwd(': 'resource $ftp_stream | string',
\ 'ftp_quit(': 'ftp_quit — Alias of ftp_close()',
\ 'ftp_raw(': 'resource $ftp_stream, string $command | array',
\ 'ftp_rawlist(': 'resource $ftp_stream, string $directory [, bool $recursive = FALSE] | array',
\ 'ftp_rename(': 'resource $ftp_stream, string $oldname, string $newname | bool',
\ 'ftp_rmdir(': 'resource $ftp_stream, string $directory | bool',
\ 'ftp_set_option(': 'resource $ftp_stream, int $option, mixed $value | bool',
\ 'ftp_site(': 'resource $ftp_stream, string $command | bool',
\ 'ftp_size(': 'resource $ftp_stream, string $remote_file | int',
\ 'ftp_ssl_connect(': 'string $host [, int $port = 21 [, int $timeout = 90]] | resource',
\ 'ftp_systype(': 'resource $ftp_stream | string',
\ }
let g:phpcomplete_builtin['functions']['gd'] = {
\ 'gd_info(': 'void | array',
\ 'getimagesize(': 'string $filename [, array &$imageinfo] | array',
\ 'getimagesizefromstring(': 'string $imagedata [, array &$imageinfo] | array',
\ 'image_type_to_extension(': 'int $imagetype [, bool $include_dot = TRUE] | string',
\ 'image_type_to_mime_type(': 'int $imagetype | string',
\ 'image2wbmp(': 'resource $image [, string $filename [, int $foreground]] | bool',
\ 'imageaffine(': 'resource $image, array $affine [, array $clip] | resource',
\ 'imageaffinematrixconcat(': 'array $m1, array $m2 | array',
\ 'imageaffinematrixget(': 'int $type [, mixed $options] | array',
\ 'imagealphablending(': 'resource $image, bool $blendmode | bool',
\ 'imageantialias(': 'resource $image, bool $enabled | bool',
\ 'imagearc(': 'resource $image, int $cx, int $cy, int $width, int $height, int $start, int $end, int $color | bool',
\ 'imagebmp(': 'resource $image [, mixed $to = NULL [, bool $compressed = TRUE]] | bool',
\ 'imagechar(': 'resource $image, int $font, int $x, int $y, string $c, int $color | bool',
\ 'imagecharup(': 'resource $image, int $font, int $x, int $y, string $c, int $color | bool',
\ 'imagecolorallocate(': 'resource $image, int $red, int $green, int $blue | int',
\ 'imagecolorallocatealpha(': 'resource $image, int $red, int $green, int $blue, int $alpha | int',
\ 'imagecolorat(': 'resource $image, int $x, int $y | int',
\ 'imagecolorclosest(': 'resource $image, int $red, int $green, int $blue | int',
\ 'imagecolorclosestalpha(': 'resource $image, int $red, int $green, int $blue, int $alpha | int',
\ 'imagecolorclosesthwb(': 'resource $image, int $red, int $green, int $blue | int',
\ 'imagecolordeallocate(': 'resource $image, int $color | bool',
\ 'imagecolorexact(': 'resource $image, int $red, int $green, int $blue | int',
\ 'imagecolorexactalpha(': 'resource $image, int $red, int $green, int $blue, int $alpha | int',
\ 'imagecolormatch(': 'resource $image1, resource $image2 | bool',
\ 'imagecolorresolve(': 'resource $image, int $red, int $green, int $blue | int',
\ 'imagecolorresolvealpha(': 'resource $image, int $red, int $green, int $blue, int $alpha | int',
\ 'imagecolorset(': 'resource $image, int $index, int $red, int $green, int $blue [, int $alpha = 0] | void',
\ 'imagecolorsforindex(': 'resource $image, int $index | array',
\ 'imagecolorstotal(': 'resource $image | int',
\ 'imagecolortransparent(': 'resource $image | int',
\ 'imageconvolution(': 'resource $image, array $matrix, float $div, float $offset | bool',
\ 'imagecopy(': 'resource $dst_im, resource $src_im, int $dst_x, int $dst_y, int $src_x, int $src_y, int $src_w, int $src_h | bool',
\ 'imagecopymerge(': 'resource $dst_im, resource $src_im, int $dst_x, int $dst_y, int $src_x, int $src_y, int $src_w, int $src_h, int $pct | bool',
\ 'imagecopymergegray(': 'resource $dst_im, resource $src_im, int $dst_x, int $dst_y, int $src_x, int $src_y, int $src_w, int $src_h, int $pct | bool',
\ 'imagecopyresampled(': 'resource $dst_image, resource $src_image, int $dst_x, int $dst_y, int $src_x, int $src_y, int $dst_w, int $dst_h, int $src_w, int $src_h | bool',
\ 'imagecopyresized(': 'resource $dst_image, resource $src_image, int $dst_x, int $dst_y, int $src_x, int $src_y, int $dst_w, int $dst_h, int $src_w, int $src_h | bool',
\ 'imagecreate(': 'int $width, int $height | resource',
\ 'imagecreatefrombmp(': 'string $filename | resource',
\ 'imagecreatefromgd(': 'string $filename | resource',
\ 'imagecreatefromgd2(': 'string $filename | resource',
\ 'imagecreatefromgd2part(': 'string $filename, int $srcX, int $srcY, int $width, int $height | resource',
\ 'imagecreatefromgif(': 'string $filename | resource',
\ 'imagecreatefromjpeg(': 'string $filename | resource',
\ 'imagecreatefrompng(': 'string $filename | resource',
\ 'imagecreatefromstring(': 'string $image | resource',
\ 'imagecreatefromwbmp(': 'string $filename | resource',
\ 'imagecreatefromwebp(': 'string $filename | resource',
\ 'imagecreatefromxbm(': 'string $filename | resource',
\ 'imagecreatefromxpm(': 'string $filename | resource',
\ 'imagecreatetruecolor(': 'int $width, int $height | resource',
\ 'imagecrop(': 'resource $image, array $rect | resource',
\ 'imagecropauto(': 'resource $image [, int $mode = IMG_CROP_DEFAULT [, float $threshold = .5 [, int $color = -1]]] | resource',
\ 'imagedashedline(': 'resource $image, int $x1, int $y1, int $x2, int $y2, int $color | bool',
\ 'imagedestroy(': 'resource $image | bool',
\ 'imageellipse(': 'resource $image, int $cx, int $cy, int $width, int $height, int $color | bool',
\ 'imagefill(': 'resource $image, int $x, int $y, int $color | bool',
\ 'imagefilledarc(': 'resource $image, int $cx, int $cy, int $width, int $height, int $start, int $end, int $color, int $style | bool',
\ 'imagefilledellipse(': 'resource $image, int $cx, int $cy, int $width, int $height, int $color | bool',
\ 'imagefilledpolygon(': 'resource $image, array $points, int $num_points, int $color | bool',
\ 'imagefilledrectangle(': 'resource $image, int $x1, int $y1, int $x2, int $y2, int $color | bool',
\ 'imagefilltoborder(': 'resource $image, int $x, int $y, int $border, int $color | bool',
\ 'imagefilter(': 'resource $image, int $filtertype [, int $arg1 [, int $arg2 [, int $arg3 [, int $arg4]]]] | bool',
\ 'imageflip(': 'resource $image, int $mode | bool',
\ 'imagefontheight(': 'int $font | int',
\ 'imagefontwidth(': 'int $font | int',
\ 'imageftbbox(': 'float $size, float $angle, string $fontfile, string $text [, array $extrainfo] | array',
\ 'imagefttext(': 'resource $image, float $size, float $angle, int $x, int $y, int $color, string $fontfile, string $text [, array $extrainfo] | array',
\ 'imagegammacorrect(': 'resource $image, float $inputgamma, float $outputgamma | bool',
\ 'imagegd(': 'resource $image [, mixed $to = NULL] | bool',
\ 'imagegd2(': 'resource $image [, mixed $to = NULL [, int $chunk_size = 128 [, int $type = IMG_GD2_RAW]]] | bool',
\ 'imagegetclip(': 'resource $im | array',
\ 'imagegif(': 'resource $image [, mixed $to = NULL] | bool',
\ 'imagegrabscreen(': 'void | resource',
\ 'imagegrabwindow(': 'int $window_handle [, int $client_area = 0] | resource',
\ 'imageinterlace(': 'resource $image [, int $interlace = 0] | int',
\ 'imageistruecolor(': 'resource $image | bool',
\ 'imagejpeg(': 'resource $image [, mixed $to = NULL [, int $quality = -1]] | bool',
\ 'imagelayereffect(': 'resource $image, int $effect | bool',
\ 'imageline(': 'resource $image, int $x1, int $y1, int $x2, int $y2, int $color | bool',
\ 'imageloadfont(': 'string $file | int',
\ 'imageopenpolygon(': 'resource $image, array $points, int $num_points, int $color | bool',
\ 'imagepalettecopy(': 'resource $destination, resource $source | void',
\ 'imagepalettetotruecolor(': 'resource $src | bool',
\ 'imagepng(': 'resource $image [, mixed $to = NULL [, int $quality = -1 [, int $filters = -1]]] | bool',
\ 'imagepolygon(': 'resource $image, array $points, int $num_points, int $color | bool',
\ 'imagerectangle(': 'resource $image, int $x1, int $y1, int $x2, int $y2, int $color | bool',
\ 'imageresolution(': 'resource $image | mixed',
\ 'imagerotate(': 'resource $image, float $angle, int $bgd_color [, int $ignore_transparent = 0] | resource',
\ 'imagesavealpha(': 'resource $image, bool $saveflag | bool',
\ 'imagescale(': 'resource $image, int $new_width [, int $new_height = -1 [, int $mode = IMG_BILINEAR_FIXED]] | resource',
\ 'imagesetbrush(': 'resource $image, resource $brush | bool',
\ 'imagesetclip(': 'resource $im, int $x1, int $y1, int $x2, int $y2 | bool',
\ 'imagesetinterpolation(': 'resource $image [, int $method = IMG_BILINEAR_FIXED] | bool',
\ 'imagesetpixel(': 'resource $image, int $x, int $y, int $color | bool',
\ 'imagesetstyle(': 'resource $image, array $style | bool',
\ 'imagesetthickness(': 'resource $image, int $thickness | bool',
\ 'imagesettile(': 'resource $image, resource $tile | bool',
\ 'imagestring(': 'resource $image, int $font, int $x, int $y, string $string, int $color | bool',
\ 'imagestringup(': 'resource $image, int $font, int $x, int $y, string $string, int $color | bool',
\ 'imagesx(': 'resource $image | int',
\ 'imagesy(': 'resource $image | int',
\ 'imagetruecolortopalette(': 'resource $image, bool $dither, int $ncolors | bool',
\ 'imagettfbbox(': 'float $size, float $angle, string $fontfile, string $text | array',
\ 'imagettftext(': 'resource $image, float $size, float $angle, int $x, int $y, int $color, string $fontfile, string $text | array',
\ 'imagetypes(': 'void | int',
\ 'imagewbmp(': 'resource $image [, mixed $to = NULL [, int $foreground]] | bool',
\ 'imagewebp(': 'resource $image [, mixed $to = NULL [, int $quality = 80]] | bool',
\ 'imagexbm(': 'resource $image [, string $filename = NULL [, int $foreground]] | bool',
\ 'iptcembed(': 'string $iptcdata, string $jpeg_file_name [, int $spool = 0] | mixed',
\ 'iptcparse(': 'string $iptcblock | array',
\ 'jpeg2wbmp(': 'string $jpegname, string $wbmpname, int $dest_height, int $dest_width, int $threshold | bool',
\ 'png2wbmp(': 'string $pngname, string $wbmpname, int $dest_height, int $dest_width, int $threshold | bool',
\ }
let g:phpcomplete_builtin['functions']['geoip'] = {
\ 'geoip_asnum_by_name(': 'string $hostname | string',
\ 'geoip_continent_code_by_name(': 'string $hostname | string',
\ 'geoip_country_code_by_name(': 'string $hostname | string',
\ 'geoip_country_code3_by_name(': 'string $hostname | string',
\ 'geoip_country_name_by_name(': 'string $hostname | string',
\ 'geoip_database_info(': '[ int $database = GEOIP_COUNTRY_EDITION] | string',
\ 'geoip_db_avail(': 'int $database | bool',
\ 'geoip_db_filename(': 'int $database | string',
\ 'geoip_db_get_all_info(': 'void | array',
\ 'geoip_domain_by_name(': 'string $hostname | string',
\ 'geoip_id_by_name(': 'string $hostname | int',
\ 'geoip_isp_by_name(': 'string $hostname | string',
\ 'geoip_netspeedcell_by_name(': 'string $hostname | string',
\ 'geoip_org_by_name(': 'string $hostname | string',
\ 'geoip_record_by_name(': 'string $hostname | array',
\ 'geoip_region_by_name(': 'string $hostname | array',
\ 'geoip_region_name_by_code(': 'string $country_code, string $region_code | string',
\ 'geoip_setup_custom_directory(': 'string $path | void',
\ 'geoip_time_zone_by_country_and_region(': 'string $country_code [, string $region_code] | string',
\ }
let g:phpcomplete_builtin['functions']['gmp'] = {
\ 'gmp_abs(': 'GMP $a | GMP',
\ 'gmp_add(': 'GMP $a, GMP $b | GMP',
\ 'gmp_and(': 'GMP $a, GMP $b | GMP',
\ 'gmp_binomial(': 'mixed $n, int $k | GMP',
\ 'gmp_clrbit(': 'GMP $a, int $index | void',
\ 'gmp_cmp(': 'GMP $a, GMP $b | int',
\ 'gmp_com(': 'GMP $a | GMP',
\ 'gmp_div_q(': 'GMP $a, GMP $b [, int $round = GMP_ROUND_ZERO] | GMP',
\ 'gmp_div_qr(': 'GMP $n, GMP $d [, int $round = GMP_ROUND_ZERO] | array',
\ 'gmp_div_r(': 'GMP $n, GMP $d [, int $round = GMP_ROUND_ZERO] | GMP',
\ 'gmp_div(': 'gmp_div — Alias of gmp_div_q()',
\ 'gmp_divexact(': 'GMP $n, GMP $d | GMP',
\ 'gmp_export(': 'GMP $gmpnumber [, int $word_size = 1 [, int $options = GMP_MSW_FIRST | GMP_NATIVE_ENDIAN]] | string',
\ 'gmp_fact(': 'mixed $a | GMP',
\ 'gmp_gcd(': 'GMP $a, GMP $b | GMP',
\ 'gmp_gcdext(': 'GMP $a, GMP $b | array',
\ 'gmp_hamdist(': 'GMP $a, GMP $b | int',
\ 'gmp_import(': 'string $data [, int $word_size = 1 [, int $options = GMP_MSW_FIRST | GMP_NATIVE_ENDIAN]] | GMP',
\ 'gmp_init(': 'mixed $number [, int $base = 0] | GMP',
\ 'gmp_intval(': 'GMP $gmpnumber | int',
\ 'gmp_invert(': 'GMP $a, GMP $b | GMP',
\ 'gmp_jacobi(': 'GMP $a, GMP $p | int',
\ 'gmp_kronecker(': 'mixed $a, mixed $b | int',
\ 'gmp_lcm(': 'mixed $a, mixed $b | GMP',
\ 'gmp_legendre(': 'GMP $a, GMP $p | int',
\ 'gmp_mod(': 'GMP $n, GMP $d | GMP',
\ 'gmp_mul(': 'GMP $a, GMP $b | GMP',
\ 'gmp_neg(': 'GMP $a | GMP',
\ 'gmp_nextprime(': 'int $a | GMP',
\ 'gmp_or(': 'GMP $a, GMP $b | GMP',
\ 'gmp_perfect_power(': 'mixed $a | bool',
\ 'gmp_perfect_square(': 'GMP $a | bool',
\ 'gmp_popcount(': 'GMP $a | int',
\ 'gmp_pow(': 'GMP $base, int $exp | GMP',
\ 'gmp_powm(': 'GMP $base, GMP $exp, GMP $mod | GMP',
\ 'gmp_prob_prime(': 'GMP $a [, int $reps = 10] | int',
\ 'gmp_random_bits(': 'int $bits | GMP',
\ 'gmp_random_range(': 'GMP $min, GMP $max | GMP',
\ 'gmp_random_seed(': 'mixed $seed | void',
\ 'gmp_random(': '[ int $limiter = 20] | GMP',
\ 'gmp_root(': 'GMP $a, int $nth | GMP',
\ 'gmp_rootrem(': 'GMP $a, int $nth | array',
\ 'gmp_scan0(': 'GMP $a, int $start | int',
\ 'gmp_scan1(': 'GMP $a, int $start | int',
\ 'gmp_setbit(': 'GMP $a, int $index [, bool $bit_on = TRUE] | void',
\ 'gmp_sign(': 'GMP $a | int',
\ 'gmp_sqrt(': 'GMP $a | GMP',
\ 'gmp_sqrtrem(': 'GMP $a | array',
\ 'gmp_strval(': 'GMP $gmpnumber [, int $base = 10] | string',
\ 'gmp_sub(': 'GMP $a, GMP $b | GMP',
\ 'gmp_testbit(': 'GMP $a, int $index | bool',
\ 'gmp_xor(': 'GMP $a, GMP $b | GMP',
\ }
let g:phpcomplete_builtin['functions']['gnupg'] = {
\ 'gnupg_adddecryptkey(': 'resource $identifier, string $fingerprint, string $passphrase | bool',
\ 'gnupg_addencryptkey(': 'resource $identifier, string $fingerprint | bool',
\ 'gnupg_addsignkey(': 'resource $identifier, string $fingerprint [, string $passphrase] | bool',
\ 'gnupg_cleardecryptkeys(': 'resource $identifier | bool',
\ 'gnupg_clearencryptkeys(': 'resource $identifier | bool',
\ 'gnupg_clearsignkeys(': 'resource $identifier | bool',
\ 'gnupg_decrypt(': 'resource $identifier, string $text | string',
\ 'gnupg_decryptverify(': 'resource $identifier, string $text, string &$plaintext | array',
\ 'gnupg_encrypt(': 'resource $identifier, string $plaintext | string',
\ 'gnupg_encryptsign(': 'resource $identifier, string $plaintext | string',
\ 'gnupg_export(': 'resource $identifier, string $fingerprint | string',
\ 'gnupg_geterror(': 'resource $identifier | string',
\ 'gnupg_getprotocol(': 'resource $identifier | int',
\ 'gnupg_import(': 'resource $identifier, string $keydata | array',
\ 'gnupg_init(': 'void | resource',
\ 'gnupg_keyinfo(': 'resource $identifier, string $pattern | array',
\ 'gnupg_setarmor(': 'resource $identifier, int $armor | bool',
\ 'gnupg_seterrormode(': 'resource $identifier, int $errormode | void',
\ 'gnupg_setsignmode(': 'resource $identifier, int $signmode | bool',
\ 'gnupg_sign(': 'resource $identifier, string $plaintext | string',
\ 'gnupg_verify(': 'resource $identifier, string $signed_text, string $signature [, string &$plaintext] | array',
\ }
let g:phpcomplete_builtin['functions']['gopher'] = {
\ 'gopher_parsedir(': 'string $dirent | array',
\ }
let g:phpcomplete_builtin['functions']['intl'] = {
\ 'grapheme_extract(': 'string $haystack, int $size [, int $extract_type [, int $start = 0 [, int &$next]]] | string',
\ 'grapheme_stripos(': 'string $haystack, string $needle [, int $offset = 0] | int',
\ 'grapheme_stristr(': 'string $haystack, string $needle [, bool $before_needle = FALSE] | string',
\ 'grapheme_strlen(': 'string $input | int',
\ 'grapheme_strpos(': 'string $haystack, string $needle [, int $offset = 0] | int',
\ 'grapheme_strripos(': 'string $haystack, string $needle [, int $offset = 0] | int',
\ 'grapheme_strrpos(': 'string $haystack, string $needle [, int $offset = 0] | int',
\ 'grapheme_strstr(': 'string $haystack, string $needle [, bool $before_needle = FALSE] | string',
\ 'grapheme_substr(': 'string $string, int $start [, int $length] | string',
\ 'idn_to_ascii(': 'string $domain [, int $options = IDNA_DEFAULT [, int $variant = INTL_IDNA_VARIANT_UTS46 [, array &$idna_info]]] | string',
\ 'idn_to_utf8(': 'string $domain [, int $options = IDNA_DEFAULT [, int $variant = INTL_IDNA_VARIANT_UTS46 [, array &$idna_info]]] | string',
\ 'intl_error_name(': 'int $error_code | string',
\ 'intl_get_error_code(': 'void | int',
\ 'intl_get_error_message(': 'void | string',
\ 'intl_is_failure(': 'int $error_code | bool',
\ 'collator_get_strength(': 'Collator $coll | int',
\ 'datefmt_get_error_code(': 'IntlDateFormatter $fmt | int',
\ 'transliterator_create(': 'string $id [, int $direction] | Transliterator',
\ 'locale_get_region(': 'string $locale | string',
\ 'datefmt_set_pattern(': 'IntlDateFormatter $fmt, string $pattern | bool',
\ 'collator_get_error_message(': 'Collator $coll | string',
\ 'collator_get_locale(': 'Collator $coll, int $type | string',
\ 'transliterator_list_ids(': 'void | array',
\ 'resourcebundle_count(': 'ResourceBundle $r | int',
\ 'intlcal_is_weekend(': 'IntlCalendar $cal [, float $date = NULL] | bool',
\ 'intlcal_clear(': 'IntlCalendar $cal [, int $field = NULL] | bool',
\ 'intlcal_is_set(': 'IntlCalendar $cal, int $field | bool',
\ 'locale_compose(': 'array $subtags | string',
\ 'numfmt_format(': 'NumberFormatter $fmt, number $value [, int $type] | string',
\ 'intlcal_in_daylight_time(': 'IntlCalendar $cal | bool',
\ 'msgfmt_parse_message(': 'string $locale, string $pattern, string $value | array',
\ 'intlcal_before(': 'IntlCalendar $cal, IntlCalendar $other | bool',
\ 'collator_get_attribute(': 'Collator $coll, int $attr | int',
\ 'locale_get_display_region(': 'string $locale [, string $in_locale] | string',
\ 'numfmt_parse_currency(': 'NumberFormatter $fmt, string $value, string &$currency [, int &$position] | float',
\ 'intlcal_set_lenient(': 'IntlCalendar $cal, bool $isLenient | bool',
\ 'intlcal_after(': 'IntlCalendar $cal, IntlCalendar $other | bool',
\ 'intlcal_set_skipped_wall_time_option(': 'IntlCalendar $cal, int $wallTimeOption | bool',
\ 'locale_get_default(': 'void | string',
\ 'intlcal_get_maximum(': 'IntlCalendar $cal, int $field | int',
\ 'resourcebundle_get_error_message(': 'ResourceBundle $r | string',
\ 'intlcal_get_error_message(': 'IntlCalendar $calendar | string',
\ 'resourcebundle_get_error_code(': 'ResourceBundle $r | int',
\ 'msgfmt_format(': 'MessageFormatter $fmt, array $args | string',
\ 'datefmt_get_calendar(': 'IntlDateFormatter $fmt | int',
\ 'numfmt_get_error_message(': 'NumberFormatter $fmt | string',
\ 'intlcal_get_day_of_week_type(': 'IntlCalendar $cal, int $dayOfWeek | int',
\ 'msgfmt_get_error_code(': 'MessageFormatter $fmt | int',
\ 'locale_get_primary_language(': 'string $locale | string',
\ 'numfmt_get_error_code(': 'NumberFormatter $fmt | int',
\ 'msgfmt_create(': 'string $locale, string $pattern | MessageFormatter',
\ 'locale_get_display_variant(': 'string $locale [, string $in_locale] | string',
\ 'collator_set_attribute(': 'Collator $coll, int $attr, int $val | bool',
\ 'transliterator_create_from_rules(': 'string $id [, int $direction] | Transliterator',
\ 'locale_get_all_variants(': 'string $locale | array',
\ 'transliterator_get_error_code(': 'void | int',
\ 'collator_create(': 'string $locale | Collator',
\ 'intlcal_get_minimum(': 'IntlCalendar $cal, int $field | int',
\ 'locale_lookup(': 'array $langtag, string $locale [, bool $canonicalize = FALSE [, string $default]] | string',
\ 'intlcal_field_difference(': 'IntlCalendar $cal, float $when, int $field | int',
\ 'numfmt_create(': 'string $locale, int $style [, string $pattern] | NumberFormatter',
\ 'intlcal_equals(': 'IntlCalendar $cal, IntlCalendar $other | bool',
\ 'intlcal_roll(': 'IntlCalendar $cal, int $field, mixed $amountOrUpOrDown | bool',
\ 'collator_get_sort_key(': 'Collator $coll, string $str | string',
\ 'numfmt_get_pattern(': 'NumberFormatter $fmt | string',
\ 'intlcal_set_time_zone(': 'IntlCalendar $cal, mixed $timeZone | bool',
\ 'collator_compare(': 'Collator $coll, string $str1, string $str2 | int',
\ 'msgfmt_get_pattern(': 'MessageFormatter $fmt | string',
\ 'intlcal_to_date_time(': 'IntlCalendar $cal | DateTime',
\ 'intlcal_get_available_locales(': 'void | array',
\ 'intlcal_get_error_code(': 'IntlCalendar $calendar | int',
\ 'intlcal_add(': 'IntlCalendar $cal, int $field, int $amount | bool',
\ 'normalizer_get_raw_decomposition(': 'string $input | string',
\ 'datefmt_get_calendar_object(': 'void | IntlCalendar',
\ 'datefmt_get_timezone(': 'void | IntlTimeZone',
\ 'intlcal_get_now(': 'void | float',
\ 'intlcal_get_actual_minimum(': 'IntlCalendar $cal, int $field | int',
\ 'intlcal_is_equivalent_to(': 'IntlCalendar $cal, IntlCalendar $other | bool',
\ 'intltz_get_error_code(': 'void | int',
\ 'intlcal_get_least_maximum(': 'IntlCalendar $cal, int $field | int',
\ 'locale_filter_matches(': 'string $langtag, string $locale [, bool $canonicalize = FALSE] | bool',
\ 'datefmt_get_timezone_id(': 'IntlDateFormatter $fmt | string',
\ 'datefmt_get_datetype(': 'IntlDateFormatter $fmt | int',
\ 'intlcal_set_first_day_of_week(': 'IntlCalendar $cal, int $dayOfWeek | bool',
\ 'numfmt_get_attribute(': 'NumberFormatter $fmt, int $attr | int',
\ 'datefmt_set_timezone(': 'IntlDateFormatter $fmt, mixed $zone | bool',
\ 'intlcal_get_keyword_values_for_locale(': 'string $key, string $locale, bool $commonlyUsed | Iterator',
\ 'intlcal_get_minimal_days_in_first_week(': 'IntlCalendar $cal | int',
\ 'transliterator_create_inverse(': 'void | Transliterator',
\ 'transliterator_transliterate(': 'mixed $transliterator, string $subject [, int $start [, int $end]] | void',
\ 'collator_sort(': 'Collator $coll, array &$arr [, int $sort_flag] | bool',
\ 'intlcal_get_locale(': 'IntlCalendar $cal, int $localeType | string',
\ 'intltz_get_error_message(': 'void | string',
\ 'intlcal_set_repeated_wall_time_option(': 'IntlCalendar $cal, int $wallTimeOption | bool',
\ 'intlcal_get_greatest_minimum(': 'IntlCalendar $cal, int $field | int',
\ 'msgfmt_set_pattern(': 'MessageFormatter $fmt, string $pattern | bool',
\ 'numfmt_format_currency(': 'NumberFormatter $fmt, float $value, string $currency | string',
\ 'numfmt_set_pattern(': 'NumberFormatter $fmt, string $pattern | bool',
\ 'intlcal_get_time_zone(': 'IntlCalendar $cal | IntlTimeZone',
\ 'datefmt_create(': 'string $locale, int $datetype, int $timetype [, mixed $timezone = NULL [, mixed $calendar = NULL [, string $pattern = ""]]] | IntlDateFormatter',
\ 'numfmt_get_text_attribute(': 'NumberFormatter $fmt, int $attr | string',
\ 'datefmt_get_error_message(': 'IntlDateFormatter $fmt | string',
\ 'intlcal_get_time(': 'IntlCalendar $cal | float',
\ 'datefmt_set_lenient(': 'IntlDateFormatter $fmt, bool $lenient | bool',
\ 'resourcebundle_get(': 'ResourceBundle $r, string|int $index [, bool $fallback = TRUE] | mixed',
\ 'datefmt_get_timetype(': 'IntlDateFormatter $fmt | int',
\ 'intlcal_get_first_day_of_week(': 'IntlCalendar $cal | int',
\ 'numfmt_set_symbol(': 'NumberFormatter $fmt, int $attr, string $value | bool',
\ 'locale_get_display_name(': 'string $locale [, string $in_locale] | string',
\ 'intlcal_create_instance(': '[ mixed $timeZone = NULL [, string $locale = ""]] | IntlCalendar',
\ 'resourcebundle_create(': 'string $locale, string $bundlename [, bool $fallback] | ResourceBundle',
\ 'numfmt_set_text_attribute(': 'NumberFormatter $fmt, int $attr, string $value | bool',
\ 'collator_sort_with_sort_keys(': 'Collator $coll, array &$arr | bool',
\ 'msgfmt_parse(': 'MessageFormatter $fmt, string $value | array',
\ 'datefmt_get_locale(': 'IntlDateFormatter $fmt [, int $which] | string',
\ 'intlcal_from_date_time(': 'mixed $dateTime | IntlCalendar',
\ 'transliterator_get_error_message(': 'void | string',
\ 'intlcal_set_time(': 'IntlCalendar $cal, float $date | bool',
\ 'locale_set_default(': 'string $locale | bool',
\ 'collator_asort(': 'Collator $coll, array &$arr [, int $sort_flag] | bool',
\ 'locale_get_keywords(': 'string $locale | array',
\ 'datefmt_set_calendar(': 'IntlDateFormatter $fmt, mixed $which | bool',
\ 'locale_get_display_script(': 'string $locale [, string $in_locale] | string',
\ 'datefmt_is_lenient(': 'IntlDateFormatter $fmt | bool',
\ 'intlcal_get(': 'IntlCalendar $cal, int $field | int',
\ 'numfmt_parse(': 'NumberFormatter $fmt, string $value [, int $type [, int &$position]] | mixed',
\ 'numfmt_get_locale(': 'NumberFormatter $fmt [, int $type] | string',
\ 'intlcal_get_skipped_wall_time_option(': 'IntlCalendar $cal | int',
\ 'intlcal_set(': 'IntlCalendar $cal, int $field, int $value | bool',
\ 'intlcal_get_type(': 'IntlCalendar $cal | string',
\ 'msgfmt_get_locale(': 'NumberFormatter $formatter | string',
\ 'datefmt_get_pattern(': 'IntlDateFormatter $fmt | string',
\ 'resourcebundle_locales(': 'string $bundlename | array',
\ 'datefmt_format(': 'IntlDateFormatter $fmt, mixed $value | string',
\ 'locale_get_script(': 'string $locale | string',
\ 'locale_parse(': 'string $locale | array',
\ 'numfmt_set_attribute(': 'NumberFormatter $fmt, int $attr, int $value | bool',
\ 'msgfmt_format_message(': 'string $locale, string $pattern, array $args | string',
\ 'datefmt_parse(': 'IntlDateFormatter $fmt, string $value [, int &$position] | int',
\ 'intlcal_get_actual_maximum(': 'IntlCalendar $cal, int $field | int',
\ 'numfmt_get_symbol(': 'NumberFormatter $fmt, int $attr | string',
\ 'collator_get_error_code(': 'Collator $coll | int',
\ 'msgfmt_get_error_message(': 'MessageFormatter $fmt | string',
\ 'datefmt_format_object(': 'object $object [, mixed $format = NULL [, string $locale = NULL]] | string',
\ 'collator_set_strength(': 'Collator $coll, int $strength | bool',
\ 'datefmt_localtime(': 'IntlDateFormatter $fmt, string $value [, int &$position] | array',
\ 'intlcal_get_weekend_transition(': 'IntlCalendar $cal, string $dayOfWeek | int',
\ 'locale_get_display_language(': 'string $locale [, string $in_locale] | string',
\ 'intlcal_get_repeated_wall_time_option(': 'IntlCalendar $cal | int',
\ 'locale_accept_from_http(': 'string $header | string',
\ 'intlcal_is_lenient(': 'IntlCalendar $cal | bool',
\ }
let g:phpcomplete_builtin['functions']['gupnp'] = {
\ 'gupnp_context_get_host_ip(': 'resource $context | string',
\ 'gupnp_context_get_port(': 'resource $context | int',
\ 'gupnp_context_get_subscription_timeout(': 'resource $context | int',
\ 'gupnp_context_host_path(': 'resource $context, string $local_path, string $server_path | bool',
\ 'gupnp_context_new(': '[ string $host_ip [, int $port = 0]] | resource',
\ 'gupnp_context_set_subscription_timeout(': 'resource $context, int $timeout | void',
\ 'gupnp_context_timeout_add(': 'resource $context, int $timeout, mixed $callback [, mixed $arg] | bool',
\ 'gupnp_context_unhost_path(': 'resource $context, string $server_path | bool',
\ 'gupnp_control_point_browse_start(': 'resource $cpoint | bool',
\ 'gupnp_control_point_browse_stop(': 'resource $cpoint | bool',
\ 'gupnp_control_point_callback_set(': 'resource $cpoint, int $signal, mixed $callback [, mixed $arg] | bool',
\ 'gupnp_control_point_new(': 'resource $context, string $target | resource',
\ 'gupnp_device_action_callback_set(': 'resource $root_device, int $signal, string $action_name, mixed $callback [, mixed $arg] | bool',
\ 'gupnp_device_info_get_service(': 'resource $root_device, string $type | resource',
\ 'gupnp_device_info_get(': 'resource $root_device | array',
\ 'gupnp_root_device_get_available(': 'resource $root_device | bool',
\ 'gupnp_root_device_get_relative_location(': 'resource $root_device | string',
\ 'gupnp_root_device_new(': 'resource $context, string $location, string $description_dir | resource',
\ 'gupnp_root_device_set_available(': 'resource $root_device, bool $available | bool',
\ 'gupnp_root_device_start(': 'resource $root_device | bool',
\ 'gupnp_root_device_stop(': 'resource $root_device | bool',
\ 'gupnp_service_action_get(': 'resource $action, string $name, int $type | mixed',
\ 'gupnp_service_action_return_error(': 'resource $action, int $error_code [, string $error_description] | bool',
\ 'gupnp_service_action_return(': 'resource $action | bool',
\ 'gupnp_service_action_set(': 'resource $action, string $name, int $type, mixed $value | bool',
\ 'gupnp_service_freeze_notify(': 'resource $service | bool',
\ 'gupnp_service_info_get_introspection(': 'resource $proxy [, mixed $callback [, mixed $arg]] | mixed',
\ 'gupnp_service_info_get(': 'resource $proxy | array',
\ 'gupnp_service_introspection_get_state_variable(': 'resource $introspection, string $variable_name | array',
\ 'gupnp_service_notify(': 'resource $service, string $name, int $type, mixed $value | bool',
\ 'gupnp_service_proxy_action_get(': 'resource $proxy, string $action, string $name, int $type | mixed',
\ 'gupnp_service_proxy_action_set(': 'resource $proxy, string $action, string $name, mixed $value, int $type | bool',
\ 'gupnp_service_proxy_add_notify(': 'resource $proxy, string $value, int $type, mixed $callback [, mixed $arg] | bool',
\ 'gupnp_service_proxy_callback_set(': 'resource $proxy, int $signal, mixed $callback [, mixed $arg] | bool',
\ 'gupnp_service_proxy_get_subscribed(': 'resource $proxy | bool',
\ 'gupnp_service_proxy_remove_notify(': 'resource $proxy, string $value | bool',
\ 'gupnp_service_proxy_set_subscribed(': 'resource $proxy, bool $subscribed | bool',
\ 'gupnp_service_thaw_notify(': 'resource $service | bool',
\ }
let g:phpcomplete_builtin['functions']['hash'] = {
\ 'hash_algos(': 'void | array',
\ 'hash_copy(': 'HashContext $context | HashContext',
\ 'hash_equals(': 'string $known_string, string $user_string | bool',
\ 'hash_file(': 'string $algo, string $filename [, bool $raw_output = FALSE] | string',
\ 'hash_final(': 'HashContext $context [, bool $raw_output = FALSE] | string',
\ 'hash_hkdf(': 'string $algo, string $ikm [, int $length = 0 [, string $info = '''' [, string $salt = '''']]] | string',
\ 'hash_hmac_algos(': 'void | array',
\ 'hash_hmac_file(': 'string $algo, string $filename, string $key [, bool $raw_output = FALSE] | string',
\ 'hash_hmac(': 'string $algo, string $data, string $key [, bool $raw_output = FALSE] | string',
\ 'hash_init(': 'string $algo [, int $options = 0 [, string $key = NULL]] | HashContext',
\ 'hash_pbkdf2(': 'string $algo, string $password, string $salt, int $iterations [, int $length = 0 [, bool $raw_output = FALSE]] | string',
\ 'hash_update_file(': 'HashContext $hcontext, string $filename [, resource $scontext = NULL] | bool',
\ 'hash_update_stream(': 'HashContext $context, resource $handle [, int $length = -1] | int',
\ 'hash_update(': 'HashContext $context, string $data | bool',
\ 'hash(': 'string $algo, string $data [, bool $raw_output = FALSE] | string',
\ }
let g:phpcomplete_builtin['functions']['hyperwave_api'] = {
\ 'hwapi_attribute_new(': '[ string $name [, string $value]] | HW_API_Attribute',
\ 'hwapi_content_new(': 'string $content, string $mimetype | HW_API_Content',
\ 'hwapi_hgcsp(': 'string $hostname [, int $port] | HW_API',
\ 'hwapi_object_new(': 'array $parameter | hw_api_object',
\ }
let g:phpcomplete_builtin['functions']['iconv'] = {
\ 'iconv_get_encoding(': '[ string $type = "all"] | mixed',
\ 'iconv_mime_decode_headers(': 'string $encoded_headers [, int $mode = 0 [, string $charset = ini_get("iconv.internal_encoding")]] | array',
\ 'iconv_mime_decode(': 'string $encoded_header [, int $mode = 0 [, string $charset = ini_get("iconv.internal_encoding")]] | string',
\ 'iconv_mime_encode(': 'string $field_name, string $field_value [, array $preferences = NULL] | string',
\ 'iconv_set_encoding(': 'string $type, string $charset | bool',
\ 'iconv_strlen(': 'string $str [, string $charset = ini_get("iconv.internal_encoding")] | int',
\ 'iconv_strpos(': 'string $haystack, string $needle [, int $offset = 0 [, string $charset = ini_get("iconv.internal_encoding")]] | int',
\ 'iconv_strrpos(': 'string $haystack, string $needle [, string $charset = ini_get("iconv.internal_encoding")] | int',
\ 'iconv_substr(': 'string $str, int $offset [, int $length = iconv_strlen($str, $charset) [, string $charset = ini_get("iconv.internal_encoding")]] | string',
\ 'iconv(': 'string $in_charset, string $out_charset, string $str | string',
\ 'ob_iconv_handler(': 'string $contents, int $status | string',
\ }
let g:phpcomplete_builtin['functions']['id3'] = {
\ 'id3_get_frame_long_name(': 'string $frameId | string',
\ 'id3_get_frame_short_name(': 'string $frameId | string',
\ 'id3_get_genre_id(': 'string $genre | int',
\ 'id3_get_genre_list(': 'void | array',
\ 'id3_get_genre_name(': 'int $genre_id | string',
\ 'id3_get_tag(': 'string $filename [, int $version = ID3_BEST] | array',
\ 'id3_get_version(': 'string $filename | int',
\ 'id3_remove_tag(': 'string $filename [, int $version = ID3_V1_0] | bool',
\ 'id3_set_tag(': 'string $filename, array $tag [, int $version = ID3_V1_0] | bool',
\ }
let g:phpcomplete_builtin['functions']['informix'] = {
\ 'ifx_affected_rows(': 'resource $result_id | int',
\ 'ifx_blobinfile_mode(': 'int $mode | bool',
\ 'ifx_byteasvarchar(': 'int $mode | bool',
\ 'ifx_close(': '[ resource $link_identifier] | bool',
\ 'ifx_connect(': '[ string $database [, string $userid [, string $password]]] | resource',
\ 'ifx_copy_blob(': 'int $bid | int',
\ 'ifx_create_blob(': 'int $type, int $mode, string $param | int',
\ 'ifx_create_char(': 'string $param | int',
\ 'ifx_do(': 'resource $result_id | bool',
\ 'ifx_error(': '[ resource $link_identifier] | string',
\ 'ifx_errormsg(': '[ int $errorcode] | string',
\ 'ifx_fetch_row(': 'resource $result_id [, mixed $position] | array',
\ 'ifx_fieldproperties(': 'resource $result_id | array',
\ 'ifx_fieldtypes(': 'resource $result_id | array',
\ 'ifx_free_blob(': 'int $bid | bool',
\ 'ifx_free_char(': 'int $bid | bool',
\ 'ifx_free_result(': 'resource $result_id | bool',
\ 'ifx_get_blob(': 'int $bid | string',
\ 'ifx_get_char(': 'int $bid | string',
\ 'ifx_getsqlca(': 'resource $result_id | array',
\ 'ifx_htmltbl_result(': 'resource $result_id [, string $html_table_options] | int',
\ 'ifx_nullformat(': 'int $mode | bool',
\ 'ifx_num_fields(': 'resource $result_id | int',
\ 'ifx_num_rows(': 'resource $result_id | int',
\ 'ifx_pconnect(': '[ string $database [, string $userid [, string $password]]] | resource',
\ 'ifx_prepare(': 'string $query, resource $link_identifier [, int $cursor_def [, mixed $blobidarray]] | resource',
\ 'ifx_query(': 'string $query, resource $link_identifier [, int $cursor_type [, mixed $blobidarray]] | resource',
\ 'ifx_textasvarchar(': 'int $mode | bool',
\ 'ifx_update_blob(': 'int $bid, string $content | bool',
\ 'ifx_update_char(': 'int $bid, string $content | bool',
\ 'ifxus_close_slob(': 'int $bid | bool',
\ 'ifxus_create_slob(': 'int $mode | int',
\ 'ifxus_free_slob(': 'int $bid | bool',
\ 'ifxus_open_slob(': 'int $bid, int $mode | int',
\ 'ifxus_read_slob(': 'int $bid, int $nbytes | string',
\ 'ifxus_seek_slob(': 'int $bid, int $mode, int $offset | int',
\ 'ifxus_tell_slob(': 'int $bid | int',
\ 'ifxus_write_slob(': 'int $bid, string $content | int',
\ }
let g:phpcomplete_builtin['functions']['iis'] = {
\ 'iis_add_server(': 'string $path, string $comment, string $server_ip, int $port, string $host_name, int $rights, int $start_server | int',
\ 'iis_get_dir_security(': 'int $server_instance, string $virtual_path | int',
\ 'iis_get_script_map(': 'int $server_instance, string $virtual_path, string $script_extension | string',
\ 'iis_get_server_by_comment(': 'string $comment | int',
\ 'iis_get_server_by_path(': 'string $path | int',
\ 'iis_get_server_rights(': 'int $server_instance, string $virtual_path | int',
\ 'iis_get_service_state(': 'string $service_id | int',
\ 'iis_remove_server(': 'int $server_instance | int',
\ 'iis_set_app_settings(': 'int $server_instance, string $virtual_path, string $application_scope | int',
\ 'iis_set_dir_security(': 'int $server_instance, string $virtual_path, int $directory_flags | int',
\ 'iis_set_script_map(': 'int $server_instance, string $virtual_path, string $script_extension, string $engine_path, int $allow_scripting | int',
\ 'iis_set_server_rights(': 'int $server_instance, string $virtual_path, int $directory_flags | int',
\ 'iis_start_server(': 'int $server_instance | int',
\ 'iis_start_service(': 'string $service_id | int',
\ 'iis_stop_server(': 'int $server_instance | int',
\ 'iis_stop_service(': 'string $service_id | int',
\ }
let g:phpcomplete_builtin['functions']['imap'] = {
\ 'imap_8bit(': 'string $string | string',
\ 'imap_alerts(': 'void | array',
\ 'imap_append(': 'resource $imap_stream, string $mailbox, string $message [, string $options = NULL [, string $internal_date = NULL]] | bool',
\ 'imap_base64(': 'string $text | string',
\ 'imap_binary(': 'string $string | string',
\ 'imap_body(': 'resource $imap_stream, int $msg_number [, int $options = 0] | string',
\ 'imap_bodystruct(': 'resource $imap_stream, int $msg_number, string $section | object',
\ 'imap_check(': 'resource $imap_stream | object',
\ 'imap_clearflag_full(': 'resource $imap_stream, string $sequence, string $flag [, int $options = 0] | bool',
\ 'imap_close(': 'resource $imap_stream [, int $flag = 0] | bool',
\ 'imap_create(': 'imap_create — Alias of imap_createmailbox()',
\ 'imap_createmailbox(': 'resource $imap_stream, string $mailbox | bool',
\ 'imap_delete(': 'resource $imap_stream, int $msg_number [, int $options = 0] | bool',
\ 'imap_deletemailbox(': 'resource $imap_stream, string $mailbox | bool',
\ 'imap_errors(': 'void | array',
\ 'imap_expunge(': 'resource $imap_stream | bool',
\ 'imap_fetch_overview(': 'resource $imap_stream, string $sequence [, int $options = 0] | array',
\ 'imap_fetchbody(': 'resource $imap_stream, int $msg_number, string $section [, int $options = 0] | string',
\ 'imap_fetchheader(': 'resource $imap_stream, int $msg_number [, int $options = 0] | string',
\ 'imap_fetchmime(': 'resource $imap_stream, int $msg_number, string $section [, int $options = 0] | string',
\ 'imap_fetchstructure(': 'resource $imap_stream, int $msg_number [, int $options = 0] | object',
\ 'imap_fetchtext(': 'imap_fetchtext — Alias of imap_body()',
\ 'imap_gc(': 'resource $imap_stream, int $caches | bool',
\ 'imap_get_quota(': 'resource $imap_stream, string $quota_root | array',
\ 'imap_get_quotaroot(': 'resource $imap_stream, string $quota_root | array',
\ 'imap_getacl(': 'resource $imap_stream, string $mailbox | array',
\ 'imap_getmailboxes(': 'resource $imap_stream, string $ref, string $pattern | array',
\ 'imap_getsubscribed(': 'resource $imap_stream, string $ref, string $pattern | array',
\ 'imap_header(': 'imap_header — Alias of imap_headerinfo()',
\ 'imap_headerinfo(': 'resource $imap_stream, int $msg_number [, int $fromlength = 0 [, int $subjectlength = 0 [, string $defaulthost = NULL]]] | object',
\ 'imap_headers(': 'resource $imap_stream | array',
\ 'imap_last_error(': 'void | string',
\ 'imap_list(': 'resource $imap_stream, string $ref, string $pattern | array',
\ 'imap_listmailbox(': 'imap_listmailbox — Alias of imap_list()',
\ 'imap_listscan(': 'resource $imap_stream, string $ref, string $pattern, string $content | array',
\ 'imap_listsubscribed(': 'imap_listsubscribed — Alias of imap_lsub()',
\ 'imap_lsub(': 'resource $imap_stream, string $ref, string $pattern | array',
\ 'imap_mail_compose(': 'array $envelope, array $body | string',
\ 'imap_mail_copy(': 'resource $imap_stream, string $msglist, string $mailbox [, int $options = 0] | bool',
\ 'imap_mail_move(': 'resource $imap_stream, string $msglist, string $mailbox [, int $options = 0] | bool',
\ 'imap_mail(': 'string $to, string $subject, string $message [, string $additional_headers = NULL [, string $cc = NULL [, string $bcc = NULL [, string $rpath = NULL]]]] | bool',
\ 'imap_mailboxmsginfo(': 'resource $imap_stream | object',
\ 'imap_mime_header_decode(': 'string $text | array',
\ 'imap_msgno(': 'resource $imap_stream, int $uid | int',
\ 'imap_mutf7_to_utf8(': 'string $in | string',
\ 'imap_num_msg(': 'resource $imap_stream | int',
\ 'imap_num_recent(': 'resource $imap_stream | int',
\ 'imap_open(': 'string $mailbox, string $username, string $password [, int $options = 0 [, int $n_retries = 0 [, array $params = array()]]] | resource',
\ 'imap_ping(': 'resource $imap_stream | bool',
\ 'imap_qprint(': 'string $string | string',
\ 'imap_rename(': 'imap_rename — Alias of imap_renamemailbox()',
\ 'imap_renamemailbox(': 'resource $imap_stream, string $old_mbox, string $new_mbox | bool',
\ 'imap_reopen(': 'resource $imap_stream, string $mailbox [, int $options = 0 [, int $n_retries = 0]] | bool',
\ 'imap_rfc822_parse_adrlist(': 'string $address, string $default_host | array',
\ 'imap_rfc822_parse_headers(': 'string $headers [, string $defaulthost = "UNKNOWN"] | object',
\ 'imap_rfc822_write_address(': 'string $mailbox, string $host, string $personal | string',
\ 'imap_savebody(': 'resource $imap_stream, mixed $file, int $msg_number [, string $part_number = "" [, int $options = 0]] | bool',
\ 'imap_scan(': 'imap_scan — Alias of imap_listscan()',
\ 'imap_scanmailbox(': 'imap_scanmailbox — Alias of imap_listscan()',
\ 'imap_search(': 'resource $imap_stream, string $criteria [, int $options = SE_FREE [, string $charset = NULL]] | array',
\ 'imap_set_quota(': 'resource $imap_stream, string $quota_root, int $quota_limit | bool',
\ 'imap_setacl(': 'resource $imap_stream, string $mailbox, string $id, string $rights | bool',
\ 'imap_setflag_full(': 'resource $imap_stream, string $sequence, string $flag [, int $options = NIL] | bool',
\ 'imap_sort(': 'resource $imap_stream, int $criteria, int $reverse [, int $options = 0 [, string $search_criteria = NULL [, string $charset = NULL]]] | array',
\ 'imap_status(': 'resource $imap_stream, string $mailbox, int $options | object',
\ 'imap_subscribe(': 'resource $imap_stream, string $mailbox | bool',
\ 'imap_thread(': 'resource $imap_stream [, int $options = SE_FREE] | array',
\ 'imap_timeout(': 'int $timeout_type [, int $timeout = -1] | mixed',
\ 'imap_uid(': 'resource $imap_stream, int $msg_number | int',
\ 'imap_undelete(': 'resource $imap_stream, int $msg_number [, int $flags = 0] | bool',
\ 'imap_unsubscribe(': 'resource $imap_stream, string $mailbox | bool',
\ 'imap_utf7_decode(': 'string $text | string',
\ 'imap_utf7_encode(': 'string $data | string',
\ 'imap_utf8_to_mutf7(': 'string $in | string',
\ 'imap_utf8(': 'string $mime_encoded_text | string',
\ }
let g:phpcomplete_builtin['functions']['inclued'] = {
\ 'inclued_get_data(': 'void | array',
\ }
let g:phpcomplete_builtin['functions']['ingres'] = {
\ 'ingres_autocommit_state(': 'resource $link | bool',
\ 'ingres_autocommit(': 'resource $link | bool',
\ 'ingres_charset(': 'resource $link | string',
\ 'ingres_close(': 'resource $link | bool',
\ 'ingres_commit(': 'resource $link | bool',
\ 'ingres_connect(': '[ string $database [, string $username [, string $password [, array $options]]]] | resource',
\ 'ingres_cursor(': 'resource $result | string',
\ 'ingres_errno(': '[ resource $link] | int',
\ 'ingres_error(': '[ resource $link] | string',
\ 'ingres_errsqlstate(': '[ resource $link] | string',
\ 'ingres_escape_string(': 'resource $link, string $source_string | string',
\ 'ingres_execute(': 'resource $result [, array $params [, string $types]] | bool',
\ 'ingres_fetch_array(': 'resource $result [, int $result_type] | array',
\ 'ingres_fetch_assoc(': 'resource $result | array',
\ 'ingres_fetch_object(': 'resource $result [, int $result_type] | object',
\ 'ingres_fetch_proc_return(': 'resource $result | int',
\ 'ingres_fetch_row(': 'resource $result | array',
\ 'ingres_field_length(': 'resource $result, int $index | int',
\ 'ingres_field_name(': 'resource $result, int $index | string',
\ 'ingres_field_nullable(': 'resource $result, int $index | bool',
\ 'ingres_field_precision(': 'resource $result, int $index | int',
\ 'ingres_field_scale(': 'resource $result, int $index | int',
\ 'ingres_field_type(': 'resource $result, int $index | string',
\ 'ingres_free_result(': 'resource $result | bool',
\ 'ingres_next_error(': '[ resource $link] | bool',
\ 'ingres_num_fields(': 'resource $result | int',
\ 'ingres_num_rows(': 'resource $result | int',
\ 'ingres_pconnect(': '[ string $database [, string $username [, string $password [, array $options]]]] | resource',
\ 'ingres_prepare(': 'resource $link, string $query | mixed',
\ 'ingres_query(': 'resource $link, string $query [, array $params [, string $types]] | mixed',
\ 'ingres_result_seek(': 'resource $result, int $position | bool',
\ 'ingres_rollback(': 'resource $link | bool',
\ 'ingres_set_environment(': 'resource $link, array $options | bool',
\ 'ingres_unbuffered_query(': 'resource $link, string $query [, array $params [, string $types]] | mixed',
\ }
let g:phpcomplete_builtin['functions']['inotify'] = {
\ 'inotify_add_watch(': 'resource $inotify_instance, string $pathname, int $mask | int',
\ 'inotify_init(': 'void | resource',
\ 'inotify_queue_len(': 'resource $inotify_instance | int',
\ 'inotify_read(': 'resource $inotify_instance | array',
\ 'inotify_rm_watch(': 'resource $inotify_instance, int $watch_descriptor | bool',
\ }
let g:phpcomplete_builtin['functions']['soap'] = {
\ 'is_soap_fault(': 'mixed $object | bool',
\ 'use_soap_error_handler(': '[ bool $handler = TRUE] | bool',
\ }
let g:phpcomplete_builtin['functions']['taint'] = {
\ 'is_tainted(': 'string $string | bool',
\ 'taint(': 'string &$string [, string $...] | bool',
\ 'untaint(': 'string &$string [, string $...] | bool',
\ }
let g:phpcomplete_builtin['functions']['json'] = {
\ 'json_decode(': 'string $json [, bool $assoc = FALSE [, int $depth = 512 [, int $options = 0]]] | mixed',
\ 'json_encode(': 'mixed $value [, int $options = 0 [, int $depth = 512]] | string',
\ 'json_last_error_msg(': 'void | string',
\ 'json_last_error(': 'void | int',
\ }
let g:phpcomplete_builtin['functions']['judy'] = {
\ 'judy_type(': 'Judy $array | int',
\ 'judy_version(': 'void | string',
\ }
let g:phpcomplete_builtin['functions']['kadm5'] = {
\ 'kadm5_chpass_principal(': 'resource $handle, string $principal, string $password | bool',
\ 'kadm5_create_principal(': 'resource $handle, string $principal [, string $password [, array $options]] | bool',
\ 'kadm5_delete_principal(': 'resource $handle, string $principal | bool',
\ 'kadm5_destroy(': 'resource $handle | bool',
\ 'kadm5_flush(': 'resource $handle | bool',
\ 'kadm5_get_policies(': 'resource $handle | array',
\ 'kadm5_get_principal(': 'resource $handle, string $principal | array',
\ 'kadm5_get_principals(': 'resource $handle | array',
\ 'kadm5_init_with_password(': 'string $admin_server, string $realm, string $principal, string $password | resource',
\ 'kadm5_modify_principal(': 'resource $handle, string $principal, array $options | bool',
\ }
let g:phpcomplete_builtin['functions']['ldap'] = {
\ 'ldap_8859_to_t61(': 'string $value | string',
\ 'ldap_add_ext(': 'resource $link_identifier, string $dn, array $entry [, array $serverctrls = array()] | resource',
\ 'ldap_add(': 'resource $link_identifier, string $dn, array $entry [, array $serverctrls = array()] | bool',
\ 'ldap_bind_ext(': 'resource $link_identifier [, string $bind_rdn = NULL [, string $bind_password = NULL [, array $serverctrls = array()]]] | resource',
\ 'ldap_bind(': 'resource $link_identifier [, string $bind_rdn = NULL [, string $bind_password = NULL [, array $serverctrls = array()]]] | bool',
\ 'ldap_close(': 'ldap_close — Alias of ldap_unbind()',
\ 'ldap_compare(': 'resource $link_identifier, string $dn, string $attribute, string $value [, array $serverctrls = array()] | mixed',
\ 'ldap_connect(': '[ string $ldap_uri = NULL] | resource',
\ 'ldap_control_paged_result_response(': 'resource $link, resource $result [, string &$cookie [, int &$estimated]] | bool',
\ 'ldap_control_paged_result(': 'resource $link, int $pagesize [, bool $iscritical = FALSE [, string $cookie = ""]] | bool',
\ 'ldap_count_entries(': 'resource $link_identifier, resource $result_identifier | int',
\ 'ldap_delete_ext(': 'resource $link_identifier, string $dn [, array $serverctrls = array()] | resource',
\ 'ldap_delete(': 'resource $link_identifier, string $dn [, array $serverctrls = array()] | bool',
\ 'ldap_dn2ufn(': 'string $dn | string',
\ 'ldap_err2str(': 'int $errno | string',
\ 'ldap_errno(': 'resource $link_identifier | int',
\ 'ldap_error(': 'resource $link_identifier | string',
\ 'ldap_escape(': 'string $value [, string $ignore = "" [, int $flags = 0]] | string',
\ 'ldap_exop_passwd(': 'resource $link [, string $user = "" [, string $oldpw = "" [, string $newpw = "" [, array &$serverctrls]]]] | mixed',
\ 'ldap_exop_refresh(': 'resource $link, string $dn, int $ttl | int',
\ 'ldap_exop_whoami(': 'resource $link | string',
\ 'ldap_exop(': 'resource $link, string $reqoid [, string $reqdata = NULL [, array $serverctrls = NULL [, string &$retdata [, string &$retoid]]]] | mixed',
\ 'ldap_explode_dn(': 'string $dn, int $with_attrib | array',
\ 'ldap_first_attribute(': 'resource $link_identifier, resource $result_entry_identifier | string',
\ 'ldap_first_entry(': 'resource $link_identifier, resource $result_identifier | resource',
\ 'ldap_first_reference(': 'resource $link, resource $result | resource',
\ 'ldap_free_result(': 'resource $result_identifier | bool',
\ 'ldap_get_attributes(': 'resource $link_identifier, resource $result_entry_identifier | array',
\ 'ldap_get_dn(': 'resource $link_identifier, resource $result_entry_identifier | string',
\ 'ldap_get_entries(': 'resource $link_identifier, resource $result_identifier | array',
\ 'ldap_get_option(': 'resource $link_identifier, int $option, mixed &$retval | bool',
\ 'ldap_get_values_len(': 'resource $link_identifier, resource $result_entry_identifier, string $attribute | array',
\ 'ldap_get_values(': 'resource $link_identifier, resource $result_entry_identifier, string $attribute | array',
\ 'ldap_list(': 'resource $link_identifier, string $base_dn, string $filter [, array $attributes = array("*") [, int $attrsonly = 0 [, int $sizelimit = -1 [, int $timelimit = -1 [, int $deref = LDAP_DEREF_NEVER [, array $serverctrls = array()]]]]]] | resource',
\ 'ldap_mod_add(': 'resource $link_identifier, string $dn, array $entry [, array $serverctrls = array()] | bool',
\ 'ldap_mod_del(': 'resource $link_identifier, string $dn, array $entry [, array $serverctrls = array()] | bool',
\ 'ldap_mod_replace(': 'resource $link_identifier, string $dn, array $entry [, array $serverctrls = array()] | bool',
\ 'ldap_mod_add_ext(': 'resource $link_identifier, string $dn, array $entry [, array $serverctrls = array()] | resource',
\ 'ldap_mod_del_ext(': 'resource $link_identifier, string $dn, array $entry [, array $serverctrls = array()] | resource',
\ 'ldap_mod_replace_ext(': 'resource $link_identifier, string $dn, array $entry [, array $serverctrls = array()] | resource',
\ 'ldap_modify_batch(': 'resource $link_identifier, string $dn, array $entry [, array $serverctrls = array()] | bool',
\ 'ldap_modify(': 'ldap_modify — Alias of ldap_mod_replace()',
\ 'ldap_next_attribute(': 'resource $link_identifier, resource $result_entry_identifier | string',
\ 'ldap_next_entry(': 'resource $link_identifier, resource $result_entry_identifier | resource',
\ 'ldap_next_reference(': 'resource $link, resource $entry | resource',
\ 'ldap_parse_exop(': 'resource $link, resource $result [, string &$retdata [, string &$retoid]] | bool',
\ 'ldap_parse_reference(': 'resource $link, resource $entry, array &$referrals | bool',
\ 'ldap_parse_result(': 'resource $link, resource $result, int &$errcode [, string &$matcheddn [, string &$errmsg [, array &$referrals [, array &$serverctrls]]]] | bool',
\ 'ldap_read(': 'resource $link_identifier, string $base_dn, string $filter [, array $attributes = array("*") [, int $attrsonly = 0 [, int $sizelimit = -1 [, int $timelimit = -1 [, int $deref = LDAP_DEREF_NEVER [, array $serverctrls = array()]]]]]] | resource',
\ 'ldap_rename_ext(': 'resource $link_identifier, string $dn, string $newrdn, string $newparent, bool $deleteoldrdn [, array $serverctrls = array()] | resource',
\ 'ldap_rename(': 'resource $link_identifier, string $dn, string $newrdn, string $newparent, bool $deleteoldrdn [, array $serverctrls = array()] | bool',
\ 'ldap_sasl_bind(': 'resource $link [, string $binddn = NULL [, string $password = NULL [, string $sasl_mech = NULL [, string $sasl_realm = NULL [, string $sasl_authc_id = NULL [, string $sasl_authz_id = NULL [, string $props = NULL]]]]]]] | bool',
\ 'ldap_search(': 'resource $link_identifier, string $base_dn, string $filter [, array $attributes = array("*") [, int $attrsonly = 0 [, int $sizelimit = -1 [, int $timelimit = -1 [, int $deref = LDAP_DEREF_NEVER [, array $serverctrls = array()]]]]]] | resource',
\ 'ldap_set_option(': 'resource $link_identifier, int $option, mixed $newval | bool',
\ 'ldap_set_rebind_proc(': 'resource $link, callable $callback | bool',
\ 'ldap_sort(': 'resource $link, resource $result, string $sortfilter | bool',
\ 'ldap_start_tls(': 'resource $link | bool',
\ 'ldap_t61_to_8859(': 'string $value | string',
\ 'ldap_unbind(': 'resource $link_identifier | bool',
\ }
let g:phpcomplete_builtin['functions']['libxml'] = {
\ 'libxml_clear_errors(': 'void | void',
\ 'libxml_disable_entity_loader(': '[ bool $disable = TRUE] | bool',
\ 'libxml_get_errors(': 'void | array',
\ 'libxml_get_last_error(': 'void | LibXMLError',
\ 'libxml_set_external_entity_loader(': 'callable $resolver_function | bool',
\ 'libxml_set_streams_context(': 'resource $streams_context | void',
\ 'libxml_use_internal_errors(': '[ bool $use_errors = FALSE] | bool',
\ }
let g:phpcomplete_builtin['functions']['lzf'] = {
\ 'lzf_compress(': 'string $data | string',
\ 'lzf_decompress(': 'string $data | string',
\ 'lzf_optimized_for(': 'void | int',
\ }
let g:phpcomplete_builtin['functions']['mcve'] = {
\ 'm_checkstatus(': 'resource $conn, int $identifier | int',
\ 'm_completeauthorizations(': 'resource $conn, int &$array | int',
\ 'm_connect(': 'resource $conn | int',
\ 'm_connectionerror(': 'resource $conn | string',
\ 'm_deletetrans(': 'resource $conn, int $identifier | bool',
\ 'm_destroyconn(': 'resource $conn | bool',
\ 'm_destroyengine(': 'void | void',
\ 'm_getcell(': 'resource $conn, int $identifier, string $column, int $row | string',
\ 'm_getcellbynum(': 'resource $conn, int $identifier, int $column, int $row | string',
\ 'm_getcommadelimited(': 'resource $conn, int $identifier | string',
\ 'm_getheader(': 'resource $conn, int $identifier, int $column_num | string',
\ 'm_initconn(': 'void | resource',
\ 'm_initengine(': 'string $location | int',
\ 'm_iscommadelimited(': 'resource $conn, int $identifier | int',
\ 'm_maxconntimeout(': 'resource $conn, int $secs | bool',
\ 'm_monitor(': 'resource $conn | int',
\ 'm_numcolumns(': 'resource $conn, int $identifier | int',
\ 'm_numrows(': 'resource $conn, int $identifier | int',
\ 'm_parsecommadelimited(': 'resource $conn, int $identifier | int',
\ 'm_responsekeys(': 'resource $conn, int $identifier | array',
\ 'm_responseparam(': 'resource $conn, int $identifier, string $key | string',
\ 'm_returnstatus(': 'resource $conn, int $identifier | int',
\ 'm_setblocking(': 'resource $conn, int $tf | int',
\ 'm_setdropfile(': 'resource $conn, string $directory | int',
\ 'm_setip(': 'resource $conn, string $host, int $port | int',
\ 'm_setssl_cafile(': 'resource $conn, string $cafile | int',
\ 'm_setssl_files(': 'resource $conn, string $sslkeyfile, string $sslcertfile | int',
\ 'm_setssl(': 'resource $conn, string $host, int $port | int',
\ 'm_settimeout(': 'resource $conn, int $seconds | int',
\ 'm_sslcert_gen_hash(': 'string $filename | string',
\ 'm_transactionssent(': 'resource $conn | int',
\ 'm_transinqueue(': 'resource $conn | int',
\ 'm_transkeyval(': 'resource $conn, int $identifier, string $key, string $value | int',
\ 'm_transnew(': 'resource $conn | int',
\ 'm_transsend(': 'resource $conn, int $identifier | int',
\ 'm_uwait(': 'int $microsecs | int',
\ 'm_validateidentifier(': 'resource $conn, int $tf | int',
\ 'm_verifyconnection(': 'resource $conn, int $tf | bool',
\ 'm_verifysslcert(': 'resource $conn, int $tf | bool',
\ }
let g:phpcomplete_builtin['functions']['mailparse'] = {
\ 'mailparse_determine_best_xfer_encoding(': 'resource $fp | string',
\ 'mailparse_msg_create(': 'void | resource',
\ 'mailparse_msg_extract_part_file(': 'resource $mimemail, mixed $filename [, callable $callbackfunc] | string',
\ 'mailparse_msg_extract_part(': 'resource $mimemail, string $msgbody [, callable $callbackfunc] | void',
\ 'mailparse_msg_extract_whole_part_file(': 'resource $mimemail, string $filename [, callable $callbackfunc] | string',
\ 'mailparse_msg_free(': 'resource $mimemail | bool',
\ 'mailparse_msg_get_part_data(': 'resource $mimemail | array',
\ 'mailparse_msg_get_part(': 'resource $mimemail, string $mimesection | resource',
\ 'mailparse_msg_get_structure(': 'resource $mimemail | array',
\ 'mailparse_msg_parse_file(': 'string $filename | resource',
\ 'mailparse_msg_parse(': 'resource $mimemail, string $data | bool',
\ 'mailparse_rfc822_parse_addresses(': 'string $addresses | array',
\ 'mailparse_stream_encode(': 'resource $sourcefp, resource $destfp, string $encoding | bool',
\ 'mailparse_uudecode_all(': 'resource $fp | array',
\ }
let g:phpcomplete_builtin['functions']['maxdb'] = {
\ 'maxdb_affected_rows(': 'resource $link | int',
\ 'maxdb_autocommit(': 'resource $link, bool $mode | bool',
\ 'maxdb_bind_param(': 'maxdb_bind_param — Alias of maxdb_stmt_bind_param()',
\ 'maxdb_bind_result(': 'maxdb_bind_result — Alias of maxdb_stmt_bind_result()',
\ 'maxdb_change_user(': 'resource $link, string $user, string $password, string $database | bool',
\ 'maxdb_character_set_name(': 'resource $link | string',
\ 'maxdb_client_encoding(': 'maxdb_client_encoding — Alias of maxdb_character_set_name()',
\ 'maxdb_close_long_data(': 'maxdb_close_long_data — Alias of maxdb_stmt_close_long_data()',
\ 'maxdb_close(': 'resource $link | bool',
\ 'maxdb_commit(': 'resource $link | bool',
\ 'maxdb_connect_errno(': 'void | int',
\ 'maxdb_connect_error(': 'void | string',
\ 'maxdb_connect(': '[ string $host [, string $username [, string $passwd [, string $dbname [, int $port = 0 [, string $socket]]]]]] | resource',
\ 'maxdb_data_seek(': 'resource $result, int $offset | bool',
\ 'maxdb_debug(': 'string $debug | void',
\ 'maxdb_disable_reads_from_master(': 'resource $link | bool',
\ 'maxdb_disable_rpl_parse(': 'resource $link | bool',
\ 'maxdb_dump_debug_info(': 'resource $link | bool',
\ 'maxdb_embedded_connect(': '[ string $dbname] | resource',
\ 'maxdb_enable_reads_from_master(': 'resource $link | bool',
\ 'maxdb_enable_rpl_parse(': 'resource $link | bool',
\ 'maxdb_errno(': 'resource $link | int',
\ 'maxdb_error(': 'resource $link | string',
\ 'maxdb_escape_string(': 'maxdb_escape_string — Alias of maxdb_real_escape_string()',
\ 'maxdb_execute(': 'maxdb_execute — Alias of maxdb_stmt_execute()',
\ 'maxdb_fetch_array(': 'resource $result [, int $resulttype] | mixed',
\ 'maxdb_fetch_assoc(': 'resource $result | array',
\ 'maxdb_fetch_field_direct(': 'resource $result, int $fieldnr | mixed',
\ 'maxdb_fetch_field(': 'resource $result | mixed',
\ 'maxdb_fetch_fields(': 'resource $result | mixed',
\ 'maxdb_fetch_lengths(': 'resource $result | array',
\ 'maxdb_fetch_object(': 'object $result | object',
\ 'maxdb_fetch_row(': 'resource $result | mixed',
\ 'maxdb_fetch(': 'maxdb_fetch — Alias of maxdb_stmt_fetch()',
\ 'maxdb_field_count(': 'resource $link | int',
\ 'maxdb_field_seek(': 'resource $result, int $fieldnr | bool',
\ 'maxdb_field_tell(': 'resource $result | int',
\ 'maxdb_free_result(': 'resource $result | void',
\ 'maxdb_get_client_info(': 'void | string',
\ 'maxdb_get_client_version(': 'void | int',
\ 'maxdb_get_host_info(': 'resource $link | string',
\ 'maxdb_get_metadata(': 'maxdb_get_metadata — Alias of maxdb_stmt_result_metadata()',
\ 'maxdb_get_proto_info(': 'resource $link | int',
\ 'maxdb_get_server_info(': 'resource $link | string',
\ 'maxdb_get_server_version(': 'resource $link | int',
\ 'maxdb_info(': 'resource $link | string',
\ 'maxdb_init(': 'void | resource',
\ 'maxdb_insert_id(': 'resource $link | mixed',
\ 'maxdb_kill(': 'resource $link, int $processid | bool',
\ 'maxdb_master_query(': 'resource $link, string $query | bool',
\ 'maxdb_more_results(': 'resource $link | bool',
\ 'maxdb_multi_query(': 'resource $link, string $query | bool',
\ 'maxdb_next_result(': 'resource $link | bool',
\ 'maxdb_num_fields(': 'resource $result | int',
\ 'maxdb_num_rows(': 'resource $result | int',
\ 'maxdb_options(': 'resource $link, int $option, mixed $value | bool',
\ 'maxdb_param_count(': 'maxdb_param_count — Alias of maxdb_stmt_param_count()',
\ 'maxdb_ping(': 'resource $link | bool',
\ 'maxdb_prepare(': 'resource $link, string $query | resource',
\ 'maxdb_query(': 'resource $link, string $query [, int $resultmode] | mixed',
\ 'maxdb_real_connect(': 'resource $link [, string $hostname [, string $username [, string $passwd [, string $dbname [, int $port = 0 [, string $socket]]]]]] | bool',
\ 'maxdb_real_escape_string(': 'resource $link, string $escapestr | string',
\ 'maxdb_real_query(': 'resource $link, string $query | bool',
\ 'maxdb_report(': 'int $flags | bool',
\ 'maxdb_rollback(': 'resource $link | bool',
\ 'maxdb_rpl_parse_enabled(': 'resource $link | int',
\ 'maxdb_rpl_probe(': 'resource $link | bool',
\ 'maxdb_rpl_query_type(': 'resource $link | int',
\ 'maxdb_select_db(': 'resource $link, string $dbname | bool',
\ 'maxdb_send_long_data(': 'maxdb_send_long_data — Alias of maxdb_stmt_send_long_data()',
\ 'maxdb_send_query(': 'resource $link, string $query | bool',
\ 'maxdb_server_end(': 'void | void',
\ 'maxdb_server_init(': '[ array $server [, array $groups]] | bool',
\ 'maxdb_set_opt(': 'maxdb_set_opt — Alias of maxdb_options()',
\ 'maxdb_sqlstate(': 'resource $link | string',
\ 'maxdb_ssl_set(': 'resource $link, string $key, string $cert, string $ca, string $capath, string $cipher | bool',
\ 'maxdb_stat(': 'resource $link | string',
\ 'maxdb_stmt_affected_rows(': 'resource $stmt | int',
\ 'maxdb_stmt_bind_param(': 'resource $stmt, string $types, mixed &$var1 [, mixed &$...] | bool',
\ 'maxdb_stmt_bind_result(': 'resource $stmt, mixed &$var1 [, mixed &$...] | bool',
\ 'maxdb_stmt_close_long_data(': 'resource $stmt, int $param_nr | bool',
\ 'maxdb_stmt_close(': 'resource $stmt | bool',
\ 'maxdb_stmt_data_seek(': 'resource $statement, int $offset | bool',
\ 'maxdb_stmt_errno(': 'resource $stmt | int',
\ 'maxdb_stmt_error(': 'resource $stmt | string',
\ 'maxdb_stmt_execute(': 'resource $stmt | bool',
\ 'maxdb_stmt_fetch(': 'resource $stmt | bool',
\ 'maxdb_stmt_free_result(': 'resource $stmt | void',
\ 'maxdb_stmt_init(': 'resource $link | resource',
\ 'maxdb_stmt_num_rows(': 'resource $stmt | int',
\ 'maxdb_stmt_param_count(': 'resource $stmt | int',
\ 'maxdb_stmt_prepare(': 'resource $stmt, string $query | bool',
\ 'maxdb_stmt_reset(': 'resource $stmt | bool',
\ 'maxdb_stmt_result_metadata(': 'resource $stmt | resource',
\ 'maxdb_stmt_send_long_data(': 'resource $stmt, int $param_nr, string $data | bool',
\ 'maxdb_stmt_sqlstate(': 'resource $stmt | string',
\ 'maxdb_stmt_store_result(': 'resource $stmt | bool',
\ 'maxdb_store_result(': 'resource $link | resource',
\ 'maxdb_thread_id(': 'resource $link | int',
\ 'maxdb_thread_safe(': 'void | bool',
\ 'maxdb_use_result(': 'resource $link | resource',
\ 'maxdb_warning_count(': 'resource $link | int',
\ }
let g:phpcomplete_builtin['functions']['multibyte_string'] = {
\ 'mb_check_encoding(': '[ string $var = NULL [, string $encoding = mb_internal_encoding()]] | bool',
\ 'mb_chr(': 'int $cp [, string $encoding] | string',
\ 'mb_convert_case(': 'string $str, int $mode [, string $encoding = mb_internal_encoding()] | string',
\ 'mb_convert_encoding(': 'string $str, string $to_encoding [, mixed $from_encoding = mb_internal_encoding()] | string',
\ 'mb_convert_kana(': 'string $str [, string $option = "KV" [, string $encoding = mb_internal_encoding()]] | string',
\ 'mb_convert_variables(': 'string $to_encoding, mixed $from_encoding, mixed &$vars [, mixed &$...] | string',
\ 'mb_decode_mimeheader(': 'string $str | string',
\ 'mb_decode_numericentity(': 'string $str, array $convmap [, string $encoding = mb_internal_encoding() [, bool $is_hex = FALSE]] | string',
\ 'mb_detect_encoding(': 'string $str [, mixed $encoding_list = mb_detect_order() [, bool $strict = FALSE]] | string',
\ 'mb_detect_order(': '[ mixed $encoding_list = mb_detect_order()] | mixed',
\ 'mb_encode_mimeheader(': 'string $str [, string $charset = mb_language() [, string $transfer_encoding = "B" [, string $linefeed = "\r\n" [, int $indent = 0]]]] | string',
\ 'mb_encode_numericentity(': 'string $str, array $convmap [, string $encoding = mb_internal_encoding() [, bool $is_hex = FALSE]] | string',
\ 'mb_encoding_aliases(': 'string $encoding | array',
\ 'mb_ereg_match(': 'string $pattern, string $string [, string $option = "msr"] | bool',
\ 'mb_ereg_replace_callback(': 'string $pattern, callable $callback, string $string [, string $option = "msr"] | string',
\ 'mb_ereg_replace(': 'string $pattern, string $replacement, string $string [, string $option = "msr"] | string',
\ 'mb_ereg_search_getpos(': 'void | int',
\ 'mb_ereg_search_getregs(': 'void | array',
\ 'mb_ereg_search_init(': 'string $string [, string $pattern [, string $option = "msr"]] | bool',
\ 'mb_ereg_search_pos(': '[ string $pattern [, string $option = "ms"]] | array',
\ 'mb_ereg_search_regs(': '[ string $pattern [, string $option = "ms"]] | array',
\ 'mb_ereg_search_setpos(': 'int $position | bool',
\ 'mb_ereg_search(': '[ string $pattern [, string $option = "ms"]] | bool',
\ 'mb_ereg(': 'string $pattern, string $string [, array &$regs] | int',
\ 'mb_eregi_replace(': 'string $pattern, string $replace, string $string [, string $option = "msri"] | string',
\ 'mb_eregi(': 'string $pattern, string $string [, array &$regs] | int',
\ 'mb_get_info(': '[ string $type = "all"] | mixed',
\ 'mb_http_input(': '[ string $type = ""] | mixed',
\ 'mb_http_output(': '[ string $encoding = mb_http_output()] | mixed',
\ 'mb_internal_encoding(': '[ string $encoding = mb_internal_encoding()] | mixed',
\ 'mb_language(': 'string $language | bool',
\ 'mb_list_encodings(': 'void | array',
\ 'mb_ord(': 'string $str [, string $encoding] | int',
\ 'mb_output_handler(': 'string $contents, int $status | string',
\ 'mb_parse_str(': 'string $encoded_string [, array &$result] | bool',
\ 'mb_preferred_mime_name(': 'string $encoding | string',
\ 'mb_regex_encoding(': '[ string $encoding = mb_regex_encoding()] | mixed',
\ 'mb_regex_set_options(': '[ string $options = mb_regex_set_options()] | string',
\ 'mb_scrub(': 'string $str [, string $encoding] | string',
\ 'mb_send_mail(': 'string $to, string $subject, string $message [, mixed $additional_headers = NULL [, string $additional_parameter = NULL]] | bool',
\ 'mb_split(': 'string $pattern, string $string [, int $limit = -1] | array',
\ 'mb_strcut(': 'string $str, int $start [, int $length = NULL [, string $encoding = mb_internal_encoding()]] | string',
\ 'mb_strimwidth(': 'string $str, int $start, int $width [, string $trimmarker = "" [, string $encoding = mb_internal_encoding()]] | string',
\ 'mb_stripos(': 'string $haystack, string $needle [, int $offset = 0 [, string $encoding = mb_internal_encoding()]] | int',
\ 'mb_stristr(': 'string $haystack, string $needle [, bool $before_needle = FALSE [, string $encoding = mb_internal_encoding()]] | string',
\ 'mb_strlen(': 'string $str [, string $encoding = mb_internal_encoding()] | int',
\ 'mb_strpos(': 'string $haystack, string $needle [, int $offset = 0 [, string $encoding = mb_internal_encoding()]] | int',
\ 'mb_strrchr(': 'string $haystack, string $needle [, bool $part = FALSE [, string $encoding = mb_internal_encoding()]] | string',
\ 'mb_strrichr(': 'string $haystack, string $needle [, bool $part = FALSE [, string $encoding = mb_internal_encoding()]] | string',
\ 'mb_strripos(': 'string $haystack, string $needle [, int $offset = 0 [, string $encoding = mb_internal_encoding()]] | int',
\ 'mb_strrpos(': 'string $haystack, string $needle [, int $offset = 0 [, string $encoding = mb_internal_encoding()]] | int',
\ 'mb_strstr(': 'string $haystack, string $needle [, bool $before_needle = FALSE [, string $encoding = mb_internal_encoding()]] | string',
\ 'mb_strtolower(': 'string $str [, string $encoding = mb_internal_encoding()] | string',
\ 'mb_strtoupper(': 'string $str [, string $encoding = mb_internal_encoding()] | string',
\ 'mb_strwidth(': 'string $str [, string $encoding = mb_internal_encoding()] | int',
\ 'mb_substitute_character(': '[ mixed $substchar = mb_substitute_character()] | mixed',
\ 'mb_substr_count(': 'string $haystack, string $needle [, string $encoding = mb_internal_encoding()] | int',
\ 'mb_substr(': 'string $str, int $start [, int $length = NULL [, string $encoding = mb_internal_encoding()]] | string',
\ }
let g:phpcomplete_builtin['functions']['mcrypt'] = {
\ 'mcrypt_decrypt(': 'string $cipher, string $key, string $data, string $mode [, string $iv] | string',
\ 'mcrypt_enc_get_algorithms_name(': 'resource $td | string',
\ 'mcrypt_enc_get_block_size(': 'resource $td | int',
\ 'mcrypt_enc_get_iv_size(': 'resource $td | int',
\ 'mcrypt_enc_get_key_size(': 'resource $td | int',
\ 'mcrypt_enc_get_modes_name(': 'resource $td | string',
\ 'mcrypt_enc_get_supported_key_sizes(': 'resource $td | array',
\ 'mcrypt_enc_is_block_algorithm_mode(': 'resource $td | bool',
\ 'mcrypt_enc_is_block_algorithm(': 'resource $td | bool',
\ 'mcrypt_enc_is_block_mode(': 'resource $td | bool',
\ 'mcrypt_enc_self_test(': 'resource $td | int',
\ 'mcrypt_encrypt(': 'string $cipher, string $key, string $data, string $mode [, string $iv] | string',
\ 'mcrypt_generic_deinit(': 'resource $td | bool',
\ 'mcrypt_generic_init(': 'resource $td, string $key, string $iv | int',
\ 'mcrypt_generic(': 'resource $td, string $data | string',
\ 'mcrypt_get_block_size(': 'int $cipher | int',
\ 'mcrypt_get_cipher_name(': 'int $cipher | string',
\ 'mcrypt_get_iv_size(': 'string $cipher, string $mode | int',
\ 'mcrypt_get_key_size(': 'int $cipher | int',
\ 'mcrypt_list_algorithms(': '[ string $lib_dir = ini_get("mcrypt.algorithms_dir")] | array',
\ 'mcrypt_list_modes(': '[ string $lib_dir = ini_get("mcrypt.modes_dir")] | array',
\ 'mcrypt_module_close(': 'resource $td | bool',
\ 'mcrypt_module_get_algo_block_size(': 'string $algorithm [, string $lib_dir] | int',
\ 'mcrypt_module_get_algo_key_size(': 'string $algorithm [, string $lib_dir] | int',
\ 'mcrypt_module_get_supported_key_sizes(': 'string $algorithm [, string $lib_dir] | array',
\ 'mcrypt_module_is_block_algorithm_mode(': 'string $mode [, string $lib_dir] | bool',
\ 'mcrypt_module_is_block_algorithm(': 'string $algorithm [, string $lib_dir] | bool',
\ 'mcrypt_module_is_block_mode(': 'string $mode [, string $lib_dir] | bool',
\ 'mcrypt_module_open(': 'string $algorithm, string $algorithm_directory, string $mode, string $mode_directory | resource',
\ 'mcrypt_module_self_test(': 'string $algorithm [, string $lib_dir] | bool',
\ 'mdecrypt_generic(': 'resource $td, string $data | string',
\ }
let g:phpcomplete_builtin['functions']['memcache'] = {
\ 'memcache_debug(': 'bool $on_off | bool',
\ }
let g:phpcomplete_builtin['functions']['mhash'] = {
\ 'mhash_count(': 'void | int',
\ 'mhash_get_block_size(': 'int $hash | int',
\ 'mhash_get_hash_name(': 'int $hash | string',
\ 'mhash_keygen_s2k(': 'int $hash, string $password, string $salt, int $bytes | string',
\ 'mhash(': 'int $hash, string $data [, string $key] | string',
\ }
let g:phpcomplete_builtin['functions']['ming'] = {
\ 'ming_keypress(': 'string $char | int',
\ 'ming_setcubicthreshold(': 'int $threshold | void',
\ 'ming_setscale(': 'float $scale | void',
\ 'ming_setswfcompression(': 'int $level | void',
\ 'ming_useconstants(': 'int $use | void',
\ 'ming_useswfversion(': 'int $version | void',
\ }
let g:phpcomplete_builtin['functions']['vendor_specific_database_extensions'] = {
\ 'MongoDB\BSON\fromJSON(': 'string $json | string',
\ 'MongoDB\BSON\fromPHP(': 'array|object $value | string',
\ 'MongoDB\BSON\toCanonicalExtendedJSON(': 'string $bson | string',
\ 'MongoDB\BSON\toJSON(': 'string $bson | string',
\ 'MongoDB\BSON\toPHP(': 'string $bson [, array $typeMap = array()] | array|object',
\ 'MongoDB\BSON\toRelaxedExtendedJSON(': 'string $bson | string',
\ 'MongoDB\Driver\Monitoring\addSubscriber(': 'MongoDB\Driver\Monitoring\Subscriber $subscriber | void',
\ 'MongoDB\Driver\Monitoring\removeSubscriber(': 'MongoDB\Driver\Monitoring\Subscriber $subscriber | void',
\ 'mysql_xdevapi\expression(': 'string $expression | object',
\ 'mysql_xdevapi\getSession(': 'string $uri | mysql_xdevapi\Session',
\ }
let g:phpcomplete_builtin['functions']['mqseries'] = {
\ 'mqseries_back(': 'resource $hconn, resource &$compCode, resource &$reason | void',
\ 'mqseries_begin(': 'resource $hconn, array $beginOptions, resource &$compCode, resource &$reason | void',
\ 'mqseries_close(': 'resource $hconn, resource $hobj, int $options, resource &$compCode, resource &$reason | void',
\ 'mqseries_cmit(': 'resource $hconn, resource &$compCode, resource &$reason | void',
\ 'mqseries_conn(': 'string $qManagerName, resource &$hconn, resource &$compCode, resource &$reason | void',
\ 'mqseries_connx(': 'string $qManagerName, array &$connOptions, resource &$hconn, resource &$compCode, resource &$reason | void',
\ 'mqseries_disc(': 'resource $hconn, resource &$compCode, resource &$reason | void',
\ 'mqseries_get(': 'resource $hConn, resource $hObj, array &$md, array &$gmo, int &$bufferLength, string &$msg, int &$data_length, resource &$compCode, resource &$reason | void',
\ 'mqseries_inq(': 'resource $hconn, resource $hobj, int $selectorCount, array $selectors, int $intAttrCount, resource &$intAttr, int $charAttrLength, resource &$charAttr, resource &$compCode, resource &$reason | void',
\ 'mqseries_open(': 'resource $hconn, array &$objDesc, int $option, resource &$hobj, resource &$compCode, resource &$reason | void',
\ 'mqseries_put(': 'resource $hConn, resource $hObj, array &$md, array &$pmo, string $message, resource &$compCode, resource &$reason | void',
\ 'mqseries_put1(': 'resource $hconn, resource &$objDesc, resource &$msgDesc, resource &$pmo, string $buffer, resource &$compCode, resource &$reason | void',
\ 'mqseries_set(': 'resource $hConn, resource $hObj, int $selectorCount, array $selectors, int $intAttrCount, array $intAttrs, int $charAttrLength, array $charAttrs, resource &$compCode, resource &$reason | void',
\ 'mqseries_strerror(': 'int $reason | string',
\ }
let g:phpcomplete_builtin['functions']['msession'] = {
\ 'msession_connect(': 'string $host, string $port | bool',
\ 'msession_count(': 'void | int',
\ 'msession_create(': 'string $session [, string $classname [, string $data]] | bool',
\ 'msession_destroy(': 'string $name | bool',
\ 'msession_disconnect(': 'void | void',
\ 'msession_find(': 'string $name, string $value | array',
\ 'msession_get_array(': 'string $session | array',
\ 'msession_get_data(': 'string $session | string',
\ 'msession_get(': 'string $session, string $name, string $value | string',
\ 'msession_inc(': 'string $session, string $name | string',
\ 'msession_list(': 'void | array',
\ 'msession_listvar(': 'string $name | array',
\ 'msession_lock(': 'string $name | int',
\ 'msession_plugin(': 'string $session, string $val [, string $param] | string',
\ 'msession_randstr(': 'int $param | string',
\ 'msession_set_array(': 'string $session, array $tuples | void',
\ 'msession_set_data(': 'string $session, string $value | bool',
\ 'msession_set(': 'string $session, string $name, string $value | bool',
\ 'msession_timeout(': 'string $session [, int $param] | int',
\ 'msession_uniq(': 'int $param [, string $classname [, string $data]] | string',
\ 'msession_unlock(': 'string $session, int $key | int',
\ }
let g:phpcomplete_builtin['functions']['msql'] = {
\ 'msql_affected_rows(': 'resource $result | int',
\ 'msql_close(': '[ resource $link_identifier] | bool',
\ 'msql_connect(': '[ string $hostname] | resource',
\ 'msql_create_db(': 'string $database_name [, resource $link_identifier] | bool',
\ 'msql_data_seek(': 'resource $result, int $row_number | bool',
\ 'msql_db_query(': 'string $database, string $query [, resource $link_identifier] | resource',
\ 'msql_drop_db(': 'string $database_name [, resource $link_identifier] | bool',
\ 'msql_error(': 'void | string',
\ 'msql_fetch_array(': 'resource $result [, int $result_type] | array',
\ 'msql_fetch_field(': 'resource $result [, int $field_offset = 0] | object',
\ 'msql_fetch_object(': 'resource $result | object',
\ 'msql_fetch_row(': 'resource $result | array',
\ 'msql_field_flags(': 'resource $result, int $field_offset | string',
\ 'msql_field_len(': 'resource $result, int $field_offset | int',
\ 'msql_field_name(': 'resource $result, int $field_offset | string',
\ 'msql_field_seek(': 'resource $result, int $field_offset | bool',
\ 'msql_field_table(': 'resource $result, int $field_offset | int',
\ 'msql_field_type(': 'resource $result, int $field_offset | string',
\ 'msql_free_result(': 'resource $result | bool',
\ 'msql_list_dbs(': '[ resource $link_identifier] | resource',
\ 'msql_list_fields(': 'string $database, string $tablename [, resource $link_identifier] | resource',
\ 'msql_list_tables(': 'string $database [, resource $link_identifier] | resource',
\ 'msql_num_fields(': 'resource $result | int',
\ 'msql_num_rows(': 'resource $query_identifier | int',
\ 'msql_pconnect(': '[ string $hostname] | resource',
\ 'msql_query(': 'string $query [, resource $link_identifier] | resource',
\ 'msql_result(': 'resource $result, int $row [, mixed $field] | string',
\ 'msql_select_db(': 'string $database_name [, resource $link_identifier] | bool',
\ }
let g:phpcomplete_builtin['functions']['mysqli'] = {
\ 'mysqli_disable_reads_from_master(': 'mysqli $link | bool',
\ 'mysqli_disable_rpl_parse(': 'mysqli $link | bool',
\ 'mysqli_enable_reads_from_master(': 'mysqli $link | bool',
\ 'mysqli_enable_rpl_parse(': 'mysqli $link | bool',
\ 'mysqli_get_cache_stats(': 'void | array',
\ 'mysqli_get_client_stats(': 'void | array',
\ 'mysqli_get_links_stats(': 'void | array',
\ 'mysqli_master_query(': 'mysqli $link, string $query | bool',
\ 'mysqli_rpl_parse_enabled(': 'mysqli $link | int',
\ 'mysqli_rpl_probe(': 'mysqli $link | bool',
\ 'mysqli_slave_query(': 'mysqli $link, string $query | bool',
\ 'mysqli_reap_async_query(': 'mysqli $link | mysqli_result',
\ 'mysqli_fetch_row(': 'mysqli_result $result | mixed',
\ 'mysqli_affected_rows(': 'mysqli $link | int',
\ 'mysqli_stmt_execute(': 'mysqli_stmt $stmt | bool',
\ 'mysqli_fetch_field_direct(': 'mysqli_result $result, int $fieldnr | object',
\ 'mysqli_stmt_more_results(': 'mysql_stmt $stmt | bool',
\ 'mysqli_stmt_prepare(': 'mysqli_stmt $stmt, string $query | bool',
\ 'mysqli_stmt_get_warnings(': 'mysqli_stmt $stmt | object',
\ 'mysqli_errno(': 'mysqli $link | int',
\ 'mysqli_rollback(': 'mysqli $link [, int $flags = 0 [, string $name]] | bool',
\ 'mysqli_get_server_info(': 'mysqli $link | string',
\ 'mysqli_error_list(': 'mysqli $link | array',
\ 'mysqli_free_result(': 'mysqli_result $result | void',
\ 'mysqli_stmt_error(': 'mysqli_stmt $stmt | string',
\ 'mysqli_stmt_get_result(': 'mysqli_stmt $stmt | mysqli_result',
\ 'mysqli_stmt_next_result(': 'mysql_stmt $stmt | bool',
\ 'mysqli_refresh(': 'resource $link, int $options | bool',
\ 'mysqli_get_client_version(': 'mysqli $link | int',
\ 'mysqli_stmt_bind_param(': 'mysqli_stmt $stmt, string $types, mixed &$var1 [, mixed &$...] | bool',
\ 'mysqli_stmt_num_rows(': 'mysqli_stmt $stmt | int',
\ 'mysqli_set_local_infile_default(': 'mysqli $link | void',
\ 'mysqli_get_host_info(': 'mysqli $link | string',
\ 'mysqli_prepare(': 'mysqli $link, string $query | mysqli_stmt',
\ 'mysqli_thread_safe(': 'void | bool',
\ 'mysqli_stmt_bind_result(': 'mysqli_stmt $stmt, mixed &$var1 [, mixed &$...] | bool',
\ 'mysqli_real_query(': 'mysqli $link, string $query | bool',
\ 'mysqli_get_server_version(': 'mysqli $link | int',
\ 'mysqli_autocommit(': 'mysqli $link, bool $mode | bool',
\ 'mysqli_select_db(': 'mysqli $link, string $dbname | bool',
\ 'mysqli_warning_count(': 'mysqli $link | int',
\ 'mysqli_connect_errno(': 'void | int',
\ 'mysqli_stmt_send_long_data(': 'mysqli_stmt $stmt, int $param_nr, string $data | bool',
\ 'mysqli_fetch_lengths(': 'mysqli_result $result | array',
\ 'mysqli_fetch_all(': 'mysqli_result $result [, int $resulttype = MYSQLI_NUM] | mixed',
\ 'mysqli_data_seek(': 'mysqli_result $result, int $offset | bool',
\ 'mysqli_kill(': 'mysqli $link, int $processid | bool',
\ 'mysqli_get_connection_stats(': 'mysqli $link | array',
\ 'mysqli_set_local_infile_handler(': 'mysqli $link, callable $read_func | bool',
\ 'mysqli_real_connect(': 'mysqli $link [, string $host [, string $username [, string $passwd [, string $dbname [, int $port [, string $socket [, int $flags]]]]]]] | bool',
\ 'mysqli_stmt_close(': 'mysqli_stmt $stmt | bool',
\ 'mysqli_fetch_assoc(': 'mysqli_result $result | array',
\ 'mysqli_stmt_sqlstate(': 'mysqli_stmt $stmt | string',
\ 'mysqli_get_charset(': 'mysqli $link | object',
\ 'mysqli_store_result(': 'mysqli $link [, int $option] | mysqli_result',
\ 'mysqli_rpl_query_type(': 'mysqli $link, string $query | int',
\ 'mysqli_thread_id(': 'mysqli $link | int',
\ 'mysqli_field_seek(': 'mysqli_result $result, int $fieldnr | bool',
\ 'mysqli_stmt_param_count(': 'mysqli_stmt $stmt | int',
\ 'mysqli_field_count(': 'mysqli $link | int',
\ 'mysqli_num_rows(': 'mysqli_result $result | int',
\ 'mysqli_fetch_object(': 'mysqli_result $result [, string $class_name = "stdClass" [, array $params]] | object',
\ 'mysqli_savepoint(': 'mysqli $link, string $name | bool',
\ 'mysqli_stmt_error_list(': 'mysqli_stmt $stmt | array',
\ 'mysqli_connect_error(': 'void | string',
\ 'mysqli_stmt_store_result(': 'mysqli_stmt $stmt | bool',
\ 'mysqli_poll(': 'array &$read, array &$error, array &$reject, int $sec [, int $usec = 0] | int',
\ 'mysqli_stmt_result_metadata(': 'mysqli_stmt $stmt | mysqli_result',
\ 'mysqli_report(': 'int $flags | bool',
\ 'mysqli_fetch_fields(': 'mysqli_result $result | array',
\ 'mysqli_commit(': 'mysqli $link [, int $flags = 0 [, string $name]] | bool',
\ 'mysqli_change_user(': 'mysqli $link, string $user, string $password, string $database | bool',
\ 'mysqli_use_result(': 'mysqli $link | mysqli_result',
\ 'mysqli_stmt_free_result(': 'mysqli_stmt $stmt | void',
\ 'mysqli_set_charset(': 'mysqli $link, string $charset | bool',
\ 'mysqli_stmt_fetch(': 'mysqli_stmt $stmt | bool',
\ 'mysqli_stmt_data_seek(': 'mysqli_stmt $stmt, int $offset | void',
\ 'mysqli_query(': 'mysqli $link, string $query [, int $resultmode = MYSQLI_STORE_RESULT] | mixed',
\ 'mysqli_ssl_set(': 'mysqli $link, string $key, string $cert, string $ca, string $capath, string $cipher | bool',
\ 'mysqli_fetch_field(': 'mysqli_result $result | object',
\ 'mysqli_get_proto_info(': 'mysqli $link | int',
\ 'mysqli_ping(': 'mysqli $link | bool',
\ 'mysqli_init(': 'void | mysqli',
\ 'mysqli_close(': 'mysqli $link | bool',
\ 'mysqli_debug(': 'string $message | bool',
\ 'mysqli_connect(': '[ string $host = ini_get("mysqli.default_host") [, string $username = ini_get("mysqli.default_user") [, string $passwd = ini_get("mysqli.default_pw") [, string $dbname = "" [, int $port = ini_get("mysqli.default_port") [, string $socket = ini_get("mysqli.default_socket")]]]]]] | mysqli',
\ 'mysqli_get_client_info(': 'mysqli $link | string',
\ 'mysqli_options(': 'mysqli $link, int $option, mixed $value | bool',
\ 'mysqli_stmt_init(': 'mysqli $link | mysqli_stmt',
\ 'mysqli_stmt_field_count(': 'mysqli_stmt $stmt | int',
\ 'mysqli_more_results(': 'mysqli $link | bool',
\ 'mysqli_dump_debug_info(': 'mysqli $link | bool',
\ 'mysqli_fetch_array(': 'mysqli_result $result [, int $resulttype = MYSQLI_BOTH] | mixed',
\ 'mysqli_sqlstate(': 'mysqli $link | string',
\ 'mysqli_info(': 'mysqli $link | string',
\ 'mysqli_stmt_attr_set(': 'mysqli_stmt $stmt, int $attr, int $mode | bool',
\ 'mysqli_stmt_reset(': 'mysqli_stmt $stmt | bool',
\ 'mysqli_embedded_server_end(': 'void | void',
\ 'mysqli_character_set_name(': 'mysqli $link | string',
\ 'mysqli_send_query(': 'mysqli $link, string $query | bool',
\ 'mysqli_get_warnings(': 'mysqli $link | mysqli_warning',
\ 'mysqli_stmt_attr_get(': 'mysqli_stmt $stmt, int $attr | int',
\ 'mysqli_insert_id(': 'mysqli $link | mixed',
\ 'mysqli_embedded_server_start(': 'int $start, array $arguments, array $groups | bool',
\ 'mysqli_field_tell(': 'mysqli_result $result | int',
\ 'mysqli_num_fields(': 'mysqli_result $result | int',
\ 'mysqli_error(': 'mysqli $link | string',
\ 'mysqli_release_savepoint(': 'mysqli $link, string $name | bool',
\ 'mysqli_stmt_insert_id(': 'mysqli_stmt $stmt | mixed',
\ 'mysqli_stmt_affected_rows(': 'mysqli_stmt $stmt | int',
\ 'mysqli_stmt_errno(': 'mysqli_stmt $stmt | int',
\ 'mysqli_next_result(': 'mysqli $link | bool',
\ 'mysqli_stat(': 'mysqli $link | string',
\ 'mysqli_multi_query(': 'mysqli $link, string $query | bool',
\ 'mysqli_real_escape_string(': 'mysqli $link, string $escapestr | string',
\ 'mysqli_begin_transaction(': 'mysqli $link [, int $flags = 0 [, string $name]] | bool',
\ }
let g:phpcomplete_builtin['functions']['mysqlnd_memcache'] = {
\ 'mysqlnd_memcache_get_config(': 'mixed $connection | array',
\ 'mysqlnd_memcache_set(': 'mixed $mysql_connection [, Memcached $memcache_connection [, string $pattern [, callback $callback]]] | bool',
\ }
let g:phpcomplete_builtin['functions']['mysqlnd_ms'] = {
\ 'mysqlnd_ms_dump_servers(': 'mixed $connection | array',
\ 'mysqlnd_ms_fabric_select_global(': 'mixed $connection, mixed $table_name | array',
\ 'mysqlnd_ms_fabric_select_shard(': 'mixed $connection, mixed $table_name, mixed $shard_key | array',
\ 'mysqlnd_ms_get_last_gtid(': 'mixed $connection | string',
\ 'mysqlnd_ms_get_last_used_connection(': 'mixed $connection | array',
\ 'mysqlnd_ms_get_stats(': 'void | array',
\ 'mysqlnd_ms_match_wild(': 'string $table_name, string $wildcard | bool',
\ 'mysqlnd_ms_query_is_select(': 'string $query | int',
\ 'mysqlnd_ms_set_qos(': 'mixed $connection, int $service_level [, int $service_level_option [, mixed $option_value]] | bool',
\ 'mysqlnd_ms_set_user_pick_server(': 'string $function | bool',
\ 'mysqlnd_ms_xa_begin(': 'mixed $connection, string $gtrid [, int $timeout] | int',
\ 'mysqlnd_ms_xa_commit(': 'mixed $connection, string $gtrid | int',
\ 'mysqlnd_ms_xa_gc(': 'mixed $connection [, string $gtrid [, bool $ignore_max_retries]] | int',
\ 'mysqlnd_ms_xa_rollback(': 'mixed $connection, string $gtrid | int',
\ }
let g:phpcomplete_builtin['functions']['mysqlnd_qc'] = {
\ 'mysqlnd_qc_clear_cache(': 'void | bool',
\ 'mysqlnd_qc_get_available_handlers(': 'void | array',
\ 'mysqlnd_qc_get_cache_info(': 'void | array',
\ 'mysqlnd_qc_get_core_stats(': 'void | array',
\ 'mysqlnd_qc_get_normalized_query_trace_log(': 'void | array',
\ 'mysqlnd_qc_get_query_trace_log(': 'void | array',
\ 'mysqlnd_qc_set_cache_condition(': 'int $condition_type, mixed $condition, mixed $condition_option | bool',
\ 'mysqlnd_qc_set_is_select(': 'string $callback | mixed',
\ 'mysqlnd_qc_set_storage_handler(': 'string $handler | bool',
\ 'mysqlnd_qc_set_user_handlers(': 'string $get_hash, string $find_query_in_cache, string $return_to_cache, string $add_query_to_cache_if_not_exists, string $query_is_select, string $update_query_run_time_stats, string $get_stats, string $clear_cache | bool',
\ }
let g:phpcomplete_builtin['functions']['mysqlnd_uh'] = {
\ 'mysqlnd_uh_convert_to_mysqlnd(': 'mysqli &$mysql_connection | resource',
\ 'mysqlnd_uh_set_connection_proxy(': 'MysqlndUhConnection &$connection_proxy [, mysqli &$mysqli_connection] | bool',
\ 'mysqlnd_uh_set_statement_proxy(': 'MysqlndUhStatement &$statement_proxy | bool',
\ }
let g:phpcomplete_builtin['functions']['ncurses'] = {
\ 'ncurses_addch(': 'int $ch | int',
\ 'ncurses_addchnstr(': 'string $s, int $n | int',
\ 'ncurses_addchstr(': 'string $s | int',
\ 'ncurses_addnstr(': 'string $s, int $n | int',
\ 'ncurses_addstr(': 'string $text | int',
\ 'ncurses_assume_default_colors(': 'int $fg, int $bg | int',
\ 'ncurses_attroff(': 'int $attributes | int',
\ 'ncurses_attron(': 'int $attributes | int',
\ 'ncurses_attrset(': 'int $attributes | int',
\ 'ncurses_baudrate(': 'void | int',
\ 'ncurses_beep(': 'void | int',
\ 'ncurses_bkgd(': 'int $attrchar | int',
\ 'ncurses_bkgdset(': 'int $attrchar | void',
\ 'ncurses_border(': 'int $left, int $right, int $top, int $bottom, int $tl_corner, int $tr_corner, int $bl_corner, int $br_corner | int',
\ 'ncurses_bottom_panel(': 'resource $panel | int',
\ 'ncurses_can_change_color(': 'void | bool',
\ 'ncurses_cbreak(': 'void | bool',
\ 'ncurses_clear(': 'void | bool',
\ 'ncurses_clrtobot(': 'void | bool',
\ 'ncurses_clrtoeol(': 'void | bool',
\ 'ncurses_color_content(': 'int $color, int &$r, int &$g, int &$b | int',
\ 'ncurses_color_set(': 'int $pair | int',
\ 'ncurses_curs_set(': 'int $visibility | int',
\ 'ncurses_def_prog_mode(': 'void | bool',
\ 'ncurses_def_shell_mode(': 'void | bool',
\ 'ncurses_define_key(': 'string $definition, int $keycode | int',
\ 'ncurses_del_panel(': 'resource $panel | bool',
\ 'ncurses_delay_output(': 'int $milliseconds | int',
\ 'ncurses_delch(': 'void | bool',
\ 'ncurses_deleteln(': 'void | bool',
\ 'ncurses_delwin(': 'resource $window | bool',
\ 'ncurses_doupdate(': 'void | bool',
\ 'ncurses_echo(': 'void | bool',
\ 'ncurses_echochar(': 'int $character | int',
\ 'ncurses_end(': 'void | int',
\ 'ncurses_erase(': 'void | bool',
\ 'ncurses_erasechar(': 'void | string',
\ 'ncurses_filter(': 'void | void',
\ 'ncurses_flash(': 'void | bool',
\ 'ncurses_flushinp(': 'void | bool',
\ 'ncurses_getch(': 'void | int',
\ 'ncurses_getmaxyx(': 'resource $window, int &$y, int &$x | void',
\ 'ncurses_getmouse(': 'array &$mevent | bool',
\ 'ncurses_getyx(': 'resource $window, int &$y, int &$x | void',
\ 'ncurses_halfdelay(': 'int $tenth | int',
\ 'ncurses_has_colors(': 'void | bool',
\ 'ncurses_has_ic(': 'void | bool',
\ 'ncurses_has_il(': 'void | bool',
\ 'ncurses_has_key(': 'int $keycode | int',
\ 'ncurses_hide_panel(': 'resource $panel | int',
\ 'ncurses_hline(': 'int $charattr, int $n | int',
\ 'ncurses_inch(': 'void | string',
\ 'ncurses_init_color(': 'int $color, int $r, int $g, int $b | int',
\ 'ncurses_init_pair(': 'int $pair, int $fg, int $bg | int',
\ 'ncurses_init(': 'void | void',
\ 'ncurses_insch(': 'int $character | int',
\ 'ncurses_insdelln(': 'int $count | int',
\ 'ncurses_insertln(': 'void | int',
\ 'ncurses_insstr(': 'string $text | int',
\ 'ncurses_instr(': 'string &$buffer | int',
\ 'ncurses_isendwin(': 'void | bool',
\ 'ncurses_keyok(': 'int $keycode, bool $enable | int',
\ 'ncurses_keypad(': 'resource $window, bool $bf | int',
\ 'ncurses_killchar(': 'void | string',
\ 'ncurses_longname(': 'void | string',
\ 'ncurses_meta(': 'resource $window, bool $8bit | int',
\ 'ncurses_mouse_trafo(': 'int &$y, int &$x, bool $toscreen | bool',
\ 'ncurses_mouseinterval(': 'int $milliseconds | int',
\ 'ncurses_mousemask(': 'int $newmask, int &$oldmask | int',
\ 'ncurses_move_panel(': 'resource $panel, int $startx, int $starty | int',
\ 'ncurses_move(': 'int $y, int $x | int',
\ 'ncurses_mvaddch(': 'int $y, int $x, int $c | int',
\ 'ncurses_mvaddchnstr(': 'int $y, int $x, string $s, int $n | int',
\ 'ncurses_mvaddchstr(': 'int $y, int $x, string $s | int',
\ 'ncurses_mvaddnstr(': 'int $y, int $x, string $s, int $n | int',
\ 'ncurses_mvaddstr(': 'int $y, int $x, string $s | int',
\ 'ncurses_mvcur(': 'int $old_y, int $old_x, int $new_y, int $new_x | int',
\ 'ncurses_mvdelch(': 'int $y, int $x | int',
\ 'ncurses_mvgetch(': 'int $y, int $x | int',
\ 'ncurses_mvhline(': 'int $y, int $x, int $attrchar, int $n | int',
\ 'ncurses_mvinch(': 'int $y, int $x | int',
\ 'ncurses_mvvline(': 'int $y, int $x, int $attrchar, int $n | int',
\ 'ncurses_mvwaddstr(': 'resource $window, int $y, int $x, string $text | int',
\ 'ncurses_napms(': 'int $milliseconds | int',
\ 'ncurses_new_panel(': 'resource $window | resource',
\ 'ncurses_newpad(': 'int $rows, int $cols | resource',
\ 'ncurses_newwin(': 'int $rows, int $cols, int $y, int $x | resource',
\ 'ncurses_nl(': 'void | bool',
\ 'ncurses_nocbreak(': 'void | bool',
\ 'ncurses_noecho(': 'void | bool',
\ 'ncurses_nonl(': 'void | bool',
\ 'ncurses_noqiflush(': 'void | void',
\ 'ncurses_noraw(': 'void | bool',
\ 'ncurses_pair_content(': 'int $pair, int &$f, int &$b | int',
\ 'ncurses_panel_above(': 'resource $panel | resource',
\ 'ncurses_panel_below(': 'resource $panel | resource',
\ 'ncurses_panel_window(': 'resource $panel | resource',
\ 'ncurses_pnoutrefresh(': 'resource $pad, int $pminrow, int $pmincol, int $sminrow, int $smincol, int $smaxrow, int $smaxcol | int',
\ 'ncurses_prefresh(': 'resource $pad, int $pminrow, int $pmincol, int $sminrow, int $smincol, int $smaxrow, int $smaxcol | int',
\ 'ncurses_putp(': 'string $text | int',
\ 'ncurses_qiflush(': 'void | void',
\ 'ncurses_raw(': 'void | bool',
\ 'ncurses_refresh(': 'int $ch | int',
\ 'ncurses_replace_panel(': 'resource $panel, resource $window | int',
\ 'ncurses_reset_prog_mode(': 'void | int',
\ 'ncurses_reset_shell_mode(': 'void | int',
\ 'ncurses_resetty(': 'void | bool',
\ 'ncurses_savetty(': 'void | bool',
\ 'ncurses_scr_dump(': 'string $filename | int',
\ 'ncurses_scr_init(': 'string $filename | int',
\ 'ncurses_scr_restore(': 'string $filename | int',
\ 'ncurses_scr_set(': 'string $filename | int',
\ 'ncurses_scrl(': 'int $count | int',
\ 'ncurses_show_panel(': 'resource $panel | int',
\ 'ncurses_slk_attr(': 'void | int',
\ 'ncurses_slk_attroff(': 'int $intarg | int',
\ 'ncurses_slk_attron(': 'int $intarg | int',
\ 'ncurses_slk_attrset(': 'int $intarg | int',
\ 'ncurses_slk_clear(': 'void | bool',
\ 'ncurses_slk_color(': 'int $intarg | int',
\ 'ncurses_slk_init(': 'int $format | bool',
\ 'ncurses_slk_noutrefresh(': 'void | bool',
\ 'ncurses_slk_refresh(': 'void | int',
\ 'ncurses_slk_restore(': 'void | int',
\ 'ncurses_slk_set(': 'int $labelnr, string $label, int $format | bool',
\ 'ncurses_slk_touch(': 'void | int',
\ 'ncurses_standend(': 'void | int',
\ 'ncurses_standout(': 'void | int',
\ 'ncurses_start_color(': 'void | int',
\ 'ncurses_termattrs(': 'void | bool',
\ 'ncurses_termname(': 'void | string',
\ 'ncurses_timeout(': 'int $millisec | void',
\ 'ncurses_top_panel(': 'resource $panel | int',
\ 'ncurses_typeahead(': 'int $fd | int',
\ 'ncurses_ungetch(': 'int $keycode | int',
\ 'ncurses_ungetmouse(': 'array $mevent | bool',
\ 'ncurses_update_panels(': 'void | void',
\ 'ncurses_use_default_colors(': 'void | bool',
\ 'ncurses_use_env(': 'bool $flag | void',
\ 'ncurses_use_extended_names(': 'bool $flag | int',
\ 'ncurses_vidattr(': 'int $intarg | int',
\ 'ncurses_vline(': 'int $charattr, int $n | int',
\ 'ncurses_waddch(': 'resource $window, int $ch | int',
\ 'ncurses_waddstr(': 'resource $window, string $str [, int $n] | int',
\ 'ncurses_wattroff(': 'resource $window, int $attrs | int',
\ 'ncurses_wattron(': 'resource $window, int $attrs | int',
\ 'ncurses_wattrset(': 'resource $window, int $attrs | int',
\ 'ncurses_wborder(': 'resource $window, int $left, int $right, int $top, int $bottom, int $tl_corner, int $tr_corner, int $bl_corner, int $br_corner | int',
\ 'ncurses_wclear(': 'resource $window | int',
\ 'ncurses_wcolor_set(': 'resource $window, int $color_pair | int',
\ 'ncurses_werase(': 'resource $window | int',
\ 'ncurses_wgetch(': 'resource $window | int',
\ 'ncurses_whline(': 'resource $window, int $charattr, int $n | int',
\ 'ncurses_wmouse_trafo(': 'resource $window, int &$y, int &$x, bool $toscreen | bool',
\ 'ncurses_wmove(': 'resource $window, int $y, int $x | int',
\ 'ncurses_wnoutrefresh(': 'resource $window | int',
\ 'ncurses_wrefresh(': 'resource $window | int',
\ 'ncurses_wstandend(': 'resource $window | int',
\ 'ncurses_wstandout(': 'resource $window | int',
\ 'ncurses_wvline(': 'resource $window, int $charattr, int $n | int',
\ }
let g:phpcomplete_builtin['functions']['newt'] = {
\ 'newt_bell(': 'void | void',
\ 'newt_button_bar(': 'array &$buttons | resource',
\ 'newt_button(': 'int $left, int $top, string $text | resource',
\ 'newt_centered_window(': 'int $width, int $height [, string $title] | int',
\ 'newt_checkbox_get_value(': 'resource $checkbox | string',
\ 'newt_checkbox_set_flags(': 'resource $checkbox, int $flags, int $sense | void',
\ 'newt_checkbox_set_value(': 'resource $checkbox, string $value | void',
\ 'newt_checkbox_tree_add_item(': 'resource $checkboxtree, string $text, mixed $data, int $flags, int $index [, int $...] | void',
\ 'newt_checkbox_tree_find_item(': 'resource $checkboxtree, mixed $data | array',
\ 'newt_checkbox_tree_get_current(': 'resource $checkboxtree | mixed',
\ 'newt_checkbox_tree_get_entry_value(': 'resource $checkboxtree, mixed $data | string',
\ 'newt_checkbox_tree_get_multi_selection(': 'resource $checkboxtree, string $seqnum | array',
\ 'newt_checkbox_tree_get_selection(': 'resource $checkboxtree | array',
\ 'newt_checkbox_tree_multi(': 'int $left, int $top, int $height, string $seq [, int $flags] | resource',
\ 'newt_checkbox_tree_set_current(': 'resource $checkboxtree, mixed $data | void',
\ 'newt_checkbox_tree_set_entry_value(': 'resource $checkboxtree, mixed $data, string $value | void',
\ 'newt_checkbox_tree_set_entry(': 'resource $checkboxtree, mixed $data, string $text | void',
\ 'newt_checkbox_tree_set_width(': 'resource $checkbox_tree, int $width | void',
\ 'newt_checkbox_tree(': 'int $left, int $top, int $height [, int $flags] | resource',
\ 'newt_checkbox(': 'int $left, int $top, string $text, string $def_value [, string $seq] | resource',
\ 'newt_clear_key_buffer(': 'void | void',
\ 'newt_cls(': 'void | void',
\ 'newt_compact_button(': 'int $left, int $top, string $text | resource',
\ 'newt_component_add_callback(': 'resource $component, mixed $func_name, mixed $data | void',
\ 'newt_component_takes_focus(': 'resource $component, bool $takes_focus | void',
\ 'newt_create_grid(': 'int $cols, int $rows | resource',
\ 'newt_cursor_off(': 'void | void',
\ 'newt_cursor_on(': 'void | void',
\ 'newt_delay(': 'int $microseconds | void',
\ 'newt_draw_form(': 'resource $form | void',
\ 'newt_draw_root_text(': 'int $left, int $top, string $text | void',
\ 'newt_entry_get_value(': 'resource $entry | string',
\ 'newt_entry_set_filter(': 'resource $entry, callable $filter, mixed $data | void',
\ 'newt_entry_set_flags(': 'resource $entry, int $flags, int $sense | void',
\ 'newt_entry_set(': 'resource $entry, string $value [, bool $cursor_at_end] | void',
\ 'newt_entry(': 'int $left, int $top, int $width [, string $init_value [, int $flags]] | resource',
\ 'newt_finished(': 'void | int',
\ 'newt_form_add_component(': 'resource $form, resource $component | void',
\ 'newt_form_add_components(': 'resource $form, array $components | void',
\ 'newt_form_add_hot_key(': 'resource $form, int $key | void',
\ 'newt_form_destroy(': 'resource $form | void',
\ 'newt_form_get_current(': 'resource $form | resource',
\ 'newt_form_run(': 'resource $form, array &$exit_struct | void',
\ 'newt_form_set_background(': 'resource $from, int $background | void',
\ 'newt_form_set_height(': 'resource $form, int $height | void',
\ 'newt_form_set_size(': 'resource $form | void',
\ 'newt_form_set_timer(': 'resource $form, int $milliseconds | void',
\ 'newt_form_set_width(': 'resource $form, int $width | void',
\ 'newt_form_watch_fd(': 'resource $form, resource $stream [, int $flags] | void',
\ 'newt_form(': '[ resource $vert_bar [, string $help [, int $flags]]] | resource',
\ 'newt_get_screen_size(': 'int &$cols, int &$rows | void',
\ 'newt_grid_add_components_to_form(': 'resource $grid, resource $form, bool $recurse | void',
\ 'newt_grid_basic_window(': 'resource $text, resource $middle, resource $buttons | resource',
\ 'newt_grid_free(': 'resource $grid, bool $recurse | void',
\ 'newt_grid_get_size(': 'resouce $grid, int &$width, int &$height | void',
\ 'newt_grid_h_close_stacked(': 'int $element1_type, resource $element1 [, int $... [, resource $...]] | resource',
\ 'newt_grid_h_stacked(': 'int $element1_type, resource $element1 [, int $... [, resource $...]] | resource',
\ 'newt_grid_place(': 'resource $grid, int $left, int $top | void',
\ 'newt_grid_set_field(': 'resource $grid, int $col, int $row, int $type, resource $val, int $pad_left, int $pad_top, int $pad_right, int $pad_bottom, int $anchor [, int $flags] | void',
\ 'newt_grid_simple_window(': 'resource $text, resource $middle, resource $buttons | resource',
\ 'newt_grid_v_close_stacked(': 'int $element1_type, resource $element1 [, int $... [, resource $...]] | resource',
\ 'newt_grid_v_stacked(': 'int $element1_type, resource $element1 [, int $... [, resource $...]] | resource',
\ 'newt_grid_wrapped_window_at(': 'resource $grid, string $title, int $left, int $top | void',
\ 'newt_grid_wrapped_window(': 'resource $grid, string $title | void',
\ 'newt_init(': 'void | int',
\ 'newt_label_set_text(': 'resource $label, string $text | void',
\ 'newt_label(': 'int $left, int $top, string $text | resource',
\ 'newt_listbox_append_entry(': 'resource $listbox, string $text, mixed $data | void',
\ 'newt_listbox_clear_selection(': 'resource $listbox | void',
\ 'newt_listbox_clear(': 'resource $listobx | void',
\ 'newt_listbox_delete_entry(': 'resource $listbox, mixed $key | void',
\ 'newt_listbox_get_current(': 'resource $listbox | string',
\ 'newt_listbox_get_selection(': 'resource $listbox | array',
\ 'newt_listbox_insert_entry(': 'resource $listbox, string $text, mixed $data, mixed $key | void',
\ 'newt_listbox_item_count(': 'resource $listbox | int',
\ 'newt_listbox_select_item(': 'resource $listbox, mixed $key, int $sense | void',
\ 'newt_listbox_set_current_by_key(': 'resource $listbox, mixed $key | void',
\ 'newt_listbox_set_current(': 'resource $listbox, int $num | void',
\ 'newt_listbox_set_data(': 'resource $listbox, int $num, mixed $data | void',
\ 'newt_listbox_set_entry(': 'resource $listbox, int $num, string $text | void',
\ 'newt_listbox_set_width(': 'resource $listbox, int $width | void',
\ 'newt_listbox(': 'int $left, int $top, int $height [, int $flags] | resource',
\ 'newt_listitem_get_data(': 'resource $item | mixed',
\ 'newt_listitem_set(': 'resource $item, string $text | void',
\ 'newt_listitem(': 'int $left, int $top, string $text, bool $is_default, resouce $prev_item, mixed $data [, int $flags] | resource',
\ 'newt_open_window(': 'int $left, int $top, int $width, int $height [, string $title] | int',
\ 'newt_pop_help_line(': 'void | void',
\ 'newt_pop_window(': 'void | void',
\ 'newt_push_help_line(': '[ string $text] | void',
\ 'newt_radio_get_current(': 'resource $set_member | resource',
\ 'newt_radiobutton(': 'int $left, int $top, string $text, bool $is_default [, resource $prev_button] | resource',
\ 'newt_redraw_help_line(': 'void | void',
\ 'newt_reflow_text(': 'string $text, int $width, int $flex_down, int $flex_up, int &$actual_width, int &$actual_height | string',
\ 'newt_refresh(': 'void | void',
\ 'newt_resize_screen(': '[ bool $redraw] | void',
\ 'newt_resume(': 'void | void',
\ 'newt_run_form(': 'resource $form | resource',
\ 'newt_scale_set(': 'resource $scale, int $amount | void',
\ 'newt_scale(': 'int $left, int $top, int $width, int $full_value | resource',
\ 'newt_scrollbar_set(': 'resource $scrollbar, int $where, int $total | void',
\ 'newt_set_help_callback(': 'mixed $function | void',
\ 'newt_set_suspend_callback(': 'callable $function, mixed $data | void',
\ 'newt_suspend(': 'void | void',
\ 'newt_textbox_get_num_lines(': 'resource $textbox | int',
\ 'newt_textbox_reflowed(': 'int $left, int $top, char $*text, int $width, int $flex_down, int $flex_up [, int $flags] | resource',
\ 'newt_textbox_set_height(': 'resource $textbox, int $height | void',
\ 'newt_textbox_set_text(': 'resource $textbox, string $text | void',
\ 'newt_textbox(': 'int $left, int $top, int $width, int $height [, int $flags] | resource',
\ 'newt_vertical_scrollbar(': 'int $left, int $top, int $height [, int $normal_colorset [, int $thumb_colorset]] | resource',
\ 'newt_wait_for_key(': 'void | void',
\ 'newt_win_choice(': 'string $title, string $button1_text, string $button2_text, string $format [, mixed $args [, mixed $...]] | int',
\ 'newt_win_entries(': 'string $title, string $text, int $suggested_width, int $flex_down, int $flex_up, int $data_width, array &$items, string $button1 [, string $...] | int',
\ 'newt_win_menu(': 'string $title, string $text, int $suggestedWidth, int $flexDown, int $flexUp, int $maxListHeight, array $items, int &$listItem [, string $button1 [, string $...]] | int',
\ 'newt_win_message(': 'string $title, string $button_text, string $format [, mixed $args [, mixed $...]] | void',
\ 'newt_win_messagev(': 'string $title, string $button_text, string $format, array $args | void',
\ 'newt_win_ternary(': 'string $title, string $button1_text, string $button2_text, string $button3_text, string $format [, mixed $args [, mixed $...]] | int',
\ }
let g:phpcomplete_builtin['functions']['nsapi'] = {
\ 'nsapi_request_headers(': 'void | array',
\ 'nsapi_response_headers(': 'void | array',
\ 'nsapi_virtual(': 'string $uri | bool',
\ }
let g:phpcomplete_builtin['functions']['oauth'] = {
\ 'oauth_get_sbs(': 'string $http_method, string $uri [, array $request_parameters] | string',
\ 'oauth_urlencode(': 'string $uri | string',
\ }
let g:phpcomplete_builtin['functions']['tidy'] = {
\ 'ob_tidyhandler(': 'string $input [, int $mode] | string',
\ 'tidy_access_count(': 'tidy $object | int',
\ 'tidy_config_count(': 'tidy $object | int',
\ 'tidy_error_count(': 'tidy $object | int',
\ 'tidy_get_output(': 'tidy $object | string',
\ 'tidy_warning_count(': 'tidy $object | int',
\ 'tidy_parse_string(': 'string $input [, mixed $config [, string $encoding]] | tidy',
\ 'tidy_get_head(': 'tidy $object | tidyNode',
\ 'tidy_get_status(': 'tidy $object | int',
\ 'tidy_get_release(': 'void | string',
\ 'tidy_get_error_buffer(': 'tidy $tidy | string',
\ 'tidy_repair_string(': 'string $data [, mixed $config [, string $encoding]] | string',
\ 'tidy_is_xml(': 'tidy $object | bool',
\ 'tidy_get_html(': 'tidy $object | tidyNode',
\ 'tidy_diagnose(': 'tidy $object | bool',
\ 'tidy_parse_file(': 'string $filename [, mixed $config [, string $encoding [, bool $use_include_path = FALSE]]] | tidy',
\ 'tidy_clean_repair(': 'tidy $object | bool',
\ 'tidy_get_config(': 'tidy $object | array',
\ 'tidy_get_root(': 'tidy $object | tidyNode',
\ 'tidy_get_html_ver(': 'tidy $object | int',
\ 'tidy_repair_file(': 'string $filename [, mixed $config [, string $encoding [, bool $use_include_path = FALSE]]] | string',
\ 'tidy_is_xhtml(': 'tidy $object | bool',
\ 'tidy_get_body(': 'tidy $object | tidyNode',
\ 'tidy_get_opt_doc(': 'tidy $object, string $optname | string',
\ 'tidy_getopt(': 'tidy $object, string $option | mixed',
\ }
let g:phpcomplete_builtin['functions']['oci8'] = {
\ 'oci_bind_array_by_name(': 'resource $statement, string $name, array &$var_array, int $max_table_length [, int $max_item_length = -1 [, int $type = SQLT_AFC]] | bool',
\ 'oci_bind_by_name(': 'resource $statement, string $bv_name, mixed &$variable [, int $maxlength = -1 [, int $type = SQLT_CHR]] | bool',
\ 'oci_cancel(': 'resource $statement | bool',
\ 'oci_client_version(': 'void | string',
\ 'oci_close(': 'resource $connection | bool',
\ 'oci_commit(': 'resource $connection | bool',
\ 'oci_connect(': 'string $username, string $password [, string $connection_string [, string $character_set [, int $session_mode]]] | resource',
\ 'oci_define_by_name(': 'resource $statement, string $column_name, mixed &$variable [, int $type = SQLT_CHR] | bool',
\ 'oci_error(': '[ resource $resource] | array',
\ 'oci_execute(': 'resource $statement [, int $mode = OCI_COMMIT_ON_SUCCESS] | bool',
\ 'oci_fetch_all(': 'resource $statement, array &$output [, int $skip = 0 [, int $maxrows = -1 [, int $flags = OCI_FETCHSTATEMENT_BY_COLUMN + OCI_ASSOC]]] | int',
\ 'oci_fetch_array(': 'resource $statement [, int $mode] | array',
\ 'oci_fetch_assoc(': 'resource $statement | array',
\ 'oci_fetch_object(': 'resource $statement | object',
\ 'oci_fetch_row(': 'resource $statement | array',
\ 'oci_fetch(': 'resource $statement | bool',
\ 'oci_field_is_null(': 'resource $statement, mixed $field | bool',
\ 'oci_field_name(': 'resource $statement, mixed $field | string',
\ 'oci_field_precision(': 'resource $statement, mixed $field | int',
\ 'oci_field_scale(': 'resource $statement, mixed $field | int',
\ 'oci_field_size(': 'resource $statement, mixed $field | int',
\ 'oci_field_type_raw(': 'resource $statement, mixed $field | int',
\ 'oci_field_type(': 'resource $statement, mixed $field | mixed',
\ 'oci_free_descriptor(': 'resource $descriptor | bool',
\ 'oci_free_statement(': 'resource $statement | bool',
\ 'oci_get_implicit_resultset(': 'resource $statement | resource',
\ 'oci_internal_debug(': 'bool $onoff | void',
\ 'oci_lob_copy(': 'OCI-Lob $lob_to, OCI-Lob $lob_from [, int $length = 0] | bool',
\ 'oci_lob_is_equal(': 'OCI-Lob $lob1, OCI-Lob $lob2 | bool',
\ 'oci_new_collection(': 'resource $connection, string $tdo [, string $schema = NULL] | OCI-Collection',
\ 'oci_new_connect(': 'string $username, string $password [, string $connection_string [, string $character_set [, int $session_mode]]] | resource',
\ 'oci_new_cursor(': 'resource $connection | resource',
\ 'oci_new_descriptor(': 'resource $connection [, int $type = OCI_DTYPE_LOB] | OCI-Lob',
\ 'oci_num_fields(': 'resource $statement | int',
\ 'oci_num_rows(': 'resource $statement | int',
\ 'oci_parse(': 'resource $connection, string $sql_text | resource',
\ 'oci_password_change(': 'resource $connection, string $username, string $old_password, string $new_password | bool',
\ 'oci_pconnect(': 'string $username, string $password [, string $connection_string [, string $character_set [, int $session_mode]]] | resource',
\ 'oci_register_taf_callback(': 'resource $connection [, mixed $callbackFn] | bool',
\ 'oci_result(': 'resource $statement, mixed $field | mixed',
\ 'oci_rollback(': 'resource $connection | bool',
\ 'oci_server_version(': 'resource $connection | string',
\ 'oci_set_action(': 'resource $connection, string $action_name | bool',
\ 'oci_set_call_timeout(': 'resource $connection, int $time_out | bool',
\ 'oci_set_client_identifier(': 'resource $connection, string $client_identifier | bool',
\ 'oci_set_client_info(': 'resource $connection, string $client_info | bool',
\ 'oci_set_db_operation(': 'resource $connection, string $dbop | bool',
\ 'oci_set_edition(': 'string $edition | bool',
\ 'oci_set_module_name(': 'resource $connection, string $module_name | bool',
\ 'oci_set_prefetch(': 'resource $statement, int $rows | bool',
\ 'oci_statement_type(': 'resource $statement | string',
\ 'oci_unregister_taf_callback(': 'resource $connection | bool',
\ }
let g:phpcomplete_builtin['functions']['odbc'] = {
\ 'odbc_autocommit(': 'resource $connection_id [, bool $OnOff = FALSE] | mixed',
\ 'odbc_binmode(': 'resource $result_id, int $mode | bool',
\ 'odbc_close_all(': 'void | void',
\ 'odbc_close(': 'resource $connection_id | void',
\ 'odbc_columnprivileges(': 'resource $connection_id, string $qualifier, string $owner, string $table_name, string $column_name | resource',
\ 'odbc_columns(': 'resource $connection_id [, string $qualifier [, string $schema [, string $table_name [, string $column_name]]]] | resource',
\ 'odbc_commit(': 'resource $connection_id | bool',
\ 'odbc_connect(': 'string $dsn, string $user, string $password [, int $cursor_type] | resource',
\ 'odbc_cursor(': 'resource $result_id | string',
\ 'odbc_data_source(': 'resource $connection_id, int $fetch_type | array',
\ 'odbc_error(': '[ resource $connection_id] | string',
\ 'odbc_errormsg(': '[ resource $connection_id] | string',
\ 'odbc_exec(': 'resource $connection_id, string $query_string [, int $flags] | resource',
\ 'odbc_execute(': 'resource $result_id [, array $parameters_array] | bool',
\ 'odbc_fetch_array(': 'resource $result [, int $rownumber] | array',
\ 'odbc_fetch_into(': 'resource $result_id, array &$result_array [, int $rownumber] | int',
\ 'odbc_fetch_object(': 'resource $result [, int $rownumber] | object',
\ 'odbc_fetch_row(': 'resource $result_id [, int $row_number = 1] | bool',
\ 'odbc_field_len(': 'resource $result_id, int $field_number | int',
\ 'odbc_field_name(': 'resource $result_id, int $field_number | string',
\ 'odbc_field_num(': 'resource $result_id, string $field_name | int',
\ 'odbc_field_scale(': 'resource $result_id, int $field_number | int',
\ 'odbc_field_type(': 'resource $result_id, int $field_number | string',
\ 'odbc_foreignkeys(': 'resource $connection_id, string $pk_qualifier, string $pk_owner, string $pk_table, string $fk_qualifier, string $fk_owner, string $fk_table | resource',
\ 'odbc_free_result(': 'resource $result_id | bool',
\ 'odbc_gettypeinfo(': 'resource $connection_id [, int $data_type] | resource',
\ 'odbc_longreadlen(': 'resource $result_id, int $length | bool',
\ 'odbc_next_result(': 'resource $result_id | bool',
\ 'odbc_num_fields(': 'resource $result_id | int',
\ 'odbc_num_rows(': 'resource $result_id | int',
\ 'odbc_pconnect(': 'string $dsn, string $user, string $password [, int $cursor_type] | resource',
\ 'odbc_prepare(': 'resource $connection_id, string $query_string | resource',
\ 'odbc_primarykeys(': 'resource $connection_id, string $qualifier, string $owner, string $table | resource',
\ 'odbc_procedurecolumns(': 'resource $connection_id | resource',
\ 'odbc_procedures(': 'resource $connection_id | resource',
\ 'odbc_result_all(': 'resource $result_id [, string $format] | int',
\ 'odbc_result(': 'resource $result_id, mixed $field | mixed',
\ 'odbc_rollback(': 'resource $connection_id | bool',
\ 'odbc_setoption(': 'resource $id, int $function, int $option, int $param | bool',
\ 'odbc_specialcolumns(': 'resource $connection_id, int $type, string $qualifier, string $table, int $scope, int $nullable | resource',
\ 'odbc_statistics(': 'resource $connection_id, string $qualifier, string $owner, string $table_name, int $unique, int $accuracy | resource',
\ 'odbc_tableprivileges(': 'resource $connection_id, string $qualifier, string $owner, string $name | resource',
\ 'odbc_tables(': 'resource $connection_id [, string $qualifier [, string $owner [, string $name [, string $types]]]] | resource',
\ }
let g:phpcomplete_builtin['functions']['opcache'] = {
\ 'opcache_compile_file(': 'string $file | bool',
\ 'opcache_get_configuration(': 'void | array',
\ 'opcache_get_status(': '[ bool $get_scripts = TRUE] | array',
\ 'opcache_invalidate(': 'string $script [, bool $force = FALSE] | bool',
\ 'opcache_is_script_cached(': 'string $file | bool',
\ 'opcache_reset(': 'void | bool',
\ }
let g:phpcomplete_builtin['functions']['openal'] = {
\ 'openal_buffer_create(': 'void | resource',
\ 'openal_buffer_data(': 'resource $buffer, int $format, string $data, int $freq | bool',
\ 'openal_buffer_destroy(': 'resource $buffer | bool',
\ 'openal_buffer_get(': 'resource $buffer, int $property | int',
\ 'openal_buffer_loadwav(': 'resource $buffer, string $wavfile | bool',
\ 'openal_context_create(': 'resource $device | resource',
\ 'openal_context_current(': 'resource $context | bool',
\ 'openal_context_destroy(': 'resource $context | bool',
\ 'openal_context_process(': 'resource $context | bool',
\ 'openal_context_suspend(': 'resource $context | bool',
\ 'openal_device_close(': 'resource $device | bool',
\ 'openal_device_open(': '[ string $device_desc] | resource',
\ 'openal_listener_get(': 'int $property | mixed',
\ 'openal_listener_set(': 'int $property, mixed $setting | bool',
\ 'openal_source_create(': 'void | resource',
\ 'openal_source_destroy(': 'resource $source | bool',
\ 'openal_source_get(': 'resource $source, int $property | mixed',
\ 'openal_source_pause(': 'resource $source | bool',
\ 'openal_source_play(': 'resource $source | bool',
\ 'openal_source_rewind(': 'resource $source | bool',
\ 'openal_source_set(': 'resource $source, int $property, mixed $setting | bool',
\ 'openal_source_stop(': 'resource $source | bool',
\ 'openal_stream(': 'resource $source, int $format, int $rate | resource',
\ }
let g:phpcomplete_builtin['functions']['openssl'] = {
\ 'openssl_cipher_iv_length(': 'string $method | int',
\ 'openssl_csr_export_to_file(': 'mixed $csr, string $outfilename [, bool $notext = TRUE] | bool',
\ 'openssl_csr_export(': 'mixed $csr, string &$out [, bool $notext = TRUE] | bool',
\ 'openssl_csr_get_public_key(': 'mixed $csr [, bool $use_shortnames = TRUE] | resource',
\ 'openssl_csr_get_subject(': 'mixed $csr [, bool $use_shortnames = TRUE] | array',
\ 'openssl_csr_new(': 'array $dn, resource &$privkey [, array $configargs [, array $extraattribs]] | mixed',
\ 'openssl_csr_sign(': 'mixed $csr, mixed $cacert, mixed $priv_key, int $days [, array $configargs [, int $serial = 0]] | resource',
\ 'openssl_decrypt(': 'string $data, string $method, string $key [, int $options = 0 [, string $iv = "" [, string $tag = "" [, string $aad = ""]]]] | string',
\ 'openssl_dh_compute_key(': 'string $pub_key, resource $dh_key | string',
\ 'openssl_digest(': 'string $data, string $method [, bool $raw_output = FALSE] | string',
\ 'openssl_encrypt(': 'string $data, string $method, string $key [, int $options = 0 [, string $iv = "" [, string &$tag = NULL [, string $aad = "" [, int $tag_length = 16]]]]] | string',
\ 'openssl_error_string(': 'void | string',
\ 'openssl_free_key(': 'resource $key_identifier | void',
\ 'openssl_get_cert_locations(': 'void | array',
\ 'openssl_get_cipher_methods(': '[ bool $aliases = FALSE] | array',
\ 'openssl_get_curve_names(': 'void | array',
\ 'openssl_get_md_methods(': '[ bool $aliases = FALSE] | array',
\ 'openssl_get_privatekey(': 'openssl_get_privatekey — Alias of openssl_pkey_get_private()',
\ 'openssl_get_publickey(': 'openssl_get_publickey — Alias of openssl_pkey_get_public()',
\ 'openssl_open(': 'string $sealed_data, string &$open_data, string $env_key, mixed $priv_key_id [, string $method = "RC4" [, string $iv]] | bool',
\ 'openssl_pbkdf2(': 'string $password, string $salt, int $key_length, int $iterations [, string $digest_algorithm = "sha1"] | string',
\ 'openssl_pkcs12_export_to_file(': 'mixed $x509, string $filename, mixed $priv_key, string $pass [, array $args] | bool',
\ 'openssl_pkcs12_export(': 'mixed $x509, string &$out, mixed $priv_key, string $pass [, array $args] | bool',
\ 'openssl_pkcs12_read(': 'string $pkcs12, array &$certs, string $pass | bool',
\ 'openssl_pkcs7_decrypt(': 'string $infilename, string $outfilename, mixed $recipcert [, mixed $recipkey] | bool',
\ 'openssl_pkcs7_encrypt(': 'string $infile, string $outfile, mixed $recipcerts, array $headers [, int $flags = 0 [, int $cipherid = OPENSSL_CIPHER_RC2_40]] | bool',
\ 'openssl_pkcs7_read(': 'string $infilename, array &$certs | bool',
\ 'openssl_pkcs7_sign(': 'string $infilename, string $outfilename, mixed $signcert, mixed $privkey, array $headers [, int $flags = PKCS7_DETACHED [, string $extracerts]] | bool',
\ 'openssl_pkcs7_verify(': 'string $filename, int $flags [, string $outfilename [, array $cainfo [, string $extracerts [, string $content [, string $p7bfilename]]]]] | mixed',
\ 'openssl_pkey_export_to_file(': 'mixed $key, string $outfilename [, string $passphrase [, array $configargs]] | bool',
\ 'openssl_pkey_export(': 'mixed $key, string &$out [, string $passphrase [, array $configargs]] | bool',
\ 'openssl_pkey_free(': 'resource $key | void',
\ 'openssl_pkey_get_details(': 'resource $key | array',
\ 'openssl_pkey_get_private(': 'mixed $key [, string $passphrase = ""] | resource',
\ 'openssl_pkey_get_public(': 'mixed $certificate | resource',
\ 'openssl_pkey_new(': '[ array $configargs] | resource',
\ 'openssl_private_decrypt(': 'string $data, string &$decrypted, mixed $key [, int $padding = OPENSSL_PKCS1_PADDING] | bool',
\ 'openssl_private_encrypt(': 'string $data, string &$crypted, mixed $key [, int $padding = OPENSSL_PKCS1_PADDING] | bool',
\ 'openssl_public_decrypt(': 'string $data, string &$decrypted, mixed $key [, int $padding = OPENSSL_PKCS1_PADDING] | bool',
\ 'openssl_public_encrypt(': 'string $data, string &$crypted, mixed $key [, int $padding = OPENSSL_PKCS1_PADDING] | bool',
\ 'openssl_random_pseudo_bytes(': 'int $length [, bool &$crypto_strong] | string',
\ 'openssl_seal(': 'string $data, string &$sealed_data, array &$env_keys, array $pub_key_ids [, string $method = "RC4" [, string &$iv]] | int',
\ 'openssl_sign(': 'string $data, string &$signature, mixed $priv_key_id [, mixed $signature_alg = OPENSSL_ALGO_SHA1] | bool',
\ 'openssl_spki_export_challenge(': 'string &$spkac | string',
\ 'openssl_spki_export(': 'string &$spkac | string',
\ 'openssl_spki_new(': 'resource &$privkey, string &$challenge [, int $algorithm = 0] | string',
\ 'openssl_spki_verify(': 'string &$spkac | string',
\ 'openssl_verify(': 'string $data, string $signature, mixed $pub_key_id [, mixed $signature_alg = OPENSSL_ALGO_SHA1] | int',
\ 'openssl_x509_check_private_key(': 'mixed $cert, mixed $key | bool',
\ 'openssl_x509_checkpurpose(': 'mixed $x509cert, int $purpose [, array $cainfo = array() [, string $untrustedfile]] | int',
\ 'openssl_x509_export_to_file(': 'mixed $x509, string $outfilename [, bool $notext = TRUE] | bool',
\ 'openssl_x509_export(': 'mixed $x509, string &$output [, bool $notext = TRUE] | bool',
\ 'openssl_x509_fingerprint(': 'mixed $x509 [, string $hash_algorithm = "sha1" [, bool $raw_output = FALSE]] | string',
\ 'openssl_x509_free(': 'resource $x509cert | void',
\ 'openssl_x509_parse(': 'mixed $x509cert [, bool $shortnames = TRUE] | array',
\ 'openssl_x509_read(': 'mixed $x509certdata | resource',
\ }
let g:phpcomplete_builtin['functions']['parsekit'] = {
\ 'parsekit_compile_file(': 'string $filename [, array &$errors [, int $options = PARSEKIT_QUIET]] | array',
\ 'parsekit_compile_string(': 'string $phpcode [, array &$errors [, int $options = PARSEKIT_QUIET]] | array',
\ 'parsekit_func_arginfo(': 'mixed $function | array',
\ }
let g:phpcomplete_builtin['functions']['password_hashing'] = {
\ 'password_get_info(': 'string $hash | array',
\ 'password_hash(': 'string $password, int $algo [, array $options] | string',
\ 'password_needs_rehash(': 'string $hash, int $algo [, array $options] | bool',
\ 'password_verify(': 'string $password, string $hash | bool',
\ }
let g:phpcomplete_builtin['functions']['pcntl'] = {
\ 'pcntl_alarm(': 'int $seconds | int',
\ 'pcntl_async_signals(': '[ bool $on = NULL] | bool',
\ 'pcntl_errno(': 'pcntl_errno — Alias of pcntl_get_last_error()',
\ 'pcntl_exec(': 'string $path [, array $args [, array $envs]] | void',
\ 'pcntl_fork(': 'void | int',
\ 'pcntl_get_last_error(': 'void | int',
\ 'pcntl_getpriority(': '[ int $pid = getmypid() [, int $process_identifier = PRIO_PROCESS]] | int',
\ 'pcntl_setpriority(': 'int $priority [, int $pid = getmypid() [, int $process_identifier = PRIO_PROCESS]] | bool',
\ 'pcntl_signal_dispatch(': 'void | bool',
\ 'pcntl_signal_get_handler(': 'int $signo | mixed',
\ 'pcntl_signal(': 'int $signo, callable|int $handler [, bool $restart_syscalls = TRUE] | bool',
\ 'pcntl_sigprocmask(': 'int $how, array $set [, array &$oldset] | bool',
\ 'pcntl_sigtimedwait(': 'array $set [, array &$siginfo [, int $seconds = 0 [, int $nanoseconds = 0]]] | int',
\ 'pcntl_sigwaitinfo(': 'array $set [, array &$siginfo] | int',
\ 'pcntl_strerror(': 'int $errno | string',
\ 'pcntl_wait(': 'int &$status [, int $options = 0 [, array &$rusage]] | int',
\ 'pcntl_waitpid(': 'int $pid, int &$status [, int $options = 0 [, array &$rusage]] | int',
\ 'pcntl_wexitstatus(': 'int $status | int',
\ 'pcntl_wifexited(': 'int $status | bool',
\ 'pcntl_wifsignaled(': 'int $status | bool',
\ 'pcntl_wifstopped(': 'int $status | bool',
\ 'pcntl_wstopsig(': 'int $status | int',
\ 'pcntl_wtermsig(': 'int $status | int',
\ }
let g:phpcomplete_builtin['functions']['pdf'] = {
\ 'PDF_activate_item(': 'resource $pdfdoc, int $id | bool',
\ 'PDF_add_launchlink(': 'resource $pdfdoc, float $llx, float $lly, float $urx, float $ury, string $filename | bool',
\ 'PDF_add_locallink(': 'resource $pdfdoc, float $lowerleftx, float $lowerlefty, float $upperrightx, float $upperrighty, int $page, string $dest | bool',
\ 'PDF_add_nameddest(': 'resource $pdfdoc, string $name, string $optlist | bool',
\ 'PDF_add_note(': 'resource $pdfdoc, float $llx, float $lly, float $urx, float $ury, string $contents, string $title, string $icon, int $open | bool',
\ 'PDF_add_pdflink(': 'resource $pdfdoc, float $bottom_left_x, float $bottom_left_y, float $up_right_x, float $up_right_y, string $filename, int $page, string $dest | bool',
\ 'PDF_add_table_cell(': 'resource $pdfdoc, int $table, int $column, int $row, string $text, string $optlist | int',
\ 'PDF_add_textflow(': 'resource $pdfdoc, int $textflow, string $text, string $optlist | int',
\ 'PDF_add_thumbnail(': 'resource $pdfdoc, int $image | bool',
\ 'PDF_add_weblink(': 'resource $pdfdoc, float $lowerleftx, float $lowerlefty, float $upperrightx, float $upperrighty, string $url | bool',
\ 'PDF_arc(': 'resource $p, float $x, float $y, float $r, float $alpha, float $beta | bool',
\ 'PDF_arcn(': 'resource $p, float $x, float $y, float $r, float $alpha, float $beta | bool',
\ 'PDF_attach_file(': 'resource $pdfdoc, float $llx, float $lly, float $urx, float $ury, string $filename, string $description, string $author, string $mimetype, string $icon | bool',
\ 'PDF_begin_document(': 'resource $pdfdoc, string $filename, string $optlist | int',
\ 'PDF_begin_font(': 'resource $pdfdoc, string $filename, float $a, float $b, float $c, float $d, float $e, float $f, string $optlist | bool',
\ 'PDF_begin_glyph(': 'resource $pdfdoc, string $glyphname, float $wx, float $llx, float $lly, float $urx, float $ury | bool',
\ 'PDF_begin_item(': 'resource $pdfdoc, string $tag, string $optlist | int',
\ 'PDF_begin_layer(': 'resource $pdfdoc, int $layer | bool',
\ 'PDF_begin_page_ext(': 'resource $pdfdoc, float $width, float $height, string $optlist | bool',
\ 'PDF_begin_page(': 'resource $pdfdoc, float $width, float $height | bool',
\ 'PDF_begin_pattern(': 'resource $pdfdoc, float $width, float $height, float $xstep, float $ystep, int $painttype | int',
\ 'PDF_begin_template_ext(': 'resource $pdfdoc, float $width, float $height, string $optlist | int',
\ 'PDF_begin_template(': 'resource $pdfdoc, float $width, float $height | int',
\ 'PDF_circle(': 'resource $pdfdoc, float $x, float $y, float $r | bool',
\ 'PDF_clip(': 'resource $p | bool',
\ 'PDF_close_image(': 'resource $p, int $image | bool',
\ 'PDF_close_pdi_page(': 'resource $p, int $page | bool',
\ 'PDF_close_pdi(': 'resource $p, int $doc | bool',
\ 'PDF_close(': 'resource $p | bool',
\ 'PDF_closepath_fill_stroke(': 'resource $p | bool',
\ 'PDF_closepath_stroke(': 'resource $p | bool',
\ 'PDF_closepath(': 'resource $p | bool',
\ 'PDF_concat(': 'resource $p, float $a, float $b, float $c, float $d, float $e, float $f | bool',
\ 'PDF_continue_text(': 'resource $p, string $text | bool',
\ 'PDF_create_3dview(': 'resource $pdfdoc, string $username, string $optlist | int',
\ 'PDF_create_action(': 'resource $pdfdoc, string $type, string $optlist | int',
\ 'PDF_create_annotation(': 'resource $pdfdoc, float $llx, float $lly, float $urx, float $ury, string $type, string $optlist | bool',
\ 'PDF_create_bookmark(': 'resource $pdfdoc, string $text, string $optlist | int',
\ 'PDF_create_field(': 'resource $pdfdoc, float $llx, float $lly, float $urx, float $ury, string $name, string $type, string $optlist | bool',
\ 'PDF_create_fieldgroup(': 'resource $pdfdoc, string $name, string $optlist | bool',
\ 'PDF_create_gstate(': 'resource $pdfdoc, string $optlist | int',
\ 'PDF_create_pvf(': 'resource $pdfdoc, string $filename, string $data, string $optlist | bool',
\ 'PDF_create_textflow(': 'resource $pdfdoc, string $text, string $optlist | int',
\ 'PDF_curveto(': 'resource $p, float $x1, float $y1, float $x2, float $y2, float $x3, float $y3 | bool',
\ 'PDF_define_layer(': 'resource $pdfdoc, string $name, string $optlist | int',
\ 'PDF_delete_pvf(': 'resource $pdfdoc, string $filename | int',
\ 'PDF_delete_table(': 'resource $pdfdoc, int $table, string $optlist | bool',
\ 'PDF_delete_textflow(': 'resource $pdfdoc, int $textflow | bool',
\ 'PDF_delete(': 'resource $pdfdoc | bool',
\ 'PDF_encoding_set_char(': 'resource $pdfdoc, string $encoding, int $slot, string $glyphname, int $uv | bool',
\ 'PDF_end_document(': 'resource $pdfdoc, string $optlist | bool',
\ 'PDF_end_font(': 'resource $pdfdoc | bool',
\ 'PDF_end_glyph(': 'resource $pdfdoc | bool',
\ 'PDF_end_item(': 'resource $pdfdoc, int $id | bool',
\ 'PDF_end_layer(': 'resource $pdfdoc | bool',
\ 'PDF_end_page_ext(': 'resource $pdfdoc, string $optlist | bool',
\ 'PDF_end_page(': 'resource $p | bool',
\ 'PDF_end_pattern(': 'resource $p | bool',
\ 'PDF_end_template(': 'resource $p | bool',
\ 'PDF_endpath(': 'resource $p | bool',
\ 'PDF_fill_imageblock(': 'resource $pdfdoc, int $page, string $blockname, int $image, string $optlist | int',
\ 'PDF_fill_pdfblock(': 'resource $pdfdoc, int $page, string $blockname, int $contents, string $optlist | int',
\ 'PDF_fill_stroke(': 'resource $p | bool',
\ 'PDF_fill_textblock(': 'resource $pdfdoc, int $page, string $blockname, string $text, string $optlist | int',
\ 'PDF_fill(': 'resource $p | bool',
\ 'PDF_findfont(': 'resource $p, string $fontname, string $encoding, int $embed | int',
\ 'PDF_fit_image(': 'resource $pdfdoc, int $image, float $x, float $y, string $optlist | bool',
\ 'PDF_fit_pdi_page(': 'resource $pdfdoc, int $page, float $x, float $y, string $optlist | bool',
\ 'PDF_fit_table(': 'resource $pdfdoc, int $table, float $llx, float $lly, float $urx, float $ury, string $optlist | string',
\ 'PDF_fit_textflow(': 'resource $pdfdoc, int $textflow, float $llx, float $lly, float $urx, float $ury, string $optlist | string',
\ 'PDF_fit_textline(': 'resource $pdfdoc, string $text, float $x, float $y, string $optlist | bool',
\ 'PDF_get_apiname(': 'resource $pdfdoc | string',
\ 'PDF_get_buffer(': 'resource $p | string',
\ 'PDF_get_errmsg(': 'resource $pdfdoc | string',
\ 'PDF_get_errnum(': 'resource $pdfdoc | int',
\ 'PDF_get_majorversion(': 'void | int',
\ 'PDF_get_minorversion(': 'void | int',
\ 'PDF_get_parameter(': 'resource $p, string $key, float $modifier | string',
\ 'PDF_get_pdi_parameter(': 'resource $p, string $key, int $doc, int $page, int $reserved | string',
\ 'PDF_get_pdi_value(': 'resource $p, string $key, int $doc, int $page, int $reserved | float',
\ 'PDF_get_value(': 'resource $p, string $key, float $modifier | float',
\ 'PDF_info_font(': 'resource $pdfdoc, int $font, string $keyword, string $optlist | float',
\ 'PDF_info_matchbox(': 'resource $pdfdoc, string $boxname, int $num, string $keyword | float',
\ 'PDF_info_table(': 'resource $pdfdoc, int $table, string $keyword | float',
\ 'PDF_info_textflow(': 'resource $pdfdoc, int $textflow, string $keyword | float',
\ 'PDF_info_textline(': 'resource $pdfdoc, string $text, string $keyword, string $optlist | float',
\ 'PDF_initgraphics(': 'resource $p | bool',
\ 'PDF_lineto(': 'resource $p, float $x, float $y | bool',
\ 'PDF_load_3ddata(': 'resource $pdfdoc, string $filename, string $optlist | int',
\ 'PDF_load_font(': 'resource $pdfdoc, string $fontname, string $encoding, string $optlist | int',
\ 'PDF_load_iccprofile(': 'resource $pdfdoc, string $profilename, string $optlist | int',
\ 'PDF_load_image(': 'resource $pdfdoc, string $imagetype, string $filename, string $optlist | int',
\ 'PDF_makespotcolor(': 'resource $p, string $spotname | int',
\ 'PDF_moveto(': 'resource $p, float $x, float $y | bool',
\ 'PDF_new(': 'void | resource',
\ 'PDF_open_ccitt(': 'resource $pdfdoc, string $filename, int $width, int $height, int $BitReverse, int $k, int $Blackls1 | int',
\ 'PDF_open_file(': 'resource $p, string $filename | bool',
\ 'PDF_open_image_file(': 'resource $p, string $imagetype, string $filename, string $stringparam, int $intparam | int',
\ 'PDF_open_image(': 'resource $p, string $imagetype, string $source, string $data, int $length, int $width, int $height, int $components, int $bpc, string $params | int',
\ 'PDF_open_memory_image(': 'resource $p, resource $image | int',
\ 'PDF_open_pdi_document(': 'resource $p, string $filename, string $optlist | int',
\ 'PDF_open_pdi_page(': 'resource $p, int $doc, int $pagenumber, string $optlist | int',
\ 'PDF_open_pdi(': 'resource $pdfdoc, string $filename, string $optlist, int $len | int',
\ 'PDF_pcos_get_number(': 'resource $p, int $doc, string $path | float',
\ 'PDF_pcos_get_stream(': 'resource $p, int $doc, string $optlist, string $path | string',
\ 'PDF_pcos_get_string(': 'resource $p, int $doc, string $path | string',
\ 'PDF_place_image(': 'resource $pdfdoc, int $image, float $x, float $y, float $scale | bool',
\ 'PDF_place_pdi_page(': 'resource $pdfdoc, int $page, float $x, float $y, float $sx, float $sy | bool',
\ 'PDF_process_pdi(': 'resource $pdfdoc, int $doc, int $page, string $optlist | int',
\ 'PDF_rect(': 'resource $p, float $x, float $y, float $width, float $height | bool',
\ 'PDF_restore(': 'resource $p | bool',
\ 'PDF_resume_page(': 'resource $pdfdoc, string $optlist | bool',
\ 'PDF_rotate(': 'resource $p, float $phi | bool',
\ 'PDF_save(': 'resource $p | bool',
\ 'PDF_scale(': 'resource $p, float $sx, float $sy | bool',
\ 'PDF_set_border_color(': 'resource $p, float $red, float $green, float $blue | bool',
\ 'PDF_set_border_dash(': 'resource $pdfdoc, float $black, float $white | bool',
\ 'PDF_set_border_style(': 'resource $pdfdoc, string $style, float $width | bool',
\ 'PDF_set_gstate(': 'resource $pdfdoc, int $gstate | bool',
\ 'PDF_set_info(': 'resource $p, string $key, string $value | bool',
\ 'PDF_set_layer_dependency(': 'resource $pdfdoc, string $type, string $optlist | bool',
\ 'PDF_set_parameter(': 'resource $p, string $key, string $value | bool',
\ 'PDF_set_text_pos(': 'resource $p, float $x, float $y | bool',
\ 'PDF_set_value(': 'resource $p, string $key, float $value | bool',
\ 'PDF_setcolor(': 'resource $p, string $fstype, string $colorspace, float $c1, float $c2, float $c3, float $c4 | bool',
\ 'PDF_setdash(': 'resource $pdfdoc, float $b, float $w | bool',
\ 'PDF_setdashpattern(': 'resource $pdfdoc, string $optlist | bool',
\ 'PDF_setflat(': 'resource $pdfdoc, float $flatness | bool',
\ 'PDF_setfont(': 'resource $pdfdoc, int $font, float $fontsize | bool',
\ 'PDF_setgray_fill(': 'resource $p, float $g | bool',
\ 'PDF_setgray_stroke(': 'resource $p, float $g | bool',
\ 'PDF_setgray(': 'resource $p, float $g | bool',
\ 'PDF_setlinecap(': 'resource $p, int $linecap | bool',
\ 'PDF_setlinejoin(': 'resource $p, int $value | bool',
\ 'PDF_setlinewidth(': 'resource $p, float $width | bool',
\ 'PDF_setmatrix(': 'resource $p, float $a, float $b, float $c, float $d, float $e, float $f | bool',
\ 'PDF_setmiterlimit(': 'resource $pdfdoc, float $miter | bool',
\ 'PDF_setrgbcolor_fill(': 'resource $p, float $red, float $green, float $blue | bool',
\ 'PDF_setrgbcolor_stroke(': 'resource $p, float $red, float $green, float $blue | bool',
\ 'PDF_setrgbcolor(': 'resource $p, float $red, float $green, float $blue | bool',
\ 'PDF_shading_pattern(': 'resource $pdfdoc, int $shading, string $optlist | int',
\ 'PDF_shading(': 'resource $pdfdoc, string $shtype, float $x0, float $y0, float $x1, float $y1, float $c1, float $c2, float $c3, float $c4, string $optlist | int',
\ 'PDF_shfill(': 'resource $pdfdoc, int $shading | bool',
\ 'PDF_show_boxed(': 'resource $p, string $text, float $left, float $top, float $width, float $height, string $mode, string $feature | int',
\ 'PDF_show_xy(': 'resource $p, string $text, float $x, float $y | bool',
\ 'PDF_show(': 'resource $pdfdoc, string $text | bool',
\ 'PDF_skew(': 'resource $p, float $alpha, float $beta | bool',
\ 'PDF_stringwidth(': 'resource $p, string $text, int $font, float $fontsize | float',
\ 'PDF_stroke(': 'resource $p | bool',
\ 'PDF_suspend_page(': 'resource $pdfdoc, string $optlist | bool',
\ 'PDF_translate(': 'resource $p, float $tx, float $ty | bool',
\ 'PDF_utf16_to_utf8(': 'resource $pdfdoc, string $utf16string | string',
\ 'PDF_utf32_to_utf16(': 'resource $pdfdoc, string $utf32string, string $ordering | string',
\ 'PDF_utf8_to_utf16(': 'resource $pdfdoc, string $utf8string, string $ordering | string',
\ }
let g:phpcomplete_builtin['functions']['postgresql'] = {
\ 'pg_affected_rows(': 'resource $result | int',
\ 'pg_cancel_query(': 'resource $connection | bool',
\ 'pg_client_encoding(': '[ resource $connection] | string',
\ 'pg_close(': '[ resource $connection] | bool',
\ 'pg_connect_poll(': 'resource $connection | int',
\ 'pg_connect(': 'string $connection_string [, int $connect_type] | resource',
\ 'pg_connection_busy(': 'resource $connection | bool',
\ 'pg_connection_reset(': 'resource $connection | bool',
\ 'pg_connection_status(': 'resource $connection | int',
\ 'pg_consume_input(': 'resource $connection | bool',
\ 'pg_convert(': 'resource $connection, string $table_name, array $assoc_array [, int $options = 0] | array',
\ 'pg_copy_from(': 'resource $connection, string $table_name, array $rows [, string $delimiter [, string $null_as]] | bool',
\ 'pg_copy_to(': 'resource $connection, string $table_name [, string $delimiter [, string $null_as]] | array',
\ 'pg_dbname(': '[ resource $connection] | string',
\ 'pg_delete(': 'resource $connection, string $table_name, array $assoc_array [, int $options = PGSQL_DML_EXEC] | mixed',
\ 'pg_end_copy(': '[ resource $connection] | bool',
\ 'pg_escape_bytea(': '[ resource $connection [, string $data]] | string',
\ 'pg_escape_identifier(': '[ resource $connection [, string $data]] | string',
\ 'pg_escape_literal(': '[ resource $connection [, string $data]] | string',
\ 'pg_escape_string(': '[ resource $connection [, string $data]] | string',
\ 'pg_execute(': '[ resource $connection [, string $stmtname [, array $params]]] | resource',
\ 'pg_fetch_all_columns(': 'resource $result [, int $column = 0] | array',
\ 'pg_fetch_all(': 'resource $result [, int $result_type = PGSQL_ASSOC] | array',
\ 'pg_fetch_array(': 'resource $result [, int $row [, int $result_type = PGSQL_BOTH]] | array',
\ 'pg_fetch_assoc(': 'resource $result [, int $row] | array',
\ 'pg_fetch_object(': 'resource $result [, int $row [, int $result_type = PGSQL_ASSOC]] | object',
\ 'pg_fetch_result(': 'resource $result, int $row, mixed $field | string',
\ 'pg_fetch_row(': 'resource $result [, int $row] | array',
\ 'pg_field_is_null(': 'resource $result, int $row, mixed $field | int',
\ 'pg_field_name(': 'resource $result, int $field_number | string',
\ 'pg_field_num(': 'resource $result, string $field_name | int',
\ 'pg_field_prtlen(': 'resource $result, int $row_number, mixed $field_name_or_number | int',
\ 'pg_field_size(': 'resource $result, int $field_number | int',
\ 'pg_field_table(': 'resource $result, int $field_number [, bool $oid_only = FALSE] | mixed',
\ 'pg_field_type_oid(': 'resource $result, int $field_number | int',
\ 'pg_field_type(': 'resource $result, int $field_number | string',
\ 'pg_flush(': 'resource $connection | mixed',
\ 'pg_free_result(': 'resource $result | bool',
\ 'pg_get_notify(': 'resource $connection [, int $result_type] | array',
\ 'pg_get_pid(': 'resource $connection | int',
\ 'pg_get_result(': '[ resource $connection] | resource',
\ 'pg_host(': '[ resource $connection] | string',
\ 'pg_insert(': 'resource $connection, string $table_name, array $assoc_array [, int $options = PGSQL_DML_EXEC] | mixed',
\ 'pg_last_error(': '[ resource $connection] | string',
\ 'pg_last_notice(': 'resource $connection [, int $option = PGSQL_NOTICE_LAST] | mixed',
\ 'pg_last_oid(': 'resource $result | string',
\ 'pg_lo_close(': 'resource $large_object | bool',
\ 'pg_lo_create(': '[ resource $connection [, mixed $object_id]] | int',
\ 'pg_lo_export(': '[ resource $connection [, int $oid [, string $pathname]]] | bool',
\ 'pg_lo_import(': '[ resource $connection [, string $pathname [, mixed $object_id]]] | int',
\ 'pg_lo_open(': 'resource $connection, int $oid, string $mode | resource',
\ 'pg_lo_read_all(': 'resource $large_object | int',
\ 'pg_lo_read(': 'resource $large_object [, int $len = 8192] | string',
\ 'pg_lo_seek(': 'resource $large_object, int $offset [, int $whence = PGSQL_SEEK_CUR] | bool',
\ 'pg_lo_tell(': 'resource $large_object | int',
\ 'pg_lo_truncate(': 'resource $large_object, int $size | bool',
\ 'pg_lo_unlink(': 'resource $connection, int $oid | bool',
\ 'pg_lo_write(': 'resource $large_object, string $data [, int $len] | int',
\ 'pg_meta_data(': 'resource $connection, string $table_name [, bool $extended = FALSE] | array',
\ 'pg_num_fields(': 'resource $result | int',
\ 'pg_num_rows(': 'resource $result | int',
\ 'pg_options(': '[ resource $connection] | string',
\ 'pg_parameter_status(': '[ resource $connection [, string $param_name]] | string',
\ 'pg_pconnect(': 'string $connection_string [, int $connect_type] | resource',
\ 'pg_ping(': '[ resource $connection] | bool',
\ 'pg_port(': '[ resource $connection] | int',
\ 'pg_prepare(': '[ resource $connection [, string $stmtname [, string $query]]] | resource',
\ 'pg_put_line(': '[ resource $connection [, string $data]] | bool',
\ 'pg_query_params(': '[ resource $connection [, string $query [, array $params]]] | resource',
\ 'pg_query(': '[ resource $connection [, string $query]] | resource',
\ 'pg_result_error_field(': 'resource $result, int $fieldcode | string',
\ 'pg_result_error(': 'resource $result | string',
\ 'pg_result_seek(': 'resource $result, int $offset | bool',
\ 'pg_result_status(': 'resource $result [, int $type = PGSQL_STATUS_LONG] | mixed',
\ 'pg_select(': 'resource $connection, string $table_name, array $assoc_array [, int $options = PGSQL_DML_EXEC [, int $result_type = PGSQL_ASSOC]] | mixed',
\ 'pg_send_execute(': 'resource $connection, string $stmtname, array $params | bool',
\ 'pg_send_prepare(': 'resource $connection, string $stmtname, string $query | bool',
\ 'pg_send_query_params(': 'resource $connection, string $query, array $params | bool',
\ 'pg_send_query(': 'resource $connection, string $query | bool',
\ 'pg_set_client_encoding(': '[ resource $connection [, string $encoding]] | int',
\ 'pg_set_error_verbosity(': '[ resource $connection [, int $verbosity]] | int',
\ 'pg_socket(': 'resource $connection | resource',
\ 'pg_trace(': 'string $pathname [, string $mode = "w" [, resource $connection]] | bool',
\ 'pg_transaction_status(': 'resource $connection | int',
\ 'pg_tty(': '[ resource $connection] | string',
\ 'pg_unescape_bytea(': 'string $data | string',
\ 'pg_untrace(': '[ resource $connection] | bool',
\ 'pg_update(': 'resource $connection, string $table_name, array $data, array $condition [, int $options = PGSQL_DML_EXEC] | mixed',
\ 'pg_version(': '[ resource $connection] | array',
\ }
let g:phpcomplete_builtin['functions']['phpdbg'] = {
\ 'phpdbg_break_file(': 'string $file, int $line | void',
\ 'phpdbg_break_function(': 'string $function | void',
\ 'phpdbg_break_method(': 'string $class, string $method | void',
\ 'phpdbg_break_next(': 'void | void',
\ 'phpdbg_clear(': 'void | void',
\ 'phpdbg_color(': 'int $element, string $color | void',
\ 'phpdbg_end_oplog(': '[ array $options] | array',
\ 'phpdbg_exec(': '[ string $context] | mixed',
\ 'phpdbg_get_executable(': '[ array $options] | array',
\ 'phpdbg_prompt(': 'string $string | void',
\ 'phpdbg_start_oplog(': 'void | void',
\ }
let g:phpcomplete_builtin['functions']['posix'] = {
\ 'posix_access(': 'string $file [, int $mode = POSIX_F_OK] | bool',
\ 'posix_ctermid(': 'void | string',
\ 'posix_errno(': 'posix_errno — Alias of posix_get_last_error()',
\ 'posix_get_last_error(': 'void | int',
\ 'posix_getcwd(': 'void | string',
\ 'posix_getegid(': 'void | int',
\ 'posix_geteuid(': 'void | int',
\ 'posix_getgid(': 'void | int',
\ 'posix_getgrgid(': 'int $gid | array',
\ 'posix_getgrnam(': 'string $name | array',
\ 'posix_getgroups(': 'void | array',
\ 'posix_getlogin(': 'void | string',
\ 'posix_getpgid(': 'int $pid | int',
\ 'posix_getpgrp(': 'void | int',
\ 'posix_getpid(': 'void | int',
\ 'posix_getppid(': 'void | int',
\ 'posix_getpwnam(': 'string $username | array',
\ 'posix_getpwuid(': 'int $uid | array',
\ 'posix_getrlimit(': 'void | array',
\ 'posix_getsid(': 'int $pid | int',
\ 'posix_getuid(': 'void | int',
\ 'posix_initgroups(': 'string $name, int $base_group_id | bool',
\ 'posix_isatty(': 'mixed $fd | bool',
\ 'posix_kill(': 'int $pid, int $sig | bool',
\ 'posix_mkfifo(': 'string $pathname, int $mode | bool',
\ 'posix_mknod(': 'string $pathname, int $mode [, int $major = 0 [, int $minor = 0]] | bool',
\ 'posix_setegid(': 'int $gid | bool',
\ 'posix_seteuid(': 'int $uid | bool',
\ 'posix_setgid(': 'int $gid | bool',
\ 'posix_setpgid(': 'int $pid, int $pgid | bool',
\ 'posix_setrlimit(': 'int $resource, int $softlimit, int $hardlimit | bool',
\ 'posix_setsid(': 'void | int',
\ 'posix_setuid(': 'int $uid | bool',
\ 'posix_strerror(': 'int $errno | string',
\ 'posix_times(': 'void | array',
\ 'posix_ttyname(': 'mixed $fd | string',
\ 'posix_uname(': 'void | array',
\ }
let g:phpcomplete_builtin['functions']['pcre'] = {
\ 'preg_filter(': 'mixed $pattern, mixed $replacement, mixed $subject [, int $limit = -1 [, int &$count]] | mixed',
\ 'preg_grep(': 'string $pattern, array $input [, int $flags = 0] | array',
\ 'preg_last_error(': 'void | int',
\ 'preg_match_all(': 'string $pattern, string $subject [, array &$matches [, int $flags = PREG_PATTERN_ORDER [, int $offset = 0]]] | int',
\ 'preg_match(': 'string $pattern, string $subject [, array &$matches [, int $flags = 0 [, int $offset = 0]]] | int',
\ 'preg_quote(': 'string $str [, string $delimiter = NULL] | string',
\ 'preg_replace_callback_array(': 'array $patterns_and_callbacks, mixed $subject [, int $limit = -1 [, int &$count]] | mixed',
\ 'preg_replace_callback(': 'mixed $pattern, callable $callback, mixed $subject [, int $limit = -1 [, int &$count]] | mixed',
\ 'preg_replace(': 'mixed $pattern, mixed $replacement, mixed $subject [, int $limit = -1 [, int &$count]] | mixed',
\ 'preg_split(': 'string $pattern, string $subject [, int $limit = -1 [, int $flags = 0]] | array',
\ }
let g:phpcomplete_builtin['functions']['ps'] = {
\ 'ps_add_bookmark(': 'resource $psdoc, string $text [, int $parent = 0 [, int $open = 0]] | int',
\ 'ps_add_launchlink(': 'resource $psdoc, float $llx, float $lly, float $urx, float $ury, string $filename | bool',
\ 'ps_add_locallink(': 'resource $psdoc, float $llx, float $lly, float $urx, float $ury, int $page, string $dest | bool',
\ 'ps_add_note(': 'resource $psdoc, float $llx, float $lly, float $urx, float $ury, string $contents, string $title, string $icon, int $open | bool',
\ 'ps_add_pdflink(': 'resource $psdoc, float $llx, float $lly, float $urx, float $ury, string $filename, int $page, string $dest | bool',
\ 'ps_add_weblink(': 'resource $psdoc, float $llx, float $lly, float $urx, float $ury, string $url | bool',
\ 'ps_arc(': 'resource $psdoc, float $x, float $y, float $radius, float $alpha, float $beta | bool',
\ 'ps_arcn(': 'resource $psdoc, float $x, float $y, float $radius, float $alpha, float $beta | bool',
\ 'ps_begin_page(': 'resource $psdoc, float $width, float $height | bool',
\ 'ps_begin_pattern(': 'resource $psdoc, float $width, float $height, float $xstep, float $ystep, int $painttype | int',
\ 'ps_begin_template(': 'resource $psdoc, float $width, float $height | int',
\ 'ps_circle(': 'resource $psdoc, float $x, float $y, float $radius | bool',
\ 'ps_clip(': 'resource $psdoc | bool',
\ 'ps_close_image(': 'resource $psdoc, int $imageid | void',
\ 'ps_close(': 'resource $psdoc | bool',
\ 'ps_closepath_stroke(': 'resource $psdoc | bool',
\ 'ps_closepath(': 'resource $psdoc | bool',
\ 'ps_continue_text(': 'resource $psdoc, string $text | bool',
\ 'ps_curveto(': 'resource $psdoc, float $x1, float $y1, float $x2, float $y2, float $x3, float $y3 | bool',
\ 'ps_delete(': 'resource $psdoc | bool',
\ 'ps_end_page(': 'resource $psdoc | bool',
\ 'ps_end_pattern(': 'resource $psdoc | bool',
\ 'ps_end_template(': 'resource $psdoc | bool',
\ 'ps_fill_stroke(': 'resource $psdoc | bool',
\ 'ps_fill(': 'resource $psdoc | bool',
\ 'ps_findfont(': 'resource $psdoc, string $fontname, string $encoding [, bool $embed = FALSE] | int',
\ 'ps_get_buffer(': 'resource $psdoc | string',
\ 'ps_get_parameter(': 'resource $psdoc, string $name [, float $modifier] | string',
\ 'ps_get_value(': 'resource $psdoc, string $name [, float $modifier] | float',
\ 'ps_hyphenate(': 'resource $psdoc, string $text | array',
\ 'ps_include_file(': 'resource $psdoc, string $file | bool',
\ 'ps_lineto(': 'resource $psdoc, float $x, float $y | bool',
\ 'ps_makespotcolor(': 'resource $psdoc, string $name [, int $reserved = 0] | int',
\ 'ps_moveto(': 'resource $psdoc, float $x, float $y | bool',
\ 'ps_new(': 'void | resource',
\ 'ps_open_file(': 'resource $psdoc [, string $filename] | bool',
\ 'ps_open_image_file(': 'resource $psdoc, string $type, string $filename [, string $stringparam [, int $intparam = 0]] | int',
\ 'ps_open_image(': 'resource $psdoc, string $type, string $source, string $data, int $lenght, int $width, int $height, int $components, int $bpc, string $params | int',
\ 'ps_open_memory_image(': 'resource $psdoc, int $gd | int',
\ 'ps_place_image(': 'resource $psdoc, int $imageid, float $x, float $y, float $scale | bool',
\ 'ps_rect(': 'resource $psdoc, float $x, float $y, float $width, float $height | bool',
\ 'ps_restore(': 'resource $psdoc | bool',
\ 'ps_rotate(': 'resource $psdoc, float $rot | bool',
\ 'ps_save(': 'resource $psdoc | bool',
\ 'ps_scale(': 'resource $psdoc, float $x, float $y | bool',
\ 'ps_set_border_color(': 'resource $psdoc, float $red, float $green, float $blue | bool',
\ 'ps_set_border_dash(': 'resource $psdoc, float $black, float $white | bool',
\ 'ps_set_border_style(': 'resource $psdoc, string $style, float $width | bool',
\ 'ps_set_info(': 'resource $p, string $key, string $val | bool',
\ 'ps_set_parameter(': 'resource $psdoc, string $name, string $value | bool',
\ 'ps_set_text_pos(': 'resource $psdoc, float $x, float $y | bool',
\ 'ps_set_value(': 'resource $psdoc, string $name, float $value | bool',
\ 'ps_setcolor(': 'resource $psdoc, string $type, string $colorspace, float $c1, float $c2, float $c3, float $c4 | bool',
\ 'ps_setdash(': 'resource $psdoc, float $on, float $off | bool',
\ 'ps_setflat(': 'resource $psdoc, float $value | bool',
\ 'ps_setfont(': 'resource $psdoc, int $fontid, float $size | bool',
\ 'ps_setgray(': 'resource $psdoc, float $gray | bool',
\ 'ps_setlinecap(': 'resource $psdoc, int $type | bool',
\ 'ps_setlinejoin(': 'resource $psdoc, int $type | bool',
\ 'ps_setlinewidth(': 'resource $psdoc, float $width | bool',
\ 'ps_setmiterlimit(': 'resource $psdoc, float $value | bool',
\ 'ps_setoverprintmode(': 'resource $psdoc, int $mode | bool',
\ 'ps_setpolydash(': 'resource $psdoc, float $arr | bool',
\ 'ps_shading_pattern(': 'resource $psdoc, int $shadingid, string $optlist | int',
\ 'ps_shading(': 'resource $psdoc, string $type, float $x0, float $y0, float $x1, float $y1, float $c1, float $c2, float $c3, float $c4, string $optlist | int',
\ 'ps_shfill(': 'resource $psdoc, int $shadingid | bool',
\ 'ps_show_boxed(': 'resource $psdoc, string $text, float $left, float $bottom, float $width, float $height, string $hmode [, string $feature] | int',
\ 'ps_show_xy(': 'resource $psdoc, string $text, float $x, float $y | bool',
\ 'ps_show_xy2(': 'resource $psdoc, string $text, int $len, float $xcoor, float $ycoor | bool',
\ 'ps_show(': 'resource $psdoc, string $text | bool',
\ 'ps_show2(': 'resource $psdoc, string $text, int $len | bool',
\ 'ps_string_geometry(': 'resource $psdoc, string $text [, int $fontid = 0 [, float $size = 0.0]] | array',
\ 'ps_stringwidth(': 'resource $psdoc, string $text [, int $fontid = 0 [, float $size = 0.0]] | float',
\ 'ps_stroke(': 'resource $psdoc | bool',
\ 'ps_symbol_name(': 'resource $psdoc, int $ord [, int $fontid = 0] | string',
\ 'ps_symbol_width(': 'resource $psdoc, int $ord [, int $fontid = 0 [, float $size = 0.0]] | float',
\ 'ps_symbol(': 'resource $psdoc, int $ord | bool',
\ 'ps_translate(': 'resource $psdoc, float $x, float $y | bool',
\ }
let g:phpcomplete_builtin['functions']['pspell'] = {
\ 'pspell_add_to_personal(': 'int $dictionary_link, string $word | bool',
\ 'pspell_add_to_session(': 'int $dictionary_link, string $word | bool',
\ 'pspell_check(': 'int $dictionary_link, string $word | bool',
\ 'pspell_clear_session(': 'int $dictionary_link | bool',
\ 'pspell_config_create(': 'string $language [, string $spelling [, string $jargon [, string $encoding]]] | int',
\ 'pspell_config_data_dir(': 'int $conf, string $directory | bool',
\ 'pspell_config_dict_dir(': 'int $conf, string $directory | bool',
\ 'pspell_config_ignore(': 'int $dictionary_link, int $n | bool',
\ 'pspell_config_mode(': 'int $dictionary_link, int $mode | bool',
\ 'pspell_config_personal(': 'int $dictionary_link, string $file | bool',
\ 'pspell_config_repl(': 'int $dictionary_link, string $file | bool',
\ 'pspell_config_runtogether(': 'int $dictionary_link, bool $flag | bool',
\ 'pspell_config_save_repl(': 'int $dictionary_link, bool $flag | bool',
\ 'pspell_new_config(': 'int $config | int',
\ 'pspell_new_personal(': 'string $personal, string $language [, string $spelling [, string $jargon [, string $encoding [, int $mode = 0]]]] | int',
\ 'pspell_new(': 'string $language [, string $spelling [, string $jargon [, string $encoding [, int $mode = 0]]]] | int',
\ 'pspell_save_wordlist(': 'int $dictionary_link | bool',
\ 'pspell_store_replacement(': 'int $dictionary_link, string $misspelled, string $correct | bool',
\ 'pspell_suggest(': 'int $dictionary_link, string $word | array',
\ }
let g:phpcomplete_builtin['functions']['paradox'] = {
\ 'px_close(': 'resource $pxdoc | bool',
\ 'px_create_fp(': 'resource $pxdoc, resource $file, array $fielddesc | bool',
\ 'px_date2string(': 'resource $pxdoc, int $value, string $format | string',
\ 'px_delete_record(': 'resource $pxdoc, int $num | bool',
\ 'px_delete(': 'resource $pxdoc | bool',
\ 'px_get_field(': 'resource $pxdoc, int $fieldno | array',
\ 'px_get_info(': 'resource $pxdoc | array',
\ 'px_get_parameter(': 'resource $pxdoc, string $name | string',
\ 'px_get_record(': 'resource $pxdoc, int $num [, int $mode = 0] | array',
\ 'px_get_schema(': 'resource $pxdoc [, int $mode = 0] | array',
\ 'px_get_value(': 'resource $pxdoc, string $name | float',
\ 'px_insert_record(': 'resource $pxdoc, array $data | int',
\ 'px_new(': 'void | resource',
\ 'px_numfields(': 'resource $pxdoc | int',
\ 'px_numrecords(': 'resource $pxdoc | int',
\ 'px_open_fp(': 'resource $pxdoc, resource $file | bool',
\ 'px_put_record(': 'resource $pxdoc, array $record [, int $recpos = -1] | bool',
\ 'px_retrieve_record(': 'resource $pxdoc, int $num [, int $mode = 0] | array',
\ 'px_set_blob_file(': 'resource $pxdoc, string $filename | bool',
\ 'px_set_parameter(': 'resource $pxdoc, string $name, string $value | bool',
\ 'px_set_tablename(': 'resource $pxdoc, string $name | void',
\ 'px_set_targetencoding(': 'resource $pxdoc, string $encoding | bool',
\ 'px_set_value(': 'resource $pxdoc, string $name, float $value | bool',
\ 'px_timestamp2string(': 'resource $pxdoc, float $value, string $format | string',
\ 'px_update_record(': 'resource $pxdoc, array $data, int $num | bool',
\ }
let g:phpcomplete_builtin['functions']['radius'] = {
\ 'radius_acct_open(': 'void | resource',
\ 'radius_add_server(': 'resource $radius_handle, string $hostname, int $port, string $secret, int $timeout, int $max_tries | bool',
\ 'radius_auth_open(': 'void | resource',
\ 'radius_close(': 'resource $radius_handle | bool',
\ 'radius_config(': 'resource $radius_handle, string $file | bool',
\ 'radius_create_request(': 'resource $radius_handle, int $type | bool',
\ 'radius_cvt_addr(': 'string $data | string',
\ 'radius_cvt_int(': 'string $data | int',
\ 'radius_cvt_string(': 'string $data | string',
\ 'radius_demangle_mppe_key(': 'resource $radius_handle, string $mangled | string',
\ 'radius_demangle(': 'resource $radius_handle, string $mangled | string',
\ 'radius_get_attr(': 'resource $radius_handle | mixed',
\ 'radius_get_tagged_attr_data(': 'string $data | string',
\ 'radius_get_tagged_attr_tag(': 'string $data | int',
\ 'radius_get_vendor_attr(': 'string $data | array',
\ 'radius_put_addr(': 'resource $radius_handle, int $type, string $addr [, int $options = 0 [, int $tag]] | bool',
\ 'radius_put_attr(': 'resource $radius_handle, int $type, string $value [, int $options = 0 [, int $tag]] | bool',
\ 'radius_put_int(': 'resource $radius_handle, int $type, int $value [, int $options = 0 [, int $tag]] | bool',
\ 'radius_put_string(': 'resource $radius_handle, int $type, string $value [, int $options = 0 [, int $tag]] | bool',
\ 'radius_put_vendor_addr(': 'resource $radius_handle, int $vendor, int $type, string $addr | bool',
\ 'radius_put_vendor_attr(': 'resource $radius_handle, int $vendor, int $type, string $value [, int $options = 0 [, int $tag]] | bool',
\ 'radius_put_vendor_int(': 'resource $radius_handle, int $vendor, int $type, int $value [, int $options = 0 [, int $tag]] | bool',
\ 'radius_put_vendor_string(': 'resource $radius_handle, int $vendor, int $type, string $value [, int $options = 0 [, int $tag]] | bool',
\ 'radius_request_authenticator(': 'resource $radius_handle | string',
\ 'radius_salt_encrypt_attr(': 'resource $radius_handle, string $data | string',
\ 'radius_send_request(': 'resource $radius_handle | int',
\ 'radius_server_secret(': 'resource $radius_handle | string',
\ 'radius_strerror(': 'resource $radius_handle | string',
\ }
let g:phpcomplete_builtin['functions']['csprng'] = {
\ 'random_bytes(': 'int $length | string',
\ 'random_int(': 'int $min, int $max | int',
\ }
let g:phpcomplete_builtin['functions']['rar'] = {
\ 'rar_wrapper_cache_stats(': 'void | string',
\ 'rar_solid_is(': 'RarArchive $rarfile | bool',
\ 'rar_allow_broken_set(': 'RarArchive $rarfile, bool $allow_broken | bool',
\ 'rar_broken_is(': 'RarArchive $rarfile | bool',
\ 'rar_entry_get(': 'RarArchive $rarfile, string $entryname | RarEntry',
\ 'rar_close(': 'RarArchive $rarfile | bool',
\ 'rar_list(': 'RarArchive $rarfile | array',
\ 'rar_comment_get(': 'RarArchive $rarfile | string',
\ 'rar_open(': 'string $filename [, string $password = NULL [, callable $volume_callback = NULL]] | RarArchive',
\ }
let g:phpcomplete_builtin['functions']['readline'] = {
\ 'readline_add_history(': 'string $line | bool',
\ 'readline_callback_handler_install(': 'string $prompt, callable $callback | bool',
\ 'readline_callback_handler_remove(': 'void | bool',
\ 'readline_callback_read_char(': 'void | void',
\ 'readline_clear_history(': 'void | bool',
\ 'readline_completion_function(': 'callable $function | bool',
\ 'readline_info(': '[ string $varname [, string $newvalue]] | mixed',
\ 'readline_list_history(': 'void | array',
\ 'readline_on_new_line(': 'void | void',
\ 'readline_read_history(': '[ string $filename] | bool',
\ 'readline_redisplay(': 'void | void',
\ 'readline_write_history(': '[ string $filename] | bool',
\ 'readline(': '[ string $prompt = NULL] | string',
\ }
let g:phpcomplete_builtin['functions']['recode'] = {
\ 'recode_file(': 'string $request, resource $input, resource $output | bool',
\ 'recode_string(': 'string $request, string $string | string',
\ 'recode(': 'recode — Alias of recode_string()',
\ }
let g:phpcomplete_builtin['functions']['rpm_reader'] = {
\ 'rpm_close(': 'resource $rpmr | bool',
\ 'rpm_get_tag(': 'resource $rpmr, int $tagnum | mixed',
\ 'rpm_is_valid(': 'string $filename | bool',
\ 'rpm_open(': 'string $filename | resource',
\ 'rpm_version(': 'void | string',
\ }
let g:phpcomplete_builtin['functions']['rrd'] = {
\ 'rrd_create(': 'string $filename, array $options | bool',
\ 'rrd_error(': 'void | string',
\ 'rrd_fetch(': 'string $filename, array $options | array',
\ 'rrd_first(': 'string $file [, int $raaindex = 0] | int',
\ 'rrd_graph(': 'string $filename, array $options | array',
\ 'rrd_info(': 'string $filename | array',
\ 'rrd_last(': 'string $filename | int',
\ 'rrd_lastupdate(': 'string $filename | array',
\ 'rrd_restore(': 'string $xml_file, string $rrd_file [, array $options] | bool',
\ 'rrd_tune(': 'string $filename, array $options | bool',
\ 'rrd_update(': 'string $filename, array $options | bool',
\ 'rrd_version(': 'void | string',
\ 'rrd_xport(': 'array $options | array',
\ 'rrdc_disconnect(': 'void | void',
\ }
let g:phpcomplete_builtin['functions']['runkit'] = {
\ 'runkit_class_adopt(': 'string $classname, string $parentname | bool',
\ 'runkit_class_emancipate(': 'string $classname | bool',
\ 'runkit_constant_add(': 'string $constname, mixed $value | bool',
\ 'runkit_constant_redefine(': 'string $constname, mixed $newvalue | bool',
\ 'runkit_constant_remove(': 'string $constname | bool',
\ 'runkit_function_add(': 'string $funcname, string $arglist, string $code [, bool $return_by_reference = NULL [, string $doc_comment = NULL]] | bool',
\ 'runkit_function_copy(': 'string $funcname, string $targetname | bool',
\ 'runkit_function_redefine(': 'string $funcname, string $arglist, string $code [, bool $return_by_reference = NULL [, string $doc_comment = NULL]] | bool',
\ 'runkit_function_remove(': 'string $funcname | bool',
\ 'runkit_function_rename(': 'string $funcname, string $newname | bool',
\ 'runkit_import(': 'string $filename [, int $flags = RUNKIT_IMPORT_CLASS_METHODS] | bool',
\ 'runkit_lint_file(': 'string $filename | bool',
\ 'runkit_lint(': 'string $code | bool',
\ 'runkit_method_add(': 'string $classname, string $methodname, string $args, string $code [, int $flags = RUNKIT_ACC_PUBLIC [, string $doc_comment = NULL]] | bool',
\ 'runkit_method_copy(': 'string $dClass, string $dMethod, string $sClass [, string $sMethod] | bool',
\ 'runkit_method_redefine(': 'string $classname, string $methodname, string $args, string $code [, int $flags = RUNKIT_ACC_PUBLIC [, string $doc_comment = NULL]] | bool',
\ 'runkit_method_remove(': 'string $classname, string $methodname | bool',
\ 'runkit_method_rename(': 'string $classname, string $methodname, string $newname | bool',
\ 'runkit_return_value_used(': 'void | bool',
\ 'runkit_sandbox_output_handler(': 'object $sandbox [, mixed $callback] | mixed',
\ 'runkit_superglobals(': 'void | array',
\ }
let g:phpcomplete_builtin['functions']['seaslog'] = {
\ 'seaslog_get_author(': 'void | string',
\ 'seaslog_get_version(': 'void | string',
\ }
let g:phpcomplete_builtin['functions']['sessions'] = {
\ 'session_abort(': 'void | bool',
\ 'session_cache_expire(': '[ string $new_cache_expire] | int',
\ 'session_cache_limiter(': '[ string $cache_limiter] | string',
\ 'session_commit(': 'session_commit — Alias of session_write_close()',
\ 'session_create_id(': '[ string $prefix] | string',
\ 'session_decode(': 'string $data | bool',
\ 'session_destroy(': 'void | bool',
\ 'session_encode(': 'void | string',
\ 'session_gc(': 'void | int',
\ 'session_get_cookie_params(': 'void | array',
\ 'session_id(': '[ string $id] | string',
\ 'session_is_registered(': 'string $name | bool',
\ 'session_module_name(': '[ string $module] | string',
\ 'session_name(': '[ string $name] | string',
\ 'session_regenerate_id(': '[ bool $delete_old_session = FALSE] | bool',
\ 'session_register_shutdown(': 'void | void',
\ 'session_register(': 'mixed $name [, mixed $...] | bool',
\ 'session_reset(': 'void | bool',
\ 'session_save_path(': '[ string $path] | string',
\ 'session_set_cookie_params(': 'int $lifetime [, string $path [, string $domain [, bool $secure = FALSE [, bool $httponly = FALSE]]]] | bool',
\ 'session_set_save_handler(': 'callable $open, callable $close, callable $read, callable $write, callable $destroy, callable $gc [, callable $create_sid [, callable $validate_sid [, callable $update_timestamp]]] | bool',
\ 'session_start(': '[ array $options = array()] | bool',
\ 'session_status(': 'void | int',
\ 'session_unregister(': 'string $name | bool',
\ 'session_unset(': 'void | bool',
\ 'session_write_close(': 'void | bool',
\ }
let g:phpcomplete_builtin['functions']['session_pgsql'] = {
\ 'session_pgsql_add_error(': 'int $error_level [, string $error_message] | bool',
\ 'session_pgsql_get_error(': '[ bool $with_error_message = FALSE] | array',
\ 'session_pgsql_get_field(': 'void | string',
\ 'session_pgsql_reset(': 'void | bool',
\ 'session_pgsql_set_field(': 'string $value | bool',
\ 'session_pgsql_status(': 'void | array',
\ }
let g:phpcomplete_builtin['functions']['streams'] = {
\ 'set_socket_blocking(': 'set_socket_blocking — Alias of stream_set_blocking()',
\ 'stream_bucket_append(': 'resource $brigade, object $bucket | void',
\ 'stream_bucket_make_writeable(': 'resource $brigade | object',
\ 'stream_bucket_new(': 'resource $stream, string $buffer | object',
\ 'stream_bucket_prepend(': 'resource $brigade, object $bucket | void',
\ 'stream_context_create(': '[ array $options [, array $params]] | resource',
\ 'stream_context_get_default(': '[ array $options] | resource',
\ 'stream_context_get_options(': 'resource $stream_or_context | array',
\ 'stream_context_get_params(': 'resource $stream_or_context | array',
\ 'stream_context_set_default(': 'array $options | resource',
\ 'stream_context_set_option(': 'resource $stream_or_context, string $wrapper, string $option, mixed $value | bool',
\ 'stream_context_set_params(': 'resource $stream_or_context, array $params | bool',
\ 'stream_copy_to_stream(': 'resource $source, resource $dest [, int $maxlength = -1 [, int $offset = 0]] | int',
\ 'stream_filter_append(': 'resource $stream, string $filtername [, int $read_write [, mixed $params]] | resource',
\ 'stream_filter_prepend(': 'resource $stream, string $filtername [, int $read_write [, mixed $params]] | resource',
\ 'stream_filter_register(': 'string $filtername, string $classname | bool',
\ 'stream_filter_remove(': 'resource $stream_filter | bool',
\ 'stream_get_contents(': 'resource $handle [, int $maxlength = -1 [, int $offset = -1]] | string',
\ 'stream_get_filters(': 'void | array',
\ 'stream_get_line(': 'resource $handle, int $length [, string $ending] | string',
\ 'stream_get_meta_data(': 'resource $stream | array',
\ 'stream_get_transports(': 'void | array',
\ 'stream_get_wrappers(': 'void | array',
\ 'stream_is_local(': 'mixed $stream_or_url | bool',
\ 'stream_isatty(': 'resource $stream | bool',
\ 'stream_notification_callback(': 'int $notification_code, int $severity, string $message, int $message_code, int $bytes_transferred, int $bytes_max | void',
\ 'stream_resolve_include_path(': 'string $filename | string',
\ 'stream_select(': 'array &$read, array &$write, array &$except, int $tv_sec [, int $tv_usec = 0] | int',
\ 'stream_set_blocking(': 'resource $stream, bool $mode | bool',
\ 'stream_set_chunk_size(': 'resource $fp, int $chunk_size | int',
\ 'stream_set_read_buffer(': 'resource $stream, int $buffer | int',
\ 'stream_set_timeout(': 'resource $stream, int $seconds [, int $microseconds = 0] | bool',
\ 'stream_set_write_buffer(': 'resource $stream, int $buffer | int',
\ 'stream_socket_accept(': 'resource $server_socket [, float $timeout = ini_get("default_socket_timeout") [, string &$peername]] | resource',
\ 'stream_socket_client(': 'string $remote_socket [, int &$errno [, string &$errstr [, float $timeout = ini_get("default_socket_timeout") [, int $flags = STREAM_CLIENT_CONNECT [, resource $context]]]]] | resource',
\ 'stream_socket_enable_crypto(': 'resource $stream, bool $enable [, int $crypto_type [, resource $session_stream]] | mixed',
\ 'stream_socket_get_name(': 'resource $handle, bool $want_peer | string',
\ 'stream_socket_pair(': 'int $domain, int $type, int $protocol | array',
\ 'stream_socket_recvfrom(': 'resource $socket, int $length [, int $flags = 0 [, string &$address]] | string',
\ 'stream_socket_sendto(': 'resource $socket, string $data [, int $flags = 0 [, string $address]] | int',
\ 'stream_socket_server(': 'string $local_socket [, int &$errno [, string &$errstr [, int $flags = STREAM_SERVER_BIND | STREAM_SERVER_LISTEN [, resource $context]]]] | resource',
\ 'stream_socket_shutdown(': 'resource $stream, int $how | bool',
\ 'stream_supports_lock(': 'resource $stream | bool',
\ 'stream_wrapper_register(': 'string $protocol, string $classname [, int $flags = 0] | bool',
\ 'stream_wrapper_restore(': 'string $protocol | bool',
\ 'stream_wrapper_unregister(': 'string $protocol | bool',
\ }
let g:phpcomplete_builtin['functions']['proctitle'] = {
\ 'setproctitle(': 'string $title | void',
\ 'setthreadtitle(': 'string $title | bool',
\ }
let g:phpcomplete_builtin['functions']['shared_memory'] = {
\ 'shmop_close(': 'resource $shmid | void',
\ 'shmop_delete(': 'resource $shmid | bool',
\ 'shmop_open(': 'int $key, string $flags, int $mode, int $size | resource',
\ 'shmop_read(': 'resource $shmid, int $start, int $count | string',
\ 'shmop_size(': 'resource $shmid | int',
\ 'shmop_write(': 'resource $shmid, string $data, int $offset | int',
\ }
let g:phpcomplete_builtin['functions']['simplexml'] = {
\ 'simplexml_import_dom(': 'DOMNode $node [, string $class_name = "SimpleXMLElement"] | SimpleXMLElement',
\ 'simplexml_load_file(': 'string $filename [, string $class_name = "SimpleXMLElement" [, int $options = 0 [, string $ns = "" [, bool $is_prefix = FALSE]]]] | SimpleXMLElement',
\ 'simplexml_load_string(': 'string $data [, string $class_name = "SimpleXMLElement" [, int $options = 0 [, string $ns = "" [, bool $is_prefix = FALSE]]]] | SimpleXMLElement',
\ }
let g:phpcomplete_builtin['functions']['snmp'] = {
\ 'snmp_get_quick_print(': 'void | bool',
\ 'snmp_get_valueretrieval(': 'void | int',
\ 'snmp_read_mib(': 'string $filename | bool',
\ 'snmp_set_enum_print(': 'int $enum_print | bool',
\ 'snmp_set_oid_numeric_print(': 'int $oid_format | void',
\ 'snmp_set_oid_output_format(': '[ int $oid_format = SNMP_OID_OUTPUT_MODULE] | bool',
\ 'snmp_set_quick_print(': 'bool $quick_print | bool',
\ 'snmp_set_valueretrieval(': '[ int $method = SNMP_VALUE_LIBRARY] | bool',
\ 'snmp2_get(': 'string $host, string $community, string $object_id [, int $timeout = 1000000 [, int $retries = 5]] | string',
\ 'snmp2_getnext(': 'string $host, string $community, string $object_id [, int $timeout = 1000000 [, int $retries = 5]] | string',
\ 'snmp2_real_walk(': 'string $host, string $community, string $object_id [, int $timeout = 1000000 [, int $retries = 5]] | array',
\ 'snmp2_set(': 'string $host, string $community, string $object_id, string $type, string $value [, int $timeout = 1000000 [, int $retries = 5]] | bool',
\ 'snmp2_walk(': 'string $host, string $community, string $object_id [, int $timeout = 1000000 [, int $retries = 5]] | array',
\ 'snmp3_get(': 'string $host, string $sec_name, string $sec_level, string $auth_protocol, string $auth_passphrase, string $priv_protocol, string $priv_passphrase, string $object_id [, int $timeout = 1000000 [, int $retries = 5]] | string',
\ 'snmp3_getnext(': 'string $host, string $sec_name, string $sec_level, string $auth_protocol, string $auth_passphrase, string $priv_protocol, string $priv_passphrase, string $object_id [, int $timeout = 1000000 [, int $retries = 5]] | string',
\ 'snmp3_real_walk(': 'string $host, string $sec_name, string $sec_level, string $auth_protocol, string $auth_passphrase, string $priv_protocol, string $priv_passphrase, string $object_id [, int $timeout = 1000000 [, int $retries = 5]] | array',
\ 'snmp3_set(': 'string $host, string $sec_name, string $sec_level, string $auth_protocol, string $auth_passphrase, string $priv_protocol, string $priv_passphrase, string $object_id, string $type, string $value [, int $timeout = 1000000 [, int $retries = 5]] | bool',
\ 'snmp3_walk(': 'string $host, string $sec_name, string $sec_level, string $auth_protocol, string $auth_passphrase, string $priv_protocol, string $priv_passphrase, string $object_id [, int $timeout = 1000000 [, int $retries = 5]] | array',
\ 'snmpget(': 'string $hostname, string $community, string $object_id [, int $timeout = 1000000 [, int $retries = 5]] | string',
\ 'snmpgetnext(': 'string $host, string $community, string $object_id [, int $timeout = 1000000 [, int $retries = 5]] | string',
\ 'snmprealwalk(': 'string $host, string $community, string $object_id [, int $timeout = 1000000 [, int $retries = 5]] | array',
\ 'snmpset(': 'string $host, string $community, string $object_id, string $type, mixed $value [, int $timeout = 1000000 [, int $retries = 5]] | bool',
\ 'snmpwalk(': 'string $hostname, string $community, string $object_id [, int $timeout = 1000000 [, int $retries = 5]] | array',
\ 'snmpwalkoid(': 'string $hostname, string $community, string $object_id [, int $timeout = 1000000 [, int $retries = 5]] | array',
\ }
let g:phpcomplete_builtin['functions']['sockets'] = {
\ 'socket_accept(': 'resource $socket | resource',
\ 'socket_addrinfo_bind(': 'resource $addr | resource',
\ 'socket_addrinfo_connect(': 'resource $addr | resource',
\ 'socket_addrinfo_explain(': 'resource $addr | array',
\ 'socket_addrinfo_lookup(': 'string $host [, string $service [, array $hints]] | array',
\ 'socket_bind(': 'resource $socket, string $address [, int $port = 0] | bool',
\ 'socket_clear_error(': '[ resource $socket] | void',
\ 'socket_close(': 'resource $socket | void',
\ 'socket_cmsg_space(': 'int $level, int $type [, int $n = 0] | int',
\ 'socket_connect(': 'resource $socket, string $address [, int $port = 0] | bool',
\ 'socket_create_listen(': 'int $port [, int $backlog = 128] | resource',
\ 'socket_create_pair(': 'int $domain, int $type, int $protocol, array &$fd | bool',
\ 'socket_create(': 'int $domain, int $type, int $protocol | resource',
\ 'socket_export_stream(': 'resource $socket | resource',
\ 'socket_get_option(': 'resource $socket, int $level, int $optname | mixed',
\ 'socket_getopt(': 'socket_getopt — Alias of socket_get_option()',
\ 'socket_getpeername(': 'resource $socket, string &$address [, int &$port] | bool',
\ 'socket_getsockname(': 'resource $socket, string &$addr [, int &$port] | bool',
\ 'socket_import_stream(': 'resource $stream | resource',
\ 'socket_last_error(': '[ resource $socket] | int',
\ 'socket_listen(': 'resource $socket [, int $backlog = 0] | bool',
\ 'socket_read(': 'resource $socket, int $length [, int $type = PHP_BINARY_READ] | string',
\ 'socket_recv(': 'resource $socket, string &$buf, int $len, int $flags | int',
\ 'socket_recvfrom(': 'resource $socket, string &$buf, int $len, int $flags, string &$name [, int &$port] | int',
\ 'socket_recvmsg(': 'resource $socket, array &$message [, int $flags = 0] | int',
\ 'socket_select(': 'array &$read, array &$write, array &$except, int $tv_sec [, int $tv_usec = 0] | int',
\ 'socket_send(': 'resource $socket, string $buf, int $len, int $flags | int',
\ 'socket_sendmsg(': 'resource $socket, array $message [, int $flags = 0] | int',
\ 'socket_sendto(': 'resource $socket, string $buf, int $len, int $flags, string $addr [, int $port = 0] | int',
\ 'socket_set_block(': 'resource $socket | bool',
\ 'socket_set_nonblock(': 'resource $socket | bool',
\ 'socket_set_option(': 'resource $socket, int $level, int $optname, mixed $optval | bool',
\ 'socket_setopt(': 'socket_setopt — Alias of socket_set_option()',
\ 'socket_shutdown(': 'resource $socket [, int $how = 2] | bool',
\ 'socket_strerror(': 'int $errno | string',
\ 'socket_write(': 'resource $socket, string $buffer [, int $length = 0] | int',
\ 'socket_wsaprotocol_info_export(': 'resource  $socket, int  $target_pid | string',
\ 'socket_wsaprotocol_info_import(': 'string $info_id | resource',
\ 'socket_wsaprotocol_info_release(': 'string $info_id | bool',
\ }
let g:phpcomplete_builtin['functions']['sodium'] = {
\ 'sodium_add(': 'string &$val, string $addv | void',
\ 'sodium_base642bin(': 'string $b64, int $id [, string $ignore] | string',
\ 'sodium_bin2base64(': 'string $bin, int $id | string',
\ 'sodium_bin2hex(': 'string $bin | string',
\ 'sodium_compare(': 'string $buf1, string $buf2 | int',
\ 'sodium_crypto_aead_aes256gcm_decrypt(': 'string $ciphertext, string $ad, string $nonce, string $key | string',
\ 'sodium_crypto_aead_aes256gcm_encrypt(': 'string $msg, string $ad, string $nonce, string $key | string',
\ 'sodium_crypto_aead_aes256gcm_is_available(': 'void | bool',
\ 'sodium_crypto_aead_aes256gcm_keygen(': 'void | string',
\ 'sodium_crypto_aead_chacha20poly1305_decrypt(': 'string $ciphertext, string $ad, string $nonce, string $key | string',
\ 'sodium_crypto_aead_chacha20poly1305_encrypt(': 'string $msg, string $ad, string $nonce, string $key | string',
\ 'sodium_crypto_aead_chacha20poly1305_ietf_decrypt(': 'string $ciphertext, string $ad, string $nonce, string $key | string',
\ 'sodium_crypto_aead_chacha20poly1305_ietf_encrypt(': 'string $msg, string $ad, string $nonce, string $key | string',
\ 'sodium_crypto_aead_chacha20poly1305_ietf_keygen(': 'void | string',
\ 'sodium_crypto_aead_chacha20poly1305_keygen(': 'void | string',
\ 'sodium_crypto_aead_xchacha20poly1305_ietf_decrypt(': 'string $ciphertext, string $ad, string $nonce, string $key | string',
\ 'sodium_crypto_aead_xchacha20poly1305_ietf_encrypt(': 'string $msg, string $ad, string $nonce, string $key | string',
\ 'sodium_crypto_aead_xchacha20poly1305_ietf_keygen(': 'void | string',
\ 'sodium_crypto_auth_keygen(': 'void | string',
\ 'sodium_crypto_auth_verify(': 'string $signature, string $msg, string $key | bool',
\ 'sodium_crypto_auth(': 'string $msg, string $key | string',
\ 'sodium_crypto_box_keypair_from_secretkey_and_publickey(': 'string $secret_key, string $public_key | string',
\ 'sodium_crypto_box_keypair(': 'void | string',
\ 'sodium_crypto_box_open(': 'string $ciphertext, string $nonce, string $key | string',
\ 'sodium_crypto_box_publickey_from_secretkey(': 'string $key | string',
\ 'sodium_crypto_box_publickey(': 'string $key | string',
\ 'sodium_crypto_box_seal_open(': 'string $ciphertext, string $key | string',
\ 'sodium_crypto_box_seal(': 'string $msg, string $key | string',
\ 'sodium_crypto_box_secretkey(': 'string $key | string',
\ 'sodium_crypto_box_seed_keypair(': 'string $key | string',
\ 'sodium_crypto_box(': 'string $msg, string $nonce, string $key | string',
\ 'sodium_crypto_generichash_final(': 'string &$state [, int $length = SODIUM_CRYPTO_GENERICHASH_BYTES] | string',
\ 'sodium_crypto_generichash_init(': '[ string $key [, int $length = SODIUM_CRYPTO_GENERICHASH_BYTES]] | string',
\ 'sodium_crypto_generichash_keygen(': 'void | string',
\ 'sodium_crypto_generichash_update(': 'string &$state, string $msg | bool',
\ 'sodium_crypto_generichash(': 'string $msg [, string $key [, int $length = SODIUM_CRYPTO_GENERICHASH_BYTES]] | string',
\ 'sodium_crypto_kdf_derive_from_key(': 'int $subkey_len, int $subkey_id, string $context, string $key | string',
\ 'sodium_crypto_kdf_keygen(': 'void | string',
\ 'sodium_crypto_kx_client_session_keys(': 'string $client_keypair, string $server_key | array',
\ 'sodium_crypto_kx_keypair(': 'void | string',
\ 'sodium_crypto_kx_publickey(': 'string $key | string',
\ 'sodium_crypto_kx_secretkey(': 'string $key | string',
\ 'sodium_crypto_kx_seed_keypair(': 'string $string | string',
\ 'sodium_crypto_kx_server_session_keys(': 'string $server_keypair, string $client_key | array',
\ 'sodium_crypto_pwhash_scryptsalsa208sha256_str_verify(': 'string $hash, string $password | bool',
\ 'sodium_crypto_pwhash_scryptsalsa208sha256_str(': 'string $password, int $opslimit, int $memlimit | string',
\ 'sodium_crypto_pwhash_scryptsalsa208sha256(': 'int $length, string $password, string $salt, int $opslimit, int $memlimit | string',
\ 'sodium_crypto_pwhash_str_needs_rehash(': 'string $password, int $opslimit, int $memlimit | bool',
\ 'sodium_crypto_pwhash_str_verify(': 'string $hash, string $password | bool',
\ 'sodium_crypto_pwhash_str(': 'string $password, int $opslimit, int $memlimit | string',
\ 'sodium_crypto_pwhash(': 'int $length, string $password, string $salt, int $opslimit, int $memlimit [, int $alg] | string',
\ 'sodium_crypto_scalarmult_base(': 'sodium_crypto_scalarmult_base — Alias of sodium_crypto_box_publickey_from_secretkey()',
\ 'sodium_crypto_scalarmult(': 'string $n, string $p | string',
\ 'sodium_crypto_secretbox_keygen(': 'void | string',
\ 'sodium_crypto_secretbox_open(': 'string $ciphertext, string $nonce, string $key | string',
\ 'sodium_crypto_secretbox(': 'string $string, string $nonce, string $key | string',
\ 'sodium_crypto_secretstream_xchacha20poly1305_init_pull(': 'string $header, string $key | string',
\ 'sodium_crypto_secretstream_xchacha20poly1305_init_push(': 'string $key | array',
\ 'sodium_crypto_secretstream_xchacha20poly1305_keygen(': 'void | string',
\ 'sodium_crypto_secretstream_xchacha20poly1305_pull(': 'string &$state, string $c [, string $ad] | array',
\ 'sodium_crypto_secretstream_xchacha20poly1305_push(': 'string &$state, string $msg [, string $ad [, int $tag]] | string',
\ 'sodium_crypto_secretstream_xchacha20poly1305_rekey(': 'string &$state | void',
\ 'sodium_crypto_shorthash_keygen(': 'void | string',
\ 'sodium_crypto_shorthash(': 'string $msg, string $key | string',
\ 'sodium_crypto_sign_detached(': 'string $msg, string $secretkey | string',
\ 'sodium_crypto_sign_ed25519_pk_to_curve25519(': 'string $key | string',
\ 'sodium_crypto_sign_ed25519_sk_to_curve25519(': 'string $key | string',
\ 'sodium_crypto_sign_keypair_from_secretkey_and_publickey(': 'string $secret_key, string $public_key | string',
\ 'sodium_crypto_sign_keypair(': 'void | string',
\ 'sodium_crypto_sign_open(': 'string $string, string $public_key | string',
\ 'sodium_crypto_sign_publickey_from_secretkey(': 'string $key | string',
\ 'sodium_crypto_sign_publickey(': 'string $keypair | string',
\ 'sodium_crypto_sign_secretkey(': 'string $key | string',
\ 'sodium_crypto_sign_seed_keypair(': 'string $key | string',
\ 'sodium_crypto_sign_verify_detached(': 'string $signature, string $msg, string $public_key | bool',
\ 'sodium_crypto_sign(': 'string $msg, string $secret_key | string',
\ 'sodium_crypto_stream_keygen(': 'void | string',
\ 'sodium_crypto_stream_xor(': 'string $msg, string $nonce, string $key | string',
\ 'sodium_crypto_stream(': 'int $length, string $nonce, string $key | string',
\ 'sodium_hex2bin(': 'string $hex [, string $ignore] | string',
\ 'sodium_increment(': 'string &$val | void',
\ 'sodium_memcmp(': 'string $buf1, string $buf2 | int',
\ 'sodium_memzero(': 'string &$buf | void',
\ 'sodium_pad(': 'string $unpadded, int $length | string',
\ 'sodium_unpad(': 'string $padded, int $length | string',
\ }
let g:phpcomplete_builtin['functions']['solr'] = {
\ 'solr_get_version(': 'void | string',
\ }
let g:phpcomplete_builtin['functions']['sqlite'] = {
\ 'sqlite_array_query(': 'resource $dbhandle, string $query [, int $result_type = SQLITE_BOTH [, bool $decode_binary = TRUE]] | array',
\ 'sqlite_busy_timeout(': 'resource $dbhandle, int $milliseconds | void',
\ 'sqlite_changes(': 'resource $dbhandle | int',
\ 'sqlite_close(': 'resource $dbhandle | void',
\ 'sqlite_column(': 'resource $result, mixed $index_or_name [, bool $decode_binary = TRUE] | mixed',
\ 'sqlite_create_aggregate(': 'resource $dbhandle, string $function_name, callable $step_func, callable $finalize_func [, int $num_args = -1] | void',
\ 'sqlite_create_function(': 'resource $dbhandle, string $function_name, callable $callback [, int $num_args = -1] | void',
\ 'sqlite_current(': 'resource $result [, int $result_type = SQLITE_BOTH [, bool $decode_binary = TRUE]] | array',
\ 'sqlite_error_string(': 'int $error_code | string',
\ 'sqlite_escape_string(': 'string $item | string',
\ 'sqlite_exec(': 'resource $dbhandle, string $query [, string &$error_msg] | bool',
\ 'sqlite_factory(': 'string $filename [, int $mode = 0666 [, string &$error_message]] | SQLiteDatabase',
\ 'sqlite_fetch_all(': 'resource $result [, int $result_type = SQLITE_BOTH [, bool $decode_binary = TRUE]] | array',
\ 'sqlite_fetch_array(': 'resource $result [, int $result_type = SQLITE_BOTH [, bool $decode_binary = TRUE]] | array',
\ 'sqlite_fetch_column_types(': 'string $table_name, resource $dbhandle [, int $result_type = SQLITE_ASSOC] | array',
\ 'sqlite_fetch_object(': 'resource $result [, string $class_name [, array $ctor_params [, bool $decode_binary = TRUE]]] | object',
\ 'sqlite_fetch_single(': 'resource $result [, bool $decode_binary = TRUE] | string',
\ 'sqlite_fetch_string(': 'sqlite_fetch_string — Alias of sqlite_fetch_single()',
\ 'sqlite_field_name(': 'resource $result, int $field_index | string',
\ 'sqlite_has_more(': 'resource $result | bool',
\ 'sqlite_has_prev(': 'resource $result | bool',
\ 'sqlite_last_error(': 'resource $dbhandle | int',
\ 'sqlite_last_insert_rowid(': 'resource $dbhandle | int',
\ 'sqlite_libencoding(': 'void | string',
\ 'sqlite_libversion(': 'void | string',
\ 'sqlite_next(': 'resource $result | bool',
\ 'sqlite_num_fields(': 'resource $result | int',
\ 'sqlite_num_rows(': 'resource $result | int',
\ 'sqlite_open(': 'string $filename [, int $mode = 0666 [, string &$error_message]] | resource',
\ 'sqlite_popen(': 'string $filename [, int $mode = 0666 [, string &$error_message]] | resource',
\ 'sqlite_prev(': 'resource $result | bool',
\ 'sqlite_query(': 'resource $dbhandle, string $query [, int $result_type = SQLITE_BOTH [, string &$error_msg]] | resource',
\ 'sqlite_rewind(': 'resource $result | bool',
\ 'sqlite_seek(': 'resource $result, int $rownum | bool',
\ 'sqlite_single_query(': 'resource $db, string $query [, bool $first_row_only [, bool $decode_binary]] | array',
\ 'sqlite_udf_decode_binary(': 'string $data | string',
\ 'sqlite_udf_encode_binary(': 'string $data | string',
\ 'sqlite_unbuffered_query(': 'resource $dbhandle, string $query [, int $result_type = SQLITE_BOTH [, string &$error_msg]] | resource',
\ 'sqlite_valid(': 'resource $result | bool',
\ }
let g:phpcomplete_builtin['functions']['sqlsrv'] = {
\ 'sqlsrv_begin_transaction(': 'resource $conn | bool',
\ 'sqlsrv_cancel(': 'resource $stmt | bool',
\ 'sqlsrv_client_info(': 'resource $conn | array',
\ 'sqlsrv_close(': 'resource $conn | bool',
\ 'sqlsrv_commit(': 'resource $conn | bool',
\ 'sqlsrv_configure(': 'string $setting, mixed $value | bool',
\ 'sqlsrv_connect(': 'string $serverName [, array $connectionInfo] | resource',
\ 'sqlsrv_errors(': '[ int $errorsOrWarnings] | mixed',
\ 'sqlsrv_execute(': 'resource $stmt | bool',
\ 'sqlsrv_fetch_array(': 'resource $stmt [, int $fetchType [, int $row [, int $offset]]] | array',
\ 'sqlsrv_fetch_object(': 'resource $stmt [, string $className [, array $ctorParams [, int $row [, int $offset]]]] | mixed',
\ 'sqlsrv_fetch(': 'resource $stmt [, int $row [, int $offset]] | mixed',
\ 'sqlsrv_field_metadata(': 'resource $stmt | mixed',
\ 'sqlsrv_free_stmt(': 'resource $stmt | bool',
\ 'sqlsrv_get_config(': 'string $setting | mixed',
\ 'sqlsrv_get_field(': 'resource $stmt, int $fieldIndex [, int $getAsType] | mixed',
\ 'sqlsrv_has_rows(': 'resource $stmt | bool',
\ 'sqlsrv_next_result(': 'resource $stmt | mixed',
\ 'sqlsrv_num_fields(': 'resource $stmt | mixed',
\ 'sqlsrv_num_rows(': 'resource $stmt | mixed',
\ 'sqlsrv_prepare(': 'resource $conn, string $sql [, array $params [, array $options]] | mixed',
\ 'sqlsrv_query(': 'resource $conn, string $sql [, array $params [, array $options]] | mixed',
\ 'sqlsrv_rollback(': 'resource $conn | bool',
\ 'sqlsrv_rows_affected(': 'resource $stmt | int',
\ 'sqlsrv_send_stream_data(': 'resource $stmt | bool',
\ 'sqlsrv_server_info(': 'resource $conn | array',
\ }
let g:phpcomplete_builtin['functions']['ssdeep'] = {
\ 'ssdeep_fuzzy_compare(': 'string $signature1, string $signature2 | int',
\ 'ssdeep_fuzzy_hash_filename(': 'string $file_name | string',
\ 'ssdeep_fuzzy_hash(': 'string $to_hash | string',
\ }
let g:phpcomplete_builtin['functions']['ssh2'] = {
\ 'ssh2_auth_agent(': 'resource $session, string $username | bool',
\ 'ssh2_auth_hostbased_file(': 'resource $session, string $username, string $hostname, string $pubkeyfile, string $privkeyfile [, string $passphrase [, string $local_username]] | bool',
\ 'ssh2_auth_none(': 'resource $session, string $username | mixed',
\ 'ssh2_auth_password(': 'resource $session, string $username, string $password | bool',
\ 'ssh2_auth_pubkey_file(': 'resource $session, string $username, string $pubkeyfile, string $privkeyfile [, string $passphrase] | bool',
\ 'ssh2_connect(': 'string $host [, int $port = 22 [, array $methods [, array $callbacks]]] | resource',
\ 'ssh2_disconnect(': 'resource $session | bool',
\ 'ssh2_exec(': 'resource $session, string $command [, string $pty [, array $env [, int $width = 80 [, int $height = 25 [, int $width_height_type = SSH2_TERM_UNIT_CHARS]]]]] | resource',
\ 'ssh2_fetch_stream(': 'resource $channel, int $streamid | resource',
\ 'ssh2_fingerprint(': 'resource $session [, int $flags = SSH2_FINGERPRINT_MD5 | SSH2_FINGERPRINT_HEX] | string',
\ 'ssh2_methods_negotiated(': 'resource $session | array',
\ 'ssh2_publickey_add(': 'resource $pkey, string $algoname, string $blob [, bool $overwrite = FALSE [, array $attributes]] | bool',
\ 'ssh2_publickey_init(': 'resource $session | resource',
\ 'ssh2_publickey_list(': 'resource $pkey | array',
\ 'ssh2_publickey_remove(': 'resource $pkey, string $algoname, string $blob | bool',
\ 'ssh2_scp_recv(': 'resource $session, string $remote_file, string $local_file | bool',
\ 'ssh2_scp_send(': 'resource $session, string $local_file, string $remote_file [, int $create_mode = 0644] | bool',
\ 'ssh2_sftp_chmod(': 'resource $sftp, string $filename, int $mode | bool',
\ 'ssh2_sftp_lstat(': 'resource $sftp, string $path | array',
\ 'ssh2_sftp_mkdir(': 'resource $sftp, string $dirname [, int $mode = 0777 [, bool $recursive = FALSE]] | bool',
\ 'ssh2_sftp_readlink(': 'resource $sftp, string $link | string',
\ 'ssh2_sftp_realpath(': 'resource $sftp, string $filename | string',
\ 'ssh2_sftp_rename(': 'resource $sftp, string $from, string $to | bool',
\ 'ssh2_sftp_rmdir(': 'resource $sftp, string $dirname | bool',
\ 'ssh2_sftp_stat(': 'resource $sftp, string $path | array',
\ 'ssh2_sftp_symlink(': 'resource $sftp, string $target, string $link | bool',
\ 'ssh2_sftp_unlink(': 'resource $sftp, string $filename | bool',
\ 'ssh2_sftp(': 'resource $session | resource',
\ 'ssh2_shell(': 'resource $session [, string $term_type = "vanilla" [, array $env [, int $width = 80 [, int $height = 25 [, int $width_height_type = SSH2_TERM_UNIT_CHARS]]]]] | resource',
\ 'ssh2_tunnel(': 'resource $session, string $host, int $port | resource',
\ }
let g:phpcomplete_builtin['functions']['statistics'] = {
\ 'stats_absolute_deviation(': 'array $a | float',
\ 'stats_cdf_beta(': 'float $par1, float $par2, float $par3, int $which | float',
\ 'stats_cdf_binomial(': 'float $par1, float $par2, float $par3, int $which | float',
\ 'stats_cdf_cauchy(': 'float $par1, float $par2, float $par3, int $which | float',
\ 'stats_cdf_chisquare(': 'float $par1, float $par2, int $which | float',
\ 'stats_cdf_exponential(': 'float $par1, float $par2, int $which | float',
\ 'stats_cdf_f(': 'float $par1, float $par2, float $par3, int $which | float',
\ 'stats_cdf_gamma(': 'float $par1, float $par2, float $par3, int $which | float',
\ 'stats_cdf_laplace(': 'float $par1, float $par2, float $par3, int $which | float',
\ 'stats_cdf_logistic(': 'float $par1, float $par2, float $par3, int $which | float',
\ 'stats_cdf_negative_binomial(': 'float $par1, float $par2, float $par3, int $which | float',
\ 'stats_cdf_noncentral_chisquare(': 'float $par1, float $par2, float $par3, int $which | float',
\ 'stats_cdf_noncentral_f(': 'float $par1, float $par2, float $par3, float $par4, int $which | float',
\ 'stats_cdf_noncentral_t(': 'float $par1, float $par2, float $par3, int $which | float',
\ 'stats_cdf_normal(': 'float $par1, float $par2, float $par3, int $which | float',
\ 'stats_cdf_poisson(': 'float $par1, float $par2, int $which | float',
\ 'stats_cdf_t(': 'float $par1, float $par2, int $which | float',
\ 'stats_cdf_uniform(': 'float $par1, float $par2, float $par3, int $which | float',
\ 'stats_cdf_weibull(': 'float $par1, float $par2, float $par3, int $which | float',
\ 'stats_covariance(': 'array $a, array $b | float',
\ 'stats_dens_beta(': 'float $x, float $a, float $b | float',
\ 'stats_dens_cauchy(': 'float $x, float $ave, float $stdev | float',
\ 'stats_dens_chisquare(': 'float $x, float $dfr | float',
\ 'stats_dens_exponential(': 'float $x, float $scale | float',
\ 'stats_dens_f(': 'float $x, float $dfr1, float $dfr2 | float',
\ 'stats_dens_gamma(': 'float $x, float $shape, float $scale | float',
\ 'stats_dens_laplace(': 'float $x, float $ave, float $stdev | float',
\ 'stats_dens_logistic(': 'float $x, float $ave, float $stdev | float',
\ 'stats_dens_normal(': 'float $x, float $ave, float $stdev | float',
\ 'stats_dens_pmf_binomial(': 'float $x, float $n, float $pi | float',
\ 'stats_dens_pmf_hypergeometric(': 'float $n1, float $n2, float $N1, float $N2 | float',
\ 'stats_dens_pmf_negative_binomial(': 'float $x, float $n, float $pi | float',
\ 'stats_dens_pmf_poisson(': 'float $x, float $lb | float',
\ 'stats_dens_t(': 'float $x, float $dfr | float',
\ 'stats_dens_uniform(': 'float $x, float $a, float $b | float',
\ 'stats_dens_weibull(': 'float $x, float $a, float $b | float',
\ 'stats_harmonic_mean(': 'array $a | number',
\ 'stats_kurtosis(': 'array $a | float',
\ 'stats_rand_gen_beta(': 'float $a, float $b | float',
\ 'stats_rand_gen_chisquare(': 'float $df | float',
\ 'stats_rand_gen_exponential(': 'float $av | float',
\ 'stats_rand_gen_f(': 'float $dfn, float $dfd | float',
\ 'stats_rand_gen_funiform(': 'float $low, float $high | float',
\ 'stats_rand_gen_gamma(': 'float $a, float $r | float',
\ 'stats_rand_gen_ibinomial_negative(': 'int $n, float $p | int',
\ 'stats_rand_gen_ibinomial(': 'int $n, float $pp | int',
\ 'stats_rand_gen_int(': 'void | int',
\ 'stats_rand_gen_ipoisson(': 'float $mu | int',
\ 'stats_rand_gen_iuniform(': 'int $low, int $high | int',
\ 'stats_rand_gen_noncentral_chisquare(': 'float $df, float $xnonc | float',
\ 'stats_rand_gen_noncentral_f(': 'float $dfn, float $dfd, float $xnonc | float',
\ 'stats_rand_gen_noncentral_t(': 'float $df, float $xnonc | float',
\ 'stats_rand_gen_normal(': 'float $av, float $sd | float',
\ 'stats_rand_gen_t(': 'float $df | float',
\ 'stats_rand_get_seeds(': 'void | array',
\ 'stats_rand_phrase_to_seeds(': 'string $phrase | array',
\ 'stats_rand_ranf(': 'void | float',
\ 'stats_rand_setall(': 'int $iseed1, int $iseed2 | void',
\ 'stats_skew(': 'array $a | float',
\ 'stats_standard_deviation(': 'array $a [, bool $sample = FALSE] | float',
\ 'stats_stat_binomial_coef(': 'int $x, int $n | float',
\ 'stats_stat_correlation(': 'array $arr1, array $arr2 | float',
\ 'stats_stat_factorial(': 'int $n | float',
\ 'stats_stat_independent_t(': 'array $arr1, array $arr2 | float',
\ 'stats_stat_innerproduct(': 'array $arr1, array $arr2 | float',
\ 'stats_stat_paired_t(': 'array $arr1, array $arr2 | float',
\ 'stats_stat_percentile(': 'array $arr, float $perc | float',
\ 'stats_stat_powersum(': 'array $arr, float $power | float',
\ 'stats_variance(': 'array $a [, bool $sample = FALSE] | float',
\ }
let g:phpcomplete_builtin['functions']['stomp'] = {
\ 'stomp_connect_error(': 'void | string',
\ 'stomp_version(': 'void | string',
\ 'stomp_get_read_timeout(': 'resource $link | array',
\ 'stomp_read_frame(': 'resource $link | array',
\ 'stomp_send(': 'resource $link, string $destination, mixed $msg [, array $headers] | bool',
\ 'stomp_subscribe(': 'resource $link, string $destination [, array $headers] | bool',
\ 'stomp_close(': 'resource $link | bool',
\ 'stomp_connect(': '[ string $broker = ini_get("stomp.default_broker_uri") [, string $username [, string $password [, array $headers]]]] | resource',
\ 'stomp_abort(': 'resource $link, string $transaction_id [, array $headers] | bool',
\ 'stomp_get_session_id(': 'resource $link | string',
\ 'stomp_ack(': 'resource $link, mixed $msg [, array $headers] | bool',
\ 'stomp_set_read_timeout(': 'resource $link, int $seconds [, int $microseconds] | void',
\ 'stomp_has_frame(': 'resource $link | bool',
\ 'stomp_unsubscribe(': 'resource $link, string $destination [, array $headers] | bool',
\ 'stomp_commit(': 'resource $link, string $transaction_id [, array $headers] | bool',
\ 'stomp_error(': 'resource $link | string',
\ 'stomp_begin(': 'resource $link, string $transaction_id [, array $headers] | bool',
\ }
let g:phpcomplete_builtin['functions']['svn'] = {
\ 'svn_add(': 'string $path [, bool $recursive = TRUE [, bool $force = FALSE]] | bool',
\ 'svn_auth_get_parameter(': 'string $key | string',
\ 'svn_auth_set_parameter(': 'string $key, string $value | void',
\ 'svn_blame(': 'string $repository_url [, int $revision_no = SVN_REVISION_HEAD] | array',
\ 'svn_cat(': 'string $repos_url [, int $revision_no] | string',
\ 'svn_checkout(': 'string $repos, string $targetpath [, int $revision [, int $flags = 0]] | bool',
\ 'svn_cleanup(': 'string $workingdir | bool',
\ 'svn_client_version(': 'void | string',
\ 'svn_commit(': 'string $log, array $targets [, bool $recursive = TRUE] | array',
\ 'svn_delete(': 'string $path [, bool $force = FALSE] | bool',
\ 'svn_diff(': 'string $path1, int $rev1, string $path2, int $rev2 | array',
\ 'svn_export(': 'string $frompath, string $topath [, bool $working_copy = TRUE [, int $revision_no = -1]] | bool',
\ 'svn_fs_abort_txn(': 'resource $txn | bool',
\ 'svn_fs_apply_text(': 'resource $root, string $path | resource',
\ 'svn_fs_begin_txn2(': 'resource $repos, int $rev | resource',
\ 'svn_fs_change_node_prop(': 'resource $root, string $path, string $name, string $value | bool',
\ 'svn_fs_check_path(': 'resource $fsroot, string $path | int',
\ 'svn_fs_contents_changed(': 'resource $root1, string $path1, resource $root2, string $path2 | bool',
\ 'svn_fs_copy(': 'resource $from_root, string $from_path, resource $to_root, string $to_path | bool',
\ 'svn_fs_delete(': 'resource $root, string $path | bool',
\ 'svn_fs_dir_entries(': 'resource $fsroot, string $path | array',
\ 'svn_fs_file_contents(': 'resource $fsroot, string $path | resource',
\ 'svn_fs_file_length(': 'resource $fsroot, string $path | int',
\ 'svn_fs_is_dir(': 'resource $root, string $path | bool',
\ 'svn_fs_is_file(': 'resource $root, string $path | bool',
\ 'svn_fs_make_dir(': 'resource $root, string $path | bool',
\ 'svn_fs_make_file(': 'resource $root, string $path | bool',
\ 'svn_fs_node_created_rev(': 'resource $fsroot, string $path | int',
\ 'svn_fs_node_prop(': 'resource $fsroot, string $path, string $propname | string',
\ 'svn_fs_props_changed(': 'resource $root1, string $path1, resource $root2, string $path2 | bool',
\ 'svn_fs_revision_prop(': 'resource $fs, int $revnum, string $propname | string',
\ 'svn_fs_revision_root(': 'resource $fs, int $revnum | resource',
\ 'svn_fs_txn_root(': 'resource $txn | resource',
\ 'svn_fs_youngest_rev(': 'resource $fs | int',
\ 'svn_import(': 'string $path, string $url, bool $nonrecursive | bool',
\ 'svn_log(': 'string $repos_url [, int $start_revision [, int $end_revision [, int $limit = 0 [, int $flags = SVN_DISCOVER_CHANGED_PATHS | SVN_STOP_ON_COPY]]]] | array',
\ 'svn_ls(': 'string $repos_url [, int $revision_no = SVN_REVISION_HEAD [, bool $recurse = FALSE [, bool $peg = FALSE]]] | array',
\ 'svn_mkdir(': 'string $path [, string $log_message] | bool',
\ 'svn_repos_create(': 'string $path [, array $config [, array $fsconfig]] | resource',
\ 'svn_repos_fs_begin_txn_for_commit(': 'resource $repos, int $rev, string $author, string $log_msg | resource',
\ 'svn_repos_fs_commit_txn(': 'resource $txn | int',
\ 'svn_repos_fs(': 'resource $repos | resource',
\ 'svn_repos_hotcopy(': 'string $repospath, string $destpath, bool $cleanlogs | bool',
\ 'svn_repos_open(': 'string $path | resource',
\ 'svn_repos_recover(': 'string $path | bool',
\ 'svn_revert(': 'string $path [, bool $recursive = FALSE] | bool',
\ 'svn_status(': 'string $path [, int $flags = 0] | array',
\ 'svn_update(': 'string $path [, int $revno = SVN_REVISION_HEAD [, bool $recurse = TRUE]] | int',
\ }
let g:phpcomplete_builtin['functions']['swoole'] = {
\ 'swoole_async_dns_lookup(': 'string $hostname, callable $callback | bool',
\ 'swoole_async_read(': 'string $filename, callable $callback [, int $chunk_size = 65536 [, int $offset = 0]] | bool',
\ 'swoole_async_readfile(': 'string $filename, callable $callback | bool',
\ 'swoole_async_set(': 'array $settings | void',
\ 'swoole_async_write(': 'string $filename, string $content [, integer $offset [, callable $callback]] | bool',
\ 'swoole_async_writefile(': 'string $filename, string $content [, callable $callback [, int $flags = 0]] | bool',
\ 'swoole_client_select(': 'array &$read_array, array &$write_array, array &$error_array [, float $timeout = 0.5] | int',
\ 'swoole_cpu_num(': 'void | int',
\ 'swoole_errno(': 'void | int',
\ 'swoole_event_add(': 'int $fd [, callable $read_callback [, callable $write_callback [, int $events = 0]]] | int',
\ 'swoole_event_defer(': 'callable $callback | bool',
\ 'swoole_event_del(': 'int $fd | bool',
\ 'swoole_event_exit(': 'void | void',
\ 'swoole_event_set(': 'int $fd [, callable $read_callback [, callable $write_callback [, int $events = 0]]] | bool',
\ 'swoole_event_wait(': 'void | void',
\ 'swoole_event_write(': 'int $fd, string $data | bool',
\ 'swoole_get_local_ip(': 'void | array',
\ 'swoole_last_error(': 'void | int',
\ 'swoole_load_module(': 'string $filename | mixed',
\ 'swoole_select(': 'array &$read_array, array &$write_array, array &$error_array [, float $timeout] | int',
\ 'swoole_set_process_name(': 'string $process_name [, int $size = 128] | void',
\ 'swoole_strerror(': 'int $errno [, int $error_type = 0] | string',
\ 'swoole_timer_after(': 'int $ms, callable $callback [, mixed $param] | int',
\ 'swoole_timer_exists(': 'int $timer_id | bool',
\ 'swoole_timer_tick(': 'int $ms, callable $callback [, mixed $param] | int',
\ 'swoole_version(': 'void | string',
\ 'swoole_timer_clear(': 'integer $timer_id | void',
\ }
let g:phpcomplete_builtin['functions']['tcp'] = {
\ 'tcpwrap_check(': 'string $daemon, string $address [, string $user [, bool $nodns = FALSE]] | bool',
\ }
let g:phpcomplete_builtin['functions']['tokenizer'] = {
\ 'token_get_all(': 'string $source [, int $flags = 0] | array',
\ 'token_name(': 'int $token | string',
\ }
let g:phpcomplete_builtin['functions']['trader'] = {
\ 'trader_acos(': 'array $real | array',
\ 'trader_ad(': 'array $high, array $low, array $close, array $volume | array',
\ 'trader_add(': 'array $real0, array $real1 | array',
\ 'trader_adosc(': 'array $high, array $low, array $close, array $volume [, int $fastPeriod [, int $slowPeriod]] | array',
\ 'trader_adx(': 'array $high, array $low, array $close [, int $timePeriod] | array',
\ 'trader_adxr(': 'array $high, array $low, array $close [, int $timePeriod] | array',
\ 'trader_apo(': 'array $real [, int $fastPeriod [, int $slowPeriod [, int $mAType]]] | array',
\ 'trader_aroon(': 'array $high, array $low [, int $timePeriod] | array',
\ 'trader_aroonosc(': 'array $high, array $low [, int $timePeriod] | array',
\ 'trader_asin(': 'array $real | array',
\ 'trader_atan(': 'array $real | array',
\ 'trader_atr(': 'array $high, array $low, array $close [, int $timePeriod] | array',
\ 'trader_avgprice(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_bbands(': 'array $real [, int $timePeriod [, float $nbDevUp [, float $nbDevDn [, int $mAType]]]] | array',
\ 'trader_beta(': 'array $real0, array $real1 [, int $timePeriod] | array',
\ 'trader_bop(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cci(': 'array $high, array $low, array $close [, int $timePeriod] | array',
\ 'trader_cdl2crows(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdl3blackcrows(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdl3inside(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdl3linestrike(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdl3outside(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdl3starsinsouth(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdl3whitesoldiers(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlabandonedbaby(': 'array $open, array $high, array $low, array $close [, float $penetration] | array',
\ 'trader_cdladvanceblock(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlbelthold(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlbreakaway(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlclosingmarubozu(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlconcealbabyswall(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlcounterattack(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdldarkcloudcover(': 'array $open, array $high, array $low, array $close [, float $penetration] | array',
\ 'trader_cdldoji(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdldojistar(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdldragonflydoji(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlengulfing(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdleveningdojistar(': 'array $open, array $high, array $low, array $close [, float $penetration] | array',
\ 'trader_cdleveningstar(': 'array $open, array $high, array $low, array $close [, float $penetration] | array',
\ 'trader_cdlgapsidesidewhite(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlgravestonedoji(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlhammer(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlhangingman(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlharami(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlharamicross(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlhighwave(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlhikkake(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlhikkakemod(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlhomingpigeon(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlidentical3crows(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlinneck(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlinvertedhammer(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlkicking(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlkickingbylength(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlladderbottom(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdllongleggeddoji(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdllongline(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlmarubozu(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlmatchinglow(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlmathold(': 'array $open, array $high, array $low, array $close [, float $penetration] | array',
\ 'trader_cdlmorningdojistar(': 'array $open, array $high, array $low, array $close [, float $penetration] | array',
\ 'trader_cdlmorningstar(': 'array $open, array $high, array $low, array $close [, float $penetration] | array',
\ 'trader_cdlonneck(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlpiercing(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlrickshawman(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlrisefall3methods(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlseparatinglines(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlshootingstar(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlshortline(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlspinningtop(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlstalledpattern(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlsticksandwich(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdltakuri(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdltasukigap(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlthrusting(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdltristar(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlunique3river(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlupsidegap2crows(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_cdlxsidegap3methods(': 'array $open, array $high, array $low, array $close | array',
\ 'trader_ceil(': 'array $real | array',
\ 'trader_cmo(': 'array $real [, int $timePeriod] | array',
\ 'trader_correl(': 'array $real0, array $real1 [, int $timePeriod] | array',
\ 'trader_cos(': 'array $real | array',
\ 'trader_cosh(': 'array $real | array',
\ 'trader_dema(': 'array $real [, int $timePeriod] | array',
\ 'trader_div(': 'array $real0, array $real1 | array',
\ 'trader_dx(': 'array $high, array $low, array $close [, int $timePeriod] | array',
\ 'trader_ema(': 'array $real [, int $timePeriod] | array',
\ 'trader_errno(': 'void | int',
\ 'trader_exp(': 'array $real | array',
\ 'trader_floor(': 'array $real | array',
\ 'trader_get_compat(': 'void | int',
\ 'trader_get_unstable_period(': 'int $functionId | int',
\ 'trader_ht_dcperiod(': 'array $real | array',
\ 'trader_ht_dcphase(': 'array $real | array',
\ 'trader_ht_phasor(': 'array $real | array',
\ 'trader_ht_sine(': 'array $real | array',
\ 'trader_ht_trendline(': 'array $real | array',
\ 'trader_ht_trendmode(': 'array $real | array',
\ 'trader_kama(': 'array $real [, int $timePeriod] | array',
\ 'trader_linearreg_angle(': 'array $real [, int $timePeriod] | array',
\ 'trader_linearreg_intercept(': 'array $real [, int $timePeriod] | array',
\ 'trader_linearreg_slope(': 'array $real [, int $timePeriod] | array',
\ 'trader_linearreg(': 'array $real [, int $timePeriod] | array',
\ 'trader_ln(': 'array $real | array',
\ 'trader_log10(': 'array $real | array',
\ 'trader_ma(': 'array $real [, int $timePeriod [, int $mAType]] | array',
\ 'trader_macd(': 'array $real [, int $fastPeriod [, int $slowPeriod [, int $signalPeriod]]] | array',
\ 'trader_macdext(': 'array $real [, int $fastPeriod [, int $fastMAType [, int $slowPeriod [, int $slowMAType [, int $signalPeriod [, int $signalMAType]]]]]] | array',
\ 'trader_macdfix(': 'array $real [, int $signalPeriod] | array',
\ 'trader_mama(': 'array $real [, float $fastLimit [, float $slowLimit]] | array',
\ 'trader_mavp(': 'array $real, array $periods [, int $minPeriod [, int $maxPeriod [, int $mAType]]] | array',
\ 'trader_max(': 'array $real [, int $timePeriod] | array',
\ 'trader_maxindex(': 'array $real [, int $timePeriod] | array',
\ 'trader_medprice(': 'array $high, array $low | array',
\ 'trader_mfi(': 'array $high, array $low, array $close, array $volume [, int $timePeriod] | array',
\ 'trader_midpoint(': 'array $real [, int $timePeriod] | array',
\ 'trader_midprice(': 'array $high, array $low [, int $timePeriod] | array',
\ 'trader_min(': 'array $real [, int $timePeriod] | array',
\ 'trader_minindex(': 'array $real [, int $timePeriod] | array',
\ 'trader_minmax(': 'array $real [, int $timePeriod] | array',
\ 'trader_minmaxindex(': 'array $real [, int $timePeriod] | array',
\ 'trader_minus_di(': 'array $high, array $low, array $close [, int $timePeriod] | array',
\ 'trader_minus_dm(': 'array $high, array $low [, int $timePeriod] | array',
\ 'trader_mom(': 'array $real [, int $timePeriod] | array',
\ 'trader_mult(': 'array $real0, array $real1 | array',
\ 'trader_natr(': 'array $high, array $low, array $close [, int $timePeriod] | array',
\ 'trader_obv(': 'array $real, array $volume | array',
\ 'trader_plus_di(': 'array $high, array $low, array $close [, int $timePeriod] | array',
\ 'trader_plus_dm(': 'array $high, array $low [, int $timePeriod] | array',
\ 'trader_ppo(': 'array $real [, int $fastPeriod [, int $slowPeriod [, int $mAType]]] | array',
\ 'trader_roc(': 'array $real [, int $timePeriod] | array',
\ 'trader_rocp(': 'array $real [, int $timePeriod] | array',
\ 'trader_rocr(': 'array $real [, int $timePeriod] | array',
\ 'trader_rocr100(': 'array $real [, int $timePeriod] | array',
\ 'trader_rsi(': 'array $real [, int $timePeriod] | array',
\ 'trader_sar(': 'array $high, array $low [, float $acceleration [, float $maximum]] | array',
\ 'trader_sarext(': 'array $high, array $low [, float $startValue [, float $offsetOnReverse [, float $accelerationInitLong [, float $accelerationLong [, float $accelerationMaxLong [, float $accelerationInitShort [, float $accelerationShort [, float $accelerationMaxShort]]]]]]]] | array',
\ 'trader_set_compat(': 'int $compatId | void',
\ 'trader_set_unstable_period(': 'int $functionId, int $timePeriod | void',
\ 'trader_sin(': 'array $real | array',
\ 'trader_sinh(': 'array $real | array',
\ 'trader_sma(': 'array $real [, int $timePeriod] | array',
\ 'trader_sqrt(': 'array $real | array',
\ 'trader_stddev(': 'array $real [, int $timePeriod [, float $nbDev]] | array',
\ 'trader_stoch(': 'array $high, array $low, array $close [, int $fastK_Period [, int $slowK_Period [, int $slowK_MAType [, int $slowD_Period [, int $slowD_MAType]]]]] | array',
\ 'trader_stochf(': 'array $high, array $low, array $close [, int $fastK_Period [, int $fastD_Period [, int $fastD_MAType]]] | array',
\ 'trader_stochrsi(': 'array $real [, int $timePeriod [, int $fastK_Period [, int $fastD_Period [, int $fastD_MAType]]]] | array',
\ 'trader_sub(': 'array $real0, array $real1 | array',
\ 'trader_sum(': 'array $real [, int $timePeriod] | array',
\ 'trader_t3(': 'array $real [, int $timePeriod [, float $vFactor]] | array',
\ 'trader_tan(': 'array $real | array',
\ 'trader_tanh(': 'array $real | array',
\ 'trader_tema(': 'array $real [, int $timePeriod] | array',
\ 'trader_trange(': 'array $high, array $low, array $close | array',
\ 'trader_trima(': 'array $real [, int $timePeriod] | array',
\ 'trader_trix(': 'array $real [, int $timePeriod] | array',
\ 'trader_tsf(': 'array $real [, int $timePeriod] | array',
\ 'trader_typprice(': 'array $high, array $low, array $close | array',
\ 'trader_ultosc(': 'array $high, array $low, array $close [, int $timePeriod1 [, int $timePeriod2 [, int $timePeriod3]]] | array',
\ 'trader_var(': 'array $real [, int $timePeriod [, float $nbDev]] | array',
\ 'trader_wclprice(': 'array $high, array $low, array $close | array',
\ 'trader_willr(': 'array $high, array $low, array $close [, int $timePeriod] | array',
\ 'trader_wma(': 'array $real [, int $timePeriod] | array',
\ }
let g:phpcomplete_builtin['functions']['mnogosearch'] = {
\ 'udm_add_search_limit(': 'resource $agent, int $var, string $val | bool',
\ 'udm_alloc_agent_array(': 'array $databases | resource',
\ 'udm_alloc_agent(': 'string $dbaddr [, string $dbmode] | resource',
\ 'udm_api_version(': 'void | int',
\ 'udm_cat_list(': 'resource $agent, string $category | array',
\ 'udm_cat_path(': 'resource $agent, string $category | array',
\ 'udm_check_charset(': 'resource $agent, string $charset | bool',
\ 'udm_clear_search_limits(': 'resource $agent | bool',
\ 'udm_crc32(': 'resource $agent, string $str | int',
\ 'udm_errno(': 'resource $agent | int',
\ 'udm_error(': 'resource $agent | string',
\ 'udm_find(': 'resource $agent, string $query | resource',
\ 'udm_free_agent(': 'resource $agent | int',
\ 'udm_free_ispell_data(': 'int $agent | bool',
\ 'udm_free_res(': 'resource $res | bool',
\ 'udm_get_doc_count(': 'resource $agent | int',
\ 'udm_get_res_field(': 'resource $res, int $row, int $field | string',
\ 'udm_get_res_param(': 'resource $res, int $param | string',
\ 'udm_hash32(': 'resource $agent, string $str | int',
\ 'udm_load_ispell_data(': 'resource $agent, int $var, string $val1, string $val2, int $flag | bool',
\ 'udm_set_agent_param(': 'resource $agent, int $var, string $val | bool',
\ }
let g:phpcomplete_builtin['functions']['ui'] = {
\ 'UI\Draw\Text\Font\fontFamilies(': 'void | array',
\ 'UI\quit(': 'void | void',
\ 'UI\run(': '[ int $flags] | void',
\ }
let g:phpcomplete_builtin['functions']['uopz'] = {
\ 'uopz_add_function(': 'string $function, Closure $handler [, int &$flags = ZEND_ACC_PUBLIC] | bool',
\ 'uopz_allow_exit(': 'bool $allow | void',
\ 'uopz_backup(': 'string $function | void',
\ 'uopz_compose(': 'string $name, array $classes [, array $methods [, array $properties [, int $flags]]] | void',
\ 'uopz_copy(': 'string $function | Closure',
\ 'uopz_del_function(': 'string $function | bool',
\ 'uopz_delete(': 'string $function | void',
\ 'uopz_extend(': 'string $class, string $parent | bool',
\ 'uopz_flags(': 'string $function [, int $flags = PHP_INT_MAX] | int',
\ 'uopz_function(': 'string $function, Closure $handler [, int $modifiers] | void',
\ 'uopz_get_exit_status(': 'void | mixed',
\ 'uopz_get_hook(': 'string $function | Closure',
\ 'uopz_get_mock(': 'string $class | mixed',
\ 'uopz_get_property(': 'string $class, string $property | mixed',
\ 'uopz_get_return(': 'string $function | mixed',
\ 'uopz_get_static(': 'string $class, string $function | array',
\ 'uopz_implement(': 'string $class, string $interface | bool',
\ 'uopz_overload(': 'int $opcode, Callable $callable | void',
\ 'uopz_redefine(': 'string $constant, mixed $value | bool',
\ 'uopz_rename(': 'string $function, string $rename | void',
\ 'uopz_restore(': 'string $function | void',
\ 'uopz_set_hook(': 'string $function, Closure $hook | bool',
\ 'uopz_set_mock(': 'string $class, mixed $mock | void',
\ 'uopz_set_property(': 'string $class, string $property, mixed $value | void',
\ 'uopz_set_return(': 'string $function, mixed $value [, bool $execute = FALSE] | bool',
\ 'uopz_set_static(': 'string $function, array $static | void',
\ 'uopz_undefine(': 'string $constant | bool',
\ 'uopz_unset_hook(': 'string $function | bool',
\ 'uopz_unset_mock(': 'string $class | void',
\ 'uopz_unset_return(': 'string $function | bool',
\ }
let g:phpcomplete_builtin['functions']['xml_parser'] = {
\ 'utf8_decode(': 'string $data | string',
\ 'utf8_encode(': 'string $data | string',
\ 'xml_error_string(': 'int $code | string',
\ 'xml_get_current_byte_index(': 'resource $parser | int',
\ 'xml_get_current_column_number(': 'resource $parser | int',
\ 'xml_get_current_line_number(': 'resource $parser | int',
\ 'xml_get_error_code(': 'resource $parser | int',
\ 'xml_parse_into_struct(': 'resource $parser, string $data, array &$values [, array &$index] | int',
\ 'xml_parse(': 'resource $parser, string $data [, bool $is_final = FALSE] | int',
\ 'xml_parser_create_ns(': '[ string $encoding [, string $separator = ":"]] | resource',
\ 'xml_parser_create(': '[ string $encoding] | resource',
\ 'xml_parser_free(': 'resource $parser | bool',
\ 'xml_parser_get_option(': 'resource $parser, int $option | mixed',
\ 'xml_parser_set_option(': 'resource $parser, int $option, mixed $value | bool',
\ 'xml_set_character_data_handler(': 'resource $parser, callable $handler | bool',
\ 'xml_set_default_handler(': 'resource $parser, callable $handler | bool',
\ 'xml_set_element_handler(': 'resource $parser, callable $start_element_handler, callable $end_element_handler | bool',
\ 'xml_set_end_namespace_decl_handler(': 'resource $parser, callable $handler | bool',
\ 'xml_set_external_entity_ref_handler(': 'resource $parser, callable $handler | bool',
\ 'xml_set_notation_decl_handler(': 'resource $parser, callable $handler | bool',
\ 'xml_set_object(': 'resource $parser, object &$object | bool',
\ 'xml_set_processing_instruction_handler(': 'resource $parser, callable $handler | bool',
\ 'xml_set_start_namespace_decl_handler(': 'resource $parser, callable $handler | bool',
\ 'xml_set_unparsed_entity_decl_handler(': 'resource $parser, callable $handler | bool',
\ }
let g:phpcomplete_builtin['functions']['vpopmail'] = {
\ 'vpopmail_add_alias_domain_ex(': 'string $olddomain, string $newdomain | bool',
\ 'vpopmail_add_alias_domain(': 'string $domain, string $aliasdomain | bool',
\ 'vpopmail_add_domain_ex(': 'string $domain, string $passwd [, string $quota [, string $bounce [, bool $apop]]] | bool',
\ 'vpopmail_add_domain(': 'string $domain, string $dir, int $uid, int $gid | bool',
\ 'vpopmail_add_user(': 'string $user, string $domain, string $password [, string $gecos [, bool $apop]] | bool',
\ 'vpopmail_alias_add(': 'string $user, string $domain, string $alias | bool',
\ 'vpopmail_alias_del_domain(': 'string $domain | bool',
\ 'vpopmail_alias_del(': 'string $user, string $domain | bool',
\ 'vpopmail_alias_get_all(': 'string $domain | array',
\ 'vpopmail_alias_get(': 'string $alias, string $domain | array',
\ 'vpopmail_auth_user(': 'string $user, string $domain, string $password [, string $apop] | bool',
\ 'vpopmail_del_domain_ex(': 'string $domain | bool',
\ 'vpopmail_del_domain(': 'string $domain | bool',
\ 'vpopmail_del_user(': 'string $user, string $domain | bool',
\ 'vpopmail_error(': 'void | string',
\ 'vpopmail_passwd(': 'string $user, string $domain, string $password [, bool $apop] | bool',
\ 'vpopmail_set_user_quota(': 'string $user, string $domain, string $quota | bool',
\ }
let g:phpcomplete_builtin['functions']['win32service'] = {
\ 'win32_continue_service(': 'string $servicename [, string $machine] | int',
\ 'win32_create_service(': 'array $details [, string $machine] | mixed',
\ 'win32_delete_service(': 'string $servicename [, string $machine] | mixed',
\ 'win32_get_last_control_message(': 'void | int',
\ 'win32_pause_service(': 'string $servicename [, string $machine] | int',
\ 'win32_query_service_status(': 'string $servicename [, string $machine] | mixed',
\ 'win32_send_custom_control(': 'string $servicename, int $control [, string $machine] | int',
\ 'win32_set_service_exit_code(': '[ int $exitCode = 1] | int',
\ 'win32_set_service_exit_mode(': '[ bool $gracefulMode = true] | bool',
\ 'win32_set_service_status(': 'int $status [, int $checkpoint = 0] | bool',
\ 'win32_start_service_ctrl_dispatcher(': 'string $name [, bool $gracefulMode = true] | mixed',
\ 'win32_start_service(': 'string $servicename [, string $machine] | int',
\ 'win32_stop_service(': 'string $servicename [, string $machine] | int',
\ }
let g:phpcomplete_builtin['functions']['win32ps'] = {
\ 'win32_ps_list_procs(': 'void | array',
\ 'win32_ps_stat_mem(': 'void | array',
\ 'win32_ps_stat_proc(': '[ int $pid = 0] | array',
\ }
let g:phpcomplete_builtin['functions']['wincache'] = {
\ 'wincache_fcache_fileinfo(': '[ bool $summaryonly = FALSE] | array',
\ 'wincache_fcache_meminfo(': 'void | array',
\ 'wincache_lock(': 'string $key [, bool $isglobal = FALSE] | bool',
\ 'wincache_ocache_fileinfo(': '[ bool $summaryonly = FALSE] | array',
\ 'wincache_ocache_meminfo(': 'void | array',
\ 'wincache_refresh_if_changed(': '[ array $files = NULL] | bool',
\ 'wincache_rplist_fileinfo(': '[ bool $summaryonly = FALSE] | array',
\ 'wincache_rplist_meminfo(': 'void | array',
\ 'wincache_scache_info(': '[ bool $summaryonly = FALSE] | array',
\ 'wincache_scache_meminfo(': 'void | array',
\ 'wincache_ucache_add(': 'string $key, mixed $value [, int $ttl = 0] | bool',
\ 'wincache_ucache_cas(': 'string $key, int $old_value, int $new_value | bool',
\ 'wincache_ucache_clear(': 'void | bool',
\ 'wincache_ucache_dec(': 'string $key [, int $dec_by = 1 [, bool &$success]] | mixed',
\ 'wincache_ucache_delete(': 'mixed $key | bool',
\ 'wincache_ucache_exists(': 'string $key | bool',
\ 'wincache_ucache_get(': 'mixed $key [, bool &$success] | mixed',
\ 'wincache_ucache_inc(': 'string $key [, int $inc_by = 1 [, bool &$success]] | mixed',
\ 'wincache_ucache_info(': '[ bool $summaryonly = FALSE [, string $key = NULL]] | array',
\ 'wincache_ucache_meminfo(': 'void | array',
\ 'wincache_ucache_set(': 'mixed $key, mixed $value [, int $ttl = 0] | bool',
\ 'wincache_unlock(': 'string $key | bool',
\ }
let g:phpcomplete_builtin['functions']['xattr'] = {
\ 'xattr_get(': 'string $filename, string $name [, int $flags = 0] | string',
\ 'xattr_list(': 'string $filename [, int $flags = 0] | array',
\ 'xattr_remove(': 'string $filename, string $name [, int $flags = 0] | bool',
\ 'xattr_set(': 'string $filename, string $name, string $value [, int $flags = 0] | bool',
\ 'xattr_supported(': 'string $filename [, int $flags = 0] | bool',
\ }
let g:phpcomplete_builtin['functions']['xdiff'] = {
\ 'xdiff_file_bdiff_size(': 'string $file | int',
\ 'xdiff_file_bdiff(': 'string $old_file, string $new_file, string $dest | bool',
\ 'xdiff_file_bpatch(': 'string $file, string $patch, string $dest | bool',
\ 'xdiff_file_diff_binary(': 'string $old_file, string $new_file, string $dest | bool',
\ 'xdiff_file_diff(': 'string $old_file, string $new_file, string $dest [, int $context = 3 [, bool $minimal = FALSE]] | bool',
\ 'xdiff_file_merge3(': 'string $old_file, string $new_file1, string $new_file2, string $dest | mixed',
\ 'xdiff_file_patch_binary(': 'string $file, string $patch, string $dest | bool',
\ 'xdiff_file_patch(': 'string $file, string $patch, string $dest [, int $flags = DIFF_PATCH_NORMAL] | mixed',
\ 'xdiff_file_rabdiff(': 'string $old_file, string $new_file, string $dest | bool',
\ 'xdiff_string_bdiff_size(': 'string $patch | int',
\ 'xdiff_string_bdiff(': 'string $old_data, string $new_data | string',
\ 'xdiff_string_bpatch(': 'string $str, string $patch | string',
\ 'xdiff_string_diff(': 'string $old_data, string $new_data [, int $context = 3 [, bool $minimal = FALSE]] | string',
\ 'xdiff_string_merge3(': 'string $old_data, string $new_data1, string $new_data2 [, string &$error] | mixed',
\ 'xdiff_string_patch_binary(': 'string $str, string $patch | string',
\ 'xdiff_string_patch(': 'string $str, string $patch [, int $flags [, string &$error]] | string',
\ }
let g:phpcomplete_builtin['functions']['xhprof'] = {
\ 'xhprof_disable(': 'void | array',
\ 'xhprof_enable(': '[ int $flags = 0 [, array $options]] | void',
\ 'xhprof_sample_disable(': 'void | array',
\ 'xhprof_sample_enable(': 'void | void',
\ }
let g:phpcomplete_builtin['functions']['xml_rpc'] = {
\ 'xmlrpc_decode_request(': 'string $xml, string &$method [, string $encoding] | mixed',
\ 'xmlrpc_decode(': 'string $xml [, string $encoding = "iso-8859-1"] | mixed',
\ 'xmlrpc_encode_request(': 'string $method, mixed $params [, array $output_options] | string',
\ 'xmlrpc_encode(': 'mixed $value | string',
\ 'xmlrpc_get_type(': 'mixed $value | string',
\ 'xmlrpc_is_fault(': 'array $arg | bool',
\ 'xmlrpc_parse_method_descriptions(': 'string $xml | array',
\ 'xmlrpc_server_add_introspection_data(': 'resource $server, array $desc | int',
\ 'xmlrpc_server_call_method(': 'resource $server, string $xml, mixed $user_data [, array $output_options] | string',
\ 'xmlrpc_server_create(': 'void | resource',
\ 'xmlrpc_server_destroy(': 'resource $server | bool',
\ 'xmlrpc_server_register_introspection_callback(': 'resource $server, string $function | bool',
\ 'xmlrpc_server_register_method(': 'resource $server, string $method_name, string $function | bool',
\ 'xmlrpc_set_type(': 'string &$value, string $type | bool',
\ }
let g:phpcomplete_builtin['functions']['xmlwriter'] = {
\ 'xmlwriter_end_attribute(': 'resource $xmlwriter | bool',
\ 'xmlwriter_end_cdata(': 'resource $xmlwriter | bool',
\ 'xmlwriter_end_comment(': 'resource $xmlwriter | bool',
\ 'xmlwriter_end_document(': 'resource $xmlwriter | bool',
\ 'xmlwriter_end_dtd_attlist(': 'resource $xmlwriter | bool',
\ 'xmlwriter_end_dtd_element(': 'resource $xmlwriter | bool',
\ 'xmlwriter_end_dtd_entity(': 'resource $xmlwriter | bool',
\ 'xmlwriter_end_dtd(': 'resource $xmlwriter | bool',
\ 'xmlwriter_end_element(': 'resource $xmlwriter | bool',
\ 'xmlwriter_end_pi(': 'resource $xmlwriter | bool',
\ 'xmlwriter_flush(': 'resource $xmlwriter [, bool $empty = TRUE] | mixed',
\ 'xmlwriter_full_end_element(': 'resource $xmlwriter | bool',
\ 'xmlwriter_open_memory(': 'void | resource',
\ 'xmlwriter_open_uri(': 'string $uri | resource',
\ 'xmlwriter_output_memory(': 'resource $xmlwriter [, bool $flush = TRUE] | string',
\ 'xmlwriter_set_indent_string(': 'resource $xmlwriter, string $indentString | bool',
\ 'xmlwriter_set_indent(': 'resource $xmlwriter, bool $indent | bool',
\ 'xmlwriter_start_attribute_ns(': 'resource $xmlwriter, string $prefix, string $name, string $uri | bool',
\ 'xmlwriter_start_attribute(': 'resource $xmlwriter, string $name | bool',
\ 'xmlwriter_start_cdata(': 'resource $xmlwriter | bool',
\ 'xmlwriter_start_comment(': 'resource $xmlwriter | bool',
\ 'xmlwriter_start_document(': 'resource $xmlwriter [, string $version = 1.0 [, string $encoding = NULL [, string $standalone]]] | bool',
\ 'xmlwriter_start_dtd_attlist(': 'resource $xmlwriter, string $name | bool',
\ 'xmlwriter_start_dtd_element(': 'resource $xmlwriter, string $qualifiedName | bool',
\ 'xmlwriter_start_dtd_entity(': 'resource $xmlwriter, string $name, bool $isparam | bool',
\ 'xmlwriter_start_dtd(': 'resource $xmlwriter, string $qualifiedName [, string $publicId [, string $systemId]] | bool',
\ 'xmlwriter_start_element_ns(': 'resource $xmlwriter, string $prefix, string $name, string $uri | bool',
\ 'xmlwriter_start_element(': 'resource $xmlwriter, string $name | bool',
\ 'xmlwriter_start_pi(': 'resource $xmlwriter, string $target | bool',
\ 'xmlwriter_text(': 'resource $xmlwriter, string $content | bool',
\ 'xmlwriter_write_attribute_ns(': 'resource $xmlwriter, string $prefix, string $name, string $uri, string $content | bool',
\ 'xmlwriter_write_attribute(': 'resource $xmlwriter, string $name, string $value | bool',
\ 'xmlwriter_write_cdata(': 'resource $xmlwriter, string $content | bool',
\ 'xmlwriter_write_comment(': 'resource $xmlwriter, string $content | bool',
\ 'xmlwriter_write_dtd_attlist(': 'resource $xmlwriter, string $name, string $content | bool',
\ 'xmlwriter_write_dtd_element(': 'resource $xmlwriter, string $name, string $content | bool',
\ 'xmlwriter_write_dtd_entity(': 'resource $xmlwriter, string $name, string $content, bool $pe, string $pubid, string $sysid, string $ndataid | bool',
\ 'xmlwriter_write_dtd(': 'resource $xmlwriter, string $name [, string $publicId [, string $systemId [, string $subset]]] | bool',
\ 'xmlwriter_write_element_ns(': 'resource $xmlwriter, string $prefix, string $name, string $uri [, string $content] | bool',
\ 'xmlwriter_write_element(': 'resource $xmlwriter, string $name [, string $content] | bool',
\ 'xmlwriter_write_pi(': 'resource $xmlwriter, string $target, string $content | bool',
\ 'xmlwriter_write_raw(': 'resource $xmlwriter, string $content | bool',
\ }
let g:phpcomplete_builtin['functions']['yaml'] = {
\ 'yaml_emit_file(': 'string $filename, mixed $data [, int $encoding = YAML_ANY_ENCODING [, int $linebreak = YAML_ANY_BREAK [, array $callbacks = NULL]]] | bool',
\ 'yaml_emit(': 'mixed $data [, int $encoding = YAML_ANY_ENCODING [, int $linebreak = YAML_ANY_BREAK [, array $callbacks = NULL]]] | string',
\ 'yaml_parse_file(': 'string $filename [, int $pos = 0 [, int &$ndocs [, array $callbacks = NULL]]] | mixed',
\ 'yaml_parse_url(': 'string $url [, int $pos = 0 [, int &$ndocs [, array $callbacks = NULL]]] | mixed',
\ 'yaml_parse(': 'string $input [, int $pos = 0 [, int &$ndocs [, array $callbacks = NULL]]] | mixed',
\ }
let g:phpcomplete_builtin['functions']['yaz'] = {
\ 'yaz_addinfo(': 'resource $id | string',
\ 'yaz_ccl_conf(': 'resource $id, array $config | void',
\ 'yaz_ccl_parse(': 'resource $id, string $query, array &$result | bool',
\ 'yaz_close(': 'resource $id | bool',
\ 'yaz_connect(': 'string $zurl [, mixed $options] | mixed',
\ 'yaz_database(': 'resource $id, string $databases | bool',
\ 'yaz_element(': 'resource $id, string $elementset | bool',
\ 'yaz_errno(': 'resource $id | int',
\ 'yaz_error(': 'resource $id | string',
\ 'yaz_es_result(': 'resource $id | array',
\ 'yaz_es(': 'resource $id, string $type, array $args | void',
\ 'yaz_get_option(': 'resource $id, string $name | string',
\ 'yaz_hits(': 'resource $id [, array &$searchresult] | int',
\ 'yaz_itemorder(': 'resource $id, array $args | void',
\ 'yaz_present(': 'resource $id | bool',
\ 'yaz_range(': 'resource $id, int $start, int $number | void',
\ 'yaz_record(': 'resource $id, int $pos, string $type | string',
\ 'yaz_scan_result(': 'resource $id [, array &$result] | array',
\ 'yaz_scan(': 'resource $id, string $type, string $startterm [, array $flags] | void',
\ 'yaz_schema(': 'resource $id, string $schema | void',
\ 'yaz_search(': 'resource $id, string $type, string $query | bool',
\ 'yaz_set_option(': 'resource $id, string $name, string $value | void',
\ 'yaz_sort(': 'resource $id, string $criteria | void',
\ 'yaz_syntax(': 'resource $id, string $syntax | void',
\ 'yaz_wait(': '[ array &$options] | mixed',
\ }
let g:phpcomplete_builtin['functions']['yp_nis'] = {
\ 'yp_all(': 'string $domain, string $map, string $callback | void',
\ 'yp_cat(': 'string $domain, string $map | array',
\ 'yp_err_string(': 'int $errorcode | string',
\ 'yp_errno(': 'void | int',
\ 'yp_first(': 'string $domain, string $map | array',
\ 'yp_get_default_domain(': 'void | string',
\ 'yp_master(': 'string $domain, string $map | string',
\ 'yp_match(': 'string $domain, string $map, string $key | string',
\ 'yp_next(': 'string $domain, string $map, string $key | array',
\ 'yp_order(': 'string $domain, string $map | int',
\ }
let g:phpcomplete_builtin['functions']['zip'] = {
\ 'zip_close(': 'resource $zip | void',
\ 'zip_entry_close(': 'resource $zip_entry | bool',
\ 'zip_entry_compressedsize(': 'resource $zip_entry | int',
\ 'zip_entry_compressionmethod(': 'resource $zip_entry | string',
\ 'zip_entry_filesize(': 'resource $zip_entry | int',
\ 'zip_entry_name(': 'resource $zip_entry | string',
\ 'zip_entry_open(': 'resource $zip, resource $zip_entry [, string $mode] | bool',
\ 'zip_entry_read(': 'resource $zip_entry [, int $length = 1024] | string',
\ 'zip_open(': 'string $filename | resource',
\ 'zip_read(': 'resource $zip | resource',
\ }
let g:phpcomplete_builtin['functions']['zookeeper'] = {
\ 'zookeeper_dispatch(': 'void | void',
\ }
let g:phpcomplete_builtin['classes']['oci8'] = {
\'oci-collection': {
\   'name': 'OCI-Collection',
\   'methods': {
\     'append': { 'signature': 'mixed $value | bool', 'return_type': 'bool'},
\     'assign': { 'signature': 'OCI-Collection $from | bool', 'return_type': 'bool'},
\     'assignElem': { 'signature': 'int $index, mixed $value | bool', 'return_type': 'bool'},
\     'free': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getElem': { 'signature': 'int $index | mixed', 'return_type': 'mixed'},
\     'max': { 'signature': 'void | int', 'return_type': 'int'},
\     'size': { 'signature': 'void | int', 'return_type': 'int'},
\     'trim': { 'signature': 'int $num | bool', 'return_type': 'bool'},
\   },
\},
\'oci-lob': {
\   'name': 'OCI-Lob',
\   'methods': {
\     'append': { 'signature': 'OCI-Lob $lob_from | bool', 'return_type': 'bool'},
\     'close': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'eof': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'erase': { 'signature': '[ int $offset [, int $length]] | int', 'return_type': 'int'},
\     'export': { 'signature': 'string $filename [, int $start [, int $length]] | bool', 'return_type': 'bool'},
\     'flush': { 'signature': '[ int $flag] | bool', 'return_type': 'bool'},
\     'free': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getBuffering': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'import': { 'signature': 'string $filename | bool', 'return_type': 'bool'},
\     'load': { 'signature': 'void | string', 'return_type': 'string'},
\     'read': { 'signature': 'int $length | string', 'return_type': 'string'},
\     'rewind': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'save': { 'signature': 'string $data [, int $offset] | bool', 'return_type': 'bool'},
\     'seek': { 'signature': 'int $offset [, int $whence = OCI_SEEK_SET] | bool', 'return_type': 'bool'},
\     'setBuffering': { 'signature': 'bool $on_off | bool', 'return_type': 'bool'},
\     'size': { 'signature': 'void | int', 'return_type': 'int'},
\     'tell': { 'signature': 'void | int', 'return_type': 'int'},
\     'truncate': { 'signature': '[ int $length = 0] | bool', 'return_type': 'bool'},
\     'write': { 'signature': 'string $data [, int $length] | int', 'return_type': 'int'},
\     'writeTemporary': { 'signature': 'string $data [, int $lob_type = OCI_TEMP_CLOB] | bool', 'return_type': 'bool'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['apc'] = {
\'apciterator': {
\   'name': 'APCIterator',
\   'methods': {
\     '__construct': { 'signature': 'string $cache [, mixed $search = NULL [, int $format = APC_ITER_ALL [, int $chunk_size = 100 [, int $list = APC_LIST_ACTIVE]]]]', 'return_type': ''},
\     'current': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getTotalCount': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTotalHits': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTotalSize': { 'signature': 'void | int', 'return_type': 'int'},
\     'key': { 'signature': 'void | string', 'return_type': 'string'},
\     'next': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'rewind': { 'signature': 'void | void', 'return_type': 'void'},
\     'valid': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['apcu'] = {
\'apcuiterator': {
\   'name': 'APCUIterator',
\   'methods': {
\     '__construct': { 'signature': '[ mixed $search = NULL [, int $format = APC_ITER_ALL [, int $chunk_size = 100 [, int $list = APC_LIST_ACTIVE]]]]', 'return_type': ''},
\     'current': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getTotalCount': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTotalHits': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTotalSize': { 'signature': 'void | int', 'return_type': 'int'},
\     'key': { 'signature': 'void | string', 'return_type': 'string'},
\     'next': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'rewind': { 'signature': 'void | void', 'return_type': 'void'},
\     'valid': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['spl'] = {
\'appenditerator': {
\   'name': 'AppendIterator',
\   'methods': {
\     '__construct': { 'signature': 'Traversable $iterator', 'return_type': ''},
\     'append': { 'signature': 'Iterator $iterator | void', 'return_type': 'void'},
\     'current': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getArrayIterator': { 'signature': 'void | ArrayIterator', 'return_type': 'ArrayIterator'},
\     'getInnerIterator': { 'signature': 'void | Traversable', 'return_type': 'Traversable'},
\     'getIteratorIndex': { 'signature': 'void | int', 'return_type': 'int'},
\     'key': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'next': { 'signature': 'void | void', 'return_type': 'void'},
\     'rewind': { 'signature': 'void | void', 'return_type': 'void'},
\     'valid': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'arrayiterator': {
\   'name': 'ArrayIterator',
\   'constants': {
\     'STD_PROP_LIST': '1',
\     'ARRAY_AS_PROPS': '2',
\   },
\   'methods': {
\     'append': { 'signature': 'mixed $value | void', 'return_type': 'void'},
\     'asort': { 'signature': 'void | void', 'return_type': 'void'},
\     '__construct': { 'signature': '[ mixed $array = array() [, int $flags = 0]]', 'return_type': ''},
\     'count': { 'signature': 'void | int', 'return_type': 'int'},
\     'current': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getArrayCopy': { 'signature': 'void | array', 'return_type': 'array'},
\     'getFlags': { 'signature': 'void | int', 'return_type': 'int'},
\     'key': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'ksort': { 'signature': 'void | void', 'return_type': 'void'},
\     'natcasesort': { 'signature': 'void | void', 'return_type': 'void'},
\     'natsort': { 'signature': 'void | void', 'return_type': 'void'},
\     'next': { 'signature': 'void | void', 'return_type': 'void'},
\     'offsetExists': { 'signature': 'mixed $index | bool', 'return_type': 'bool'},
\     'offsetGet': { 'signature': 'mixed $index | mixed', 'return_type': 'mixed'},
\     'offsetSet': { 'signature': 'mixed $index, mixed $newval | void', 'return_type': 'void'},
\     'offsetUnset': { 'signature': 'mixed $index | void', 'return_type': 'void'},
\     'rewind': { 'signature': 'void | void', 'return_type': 'void'},
\     'seek': { 'signature': 'int $position | void', 'return_type': 'void'},
\     'serialize': { 'signature': 'void | string', 'return_type': 'string'},
\     'setFlags': { 'signature': 'string $flags | void', 'return_type': 'void'},
\     'uasort': { 'signature': 'callable $cmp_function | void', 'return_type': 'void'},
\     'uksort': { 'signature': 'callable $cmp_function | void', 'return_type': 'void'},
\     'unserialize': { 'signature': 'string $serialized | void', 'return_type': 'void'},
\     'valid': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'arrayobject': {
\   'name': 'ArrayObject',
\   'constants': {
\     'STD_PROP_LIST': '1',
\     'ARRAY_AS_PROPS': '2',
\   },
\   'methods': {
\     '__construct': { 'signature': '[ mixed $input = array() [, int $flags = 0 [, string $iterator_class = "ArrayIterator"]]]', 'return_type': ''},
\     'append': { 'signature': 'mixed $value | void', 'return_type': 'void'},
\     'asort': { 'signature': 'void | void', 'return_type': 'void'},
\     'count': { 'signature': 'void | int', 'return_type': 'int'},
\     'exchangeArray': { 'signature': 'mixed $input | array', 'return_type': 'array'},
\     'getArrayCopy': { 'signature': 'void | array', 'return_type': 'array'},
\     'getFlags': { 'signature': 'void | int', 'return_type': 'int'},
\     'getIterator': { 'signature': 'void | ArrayIterator', 'return_type': 'ArrayIterator'},
\     'getIteratorClass': { 'signature': 'void | string', 'return_type': 'string'},
\     'ksort': { 'signature': 'void | void', 'return_type': 'void'},
\     'natcasesort': { 'signature': 'void | void', 'return_type': 'void'},
\     'natsort': { 'signature': 'void | void', 'return_type': 'void'},
\     'offsetExists': { 'signature': 'mixed $index | bool', 'return_type': 'bool'},
\     'offsetGet': { 'signature': 'mixed $index | mixed', 'return_type': 'mixed'},
\     'offsetSet': { 'signature': 'mixed $index, mixed $newval | void', 'return_type': 'void'},
\     'offsetUnset': { 'signature': 'mixed $index | void', 'return_type': 'void'},
\     'serialize': { 'signature': 'void | string', 'return_type': 'string'},
\     'setFlags': { 'signature': 'int $flags | void', 'return_type': 'void'},
\     'setIteratorClass': { 'signature': 'string $iterator_class | void', 'return_type': 'void'},
\     'uasort': { 'signature': 'callable $cmp_function | void', 'return_type': 'void'},
\     'uksort': { 'signature': 'callable $cmp_function | void', 'return_type': 'void'},
\     'unserialize': { 'signature': 'string $serialized | void', 'return_type': 'void'},
\   },
\},
\'badfunctioncallexception': {
\   'name': 'BadFunctionCallException',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'badmethodcallexception': {
\   'name': 'BadMethodCallException',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'cachingiterator': {
\   'name': 'CachingIterator',
\   'constants': {
\     'CALL_TOSTRING': '1',
\     'CATCH_GET_CHILD': '16',
\     'TOSTRING_USE_KEY': '2',
\     'TOSTRING_USE_CURRENT': '4',
\     'TOSTRING_USE_INNER': '8',
\     'FULL_CACHE': '256',
\   },
\   'methods': {
\     '__construct': { 'signature': 'Iterator $iterator [, int $flags = self::CALL_TOSTRING]', 'return_type': ''},
\     'count': { 'signature': 'void | int', 'return_type': 'int'},
\     'current': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getCache': { 'signature': 'void | array', 'return_type': 'array'},
\     'getFlags': { 'signature': 'void | int', 'return_type': 'int'},
\     'getInnerIterator': { 'signature': 'void | Iterator', 'return_type': 'Iterator'},
\     'hasNext': { 'signature': 'void | void', 'return_type': 'void'},
\     'key': { 'signature': 'void | scalar', 'return_type': 'scalar'},
\     'next': { 'signature': 'void | void', 'return_type': 'void'},
\     'offsetExists': { 'signature': 'mixed $index | void', 'return_type': 'void'},
\     'offsetGet': { 'signature': 'string $index | void', 'return_type': 'void'},
\     'offsetSet': { 'signature': 'mixed $index, mixed $newval | void', 'return_type': 'void'},
\     'offsetUnset': { 'signature': 'string $index | void', 'return_type': 'void'},
\     'rewind': { 'signature': 'void | void', 'return_type': 'void'},
\     'setFlags': { 'signature': 'int $flags | void', 'return_type': 'void'},
\     '__toString': { 'signature': 'void | void', 'return_type': 'void'},
\     'valid': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'callbackfilteriterator': {
\   'name': 'CallbackFilterIterator',
\   'methods': {
\     '__construct': { 'signature': 'Iterator $iterator', 'return_type': ''},
\     'accept': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'current': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getInnerIterator': { 'signature': 'void | Iterator', 'return_type': 'Iterator'},
\     'key': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'next': { 'signature': 'void | void', 'return_type': 'void'},
\     'rewind': { 'signature': 'void | void', 'return_type': 'void'},
\     'valid': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'directoryiterator': {
\   'name': 'DirectoryIterator',
\   'methods': {
\     '__construct': { 'signature': 'string $path', 'return_type': ''},
\     'current': { 'signature': 'void | DirectoryIterator', 'return_type': 'DirectoryIterator'},
\     'getATime': { 'signature': 'void | int', 'return_type': 'int'},
\     'getBasename': { 'signature': '[ string $suffix] | string', 'return_type': 'string'},
\     'getCTime': { 'signature': 'void | int', 'return_type': 'int'},
\     'getExtension': { 'signature': 'void | string', 'return_type': 'string'},
\     'getFilename': { 'signature': 'void | string', 'return_type': 'string'},
\     'getGroup': { 'signature': 'void | int', 'return_type': 'int'},
\     'getInode': { 'signature': 'void | int', 'return_type': 'int'},
\     'getMTime': { 'signature': 'void | int', 'return_type': 'int'},
\     'getOwner': { 'signature': 'void | int', 'return_type': 'int'},
\     'getPath': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPathname': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPerms': { 'signature': 'void | int', 'return_type': 'int'},
\     'getSize': { 'signature': 'void | int', 'return_type': 'int'},
\     'getType': { 'signature': 'void | string', 'return_type': 'string'},
\     'isDir': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isDot': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isExecutable': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isFile': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isLink': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isReadable': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isWritable': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'key': { 'signature': 'void | string', 'return_type': 'string'},
\     'next': { 'signature': 'void | void', 'return_type': 'void'},
\     'rewind': { 'signature': 'void | void', 'return_type': 'void'},
\     'seek': { 'signature': 'int $position | void', 'return_type': 'void'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     'valid': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'domainexception': {
\   'name': 'DomainException',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'emptyiterator': {
\   'name': 'EmptyIterator',
\   'methods': {
\     'current': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'key': { 'signature': 'void | scalar', 'return_type': 'scalar'},
\     'next': { 'signature': 'void | void', 'return_type': 'void'},
\     'rewind': { 'signature': 'void | void', 'return_type': 'void'},
\     'valid': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'filesystemiterator': {
\   'name': 'FilesystemIterator',
\   'constants': {
\     'CURRENT_AS_PATHNAME': '32',
\     'CURRENT_AS_FILEINFO': '0',
\     'CURRENT_AS_SELF': '16',
\     'CURRENT_MODE_MASK': '240',
\     'KEY_AS_PATHNAME': '0',
\     'KEY_AS_FILENAME': '256',
\     'FOLLOW_SYMLINKS': '512',
\     'KEY_MODE_MASK': '3840',
\     'NEW_CURRENT_AND_KEY': '256',
\     'SKIP_DOTS': '4096',
\     'UNIX_PATHS': '8192',
\   },
\   'methods': {
\     '__construct': { 'signature': 'string $path [, int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO | FilesystemIterator::SKIP_DOTS]', 'return_type': ''},
\     'current': { 'signature': 'void | DirectoryIterator', 'return_type': 'DirectoryIterator'},
\     'getFlags': { 'signature': 'void | int', 'return_type': 'int'},
\     'key': { 'signature': 'void | string', 'return_type': 'string'},
\     'next': { 'signature': 'void | void', 'return_type': 'void'},
\     'rewind': { 'signature': 'void | void', 'return_type': 'void'},
\     'setFlags': { 'signature': '[ int $flags] | void', 'return_type': 'void'},
\     'getATime': { 'signature': 'void | int', 'return_type': 'int'},
\     'getBasename': { 'signature': '[ string $suffix] | string', 'return_type': 'string'},
\     'getCTime': { 'signature': 'void | int', 'return_type': 'int'},
\     'getExtension': { 'signature': 'void | string', 'return_type': 'string'},
\     'getFilename': { 'signature': 'void | string', 'return_type': 'string'},
\     'getGroup': { 'signature': 'void | int', 'return_type': 'int'},
\     'getInode': { 'signature': 'void | int', 'return_type': 'int'},
\     'getMTime': { 'signature': 'void | int', 'return_type': 'int'},
\     'getOwner': { 'signature': 'void | int', 'return_type': 'int'},
\     'getPath': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPathname': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPerms': { 'signature': 'void | int', 'return_type': 'int'},
\     'getSize': { 'signature': 'void | int', 'return_type': 'int'},
\     'getType': { 'signature': 'void | string', 'return_type': 'string'},
\     'isDir': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isDot': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isExecutable': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isFile': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isLink': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isReadable': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isWritable': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'seek': { 'signature': 'int $position | void', 'return_type': 'void'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     'valid': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'filteriterator': {
\   'name': 'FilterIterator',
\   'methods': {
\     'accept': { 'signature': 'void | bool', 'return_type': 'bool'},
\     '__construct': { 'signature': 'Iterator $iterator', 'return_type': ''},
\     'current': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getInnerIterator': { 'signature': 'void | Iterator', 'return_type': 'Iterator'},
\     'key': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'next': { 'signature': 'void | void', 'return_type': 'void'},
\     'rewind': { 'signature': 'void | void', 'return_type': 'void'},
\     'valid': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'globiterator': {
\   'name': 'GlobIterator',
\   'constants': {
\     'FilesystemIterator::CURRENT_AS_PATHNAME': '32',
\     'FilesystemIterator::CURRENT_AS_FILEINFO': '0',
\     'FilesystemIterator::CURRENT_AS_SELF': '16',
\     'FilesystemIterator::CURRENT_MODE_MASK': '240',
\     'FilesystemIterator::KEY_AS_PATHNAME': '0',
\     'FilesystemIterator::KEY_AS_FILENAME': '256',
\     'FilesystemIterator::FOLLOW_SYMLINKS': '512',
\     'FilesystemIterator::KEY_MODE_MASK': '3840',
\     'FilesystemIterator::NEW_CURRENT_AND_KEY': '256',
\     'FilesystemIterator::SKIP_DOTS': '4096',
\     'FilesystemIterator::UNIX_PATHS': '8192',
\   },
\   'methods': {
\     '__construct': { 'signature': 'string $path [, int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO | FilesystemIterator::SKIP_DOTS]', 'return_type': ''},
\     'count': { 'signature': 'void | int', 'return_type': 'int'},
\     'current': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFlags': { 'signature': 'void | int', 'return_type': 'int'},
\     'key': { 'signature': 'void | string', 'return_type': 'string'},
\     'next': { 'signature': 'void | void', 'return_type': 'void'},
\     'rewind': { 'signature': 'void | void', 'return_type': 'void'},
\     'setFlags': { 'signature': '[ int $flags] | void', 'return_type': 'void'},
\   },
\},
\'infiniteiterator': {
\   'name': 'InfiniteIterator',
\   'methods': {
\     '__construct': { 'signature': 'Traversable $iterator', 'return_type': ''},
\     'next': { 'signature': 'void | void', 'return_type': 'void'},
\     'current': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getInnerIterator': { 'signature': 'void | Traversable', 'return_type': 'Traversable'},
\     'key': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'rewind': { 'signature': 'void | void', 'return_type': 'void'},
\     'valid': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'invalidargumentexception': {
\   'name': 'InvalidArgumentException',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'iteratoriterator': {
\   'name': 'IteratorIterator',
\   'methods': {
\     '__construct': { 'signature': 'Traversable $iterator', 'return_type': ''},
\     'current': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getInnerIterator': { 'signature': 'void | Traversable', 'return_type': 'Traversable'},
\     'key': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'next': { 'signature': 'void | void', 'return_type': 'void'},
\     'rewind': { 'signature': 'void | void', 'return_type': 'void'},
\     'valid': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'lengthexception': {
\   'name': 'LengthException',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'limititerator': {
\   'name': 'LimitIterator',
\   'methods': {
\     '__construct': { 'signature': 'Iterator $iterator [, int $offset = 0 [, int $count = -1]]', 'return_type': ''},
\     'current': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getInnerIterator': { 'signature': 'void | Iterator', 'return_type': 'Iterator'},
\     'getPosition': { 'signature': 'void | int', 'return_type': 'int'},
\     'key': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'next': { 'signature': 'void | void', 'return_type': 'void'},
\     'rewind': { 'signature': 'void | void', 'return_type': 'void'},
\     'seek': { 'signature': 'int $position | int', 'return_type': 'int'},
\     'valid': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'logicexception': {
\   'name': 'LogicException',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'multipleiterator': {
\   'name': 'MultipleIterator',
\   'constants': {
\     'MIT_NEED_ANY': '0',
\     'MIT_NEED_ALL': '1',
\     'MIT_KEYS_NUMERIC': '0',
\     'MIT_KEYS_ASSOC': '2',
\   },
\   'methods': {
\     '__construct': { 'signature': '[ int $flags = MultipleIterator::MIT_NEED_ALL|MultipleIterator::MIT_KEYS_NUMERIC]', 'return_type': ''},
\     'attachIterator': { 'signature': 'Iterator $iterator [, string $infos] | void', 'return_type': 'void'},
\     'containsIterator': { 'signature': 'Iterator $iterator | bool', 'return_type': 'bool'},
\     'countIterators': { 'signature': 'void | int', 'return_type': 'int'},
\     'current': { 'signature': 'void | array', 'return_type': 'array'},
\     'detachIterator': { 'signature': 'Iterator $iterator | void', 'return_type': 'void'},
\     'getFlags': { 'signature': 'void | int', 'return_type': 'int'},
\     'key': { 'signature': 'void | array', 'return_type': 'array'},
\     'next': { 'signature': 'void | void', 'return_type': 'void'},
\     'rewind': { 'signature': 'void | void', 'return_type': 'void'},
\     'setFlags': { 'signature': 'int $flags | void', 'return_type': 'void'},
\     'valid': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'norewinditerator': {
\   'name': 'NoRewindIterator',
\   'methods': {
\     '__construct': { 'signature': 'Traversable $iterator', 'return_type': ''},
\     'current': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getInnerIterator': { 'signature': 'void | Traversable', 'return_type': 'Traversable'},
\     'key': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'next': { 'signature': 'void | void', 'return_type': 'void'},
\     'rewind': { 'signature': 'void | void', 'return_type': 'void'},
\     'valid': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'outofboundsexception': {
\   'name': 'OutOfBoundsException',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'outofrangeexception': {
\   'name': 'OutOfRangeException',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'overflowexception': {
\   'name': 'OverflowException',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'parentiterator': {
\   'name': 'ParentIterator',
\   'methods': {
\     'accept': { 'signature': 'void | bool', 'return_type': 'bool'},
\     '__construct': { 'signature': 'RecursiveIterator $iterator', 'return_type': ''},
\     'getChildren': { 'signature': 'void | ParentIterator', 'return_type': 'ParentIterator'},
\     'hasChildren': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'next': { 'signature': 'void | void', 'return_type': 'void'},
\     'rewind': { 'signature': 'void | void', 'return_type': 'void'},
\     'getInnerIterator': { 'signature': 'void | Iterator', 'return_type': 'Iterator'},
\   },
\},
\'rangeexception': {
\   'name': 'RangeException',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'recursivearrayiterator': {
\   'name': 'RecursiveArrayIterator',
\   'constants': {
\     'STD_PROP_LIST': '1',
\     'ARRAY_AS_PROPS': '2',
\     'CHILD_ARRAYS_ONLY': '4',
\   },
\   'methods': {
\     'getChildren': { 'signature': 'void | RecursiveArrayIterator', 'return_type': 'RecursiveArrayIterator'},
\     'hasChildren': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'append': { 'signature': 'mixed $value | void', 'return_type': 'void'},
\     'asort': { 'signature': 'void | void', 'return_type': 'void'},
\     '__construct': { 'signature': '[ mixed $array = array() [, int $flags = 0]]', 'return_type': ''},
\     'count': { 'signature': 'void | int', 'return_type': 'int'},
\     'current': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getArrayCopy': { 'signature': 'void | array', 'return_type': 'array'},
\     'getFlags': { 'signature': 'void | int', 'return_type': 'int'},
\     'key': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'ksort': { 'signature': 'void | void', 'return_type': 'void'},
\     'natcasesort': { 'signature': 'void | void', 'return_type': 'void'},
\     'natsort': { 'signature': 'void | void', 'return_type': 'void'},
\     'next': { 'signature': 'void | void', 'return_type': 'void'},
\     'offsetExists': { 'signature': 'mixed $index | bool', 'return_type': 'bool'},
\     'offsetGet': { 'signature': 'mixed $index | mixed', 'return_type': 'mixed'},
\     'offsetSet': { 'signature': 'mixed $index, mixed $newval | void', 'return_type': 'void'},
\     'offsetUnset': { 'signature': 'mixed $index | void', 'return_type': 'void'},
\     'rewind': { 'signature': 'void | void', 'return_type': 'void'},
\     'seek': { 'signature': 'int $position | void', 'return_type': 'void'},
\     'serialize': { 'signature': 'void | string', 'return_type': 'string'},
\     'setFlags': { 'signature': 'string $flags | void', 'return_type': 'void'},
\     'uasort': { 'signature': 'callable $cmp_function | void', 'return_type': 'void'},
\     'uksort': { 'signature': 'callable $cmp_function | void', 'return_type': 'void'},
\     'unserialize': { 'signature': 'string $serialized | void', 'return_type': 'void'},
\     'valid': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'recursivecachingiterator': {
\   'name': 'RecursiveCachingIterator',
\   'constants': {
\     'CachingIterator::CALL_TOSTRING': '1',
\     'CachingIterator::CATCH_GET_CHILD': '16',
\     'CachingIterator::TOSTRING_USE_KEY': '2',
\     'CachingIterator::TOSTRING_USE_CURRENT': '4',
\     'CachingIterator::TOSTRING_USE_INNER': '8',
\     'CachingIterator::FULL_CACHE': '256',
\   },
\   'methods': {
\     '__construct': { 'signature': 'Iterator $iterator [, int $flags = self::CALL_TOSTRING]', 'return_type': ''},
\     'getChildren': { 'signature': 'void | RecursiveCachingIterator', 'return_type': 'RecursiveCachingIterator'},
\     'hasChildren': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'count': { 'signature': 'void | int', 'return_type': 'int'},
\     'current': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getCache': { 'signature': 'void | array', 'return_type': 'array'},
\     'getFlags': { 'signature': 'void | int', 'return_type': 'int'},
\     'getInnerIterator': { 'signature': 'void | Iterator', 'return_type': 'Iterator'},
\     'hasNext': { 'signature': 'void | void', 'return_type': 'void'},
\     'key': { 'signature': 'void | scalar', 'return_type': 'scalar'},
\     'next': { 'signature': 'void | void', 'return_type': 'void'},
\     'offsetExists': { 'signature': 'mixed $index | void', 'return_type': 'void'},
\     'offsetGet': { 'signature': 'string $index | void', 'return_type': 'void'},
\     'offsetSet': { 'signature': 'mixed $index, mixed $newval | void', 'return_type': 'void'},
\     'offsetUnset': { 'signature': 'string $index | void', 'return_type': 'void'},
\     'rewind': { 'signature': 'void | void', 'return_type': 'void'},
\     'setFlags': { 'signature': 'int $flags | void', 'return_type': 'void'},
\     '__toString': { 'signature': 'void | void', 'return_type': 'void'},
\     'valid': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'recursivecallbackfilteriterator': {
\   'name': 'RecursiveCallbackFilterIterator',
\   'methods': {
\     '__construct': { 'signature': 'RecursiveIterator $iterator, string $callback', 'return_type': ''},
\     'getChildren': { 'signature': 'void | RecursiveCallbackFilterIterator', 'return_type': 'RecursiveCallbackFilterIterator'},
\     'hasChildren': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'accept': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'recursivedirectoryiterator': {
\   'name': 'RecursiveDirectoryIterator',
\   'constants': {
\     'FilesystemIterator::CURRENT_AS_PATHNAME': '32',
\     'FilesystemIterator::CURRENT_AS_FILEINFO': '0',
\     'FilesystemIterator::CURRENT_AS_SELF': '16',
\     'FilesystemIterator::CURRENT_MODE_MASK': '240',
\     'FilesystemIterator::KEY_AS_PATHNAME': '0',
\     'FilesystemIterator::KEY_AS_FILENAME': '256',
\     'FilesystemIterator::FOLLOW_SYMLINKS': '512',
\     'FilesystemIterator::KEY_MODE_MASK': '3840',
\     'FilesystemIterator::NEW_CURRENT_AND_KEY': '256',
\     'FilesystemIterator::SKIP_DOTS': '4096',
\     'FilesystemIterator::UNIX_PATHS': '8192',
\   },
\   'methods': {
\     '__construct': { 'signature': 'string $path [, int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO | FilesystemIterator::SKIP_DOTS]', 'return_type': ''},
\     'getChildren': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getSubPath': { 'signature': 'void | string', 'return_type': 'string'},
\     'getSubPathname': { 'signature': 'void | string', 'return_type': 'string'},
\     'hasChildren': { 'signature': '[ bool $allow_links = FALSE] | bool', 'return_type': 'bool'},
\     'key': { 'signature': 'void | string', 'return_type': 'string'},
\     'next': { 'signature': 'void | void', 'return_type': 'void'},
\     'rewind': { 'signature': 'void | void', 'return_type': 'void'},
\     'current': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFlags': { 'signature': 'void | int', 'return_type': 'int'},
\     'setFlags': { 'signature': '[ int $flags] | void', 'return_type': 'void'},
\   },
\},
\'recursivefilteriterator': {
\   'name': 'RecursiveFilterIterator',
\   'methods': {
\     '__construct': { 'signature': 'Iterator $iterator', 'return_type': ''},
\     'getChildren': { 'signature': 'void | RecursiveFilterIterator', 'return_type': 'RecursiveFilterIterator'},
\     'hasChildren': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'accept': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'current': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getInnerIterator': { 'signature': 'void | Iterator', 'return_type': 'Iterator'},
\     'key': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'next': { 'signature': 'void | void', 'return_type': 'void'},
\     'rewind': { 'signature': 'void | void', 'return_type': 'void'},
\     'valid': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'recursiveiteratoriterator': {
\   'name': 'RecursiveIteratorIterator',
\   'constants': {
\     'LEAVES_ONLY': '0',
\     'SELF_FIRST': '1',
\     'CHILD_FIRST': '2',
\     'CATCH_GET_CHILD': '16',
\   },
\   'methods': {
\     'beginChildren': { 'signature': 'void | void', 'return_type': 'void'},
\     'beginIteration': { 'signature': 'void | void', 'return_type': 'void'},
\     'callGetChildren': { 'signature': 'void | RecursiveIterator', 'return_type': 'RecursiveIterator'},
\     'callHasChildren': { 'signature': 'void | bool', 'return_type': 'bool'},
\     '__construct': { 'signature': 'Traversable $iterator [, int $mode = RecursiveIteratorIterator::LEAVES_ONLY [, int $flags = 0]]', 'return_type': ''},
\     'current': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'endChildren': { 'signature': 'void | void', 'return_type': 'void'},
\     'endIteration': { 'signature': 'void | void', 'return_type': 'void'},
\     'getDepth': { 'signature': 'void | int', 'return_type': 'int'},
\     'getInnerIterator': { 'signature': 'void | Iterator', 'return_type': 'Iterator'},
\     'getMaxDepth': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getSubIterator': { 'signature': '[ int $level] | RecursiveIterator', 'return_type': 'RecursiveIterator'},
\     'key': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'next': { 'signature': 'void | void', 'return_type': 'void'},
\     'nextElement': { 'signature': 'void | void', 'return_type': 'void'},
\     'rewind': { 'signature': 'void | void', 'return_type': 'void'},
\     'setMaxDepth': { 'signature': '[ int $max_depth = -1] | void', 'return_type': 'void'},
\     'valid': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'recursiveregexiterator': {
\   'name': 'RecursiveRegexIterator',
\   'constants': {
\     'MATCH': '0',
\     'GET_MATCH': '1',
\     'ALL_MATCHES': '2',
\     'SPLIT': '3',
\     'REPLACE': '4',
\     'USE_KEY': '1',
\   },
\   'methods': {
\     '__construct': { 'signature': 'RecursiveIterator $iterator, string $regex [, int $mode = self::MATCH [, int $flags = 0 [, int $preg_flags = 0]]]', 'return_type': ''},
\     'getChildren': { 'signature': 'void | RecursiveIterator', 'return_type': 'RecursiveIterator'},
\     'hasChildren': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'accept': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getFlags': { 'signature': 'void | int', 'return_type': 'int'},
\     'getMode': { 'signature': 'void | int', 'return_type': 'int'},
\     'getPregFlags': { 'signature': 'void | int', 'return_type': 'int'},
\     'getRegex': { 'signature': 'void | string', 'return_type': 'string'},
\     'setFlags': { 'signature': 'int $flags | void', 'return_type': 'void'},
\     'setMode': { 'signature': 'int $mode | void', 'return_type': 'void'},
\     'setPregFlags': { 'signature': 'int $preg_flags | void', 'return_type': 'void'},
\   },
\},
\'recursivetreeiterator': {
\   'name': 'RecursiveTreeIterator',
\   'constants': {
\     'RecursiveIteratorIterator::LEAVES_ONLY': '0',
\     'RecursiveIteratorIterator::SELF_FIRST': '1',
\     'RecursiveIteratorIterator::CHILD_FIRST': '2',
\     'RecursiveIteratorIterator::CATCH_GET_CHILD': '16',
\     'BYPASS_CURRENT': '4',
\     'BYPASS_KEY': '8',
\     'PREFIX_LEFT': '0',
\     'PREFIX_MID_HAS_NEXT': '1',
\     'PREFIX_MID_LAST': '2',
\     'PREFIX_END_HAS_NEXT': '3',
\     'PREFIX_END_LAST': '4',
\     'PREFIX_RIGHT': '5',
\   },
\   'methods': {
\     'beginChildren': { 'signature': 'void | void', 'return_type': 'void'},
\     'beginIteration': { 'signature': 'void | void', 'return_type': 'void'},
\     'callGetChildren': { 'signature': 'void | RecursiveIterator', 'return_type': 'RecursiveIterator'},
\     'callHasChildren': { 'signature': 'void | bool', 'return_type': 'bool'},
\     '__construct': { 'signature': 'Traversable $iterator [, int $mode = RecursiveIteratorIterator::LEAVES_ONLY [, int $flags = 0]]', 'return_type': ''},
\     'current': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'endChildren': { 'signature': 'void | void', 'return_type': 'void'},
\     'endIteration': { 'signature': 'void | void', 'return_type': 'void'},
\     'getEntry': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPostfix': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrefix': { 'signature': 'void | string', 'return_type': 'string'},
\     'key': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'next': { 'signature': 'void | void', 'return_type': 'void'},
\     'nextElement': { 'signature': 'void | void', 'return_type': 'void'},
\     'rewind': { 'signature': 'void | void', 'return_type': 'void'},
\     'setPostfix': { 'signature': 'string $postfix | void', 'return_type': 'void'},
\     'setPrefixPart': { 'signature': 'int $part, string $value | void', 'return_type': 'void'},
\     'valid': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getDepth': { 'signature': 'void | int', 'return_type': 'int'},
\     'getInnerIterator': { 'signature': 'void | iterator', 'return_type': 'iterator'},
\     'getMaxDepth': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getSubIterator': { 'signature': '[ int $level] | RecursiveIterator', 'return_type': 'RecursiveIterator'},
\     'setMaxDepth': { 'signature': '[ int $max_depth = -1] | void', 'return_type': 'void'},
\   },
\},
\'regexiterator': {
\   'name': 'RegexIterator',
\   'constants': {
\     'MATCH': '0',
\     'GET_MATCH': '1',
\     'ALL_MATCHES': '2',
\     'SPLIT': '3',
\     'REPLACE': '4',
\     'USE_KEY': '1',
\   },
\   'methods': {
\     '__construct': { 'signature': 'Iterator $iterator', 'return_type': ''},
\     'accept': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getFlags': { 'signature': 'void | int', 'return_type': 'int'},
\     'getMode': { 'signature': 'void | int', 'return_type': 'int'},
\     'getPregFlags': { 'signature': 'void | int', 'return_type': 'int'},
\     'getRegex': { 'signature': 'void | string', 'return_type': 'string'},
\     'setFlags': { 'signature': 'int $flags | void', 'return_type': 'void'},
\     'setMode': { 'signature': 'int $mode | void', 'return_type': 'void'},
\     'setPregFlags': { 'signature': 'int $preg_flags | void', 'return_type': 'void'},
\     'current': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getInnerIterator': { 'signature': 'void | Iterator', 'return_type': 'Iterator'},
\     'key': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'next': { 'signature': 'void | void', 'return_type': 'void'},
\     'rewind': { 'signature': 'void | void', 'return_type': 'void'},
\     'valid': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'runtimeexception': {
\   'name': 'RuntimeException',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'spldoublylinkedlist': {
\   'name': 'SplDoublyLinkedList',
\   'constants': {
\     'IT_MODE_LIFO': '2',
\     'IT_MODE_FIFO': '0',
\     'IT_MODE_DELETE': '1',
\     'IT_MODE_KEEP': '0',
\   },
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'add': { 'signature': 'mixed $index, mixed $newval | void', 'return_type': 'void'},
\     'bottom': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'count': { 'signature': 'void | int', 'return_type': 'int'},
\     'current': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getIteratorMode': { 'signature': 'void | int', 'return_type': 'int'},
\     'isEmpty': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'key': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'next': { 'signature': 'void | void', 'return_type': 'void'},
\     'offsetExists': { 'signature': 'mixed $index | bool', 'return_type': 'bool'},
\     'offsetGet': { 'signature': 'mixed $index | mixed', 'return_type': 'mixed'},
\     'offsetSet': { 'signature': 'mixed $index, mixed $newval | void', 'return_type': 'void'},
\     'offsetUnset': { 'signature': 'mixed $index | void', 'return_type': 'void'},
\     'pop': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'prev': { 'signature': 'void | void', 'return_type': 'void'},
\     'push': { 'signature': 'mixed $value | void', 'return_type': 'void'},
\     'rewind': { 'signature': 'void | void', 'return_type': 'void'},
\     'serialize': { 'signature': 'void | string', 'return_type': 'string'},
\     'setIteratorMode': { 'signature': 'int $mode | void', 'return_type': 'void'},
\     'shift': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'top': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'unserialize': { 'signature': 'string $serialized | void', 'return_type': 'void'},
\     'unshift': { 'signature': 'mixed $value | void', 'return_type': 'void'},
\     'valid': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'splfileinfo': {
\   'name': 'SplFileInfo',
\   'methods': {
\     '__construct': { 'signature': 'string $file_name', 'return_type': ''},
\     'getATime': { 'signature': 'void | int', 'return_type': 'int'},
\     'getBasename': { 'signature': '[ string $suffix] | string', 'return_type': 'string'},
\     'getCTime': { 'signature': 'void | int', 'return_type': 'int'},
\     'getExtension': { 'signature': 'void | string', 'return_type': 'string'},
\     'getFileInfo': { 'signature': '[ string $class_name] | SplFileInfo', 'return_type': 'SplFileInfo'},
\     'getFilename': { 'signature': 'void | string', 'return_type': 'string'},
\     'getGroup': { 'signature': 'void | int', 'return_type': 'int'},
\     'getInode': { 'signature': 'void | int', 'return_type': 'int'},
\     'getLinkTarget': { 'signature': 'void | string', 'return_type': 'string'},
\     'getMTime': { 'signature': 'void | int', 'return_type': 'int'},
\     'getOwner': { 'signature': 'void | int', 'return_type': 'int'},
\     'getPath': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPathInfo': { 'signature': '[ string $class_name] | SplFileInfo', 'return_type': 'SplFileInfo'},
\     'getPathname': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPerms': { 'signature': 'void | int', 'return_type': 'int'},
\     'getRealPath': { 'signature': 'void | string', 'return_type': 'string'},
\     'getSize': { 'signature': 'void | int', 'return_type': 'int'},
\     'getType': { 'signature': 'void | string', 'return_type': 'string'},
\     'isDir': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isExecutable': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isFile': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isLink': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isReadable': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isWritable': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'openFile': { 'signature': '[ string $open_mode = "r" [, bool $use_include_path = FALSE [, resource $context = NULL]]] | SplFileObject', 'return_type': 'SplFileObject'},
\     'setFileClass': { 'signature': '[ string $class_name = "SplFileObject"] | void', 'return_type': 'void'},
\     'setInfoClass': { 'signature': '[ string $class_name = "SplFileInfo"] | void', 'return_type': 'void'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\   },
\},
\'splfileobject': {
\   'name': 'SplFileObject',
\   'constants': {
\     'DROP_NEW_LINE': '1',
\     'READ_AHEAD': '2',
\     'SKIP_EMPTY': '4',
\     'READ_CSV': '8',
\   },
\   'methods': {
\     '__construct': { 'signature': 'string $filename [, string $open_mode = "r" [, bool $use_include_path = FALSE [, resource $context]]]', 'return_type': ''},
\     'current': { 'signature': 'void | string|array', 'return_type': 'string|array'},
\     'eof': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'fflush': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'fgetc': { 'signature': 'void | string', 'return_type': 'string'},
\     'fgetcsv': { 'signature': '[ string $delimiter = "," [, string $enclosure = "\"" [, string $escape = "\\"]]] | array', 'return_type': 'array'},
\     'fgets': { 'signature': 'void | string', 'return_type': 'string'},
\     'fgetss': { 'signature': '[ string $allowable_tags] | string', 'return_type': 'string'},
\     'flock': { 'signature': 'int $operation [, int &$wouldblock] | bool', 'return_type': 'bool'},
\     'fpassthru': { 'signature': 'void | int', 'return_type': 'int'},
\     'fputcsv': { 'signature': 'array $fields [, string $delimiter = "," [, string $enclosure = ''"'' [, string $escape = "\\"]]] | int', 'return_type': 'int'},
\     'fread': { 'signature': 'int $length | string', 'return_type': 'string'},
\     'fscanf': { 'signature': 'string $format [, mixed &$...] | mixed', 'return_type': 'mixed'},
\     'fseek': { 'signature': 'int $offset [, int $whence = SEEK_SET] | int', 'return_type': 'int'},
\     'fstat': { 'signature': 'void | array', 'return_type': 'array'},
\     'ftell': { 'signature': 'void | int', 'return_type': 'int'},
\     'ftruncate': { 'signature': 'int $size | bool', 'return_type': 'bool'},
\     'fwrite': { 'signature': 'string $str [, int $length] | int', 'return_type': 'int'},
\     'getChildren': { 'signature': 'void | void', 'return_type': 'void'},
\     'getCsvControl': { 'signature': 'void | array', 'return_type': 'array'},
\     'getFlags': { 'signature': 'void | int', 'return_type': 'int'},
\     'getMaxLineLen': { 'signature': 'void | int', 'return_type': 'int'},
\     'hasChildren': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'key': { 'signature': 'void | int', 'return_type': 'int'},
\     'next': { 'signature': 'void | void', 'return_type': 'void'},
\     'rewind': { 'signature': 'void | void', 'return_type': 'void'},
\     'seek': { 'signature': 'int $line_pos | void', 'return_type': 'void'},
\     'setCsvControl': { 'signature': '[ string $delimiter = "," [, string $enclosure = "\"" [, string $escape = "\\"]]] | void', 'return_type': 'void'},
\     'setFlags': { 'signature': 'int $flags | void', 'return_type': 'void'},
\     'setMaxLineLen': { 'signature': 'int $max_len | void', 'return_type': 'void'},
\     'valid': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getATime': { 'signature': 'void | int', 'return_type': 'int'},
\     'getBasename': { 'signature': '[ string $suffix] | string', 'return_type': 'string'},
\     'getCTime': { 'signature': 'void | int', 'return_type': 'int'},
\     'getExtension': { 'signature': 'void | string', 'return_type': 'string'},
\     'getFileInfo': { 'signature': '[ string $class_name] | SplFileInfo', 'return_type': 'SplFileInfo'},
\     'getFilename': { 'signature': 'void | string', 'return_type': 'string'},
\     'getGroup': { 'signature': 'void | int', 'return_type': 'int'},
\     'getInode': { 'signature': 'void | int', 'return_type': 'int'},
\     'getLinkTarget': { 'signature': 'void | string', 'return_type': 'string'},
\     'getMTime': { 'signature': 'void | int', 'return_type': 'int'},
\     'getOwner': { 'signature': 'void | int', 'return_type': 'int'},
\     'getPath': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPathInfo': { 'signature': '[ string $class_name] | SplFileInfo', 'return_type': 'SplFileInfo'},
\     'getPathname': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPerms': { 'signature': 'void | int', 'return_type': 'int'},
\     'getRealPath': { 'signature': 'void | string', 'return_type': 'string'},
\     'getSize': { 'signature': 'void | int', 'return_type': 'int'},
\     'getType': { 'signature': 'void | string', 'return_type': 'string'},
\     'isDir': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isExecutable': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isFile': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isLink': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isReadable': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isWritable': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'openFile': { 'signature': '[ string $open_mode = "r" [, bool $use_include_path = FALSE [, resource $context = NULL]]] | SplFileObject', 'return_type': 'SplFileObject'},
\     'setFileClass': { 'signature': '[ string $class_name = "SplFileObject"] | void', 'return_type': 'void'},
\     'setInfoClass': { 'signature': '[ string $class_name = "SplFileInfo"] | void', 'return_type': 'void'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\   },
\},
\'splfixedarray': {
\   'name': 'SplFixedArray',
\   'methods': {
\     '__construct': { 'signature': '[ int $size = 0]', 'return_type': ''},
\     'count': { 'signature': 'void | int', 'return_type': 'int'},
\     'current': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getSize': { 'signature': 'void | int', 'return_type': 'int'},
\     'key': { 'signature': 'void | int', 'return_type': 'int'},
\     'next': { 'signature': 'void | void', 'return_type': 'void'},
\     'offsetExists': { 'signature': 'int $index | bool', 'return_type': 'bool'},
\     'offsetGet': { 'signature': 'int $index | mixed', 'return_type': 'mixed'},
\     'offsetSet': { 'signature': 'int $index, mixed $newval | void', 'return_type': 'void'},
\     'offsetUnset': { 'signature': 'int $index | void', 'return_type': 'void'},
\     'rewind': { 'signature': 'void | void', 'return_type': 'void'},
\     'setSize': { 'signature': 'int $size | bool', 'return_type': 'bool'},
\     'toArray': { 'signature': 'void | array', 'return_type': 'array'},
\     'valid': { 'signature': 'void | bool', 'return_type': 'bool'},
\     '__wakeup': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\   'static_methods': {
\     'fromArray': { 'signature': 'array $array [, bool $save_indexes = TRUE] | SplFixedArray', 'return_type': 'SplFixedArray'},
\   },
\},
\'splheap': {
\   'name': 'SplHeap',
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'compare': { 'signature': 'mixed $value1, mixed $value2 | int', 'return_type': 'int'},
\     'count': { 'signature': 'void | int', 'return_type': 'int'},
\     'current': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'extract': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'insert': { 'signature': 'mixed $value | void', 'return_type': 'void'},
\     'isCorrupted': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isEmpty': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'key': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'next': { 'signature': 'void | void', 'return_type': 'void'},
\     'recoverFromCorruption': { 'signature': 'void | void', 'return_type': 'void'},
\     'rewind': { 'signature': 'void | void', 'return_type': 'void'},
\     'top': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'valid': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'splmaxheap': {
\   'name': 'SplMaxHeap',
\   'methods': {
\     'compare': { 'signature': 'mixed $value1, mixed $value2 | int', 'return_type': 'int'},
\     'count': { 'signature': 'void | int', 'return_type': 'int'},
\     'current': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'extract': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'insert': { 'signature': 'mixed $value | void', 'return_type': 'void'},
\     'isCorrupted': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isEmpty': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'key': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'next': { 'signature': 'void | void', 'return_type': 'void'},
\     'recoverFromCorruption': { 'signature': 'void | void', 'return_type': 'void'},
\     'rewind': { 'signature': 'void | void', 'return_type': 'void'},
\     'top': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'valid': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'splminheap': {
\   'name': 'SplMinHeap',
\   'methods': {
\     'compare': { 'signature': 'mixed $value1, mixed $value2 | int', 'return_type': 'int'},
\     'count': { 'signature': 'void | int', 'return_type': 'int'},
\     'current': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'extract': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'insert': { 'signature': 'mixed $value | void', 'return_type': 'void'},
\     'isCorrupted': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isEmpty': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'key': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'next': { 'signature': 'void | void', 'return_type': 'void'},
\     'recoverFromCorruption': { 'signature': 'void | void', 'return_type': 'void'},
\     'rewind': { 'signature': 'void | void', 'return_type': 'void'},
\     'top': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'valid': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'splobjectstorage': {
\   'name': 'SplObjectStorage',
\   'methods': {
\     'addAll': { 'signature': 'SplObjectStorage $storage | void', 'return_type': 'void'},
\     'attach': { 'signature': 'object $object [, mixed $data = NULL] | void', 'return_type': 'void'},
\     'contains': { 'signature': 'object $object | bool', 'return_type': 'bool'},
\     'count': { 'signature': 'void | int', 'return_type': 'int'},
\     'current': { 'signature': 'void | object', 'return_type': 'object'},
\     'detach': { 'signature': 'object $object | void', 'return_type': 'void'},
\     'getHash': { 'signature': 'object $object | string', 'return_type': 'string'},
\     'getInfo': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'key': { 'signature': 'void | int', 'return_type': 'int'},
\     'next': { 'signature': 'void | void', 'return_type': 'void'},
\     'offsetExists': { 'signature': 'object $object | bool', 'return_type': 'bool'},
\     'offsetGet': { 'signature': 'object $object | mixed', 'return_type': 'mixed'},
\     'offsetSet': { 'signature': 'object $object [, mixed $data = NULL] | void', 'return_type': 'void'},
\     'offsetUnset': { 'signature': 'object $object | void', 'return_type': 'void'},
\     'removeAll': { 'signature': 'SplObjectStorage $storage | void', 'return_type': 'void'},
\     'removeAllExcept': { 'signature': 'SplObjectStorage $storage | void', 'return_type': 'void'},
\     'rewind': { 'signature': 'void | void', 'return_type': 'void'},
\     'serialize': { 'signature': 'void | string', 'return_type': 'string'},
\     'setInfo': { 'signature': 'mixed $data | void', 'return_type': 'void'},
\     'unserialize': { 'signature': 'string $serialized | void', 'return_type': 'void'},
\     'valid': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'splpriorityqueue': {
\   'name': 'SplPriorityQueue',
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'compare': { 'signature': 'mixed $priority1, mixed $priority2 | int', 'return_type': 'int'},
\     'count': { 'signature': 'void | int', 'return_type': 'int'},
\     'current': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'extract': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getExtractFlags': { 'signature': 'void | int', 'return_type': 'int'},
\     'insert': { 'signature': 'mixed $value, mixed $priority | bool', 'return_type': 'bool'},
\     'isCorrupted': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isEmpty': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'key': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'next': { 'signature': 'void | void', 'return_type': 'void'},
\     'recoverFromCorruption': { 'signature': 'void | void', 'return_type': 'void'},
\     'rewind': { 'signature': 'void | void', 'return_type': 'void'},
\     'setExtractFlags': { 'signature': 'int $flags | void', 'return_type': 'void'},
\     'top': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'valid': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'splqueue': {
\   'name': 'SplQueue',
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'dequeue': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'enqueue': { 'signature': 'mixed $value | void', 'return_type': 'void'},
\     'setIteratorMode': { 'signature': 'int $mode | void', 'return_type': 'void'},
\     'add': { 'signature': 'mixed $index, mixed $newval | void', 'return_type': 'void'},
\     'bottom': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'count': { 'signature': 'void | int', 'return_type': 'int'},
\     'current': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getIteratorMode': { 'signature': 'void | int', 'return_type': 'int'},
\     'isEmpty': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'key': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'next': { 'signature': 'void | void', 'return_type': 'void'},
\     'offsetExists': { 'signature': 'mixed $index | bool', 'return_type': 'bool'},
\     'offsetGet': { 'signature': 'mixed $index | mixed', 'return_type': 'mixed'},
\     'offsetSet': { 'signature': 'mixed $index, mixed $newval | void', 'return_type': 'void'},
\     'offsetUnset': { 'signature': 'mixed $index | void', 'return_type': 'void'},
\     'pop': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'prev': { 'signature': 'void | void', 'return_type': 'void'},
\     'push': { 'signature': 'mixed $value | void', 'return_type': 'void'},
\     'rewind': { 'signature': 'void | void', 'return_type': 'void'},
\     'serialize': { 'signature': 'void | string', 'return_type': 'string'},
\     'shift': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'top': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'unserialize': { 'signature': 'string $serialized | void', 'return_type': 'void'},
\     'unshift': { 'signature': 'mixed $value | void', 'return_type': 'void'},
\     'valid': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'splstack': {
\   'name': 'SplStack',
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'setIteratorMode': { 'signature': 'int $mode | void', 'return_type': 'void'},
\     'add': { 'signature': 'mixed $index, mixed $newval | void', 'return_type': 'void'},
\     'bottom': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'count': { 'signature': 'void | int', 'return_type': 'int'},
\     'current': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getIteratorMode': { 'signature': 'void | int', 'return_type': 'int'},
\     'isEmpty': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'key': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'next': { 'signature': 'void | void', 'return_type': 'void'},
\     'offsetExists': { 'signature': 'mixed $index | bool', 'return_type': 'bool'},
\     'offsetGet': { 'signature': 'mixed $index | mixed', 'return_type': 'mixed'},
\     'offsetSet': { 'signature': 'mixed $index, mixed $newval | void', 'return_type': 'void'},
\     'offsetUnset': { 'signature': 'mixed $index | void', 'return_type': 'void'},
\     'pop': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'prev': { 'signature': 'void | void', 'return_type': 'void'},
\     'push': { 'signature': 'mixed $value | void', 'return_type': 'void'},
\     'rewind': { 'signature': 'void | void', 'return_type': 'void'},
\     'serialize': { 'signature': 'void | string', 'return_type': 'string'},
\     'shift': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'top': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'unserialize': { 'signature': 'string $serialized | void', 'return_type': 'void'},
\     'unshift': { 'signature': 'mixed $value | void', 'return_type': 'void'},
\     'valid': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'spltempfileobject': {
\   'name': 'SplTempFileObject',
\   'constants': {
\     'SplFileObject::DROP_NEW_LINE': '1',
\     'SplFileObject::READ_AHEAD': '2',
\     'SplFileObject::SKIP_EMPTY': '4',
\     'SplFileObject::READ_CSV': '8',
\   },
\   'methods': {
\     '__construct': { 'signature': '[ int $max_memory]', 'return_type': ''},
\     'current': { 'signature': 'void | string|array', 'return_type': 'string|array'},
\     'eof': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'fflush': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'fgetc': { 'signature': 'void | string', 'return_type': 'string'},
\     'fgetcsv': { 'signature': '[ string $delimiter = "," [, string $enclosure = "\"" [, string $escape = "\\"]]] | array', 'return_type': 'array'},
\     'fgets': { 'signature': 'void | string', 'return_type': 'string'},
\     'fgetss': { 'signature': '[ string $allowable_tags] | string', 'return_type': 'string'},
\     'flock': { 'signature': 'int $operation [, int &$wouldblock] | bool', 'return_type': 'bool'},
\     'fpassthru': { 'signature': 'void | int', 'return_type': 'int'},
\     'fputcsv': { 'signature': 'array $fields [, string $delimiter = "," [, string $enclosure = ''"'' [, string $escape = "\\"]]] | int', 'return_type': 'int'},
\     'fread': { 'signature': 'int $length | string', 'return_type': 'string'},
\     'fscanf': { 'signature': 'string $format [, mixed &$...] | mixed', 'return_type': 'mixed'},
\     'fseek': { 'signature': 'int $offset [, int $whence = SEEK_SET] | int', 'return_type': 'int'},
\     'fstat': { 'signature': 'void | array', 'return_type': 'array'},
\     'ftell': { 'signature': 'void | int', 'return_type': 'int'},
\     'ftruncate': { 'signature': 'int $size | bool', 'return_type': 'bool'},
\     'fwrite': { 'signature': 'string $str [, int $length] | int', 'return_type': 'int'},
\     'getChildren': { 'signature': 'void | void', 'return_type': 'void'},
\     'getCsvControl': { 'signature': 'void | array', 'return_type': 'array'},
\     'getFlags': { 'signature': 'void | int', 'return_type': 'int'},
\     'getMaxLineLen': { 'signature': 'void | int', 'return_type': 'int'},
\     'hasChildren': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'key': { 'signature': 'void | int', 'return_type': 'int'},
\     'next': { 'signature': 'void | void', 'return_type': 'void'},
\     'rewind': { 'signature': 'void | void', 'return_type': 'void'},
\     'seek': { 'signature': 'int $line_pos | void', 'return_type': 'void'},
\     'setCsvControl': { 'signature': '[ string $delimiter = "," [, string $enclosure = "\"" [, string $escape = "\\"]]] | void', 'return_type': 'void'},
\     'setFlags': { 'signature': 'int $flags | void', 'return_type': 'void'},
\     'setMaxLineLen': { 'signature': 'int $max_len | void', 'return_type': 'void'},
\     'valid': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'underflowexception': {
\   'name': 'UnderflowException',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'unexpectedvalueexception': {
\   'name': 'UnexpectedValueException',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['predefined_exceptions'] = {
\'argumentcounterror': {
\   'name': 'ArgumentCountError',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'arithmeticerror': {
\   'name': 'ArithmeticError',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'assertionerror': {
\   'name': 'AssertionError',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'compileerror': {
\   'name': 'CompileError',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'divisionbyzeroerror': {
\   'name': 'DivisionByZeroError',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'error': {
\   'name': 'Error',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     '__construct': { 'signature': '[ string $message = "" [, int $code = 0 [, Throwable $previous = NULL]]]', 'return_type': ''},
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'errorexception': {
\   'name': 'ErrorException',
\   'properties': {
\     'severity': { 'initializer': '', 'type': 'int'},
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     '__construct': { 'signature': '[ string $message = "" [, int $code = 0 [, int $severity = E_ERROR [, string $filename = __FILE__ [, int $lineno = __LINE__ [, Exception $previous = NULL]]]]]]', 'return_type': ''},
\     'getSeverity': { 'signature': 'void | int', 'return_type': 'int'},
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'exception': {
\   'name': 'Exception',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     '__construct': { 'signature': '[ string $message = "" [, int $code = 0 [, Throwable $previous = NULL]]]', 'return_type': ''},
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'parseerror': {
\   'name': 'ParseError',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'typeerror': {
\   'name': 'TypeError',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['cairo'] = {
\'cairo': {
\   'name': 'Cairo',
\   'static_methods': {
\     'availableFonts': { 'signature': 'void | array', 'return_type': 'array'},
\     'availableSurfaces': { 'signature': 'void | array', 'return_type': 'array'},
\     'statusToString': { 'signature': 'int $status | string', 'return_type': 'string'},
\     'version': { 'signature': 'void | int', 'return_type': 'int'},
\     'versionString': { 'signature': 'void | string', 'return_type': 'string'},
\   },
\},
\'cairoantialias': {
\   'name': 'CairoAntialias',
\   'constants': {
\     'MODE_DEFAULT': '0',
\     'MODE_NONE': '1',
\     'MODE_GRAY': '2',
\     'MODE_SUBPIXEL': '3',
\   },
\},
\'cairocontent': {
\   'name': 'CairoContent',
\   'constants': {
\     'COLOR': '4096',
\     'ALPHA': '8192',
\     'COLOR_ALPHA': '12288',
\   },
\},
\'cairocontext': {
\   'name': 'CairoContext',
\   'methods': {
\     'appendPath': { 'signature': 'CairoPath $path | void', 'return_type': 'void'},
\     'arc': { 'signature': 'float $x, float $y, float $radius, float $angle1, float $angle2 | void', 'return_type': 'void'},
\     'arcNegative': { 'signature': 'float $x, float $y, float $radius, float $angle1, float $angle2 | void', 'return_type': 'void'},
\     'clip': { 'signature': 'void | void', 'return_type': 'void'},
\     'clipExtents': { 'signature': 'void | array', 'return_type': 'array'},
\     'clipPreserve': { 'signature': 'void | void', 'return_type': 'void'},
\     'clipRectangleList': { 'signature': 'void | array', 'return_type': 'array'},
\     'closePath': { 'signature': 'void | void', 'return_type': 'void'},
\     '__construct': { 'signature': 'CairoSurface $surface', 'return_type': ''},
\     'copyPage': { 'signature': 'void | void', 'return_type': 'void'},
\     'copyPath': { 'signature': 'void | CairoPath', 'return_type': 'CairoPath'},
\     'copyPathFlat': { 'signature': 'void | CairoPath', 'return_type': 'CairoPath'},
\     'curveTo': { 'signature': 'float $x1, float $y1, float $x2, float $y2, float $x3, float $y3 | void', 'return_type': 'void'},
\     'deviceToUser': { 'signature': 'float $x, float $y | array', 'return_type': 'array'},
\     'deviceToUserDistance': { 'signature': 'float $x, float $y | array', 'return_type': 'array'},
\     'fill': { 'signature': 'void | void', 'return_type': 'void'},
\     'fillExtents': { 'signature': 'void | array', 'return_type': 'array'},
\     'fillPreserve': { 'signature': 'void | void', 'return_type': 'void'},
\     'fontExtents': { 'signature': 'void | array', 'return_type': 'array'},
\     'getAntialias': { 'signature': 'void | int', 'return_type': 'int'},
\     'getCurrentPoint': { 'signature': 'void | array', 'return_type': 'array'},
\     'getDash': { 'signature': 'void | array', 'return_type': 'array'},
\     'getDashCount': { 'signature': 'void | int', 'return_type': 'int'},
\     'getFillRule': { 'signature': 'void | int', 'return_type': 'int'},
\     'getFontFace': { 'signature': 'void | void', 'return_type': 'void'},
\     'getFontMatrix': { 'signature': 'void | void', 'return_type': 'void'},
\     'getFontOptions': { 'signature': 'void | void', 'return_type': 'void'},
\     'getGroupTarget': { 'signature': 'void | void', 'return_type': 'void'},
\     'getLineCap': { 'signature': 'void | int', 'return_type': 'int'},
\     'getLineJoin': { 'signature': 'void | int', 'return_type': 'int'},
\     'getLineWidth': { 'signature': 'void | float', 'return_type': 'float'},
\     'getMatrix': { 'signature': 'void | void', 'return_type': 'void'},
\     'getMiterLimit': { 'signature': 'void | float', 'return_type': 'float'},
\     'getOperator': { 'signature': 'void | int', 'return_type': 'int'},
\     'getScaledFont': { 'signature': 'void | void', 'return_type': 'void'},
\     'getSource': { 'signature': 'void | void', 'return_type': 'void'},
\     'getTarget': { 'signature': 'void | void', 'return_type': 'void'},
\     'getTolerance': { 'signature': 'void | float', 'return_type': 'float'},
\     'glyphPath': { 'signature': 'array $glyphs | void', 'return_type': 'void'},
\     'hasCurrentPoint': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'identityMatrix': { 'signature': 'void | void', 'return_type': 'void'},
\     'inFill': { 'signature': 'float $x, float $y | bool', 'return_type': 'bool'},
\     'inStroke': { 'signature': 'float $x, float $y | bool', 'return_type': 'bool'},
\     'lineTo': { 'signature': 'float $x, float $y | void', 'return_type': 'void'},
\     'mask': { 'signature': 'CairoPattern $pattern | void', 'return_type': 'void'},
\     'maskSurface': { 'signature': 'CairoSurface $surface [, float $x [, float $y]] | void', 'return_type': 'void'},
\     'moveTo': { 'signature': 'float $x, float $y | void', 'return_type': 'void'},
\     'newPath': { 'signature': 'void | void', 'return_type': 'void'},
\     'newSubPath': { 'signature': 'void | void', 'return_type': 'void'},
\     'paint': { 'signature': 'void | void', 'return_type': 'void'},
\     'paintWithAlpha': { 'signature': 'float $alpha | void', 'return_type': 'void'},
\     'pathExtents': { 'signature': 'void | array', 'return_type': 'array'},
\     'popGroup': { 'signature': 'void | void', 'return_type': 'void'},
\     'popGroupToSource': { 'signature': 'void | void', 'return_type': 'void'},
\     'pushGroup': { 'signature': 'void | void', 'return_type': 'void'},
\     'pushGroupWithContent': { 'signature': 'int $content | void', 'return_type': 'void'},
\     'rectangle': { 'signature': 'float $x, float $y, float $width, float $height | void', 'return_type': 'void'},
\     'relCurveTo': { 'signature': 'float $x1, float $y1, float $x2, float $y2, float $x3, float $y3 | void', 'return_type': 'void'},
\     'relLineTo': { 'signature': 'float $x, float $y | void', 'return_type': 'void'},
\     'relMoveTo': { 'signature': 'float $x, float $y | void', 'return_type': 'void'},
\     'resetClip': { 'signature': 'void | void', 'return_type': 'void'},
\     'restore': { 'signature': 'void | void', 'return_type': 'void'},
\     'rotate': { 'signature': 'float $angle | void', 'return_type': 'void'},
\     'save': { 'signature': 'void | void', 'return_type': 'void'},
\     'scale': { 'signature': 'float $x, float $y | void', 'return_type': 'void'},
\     'selectFontFace': { 'signature': 'string $family [, int $slant [, int $weight]] | void', 'return_type': 'void'},
\     'setAntialias': { 'signature': '[ int $antialias] | void', 'return_type': 'void'},
\     'setDash': { 'signature': 'array $dashes [, float $offset] | void', 'return_type': 'void'},
\     'setFillRule': { 'signature': 'int $setting | void', 'return_type': 'void'},
\     'setFontFace': { 'signature': 'CairoFontFace $fontface | void', 'return_type': 'void'},
\     'setFontMatrix': { 'signature': 'CairoMatrix $matrix | void', 'return_type': 'void'},
\     'setFontOptions': { 'signature': 'CairoFontOptions $fontoptions | void', 'return_type': 'void'},
\     'setFontSize': { 'signature': 'float $size | void', 'return_type': 'void'},
\     'setLineCap': { 'signature': 'int $setting | void', 'return_type': 'void'},
\     'setLineJoin': { 'signature': 'int $setting | void', 'return_type': 'void'},
\     'setLineWidth': { 'signature': 'float $width | void', 'return_type': 'void'},
\     'setMatrix': { 'signature': 'CairoMatrix $matrix | void', 'return_type': 'void'},
\     'setMiterLimit': { 'signature': 'float $limit | void', 'return_type': 'void'},
\     'setOperator': { 'signature': 'int $setting | void', 'return_type': 'void'},
\     'setScaledFont': { 'signature': 'CairoScaledFont $scaledfont | void', 'return_type': 'void'},
\     'setSource': { 'signature': 'CairoPattern $pattern | void', 'return_type': 'void'},
\     'setSourceRGB': { 'signature': 'float $red, float $green, float $blue | void', 'return_type': 'void'},
\     'setSourceRGBA': { 'signature': 'float $red, float $green, float $blue, float $alpha | void', 'return_type': 'void'},
\     'setSourceSurface': { 'signature': 'CairoSurface $surface [, float $x [, float $y]] | void', 'return_type': 'void'},
\     'setTolerance': { 'signature': 'float $tolerance | void', 'return_type': 'void'},
\     'showPage': { 'signature': 'void | void', 'return_type': 'void'},
\     'showText': { 'signature': 'string $text | void', 'return_type': 'void'},
\     'status': { 'signature': 'void | int', 'return_type': 'int'},
\     'stroke': { 'signature': 'void | void', 'return_type': 'void'},
\     'strokeExtents': { 'signature': 'void | array', 'return_type': 'array'},
\     'strokePreserve': { 'signature': 'void | void', 'return_type': 'void'},
\     'textExtents': { 'signature': 'string $text | array', 'return_type': 'array'},
\     'textPath': { 'signature': 'string $string | void', 'return_type': 'void'},
\     'transform': { 'signature': 'CairoMatrix $matrix | void', 'return_type': 'void'},
\     'translate': { 'signature': 'float $x, float $y | void', 'return_type': 'void'},
\     'userToDevice': { 'signature': 'float $x, float $y | array', 'return_type': 'array'},
\     'userToDeviceDistance': { 'signature': 'float $x, float $y | array', 'return_type': 'array'},
\   },
\},
\'cairoexception': {
\   'name': 'CairoException',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'cairoextend': {
\   'name': 'CairoExtend',
\   'constants': {
\     'NONE': '0',
\     'REPEAT': '1',
\     'REFLECT': '2',
\     'PAD': '3',
\   },
\},
\'cairofillrule': {
\   'name': 'CairoFillRule',
\   'constants': {
\     'WINDING': '0',
\     'EVEN_ODD': '1',
\   },
\},
\'cairofilter': {
\   'name': 'CairoFilter',
\   'constants': {
\     'FAST': '0',
\     'GOOD': '1',
\     'BEST': '2',
\     'NEAREST': '3',
\     'BILINEAR': '4',
\     'GAUSSIAN': '5',
\   },
\},
\'cairofontface': {
\   'name': 'CairoFontFace',
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'getType': { 'signature': 'void | int', 'return_type': 'int'},
\     'status': { 'signature': 'void | int', 'return_type': 'int'},
\   },
\},
\'cairofontoptions': {
\   'name': 'CairoFontOptions',
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'equal': { 'signature': 'CairoFontOptions $other | bool', 'return_type': 'bool'},
\     'getAntialias': { 'signature': 'void | int', 'return_type': 'int'},
\     'getHintMetrics': { 'signature': 'void | int', 'return_type': 'int'},
\     'getHintStyle': { 'signature': 'void | int', 'return_type': 'int'},
\     'getSubpixelOrder': { 'signature': 'void | int', 'return_type': 'int'},
\     'hash': { 'signature': 'void | int', 'return_type': 'int'},
\     'merge': { 'signature': 'CairoFontOptions $other | void', 'return_type': 'void'},
\     'setAntialias': { 'signature': 'int $antialias | void', 'return_type': 'void'},
\     'setHintMetrics': { 'signature': 'int $hint_metrics | void', 'return_type': 'void'},
\     'setHintStyle': { 'signature': 'int $hint_style | void', 'return_type': 'void'},
\     'setSubpixelOrder': { 'signature': 'int $subpixel_order | void', 'return_type': 'void'},
\     'status': { 'signature': 'void | int', 'return_type': 'int'},
\   },
\},
\'cairofontslant': {
\   'name': 'CairoFontSlant',
\   'constants': {
\     'NORMAL': '0',
\     'ITALIC': '1',
\     'OBLIQUE': '2',
\   },
\},
\'cairofonttype': {
\   'name': 'CairoFontType',
\   'constants': {
\     'TOY': '0',
\     'FT': '1',
\     'WIN32': '2',
\     'QUARTZ': '3',
\   },
\},
\'cairofontweight': {
\   'name': 'CairoFontWeight',
\   'constants': {
\     'NORMAL': '0',
\     'BOLD': '1',
\   },
\},
\'cairoformat': {
\   'name': 'CairoFormat',
\   'constants': {
\     'ARGB32': '0',
\     'RGB24': '1',
\     'A8': '2',
\     'A1': '3',
\   },
\   'static_methods': {
\     'strideForWidth': { 'signature': 'int $format, int $width | int', 'return_type': 'int'},
\   },
\},
\'cairogradientpattern': {
\   'name': 'CairoGradientPattern',
\   'methods': {
\     'addColorStopRgb': { 'signature': 'float $offset, float $red, float $green, float $blue | void', 'return_type': 'void'},
\     'addColorStopRgba': { 'signature': 'float $offset, float $red, float $green, float $blue, float $alpha | void', 'return_type': 'void'},
\     'getColorStopCount': { 'signature': 'void | int', 'return_type': 'int'},
\     'getColorStopRgba': { 'signature': 'int $index | array', 'return_type': 'array'},
\     'getExtend': { 'signature': 'void | int', 'return_type': 'int'},
\     'setExtend': { 'signature': 'int $extend | void', 'return_type': 'void'},
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'getMatrix': { 'signature': 'void | void', 'return_type': 'void'},
\     'getType': { 'signature': 'void | int', 'return_type': 'int'},
\     'setMatrix': { 'signature': 'CairoMatrix $matrix | void', 'return_type': 'void'},
\     'status': { 'signature': 'void | int', 'return_type': 'int'},
\   },
\},
\'cairohintmetrics': {
\   'name': 'CairoHintMetrics',
\   'constants': {
\     'METRICS_DEFAULT': '0',
\     'METRICS_OFF': '1',
\     'METRICS_ON': '2',
\   },
\},
\'cairohintstyle': {
\   'name': 'CairoHintStyle',
\   'constants': {
\     'STYLE_DEFAULT': '0',
\     'STYLE_NONE': '1',
\     'STYLE_SLIGHT': '2',
\     'STYLE_MEDIUM': '3',
\     'STYLE_FULL': '4',
\   },
\},
\'cairoimagesurface': {
\   'name': 'CairoImageSurface',
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'getData': { 'signature': 'void | string', 'return_type': 'string'},
\     'getFormat': { 'signature': 'void | int', 'return_type': 'int'},
\     'getHeight': { 'signature': 'void | int', 'return_type': 'int'},
\     'getStride': { 'signature': 'void | int', 'return_type': 'int'},
\     'getWidth': { 'signature': 'void | int', 'return_type': 'int'},
\     'copyPage': { 'signature': 'void | void', 'return_type': 'void'},
\     'createSimilar': { 'signature': 'CairoSurface $other, int $content, string $width, string $height | void', 'return_type': 'void'},
\     'finish': { 'signature': 'void | void', 'return_type': 'void'},
\     'flush': { 'signature': 'void | void', 'return_type': 'void'},
\     'getContent': { 'signature': 'void | int', 'return_type': 'int'},
\     'getDeviceOffset': { 'signature': 'void | array', 'return_type': 'array'},
\     'getFontOptions': { 'signature': 'void | void', 'return_type': 'void'},
\     'getType': { 'signature': 'void | int', 'return_type': 'int'},
\     'markDirty': { 'signature': 'void | void', 'return_type': 'void'},
\     'markDirtyRectangle': { 'signature': 'float $x, float $y, float $width, float $height | void', 'return_type': 'void'},
\     'setDeviceOffset': { 'signature': 'float $x, float $y | void', 'return_type': 'void'},
\     'setFallbackResolution': { 'signature': 'float $x, float $y | void', 'return_type': 'void'},
\     'showPage': { 'signature': 'void | void', 'return_type': 'void'},
\     'status': { 'signature': 'void | int', 'return_type': 'int'},
\     'writeToPng': { 'signature': 'string $file | void', 'return_type': 'void'},
\   },
\   'static_methods': {
\     'createForData': { 'signature': 'string $data, int $format, int $width, int $height | void', 'return_type': 'void'},
\     'createFromPng': { 'signature': 'string $file | CairoImageSurface', 'return_type': 'CairoImageSurface'},
\   },
\},
\'cairolineargradient': {
\   'name': 'CairoLinearGradient',
\   'methods': {
\     '__construct': { 'signature': 'float $x0, float $y0, float $x1, float $y1', 'return_type': ''},
\     'getPoints': { 'signature': 'void | array', 'return_type': 'array'},
\     'addColorStopRgb': { 'signature': 'float $offset, float $red, float $green, float $blue | void', 'return_type': 'void'},
\     'addColorStopRgba': { 'signature': 'float $offset, float $red, float $green, float $blue, float $alpha | void', 'return_type': 'void'},
\     'getColorStopCount': { 'signature': 'void | int', 'return_type': 'int'},
\     'getColorStopRgba': { 'signature': 'int $index | array', 'return_type': 'array'},
\     'getExtend': { 'signature': 'void | int', 'return_type': 'int'},
\     'setExtend': { 'signature': 'int $extend | void', 'return_type': 'void'},
\   },
\},
\'cairolinecap': {
\   'name': 'CairoLineCap',
\   'constants': {
\     'BUTT': '0',
\     'ROUND': '1',
\     'SQUARE': '2',
\   },
\},
\'cairolinejoin': {
\   'name': 'CairoLineJoin',
\   'constants': {
\     'MITER': '0',
\     'ROUND': '1',
\     'BEVEL': '2',
\   },
\},
\'cairomatrix': {
\   'name': 'CairoMatrix',
\   'methods': {
\     '__construct': { 'signature': '[ float $xx = 1.0 [, float $yx = 0.0 [, float $xy = 0.0 [, float $yy = 1.0 [, float $x0 = 0.0 [, float $y0 = 0.0]]]]]]', 'return_type': ''},
\     'invert': { 'signature': 'void | void', 'return_type': 'void'},
\     'rotate': { 'signature': 'float $radians | void', 'return_type': 'void'},
\     'scale': { 'signature': 'float $sx, float $sy | void', 'return_type': 'void'},
\     'transformDistance': { 'signature': 'float $dx, float $dy | array', 'return_type': 'array'},
\     'transformPoint': { 'signature': 'float $dx, float $dy | array', 'return_type': 'array'},
\     'translate': { 'signature': 'float $tx, float $ty | void', 'return_type': 'void'},
\   },
\   'static_methods': {
\     'initIdentity': { 'signature': 'void | void', 'return_type': 'void'},
\     'initRotate': { 'signature': 'float $radians | void', 'return_type': 'void'},
\     'initScale': { 'signature': 'float $sx, float $sy | void', 'return_type': 'void'},
\     'initTranslate': { 'signature': 'float $tx, float $ty | void', 'return_type': 'void'},
\     'multiply': { 'signature': 'CairoMatrix $matrix1, CairoMatrix $matrix2 | CairoMatrix', 'return_type': 'CairoMatrix'},
\   },
\},
\'cairooperator': {
\   'name': 'CairoOperator',
\   'constants': {
\     'CLEAR': '0',
\     'SOURCE': '1',
\     'OVER': '2',
\     'IN': '3',
\     'OUT': '4',
\     'ATOP': '5',
\     'DEST': '6',
\     'DEST_OVER': '7',
\     'DEST_IN': '8',
\     'DEST_OUT': '9',
\     'DEST_ATOP': '10',
\     'XOR': '11',
\     'ADD': '12',
\     'SATURATE': '13',
\   },
\},
\'cairopath': {
\   'name': 'CairoPath',
\},
\'cairopattern': {
\   'name': 'CairoPattern',
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'getMatrix': { 'signature': 'void | void', 'return_type': 'void'},
\     'getType': { 'signature': 'void | int', 'return_type': 'int'},
\     'setMatrix': { 'signature': 'CairoMatrix $matrix | void', 'return_type': 'void'},
\     'status': { 'signature': 'void | int', 'return_type': 'int'},
\   },
\},
\'cairopatterntype': {
\   'name': 'CairoPatternType',
\   'constants': {
\     'SOLID': '0',
\     'SURFACE': '1',
\     'LINEAR': '2',
\     'RADIAL': '3',
\   },
\},
\'cairopdfsurface': {
\   'name': 'CairoPdfSurface',
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'setSize': { 'signature': 'float $width, float $height | void', 'return_type': 'void'},
\     'copyPage': { 'signature': 'void | void', 'return_type': 'void'},
\     'createSimilar': { 'signature': 'CairoSurface $other, int $content, string $width, string $height | void', 'return_type': 'void'},
\     'finish': { 'signature': 'void | void', 'return_type': 'void'},
\     'flush': { 'signature': 'void | void', 'return_type': 'void'},
\     'getContent': { 'signature': 'void | int', 'return_type': 'int'},
\     'getDeviceOffset': { 'signature': 'void | array', 'return_type': 'array'},
\     'getFontOptions': { 'signature': 'void | void', 'return_type': 'void'},
\     'getType': { 'signature': 'void | int', 'return_type': 'int'},
\     'markDirty': { 'signature': 'void | void', 'return_type': 'void'},
\     'markDirtyRectangle': { 'signature': 'float $x, float $y, float $width, float $height | void', 'return_type': 'void'},
\     'setDeviceOffset': { 'signature': 'float $x, float $y | void', 'return_type': 'void'},
\     'setFallbackResolution': { 'signature': 'float $x, float $y | void', 'return_type': 'void'},
\     'showPage': { 'signature': 'void | void', 'return_type': 'void'},
\     'status': { 'signature': 'void | int', 'return_type': 'int'},
\     'writeToPng': { 'signature': 'string $file | void', 'return_type': 'void'},
\   },
\},
\'cairopslevel': {
\   'name': 'CairoPsLevel',
\   'constants': {
\     'LEVEL_2': '0',
\     'LEVEL_3': '1',
\   },
\},
\'cairopssurface': {
\   'name': 'CairoPsSurface',
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'dscBeginPageSetup': { 'signature': 'void | void', 'return_type': 'void'},
\     'dscBeginSetup': { 'signature': 'void | void', 'return_type': 'void'},
\     'dscComment': { 'signature': 'string $comment | void', 'return_type': 'void'},
\     'getEps': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'restrictToLevel': { 'signature': 'int $level | void', 'return_type': 'void'},
\     'setEps': { 'signature': 'bool $level | void', 'return_type': 'void'},
\     'setSize': { 'signature': 'float $width, float $height | void', 'return_type': 'void'},
\     'copyPage': { 'signature': 'void | void', 'return_type': 'void'},
\     'createSimilar': { 'signature': 'CairoSurface $other, int $content, string $width, string $height | void', 'return_type': 'void'},
\     'finish': { 'signature': 'void | void', 'return_type': 'void'},
\     'flush': { 'signature': 'void | void', 'return_type': 'void'},
\     'getContent': { 'signature': 'void | int', 'return_type': 'int'},
\     'getDeviceOffset': { 'signature': 'void | array', 'return_type': 'array'},
\     'getFontOptions': { 'signature': 'void | void', 'return_type': 'void'},
\     'getType': { 'signature': 'void | int', 'return_type': 'int'},
\     'markDirty': { 'signature': 'void | void', 'return_type': 'void'},
\     'markDirtyRectangle': { 'signature': 'float $x, float $y, float $width, float $height | void', 'return_type': 'void'},
\     'setDeviceOffset': { 'signature': 'float $x, float $y | void', 'return_type': 'void'},
\     'setFallbackResolution': { 'signature': 'float $x, float $y | void', 'return_type': 'void'},
\     'showPage': { 'signature': 'void | void', 'return_type': 'void'},
\     'status': { 'signature': 'void | int', 'return_type': 'int'},
\     'writeToPng': { 'signature': 'string $file | void', 'return_type': 'void'},
\   },
\   'static_methods': {
\     'getLevels': { 'signature': 'void | array', 'return_type': 'array'},
\     'levelToString': { 'signature': 'int $level | string', 'return_type': 'string'},
\   },
\},
\'cairoradialgradient': {
\   'name': 'CairoRadialGradient',
\   'methods': {
\     '__construct': { 'signature': 'float $x0, float $y0, float $r0, float $x1, float $y1, float $r1', 'return_type': ''},
\     'getCircles': { 'signature': 'void | array', 'return_type': 'array'},
\     'addColorStopRgb': { 'signature': 'float $offset, float $red, float $green, float $blue | void', 'return_type': 'void'},
\     'addColorStopRgba': { 'signature': 'float $offset, float $red, float $green, float $blue, float $alpha | void', 'return_type': 'void'},
\     'getColorStopCount': { 'signature': 'void | int', 'return_type': 'int'},
\     'getColorStopRgba': { 'signature': 'int $index | array', 'return_type': 'array'},
\     'getExtend': { 'signature': 'void | int', 'return_type': 'int'},
\     'setExtend': { 'signature': 'int $extend | void', 'return_type': 'void'},
\   },
\},
\'cairoscaledfont': {
\   'name': 'CairoScaledFont',
\   'methods': {
\     '__construct': { 'signature': 'CairoFontFace $font_face, CairoMatrix $matrix, CairoMatrix $ctm, CairoFontOptions $options', 'return_type': ''},
\     'extents': { 'signature': 'void | array', 'return_type': 'array'},
\     'getCtm': { 'signature': 'void | CairoMatrix', 'return_type': 'CairoMatrix'},
\     'getFontFace': { 'signature': 'void | void', 'return_type': 'void'},
\     'getFontMatrix': { 'signature': 'void | void', 'return_type': 'void'},
\     'getFontOptions': { 'signature': 'void | void', 'return_type': 'void'},
\     'getScaleMatrix': { 'signature': 'void | void', 'return_type': 'void'},
\     'getType': { 'signature': 'void | int', 'return_type': 'int'},
\     'glyphExtents': { 'signature': 'array $glyphs | array', 'return_type': 'array'},
\     'status': { 'signature': 'void | int', 'return_type': 'int'},
\     'textExtents': { 'signature': 'string $text | array', 'return_type': 'array'},
\   },
\},
\'cairosolidpattern': {
\   'name': 'CairoSolidPattern',
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'getRgba': { 'signature': 'void | array', 'return_type': 'array'},
\     'getMatrix': { 'signature': 'void | void', 'return_type': 'void'},
\     'getType': { 'signature': 'void | int', 'return_type': 'int'},
\     'setMatrix': { 'signature': 'CairoMatrix $matrix | void', 'return_type': 'void'},
\     'status': { 'signature': 'void | int', 'return_type': 'int'},
\   },
\},
\'cairostatus': {
\   'name': 'CairoStatus',
\   'constants': {
\     'SUCCESS': '0',
\     'NO_MEMORY': '1',
\     'INVALID_RESTORE': '2',
\     'INVALID_POP_GROUP': '3',
\     'NO_CURRENT_POINT': '4',
\     'INVALID_MATRIX': '5',
\     'INVALID_STATUS': '6',
\     'NULL_POINTER': '7',
\     'INVALID_STRING': '8',
\     'INVALID_PATH_DATA': '9',
\     'READ_ERROR': '10',
\     'WRITE_ERROR': '11',
\     'SURFACE_FINISHED': '12',
\     'SURFACE_TYPE_MISMATCH': '13',
\     'PATTERN_TYPE_MISMATCH': '14',
\     'INVALID_CONTENT': '15',
\     'INVALID_FORMAT': '16',
\     'INVALID_VISUAL': '17',
\     'FILE_NOT_FOUND': '18',
\     'INVALID_DASH': '19',
\     'INVALID_DSC_COMMENT': '20',
\     'INVALID_INDEX': '21',
\     'CLIP_NOT_REPRESENTABLE': '22',
\     'TEMP_FILE_ERROR': '23',
\     'INVALID_STRIDE': '24',
\   },
\},
\'cairosubpixelorder': {
\   'name': 'CairoSubpixelOrder',
\   'constants': {
\     'ORDER_DEFAULT': '0',
\     'ORDER_RGB': '1',
\     'ORDER_BGR': '2',
\     'ORDER_VRGB': '3',
\     'ORDER_VBGR': '4',
\   },
\},
\'cairosurface': {
\   'name': 'CairoSurface',
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'copyPage': { 'signature': 'void | void', 'return_type': 'void'},
\     'createSimilar': { 'signature': 'CairoSurface $other, int $content, string $width, string $height | void', 'return_type': 'void'},
\     'finish': { 'signature': 'void | void', 'return_type': 'void'},
\     'flush': { 'signature': 'void | void', 'return_type': 'void'},
\     'getContent': { 'signature': 'void | int', 'return_type': 'int'},
\     'getDeviceOffset': { 'signature': 'void | array', 'return_type': 'array'},
\     'getFontOptions': { 'signature': 'void | void', 'return_type': 'void'},
\     'getType': { 'signature': 'void | int', 'return_type': 'int'},
\     'markDirty': { 'signature': 'void | void', 'return_type': 'void'},
\     'markDirtyRectangle': { 'signature': 'float $x, float $y, float $width, float $height | void', 'return_type': 'void'},
\     'setDeviceOffset': { 'signature': 'float $x, float $y | void', 'return_type': 'void'},
\     'setFallbackResolution': { 'signature': 'float $x, float $y | void', 'return_type': 'void'},
\     'showPage': { 'signature': 'void | void', 'return_type': 'void'},
\     'status': { 'signature': 'void | int', 'return_type': 'int'},
\     'writeToPng': { 'signature': 'string $file | void', 'return_type': 'void'},
\   },
\},
\'cairosurfacepattern': {
\   'name': 'CairoSurfacePattern',
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'getExtend': { 'signature': 'void | int', 'return_type': 'int'},
\     'getFilter': { 'signature': 'void | int', 'return_type': 'int'},
\     'getSurface': { 'signature': 'void | void', 'return_type': 'void'},
\     'setExtend': { 'signature': 'int $extend | void', 'return_type': 'void'},
\     'setFilter': { 'signature': 'int $filter | void', 'return_type': 'void'},
\     'getMatrix': { 'signature': 'void | void', 'return_type': 'void'},
\     'getType': { 'signature': 'void | int', 'return_type': 'int'},
\     'setMatrix': { 'signature': 'CairoMatrix $matrix | void', 'return_type': 'void'},
\     'status': { 'signature': 'void | int', 'return_type': 'int'},
\   },
\},
\'cairosurfacetype': {
\   'name': 'CairoSurfaceType',
\   'constants': {
\     'IMAGE': '0',
\     'PDF': '1',
\     'PS': '2',
\     'XLIB': '3',
\     'XCB': '4',
\     'GLITZ': '5',
\     'QUARTZ': '6',
\     'WIN32': '7',
\     'BEOS': '8',
\     'DIRECTFB': '9',
\     'SVG': '10',
\     'OS2': '11',
\     'WIN32_PRINTING': '12',
\     'QUARTZ_IMAGE': '13',
\   },
\},
\'cairosvgsurface': {
\   'name': 'CairoSvgSurface',
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'restrictToVersion': { 'signature': 'int $version | void', 'return_type': 'void'},
\     'copyPage': { 'signature': 'void | void', 'return_type': 'void'},
\     'createSimilar': { 'signature': 'CairoSurface $other, int $content, string $width, string $height | void', 'return_type': 'void'},
\     'finish': { 'signature': 'void | void', 'return_type': 'void'},
\     'flush': { 'signature': 'void | void', 'return_type': 'void'},
\     'getContent': { 'signature': 'void | int', 'return_type': 'int'},
\     'getDeviceOffset': { 'signature': 'void | array', 'return_type': 'array'},
\     'getFontOptions': { 'signature': 'void | void', 'return_type': 'void'},
\     'getType': { 'signature': 'void | int', 'return_type': 'int'},
\     'markDirty': { 'signature': 'void | void', 'return_type': 'void'},
\     'markDirtyRectangle': { 'signature': 'float $x, float $y, float $width, float $height | void', 'return_type': 'void'},
\     'setDeviceOffset': { 'signature': 'float $x, float $y | void', 'return_type': 'void'},
\     'setFallbackResolution': { 'signature': 'float $x, float $y | void', 'return_type': 'void'},
\     'showPage': { 'signature': 'void | void', 'return_type': 'void'},
\     'status': { 'signature': 'void | int', 'return_type': 'int'},
\     'writeToPng': { 'signature': 'string $file | void', 'return_type': 'void'},
\   },
\   'static_methods': {
\     'getVersions': { 'signature': 'void | array', 'return_type': 'array'},
\     'versionToString': { 'signature': 'int $version | string', 'return_type': 'string'},
\   },
\},
\'cairosvgversion': {
\   'name': 'CairoSvgVersion',
\   'constants': {
\     'VERSION_1_1': '0',
\     'VERSION_1_2': '1',
\   },
\},
\'cairotoyfontface': {
\   'name': 'CairoToyFontFace',
\},
\}
let g:phpcomplete_builtin['classes']['chdb'] = {
\'chdb': {
\   'name': 'chdb',
\   'methods': {
\     '__construct': { 'signature': 'string $pathname', 'return_type': ''},
\     'get': { 'signature': 'string $key | string', 'return_type': 'string'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['predefined_interfaces_and_classes'] = {
\'closure': {
\   'name': 'Closure',
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'bindTo': { 'signature': 'object $newthis [, mixed $newscope = "static"] | Closure', 'return_type': 'Closure'},
\     'call': { 'signature': 'object $newthis [, mixed $...] | mixed', 'return_type': 'mixed'},
\   },
\   'static_methods': {
\     'bind': { 'signature': 'Closure $closure, object $newthis [, mixed $newscope = "static"] | Closure', 'return_type': 'Closure'},
\     'fromCallable': { 'signature': 'callable $callable | Closure', 'return_type': 'Closure'},
\   },
\},
\'generator': {
\   'name': 'Generator',
\   'methods': {
\     'current': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getReturn': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'key': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'next': { 'signature': 'void | void', 'return_type': 'void'},
\     'rewind': { 'signature': 'void | void', 'return_type': 'void'},
\     'send': { 'signature': 'mixed $value | mixed', 'return_type': 'mixed'},
\     'throw': { 'signature': 'Throwable $exception | mixed', 'return_type': 'mixed'},
\     'valid': { 'signature': 'void | bool', 'return_type': 'bool'},
\     '__wakeup': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'weakreference': {
\   'name': 'WeakReference',
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'get': { 'signature': 'void | ?object', 'return_type': '?object'},
\   },
\   'static_methods': {
\     'create': { 'signature': 'object $referent | WeakReference', 'return_type': 'WeakReference'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['intl'] = {
\'collator': {
\   'name': 'Collator',
\   'methods': {
\     '__construct': { 'signature': 'string $locale', 'return_type': ''},
\     'asort': { 'signature': 'array &$arr [, int $sort_flag] | bool', 'return_type': 'bool'},
\     'compare': { 'signature': 'string $str1, string $str2 | int', 'return_type': 'int'},
\     'getAttribute': { 'signature': 'int $attr | int', 'return_type': 'int'},
\     'getErrorCode': { 'signature': 'void | int', 'return_type': 'int'},
\     'getErrorMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLocale': { 'signature': 'int $type | string', 'return_type': 'string'},
\     'getSortKey': { 'signature': 'string $str | string', 'return_type': 'string'},
\     'getStrength': { 'signature': 'void | int', 'return_type': 'int'},
\     'setAttribute': { 'signature': 'int $attr, int $val | bool', 'return_type': 'bool'},
\     'setStrength': { 'signature': 'int $strength | bool', 'return_type': 'bool'},
\     'sortWithSortKeys': { 'signature': 'array &$arr | bool', 'return_type': 'bool'},
\     'sort': { 'signature': 'array &$arr [, int $sort_flag] | bool', 'return_type': 'bool'},
\   },
\   'static_methods': {
\     'create': { 'signature': 'string $locale | Collator', 'return_type': 'Collator'},
\   },
\},
\'intlbreakiterator': {
\   'name': 'IntlBreakIterator',
\   'constants': {
\     'DONE': '-1',
\     'WORD_NONE': '0',
\     'WORD_NONE_LIMIT': '100',
\     'WORD_NUMBER': '100',
\     'WORD_NUMBER_LIMIT': '200',
\     'WORD_LETTER': '200',
\     'WORD_LETTER_LIMIT': '300',
\     'WORD_KANA': '300',
\     'WORD_KANA_LIMIT': '400',
\     'WORD_IDEO': '400',
\     'WORD_IDEO_LIMIT': '500',
\     'LINE_SOFT': '0',
\     'LINE_SOFT_LIMIT': '100',
\     'LINE_HARD': '100',
\     'LINE_HARD_LIMIT': '200',
\     'SENTENCE_TERM': '0',
\     'SENTENCE_TERM_LIMIT': '100',
\     'SENTENCE_SEP': '100',
\     'SENTENCE_SEP_LIMIT': '200',
\   },
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'current': { 'signature': 'void | int', 'return_type': 'int'},
\     'first': { 'signature': 'void | int', 'return_type': 'int'},
\     'following': { 'signature': 'int $offset | int', 'return_type': 'int'},
\     'getErrorCode': { 'signature': 'void | int', 'return_type': 'int'},
\     'intl_get_error_code': { 'signature': 'void | int', 'return_type': 'int'},
\     'getErrorMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'intl_get_error_message': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLocale': { 'signature': 'string $locale_type | string', 'return_type': 'string'},
\     'getPartsIterator': { 'signature': '[ int $key_type = IntlPartsIterator::KEY_SEQUENTIAL] | IntlPartsIterator', 'return_type': 'IntlPartsIterator'},
\     'getText': { 'signature': 'void | string', 'return_type': 'string'},
\     'isBoundary': { 'signature': 'int $offset | bool', 'return_type': 'bool'},
\     'last': { 'signature': 'void | int', 'return_type': 'int'},
\     'next': { 'signature': '[ int $offset] | int', 'return_type': 'int'},
\     'preceding': { 'signature': 'int $offset | int', 'return_type': 'int'},
\     'previous': { 'signature': 'void | int', 'return_type': 'int'},
\     'setText': { 'signature': 'string $text | bool', 'return_type': 'bool'},
\   },
\   'static_methods': {
\     'createCharacterInstance': { 'signature': '[ string $locale] | IntlBreakIterator', 'return_type': 'IntlBreakIterator'},
\     'createCodePointInstance': { 'signature': 'void | IntlBreakIterator', 'return_type': 'IntlBreakIterator'},
\     'createLineInstance': { 'signature': '[ string $locale] | IntlBreakIterator', 'return_type': 'IntlBreakIterator'},
\     'createSentenceInstance': { 'signature': '[ string $locale] | IntlBreakIterator', 'return_type': 'IntlBreakIterator'},
\     'createTitleInstance': { 'signature': '[ string $locale] | IntlBreakIterator', 'return_type': 'IntlBreakIterator'},
\     'createWordInstance': { 'signature': '[ string $locale] | IntlBreakIterator', 'return_type': 'IntlBreakIterator'},
\   },
\},
\'intlcalendar': {
\   'name': 'IntlCalendar',
\   'constants': {
\     'FIELD_ERA': '0',
\     'FIELD_YEAR': '1',
\     'FIELD_MONTH': '2',
\     'FIELD_WEEK_OF_YEAR': '3',
\     'FIELD_WEEK_OF_MONTH': '4',
\     'FIELD_DATE': '5',
\     'FIELD_DAY_OF_YEAR': '6',
\     'FIELD_DAY_OF_WEEK': '7',
\     'FIELD_DAY_OF_WEEK_IN_MONTH': '8',
\     'FIELD_AM_PM': '9',
\     'FIELD_HOUR': '10',
\     'FIELD_HOUR_OF_DAY': '11',
\     'FIELD_MINUTE': '12',
\     'FIELD_SECOND': '13',
\     'FIELD_MILLISECOND': '14',
\     'FIELD_ZONE_OFFSET': '15',
\     'FIELD_DST_OFFSET': '16',
\     'FIELD_YEAR_WOY': '17',
\     'FIELD_DOW_LOCAL': '18',
\     'FIELD_EXTENDED_YEAR': '19',
\     'FIELD_JULIAN_DAY': '20',
\     'FIELD_MILLISECONDS_IN_DAY': '21',
\     'FIELD_IS_LEAP_MONTH': '22',
\     'FIELD_FIELD_COUNT': '23',
\     'FIELD_DAY_OF_MONTH': '5',
\     'DOW_SUNDAY': '1',
\     'DOW_MONDAY': '2',
\     'DOW_TUESDAY': '3',
\     'DOW_WEDNESDAY': '4',
\     'DOW_THURSDAY': '5',
\     'DOW_FRIDAY': '6',
\     'DOW_SATURDAY': '7',
\     'DOW_TYPE_WEEKDAY': '0',
\     'DOW_TYPE_WEEKEND': '1',
\     'DOW_TYPE_WEEKEND_OFFSET': '2',
\     'DOW_TYPE_WEEKEND_CEASE': '3',
\     'WALLTIME_FIRST': '1',
\     'WALLTIME_LAST': '0',
\     'WALLTIME_NEXT_VALID': '2',
\   },
\   'methods': {
\     'add': { 'signature': 'int $field, int $amount | bool', 'return_type': 'bool'},
\     'intlcal_add': { 'signature': 'IntlCalendar $cal, int $field, int $amount | bool', 'return_type': 'bool'},
\     'after': { 'signature': 'IntlCalendar $other | bool', 'return_type': 'bool'},
\     'intlcal_after': { 'signature': 'IntlCalendar $cal, IntlCalendar $other | bool', 'return_type': 'bool'},
\     'before': { 'signature': 'IntlCalendar $other | bool', 'return_type': 'bool'},
\     'intlcal_before': { 'signature': 'IntlCalendar $cal, IntlCalendar $other | bool', 'return_type': 'bool'},
\     'clear': { 'signature': '[ int $field = NULL] | bool', 'return_type': 'bool'},
\     'intlcal_clear': { 'signature': 'IntlCalendar $cal [, int $field = NULL] | bool', 'return_type': 'bool'},
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'intlcal_create_instance': { 'signature': '[ mixed $timeZone = NULL [, string $locale = ""]] | IntlCalendar', 'return_type': 'IntlCalendar'},
\     'equals': { 'signature': 'IntlCalendar $other | bool', 'return_type': 'bool'},
\     'intlcal_equals': { 'signature': 'IntlCalendar $cal, IntlCalendar $other | bool', 'return_type': 'bool'},
\     'fieldDifference': { 'signature': 'float $when, int $field | int', 'return_type': 'int'},
\     'intlcal_field_difference': { 'signature': 'IntlCalendar $cal, float $when, int $field | int', 'return_type': 'int'},
\     'intlcal_from_date_time': { 'signature': 'mixed $dateTime | IntlCalendar', 'return_type': 'IntlCalendar'},
\     'get': { 'signature': 'int $field | int', 'return_type': 'int'},
\     'intlcal_get': { 'signature': 'IntlCalendar $cal, int $field | int', 'return_type': 'int'},
\     'getActualMaximum': { 'signature': 'int $field | int', 'return_type': 'int'},
\     'intlcal_get_actual_maximum': { 'signature': 'IntlCalendar $cal, int $field | int', 'return_type': 'int'},
\     'getActualMinimum': { 'signature': 'int $field | int', 'return_type': 'int'},
\     'intlcal_get_actual_minimum': { 'signature': 'IntlCalendar $cal, int $field | int', 'return_type': 'int'},
\     'intlcal_get_available_locales': { 'signature': 'void | array', 'return_type': 'array'},
\     'getDayOfWeekType': { 'signature': 'int $dayOfWeek | int', 'return_type': 'int'},
\     'intlcal_get_day_of_week_type': { 'signature': 'IntlCalendar $cal, int $dayOfWeek | int', 'return_type': 'int'},
\     'getErrorCode': { 'signature': 'void | int', 'return_type': 'int'},
\     'getErrorMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getFirstDayOfWeek': { 'signature': 'void | int', 'return_type': 'int'},
\     'intlcal_get_first_day_of_week': { 'signature': 'IntlCalendar $cal | int', 'return_type': 'int'},
\     'getGreatestMinimum': { 'signature': 'int $field | int', 'return_type': 'int'},
\     'intlcal_get_greatest_minimum': { 'signature': 'IntlCalendar $cal, int $field | int', 'return_type': 'int'},
\     'intlcal_get_keyword_values_for_locale': { 'signature': 'string $key, string $locale, bool $commonlyUsed | Iterator', 'return_type': 'Iterator'},
\     'getLeastMaximum': { 'signature': 'int $field | int', 'return_type': 'int'},
\     'intlcal_get_least_maximum': { 'signature': 'IntlCalendar $cal, int $field | int', 'return_type': 'int'},
\     'getLocale': { 'signature': 'int $localeType | string', 'return_type': 'string'},
\     'intlcal_get_locale': { 'signature': 'IntlCalendar $cal, int $localeType | string', 'return_type': 'string'},
\     'getMaximum': { 'signature': 'int $field | int', 'return_type': 'int'},
\     'intlcal_get_maximum': { 'signature': 'IntlCalendar $cal, int $field | int', 'return_type': 'int'},
\     'getMinimalDaysInFirstWeek': { 'signature': 'void | int', 'return_type': 'int'},
\     'intlcal_get_minimal_days_in_first_week': { 'signature': 'IntlCalendar $cal, int $minimalDays | bool', 'return_type': 'bool'},
\     'getMinimum': { 'signature': 'int $field | int', 'return_type': 'int'},
\     'intlcal_get_minimum': { 'signature': 'IntlCalendar $cal, int $field | int', 'return_type': 'int'},
\     'intlcal_get_now': { 'signature': 'void | float', 'return_type': 'float'},
\     'getRepeatedWallTimeOption': { 'signature': 'void | int', 'return_type': 'int'},
\     'intlcal_get_repeated_wall_time_option': { 'signature': 'IntlCalendar $cal | int', 'return_type': 'int'},
\     'getSkippedWallTimeOption': { 'signature': 'void | int', 'return_type': 'int'},
\     'intlcal_get_skipped_wall_time_option': { 'signature': 'IntlCalendar $cal | int', 'return_type': 'int'},
\     'getTime': { 'signature': 'void | float', 'return_type': 'float'},
\     'intlcal_get_time': { 'signature': 'IntlCalendar $cal | float', 'return_type': 'float'},
\     'getTimeZone': { 'signature': 'void | IntlTimeZone', 'return_type': 'IntlTimeZone'},
\     'intlcal_get_time_zone': { 'signature': 'IntlCalendar $cal | IntlTimeZone', 'return_type': 'IntlTimeZone'},
\     'getType': { 'signature': 'void | string', 'return_type': 'string'},
\     'intlcal_get_type': { 'signature': 'IntlCalendar $cal | string', 'return_type': 'string'},
\     'getWeekendTransition': { 'signature': 'string $dayOfWeek | int', 'return_type': 'int'},
\     'intlcal_get_weekend_transition': { 'signature': 'IntlCalendar $cal, string $dayOfWeek | int', 'return_type': 'int'},
\     'inDaylightTime': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'intlcal_in_daylight_time': { 'signature': 'IntlCalendar $cal | bool', 'return_type': 'bool'},
\     'isEquivalentTo': { 'signature': 'IntlCalendar $other | bool', 'return_type': 'bool'},
\     'intlcal_is_equivalent_to': { 'signature': 'IntlCalendar $cal, IntlCalendar $other | bool', 'return_type': 'bool'},
\     'isLenient': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'intlcal_is_lenient': { 'signature': 'IntlCalendar $cal | bool', 'return_type': 'bool'},
\     'isSet': { 'signature': 'int $field | bool', 'return_type': 'bool'},
\     'intlcal_is_set': { 'signature': 'IntlCalendar $cal, int $field | bool', 'return_type': 'bool'},
\     'isWeekend': { 'signature': '[ float $date = NULL] | bool', 'return_type': 'bool'},
\     'intlcal_is_weekend': { 'signature': 'IntlCalendar $cal [, float $date = NULL] | bool', 'return_type': 'bool'},
\     'roll': { 'signature': 'int $field, mixed $amountOrUpOrDown | bool', 'return_type': 'bool'},
\     'intlcal_roll': { 'signature': 'IntlCalendar $cal, int $field, mixed $amountOrUpOrDown | bool', 'return_type': 'bool'},
\     'set': { 'signature': 'int $year, int $month [, int $dayOfMonth = NULL [, int $hour = NULL [, int $minute = NULL [, int $second = NULL]]]] | bool', 'return_type': 'bool'},
\     'intlcal_set': { 'signature': 'IntlCalendar $cal, int $year, int $month [, int $dayOfMonth = NULL [, int $hour = NULL [, int $minute = NULL [, int $second = NULL]]]] | bool', 'return_type': 'bool'},
\     'setFirstDayOfWeek': { 'signature': 'int $dayOfWeek | bool', 'return_type': 'bool'},
\     'intlcal_set_first_day_of_week': { 'signature': 'IntlCalendar $cal, int $dayOfWeek | bool', 'return_type': 'bool'},
\     'setLenient': { 'signature': 'bool $isLenient | bool', 'return_type': 'bool'},
\     'intlcal_set_lenient': { 'signature': 'IntlCalendar $cal, bool $isLenient | bool', 'return_type': 'bool'},
\     'setMinimalDaysInFirstWeek': { 'signature': 'int $minimalDays | bool', 'return_type': 'bool'},
\     'setRepeatedWallTimeOption': { 'signature': 'int $wallTimeOption | bool', 'return_type': 'bool'},
\     'intlcal_set_repeated_wall_time_option': { 'signature': 'IntlCalendar $cal, int $wallTimeOption | bool', 'return_type': 'bool'},
\     'setSkippedWallTimeOption': { 'signature': 'int $wallTimeOption | bool', 'return_type': 'bool'},
\     'intlcal_set_skipped_wall_time_option': { 'signature': 'IntlCalendar $cal, int $wallTimeOption | bool', 'return_type': 'bool'},
\     'setTime': { 'signature': 'float $date | bool', 'return_type': 'bool'},
\     'intlcal_set_time': { 'signature': 'IntlCalendar $cal, float $date | bool', 'return_type': 'bool'},
\     'setTimeZone': { 'signature': 'mixed $timeZone | bool', 'return_type': 'bool'},
\     'intlcal_set_time_zone': { 'signature': 'IntlCalendar $cal, mixed $timeZone | bool', 'return_type': 'bool'},
\     'toDateTime': { 'signature': 'void | DateTime', 'return_type': 'DateTime'},
\     'intlcal_to_date_time': { 'signature': 'IntlCalendar $cal | DateTime', 'return_type': 'DateTime'},
\   },
\   'static_methods': {
\     'createInstance': { 'signature': '[ mixed $timeZone = NULL [, string $locale = ""]] | IntlCalendar', 'return_type': 'IntlCalendar'},
\     'fromDateTime': { 'signature': 'mixed $dateTime | IntlCalendar', 'return_type': 'IntlCalendar'},
\     'getAvailableLocales': { 'signature': 'void | array', 'return_type': 'array'},
\     'getKeywordValuesForLocale': { 'signature': 'string $key, string $locale, bool $commonlyUsed | Iterator', 'return_type': 'Iterator'},
\     'getNow': { 'signature': 'void | float', 'return_type': 'float'},
\   },
\},
\'intlchar': {
\   'name': 'IntlChar',
\   'constants': {
\     'UNICODE_VERSION': '6.3',
\     'CODEPOINT_MIN': '0',
\     'CODEPOINT_MAX': '1114111',
\     'NO_NUMERIC_VALUE': '-123456789',
\     'PROPERTY_ALPHABETIC': '0',
\     'PROPERTY_BINARY_START': '0',
\     'PROPERTY_ASCII_HEX_DIGIT': '1',
\     'PROPERTY_BIDI_CONTROL': '2',
\     'PROPERTY_BIDI_MIRRORED': '3',
\     'PROPERTY_DASH': '4',
\     'PROPERTY_DEFAULT_IGNORABLE_CODE_POINT': '5',
\     'PROPERTY_DEPRECATED': '6',
\     'PROPERTY_DIACRITIC': '7',
\     'PROPERTY_EXTENDER': '8',
\     'PROPERTY_FULL_COMPOSITION_EXCLUSION': '9',
\     'PROPERTY_GRAPHEME_BASE': '10',
\     'PROPERTY_GRAPHEME_EXTEND': '11',
\     'PROPERTY_GRAPHEME_LINK': '12',
\     'PROPERTY_HEX_DIGIT': '13',
\     'PROPERTY_HYPHEN': '14',
\     'PROPERTY_ID_CONTINUE': '15',
\     'PROPERTY_ID_START': '16',
\     'PROPERTY_IDEOGRAPHIC': '17',
\     'PROPERTY_IDS_BINARY_OPERATOR': '18',
\     'PROPERTY_IDS_TRINARY_OPERATOR': '19',
\     'PROPERTY_JOIN_CONTROL': '20',
\     'PROPERTY_LOGICAL_ORDER_EXCEPTION': '21',
\     'PROPERTY_LOWERCASE': '22',
\     'PROPERTY_MATH': '23',
\     'PROPERTY_NONCHARACTER_CODE_POINT': '24',
\     'PROPERTY_QUOTATION_MARK': '25',
\     'PROPERTY_RADICAL': '26',
\     'PROPERTY_SOFT_DOTTED': '27',
\     'PROPERTY_TERMINAL_PUNCTUATION': '28',
\     'PROPERTY_UNIFIED_IDEOGRAPH': '29',
\     'PROPERTY_UPPERCASE': '30',
\     'PROPERTY_WHITE_SPACE': '31',
\     'PROPERTY_XID_CONTINUE': '32',
\     'PROPERTY_XID_START': '33',
\     'PROPERTY_CASE_SENSITIVE': '34',
\     'PROPERTY_S_TERM': '35',
\     'PROPERTY_VARIATION_SELECTOR': '36',
\     'PROPERTY_NFD_INERT': '37',
\     'PROPERTY_NFKD_INERT': '38',
\     'PROPERTY_NFC_INERT': '39',
\     'PROPERTY_NFKC_INERT': '40',
\     'PROPERTY_SEGMENT_STARTER': '41',
\     'PROPERTY_PATTERN_SYNTAX': '42',
\     'PROPERTY_PATTERN_WHITE_SPACE': '43',
\     'PROPERTY_POSIX_ALNUM': '44',
\     'PROPERTY_POSIX_BLANK': '45',
\     'PROPERTY_POSIX_GRAPH': '46',
\     'PROPERTY_POSIX_PRINT': '47',
\     'PROPERTY_POSIX_XDIGIT': '48',
\     'PROPERTY_CASED': '49',
\     'PROPERTY_CASE_IGNORABLE': '50',
\     'PROPERTY_CHANGES_WHEN_LOWERCASED': '51',
\     'PROPERTY_CHANGES_WHEN_UPPERCASED': '52',
\     'PROPERTY_CHANGES_WHEN_TITLECASED': '53',
\     'PROPERTY_CHANGES_WHEN_CASEFOLDED': '54',
\     'PROPERTY_CHANGES_WHEN_CASEMAPPED': '55',
\     'PROPERTY_CHANGES_WHEN_NFKC_CASEFOLDED': '56',
\     'PROPERTY_BINARY_LIMIT': '57',
\     'PROPERTY_BIDI_CLASS': '4096',
\     'PROPERTY_INT_START': '4096',
\     'PROPERTY_BLOCK': '4097',
\     'PROPERTY_CANONICAL_COMBINING_CLASS': '4098',
\     'PROPERTY_DECOMPOSITION_TYPE': '4099',
\     'PROPERTY_EAST_ASIAN_WIDTH': '4100',
\     'PROPERTY_GENERAL_CATEGORY': '4101',
\     'PROPERTY_JOINING_GROUP': '4102',
\     'PROPERTY_JOINING_TYPE': '4103',
\     'PROPERTY_LINE_BREAK': '4104',
\     'PROPERTY_NUMERIC_TYPE': '4105',
\     'PROPERTY_SCRIPT': '4106',
\     'PROPERTY_HANGUL_SYLLABLE_TYPE': '4107',
\     'PROPERTY_NFD_QUICK_CHECK': '4108',
\     'PROPERTY_NFKD_QUICK_CHECK': '4109',
\     'PROPERTY_NFC_QUICK_CHECK': '4110',
\     'PROPERTY_NFKC_QUICK_CHECK': '4111',
\     'PROPERTY_LEAD_CANONICAL_COMBINING_CLASS': '4112',
\     'PROPERTY_TRAIL_CANONICAL_COMBINING_CLASS': '4113',
\     'PROPERTY_GRAPHEME_CLUSTER_BREAK': '4114',
\     'PROPERTY_SENTENCE_BREAK': '4115',
\     'PROPERTY_WORD_BREAK': '4116',
\     'PROPERTY_BIDI_PAIRED_BRACKET_TYPE': '4117',
\     'PROPERTY_INT_LIMIT': '4118',
\     'PROPERTY_GENERAL_CATEGORY_MASK': '8192',
\     'PROPERTY_MASK_START': '8192',
\     'PROPERTY_MASK_LIMIT': '8193',
\     'PROPERTY_NUMERIC_VALUE': '12288',
\     'PROPERTY_DOUBLE_START': '12288',
\     'PROPERTY_DOUBLE_LIMIT': '12289',
\     'PROPERTY_AGE': '16384',
\     'PROPERTY_STRING_START': '16384',
\     'PROPERTY_BIDI_MIRRORING_GLYPH': '16385',
\     'PROPERTY_CASE_FOLDING': '16386',
\     'PROPERTY_ISO_COMMENT': '16387',
\     'PROPERTY_LOWERCASE_MAPPING': '16388',
\     'PROPERTY_NAME': '16389',
\     'PROPERTY_SIMPLE_CASE_FOLDING': '16390',
\     'PROPERTY_SIMPLE_LOWERCASE_MAPPING': '16391',
\     'PROPERTY_SIMPLE_TITLECASE_MAPPING': '16392',
\     'PROPERTY_SIMPLE_UPPERCASE_MAPPING': '16393',
\     'PROPERTY_TITLECASE_MAPPING': '16394',
\     'PROPERTY_UNICODE_1_NAME': '16395',
\     'PROPERTY_UPPERCASE_MAPPING': '16396',
\     'PROPERTY_BIDI_PAIRED_BRACKET': '16397',
\     'PROPERTY_STRING_LIMIT': '16398',
\     'PROPERTY_SCRIPT_EXTENSIONS': '28672',
\     'PROPERTY_OTHER_PROPERTY_START': '28672',
\     'PROPERTY_OTHER_PROPERTY_LIMIT': '28673',
\     'PROPERTY_INVALID_CODE': '-1',
\     'CHAR_CATEGORY_UNASSIGNED': '0',
\     'CHAR_CATEGORY_GENERAL_OTHER_TYPES': '0',
\     'CHAR_CATEGORY_UPPERCASE_LETTER': '1',
\     'CHAR_CATEGORY_LOWERCASE_LETTER': '2',
\     'CHAR_CATEGORY_TITLECASE_LETTER': '3',
\     'CHAR_CATEGORY_MODIFIER_LETTER': '4',
\     'CHAR_CATEGORY_OTHER_LETTER': '5',
\     'CHAR_CATEGORY_NON_SPACING_MARK': '6',
\     'CHAR_CATEGORY_ENCLOSING_MARK': '7',
\     'CHAR_CATEGORY_COMBINING_SPACING_MARK': '8',
\     'CHAR_CATEGORY_DECIMAL_DIGIT_NUMBER': '9',
\     'CHAR_CATEGORY_LETTER_NUMBER': '10',
\     'CHAR_CATEGORY_OTHER_NUMBER': '11',
\     'CHAR_CATEGORY_SPACE_SEPARATOR': '12',
\     'CHAR_CATEGORY_LINE_SEPARATOR': '13',
\     'CHAR_CATEGORY_PARAGRAPH_SEPARATOR': '14',
\     'CHAR_CATEGORY_CONTROL_CHAR': '15',
\     'CHAR_CATEGORY_FORMAT_CHAR': '16',
\     'CHAR_CATEGORY_PRIVATE_USE_CHAR': '17',
\     'CHAR_CATEGORY_SURROGATE': '18',
\     'CHAR_CATEGORY_DASH_PUNCTUATION': '19',
\     'CHAR_CATEGORY_START_PUNCTUATION': '20',
\     'CHAR_CATEGORY_END_PUNCTUATION': '21',
\     'CHAR_CATEGORY_CONNECTOR_PUNCTUATION': '22',
\     'CHAR_CATEGORY_OTHER_PUNCTUATION': '23',
\     'CHAR_CATEGORY_MATH_SYMBOL': '24',
\     'CHAR_CATEGORY_CURRENCY_SYMBOL': '25',
\     'CHAR_CATEGORY_MODIFIER_SYMBOL': '26',
\     'CHAR_CATEGORY_OTHER_SYMBOL': '27',
\     'CHAR_CATEGORY_INITIAL_PUNCTUATION': '28',
\     'CHAR_CATEGORY_FINAL_PUNCTUATION': '29',
\     'CHAR_CATEGORY_CHAR_CATEGORY_COUNT': '30',
\     'CHAR_DIRECTION_LEFT_TO_RIGHT': '0',
\     'CHAR_DIRECTION_RIGHT_TO_LEFT': '1',
\     'CHAR_DIRECTION_EUROPEAN_NUMBER': '2',
\     'CHAR_DIRECTION_EUROPEAN_NUMBER_SEPARATOR': '3',
\     'CHAR_DIRECTION_EUROPEAN_NUMBER_TERMINATOR': '4',
\     'CHAR_DIRECTION_ARABIC_NUMBER': '5',
\     'CHAR_DIRECTION_COMMON_NUMBER_SEPARATOR': '6',
\     'CHAR_DIRECTION_BLOCK_SEPARATOR': '7',
\     'CHAR_DIRECTION_SEGMENT_SEPARATOR': '8',
\     'CHAR_DIRECTION_WHITE_SPACE_NEUTRAL': '9',
\     'CHAR_DIRECTION_OTHER_NEUTRAL': '10',
\     'CHAR_DIRECTION_LEFT_TO_RIGHT_EMBEDDING': '11',
\     'CHAR_DIRECTION_LEFT_TO_RIGHT_OVERRIDE': '12',
\     'CHAR_DIRECTION_RIGHT_TO_LEFT_ARABIC': '13',
\     'CHAR_DIRECTION_RIGHT_TO_LEFT_EMBEDDING': '14',
\     'CHAR_DIRECTION_RIGHT_TO_LEFT_OVERRIDE': '15',
\     'CHAR_DIRECTION_POP_DIRECTIONAL_FORMAT': '16',
\     'CHAR_DIRECTION_DIR_NON_SPACING_MARK': '17',
\     'CHAR_DIRECTION_BOUNDARY_NEUTRAL': '18',
\     'CHAR_DIRECTION_FIRST_STRONG_ISOLATE': '19',
\     'CHAR_DIRECTION_LEFT_TO_RIGHT_ISOLATE': '20',
\     'CHAR_DIRECTION_RIGHT_TO_LEFT_ISOLATE': '21',
\     'CHAR_DIRECTION_POP_DIRECTIONAL_ISOLATE': '22',
\     'CHAR_DIRECTION_CHAR_DIRECTION_COUNT': '23',
\     'BLOCK_CODE_NO_BLOCK': '0',
\     'BLOCK_CODE_BASIC_LATIN': '1',
\     'BLOCK_CODE_LATIN_1_SUPPLEMENT': '2',
\     'BLOCK_CODE_LATIN_EXTENDED_A': '3',
\     'BLOCK_CODE_LATIN_EXTENDED_B': '4',
\     'BLOCK_CODE_IPA_EXTENSIONS': '5',
\     'BLOCK_CODE_SPACING_MODIFIER_LETTERS': '6',
\     'BLOCK_CODE_COMBINING_DIACRITICAL_MARKS': '7',
\     'BLOCK_CODE_GREEK': '8',
\     'BLOCK_CODE_CYRILLIC': '9',
\     'BLOCK_CODE_ARMENIAN': '10',
\     'BLOCK_CODE_HEBREW': '11',
\     'BLOCK_CODE_ARABIC': '12',
\     'BLOCK_CODE_SYRIAC': '13',
\     'BLOCK_CODE_THAANA': '14',
\     'BLOCK_CODE_DEVANAGARI': '15',
\     'BLOCK_CODE_BENGALI': '16',
\     'BLOCK_CODE_GURMUKHI': '17',
\     'BLOCK_CODE_GUJARATI': '18',
\     'BLOCK_CODE_ORIYA': '19',
\     'BLOCK_CODE_TAMIL': '20',
\     'BLOCK_CODE_TELUGU': '21',
\     'BLOCK_CODE_KANNADA': '22',
\     'BLOCK_CODE_MALAYALAM': '23',
\     'BLOCK_CODE_SINHALA': '24',
\     'BLOCK_CODE_THAI': '25',
\     'BLOCK_CODE_LAO': '26',
\     'BLOCK_CODE_TIBETAN': '27',
\     'BLOCK_CODE_MYANMAR': '28',
\     'BLOCK_CODE_GEORGIAN': '29',
\     'BLOCK_CODE_HANGUL_JAMO': '30',
\     'BLOCK_CODE_ETHIOPIC': '31',
\     'BLOCK_CODE_CHEROKEE': '32',
\     'BLOCK_CODE_UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS': '33',
\     'BLOCK_CODE_OGHAM': '34',
\     'BLOCK_CODE_RUNIC': '35',
\     'BLOCK_CODE_KHMER': '36',
\     'BLOCK_CODE_MONGOLIAN': '37',
\     'BLOCK_CODE_LATIN_EXTENDED_ADDITIONAL': '38',
\     'BLOCK_CODE_GREEK_EXTENDED': '39',
\     'BLOCK_CODE_GENERAL_PUNCTUATION': '40',
\     'BLOCK_CODE_SUPERSCRIPTS_AND_SUBSCRIPTS': '41',
\     'BLOCK_CODE_CURRENCY_SYMBOLS': '42',
\     'BLOCK_CODE_COMBINING_MARKS_FOR_SYMBOLS': '43',
\     'BLOCK_CODE_LETTERLIKE_SYMBOLS': '44',
\     'BLOCK_CODE_NUMBER_FORMS': '45',
\     'BLOCK_CODE_ARROWS': '46',
\     'BLOCK_CODE_MATHEMATICAL_OPERATORS': '47',
\     'BLOCK_CODE_MISCELLANEOUS_TECHNICAL': '48',
\     'BLOCK_CODE_CONTROL_PICTURES': '49',
\     'BLOCK_CODE_OPTICAL_CHARACTER_RECOGNITION': '50',
\     'BLOCK_CODE_ENCLOSED_ALPHANUMERICS': '51',
\     'BLOCK_CODE_BOX_DRAWING': '52',
\     'BLOCK_CODE_BLOCK_ELEMENTS': '53',
\     'BLOCK_CODE_GEOMETRIC_SHAPES': '54',
\     'BLOCK_CODE_MISCELLANEOUS_SYMBOLS': '55',
\     'BLOCK_CODE_DINGBATS': '56',
\     'BLOCK_CODE_BRAILLE_PATTERNS': '57',
\     'BLOCK_CODE_CJK_RADICALS_SUPPLEMENT': '58',
\     'BLOCK_CODE_KANGXI_RADICALS': '59',
\     'BLOCK_CODE_IDEOGRAPHIC_DESCRIPTION_CHARACTERS': '60',
\     'BLOCK_CODE_CJK_SYMBOLS_AND_PUNCTUATION': '61',
\     'BLOCK_CODE_HIRAGANA': '62',
\     'BLOCK_CODE_KATAKANA': '63',
\     'BLOCK_CODE_BOPOMOFO': '64',
\     'BLOCK_CODE_HANGUL_COMPATIBILITY_JAMO': '65',
\     'BLOCK_CODE_KANBUN': '66',
\     'BLOCK_CODE_BOPOMOFO_EXTENDED': '67',
\     'BLOCK_CODE_ENCLOSED_CJK_LETTERS_AND_MONTHS': '68',
\     'BLOCK_CODE_CJK_COMPATIBILITY': '69',
\     'BLOCK_CODE_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A': '70',
\     'BLOCK_CODE_CJK_UNIFIED_IDEOGRAPHS': '71',
\     'BLOCK_CODE_YI_SYLLABLES': '72',
\     'BLOCK_CODE_YI_RADICALS': '73',
\     'BLOCK_CODE_HANGUL_SYLLABLES': '74',
\     'BLOCK_CODE_HIGH_SURROGATES': '75',
\     'BLOCK_CODE_HIGH_PRIVATE_USE_SURROGATES': '76',
\     'BLOCK_CODE_LOW_SURROGATES': '77',
\     'BLOCK_CODE_PRIVATE_USE_AREA': '78',
\     'BLOCK_CODE_PRIVATE_USE': '78',
\     'BLOCK_CODE_CJK_COMPATIBILITY_IDEOGRAPHS': '79',
\     'BLOCK_CODE_ALPHABETIC_PRESENTATION_FORMS': '80',
\     'BLOCK_CODE_ARABIC_PRESENTATION_FORMS_A': '81',
\     'BLOCK_CODE_COMBINING_HALF_MARKS': '82',
\     'BLOCK_CODE_CJK_COMPATIBILITY_FORMS': '83',
\     'BLOCK_CODE_SMALL_FORM_VARIANTS': '84',
\     'BLOCK_CODE_ARABIC_PRESENTATION_FORMS_B': '85',
\     'BLOCK_CODE_SPECIALS': '86',
\     'BLOCK_CODE_HALFWIDTH_AND_FULLWIDTH_FORMS': '87',
\     'BLOCK_CODE_OLD_ITALIC': '88',
\     'BLOCK_CODE_GOTHIC': '89',
\     'BLOCK_CODE_DESERET': '90',
\     'BLOCK_CODE_BYZANTINE_MUSICAL_SYMBOLS': '91',
\     'BLOCK_CODE_MUSICAL_SYMBOLS': '92',
\     'BLOCK_CODE_MATHEMATICAL_ALPHANUMERIC_SYMBOLS': '93',
\     'BLOCK_CODE_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B': '94',
\     'BLOCK_CODE_CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT': '95',
\     'BLOCK_CODE_TAGS': '96',
\     'BLOCK_CODE_CYRILLIC_SUPPLEMENT': '97',
\     'BLOCK_CODE_CYRILLIC_SUPPLEMENTARY': '97',
\     'BLOCK_CODE_TAGALOG': '98',
\     'BLOCK_CODE_HANUNOO': '99',
\     'BLOCK_CODE_BUHID': '100',
\     'BLOCK_CODE_TAGBANWA': '101',
\     'BLOCK_CODE_MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A': '102',
\     'BLOCK_CODE_SUPPLEMENTAL_ARROWS_A': '103',
\     'BLOCK_CODE_SUPPLEMENTAL_ARROWS_B': '104',
\     'BLOCK_CODE_MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B': '105',
\     'BLOCK_CODE_SUPPLEMENTAL_MATHEMATICAL_OPERATORS': '106',
\     'BLOCK_CODE_KATAKANA_PHONETIC_EXTENSIONS': '107',
\     'BLOCK_CODE_VARIATION_SELECTORS': '108',
\     'BLOCK_CODE_SUPPLEMENTARY_PRIVATE_USE_AREA_A': '109',
\     'BLOCK_CODE_SUPPLEMENTARY_PRIVATE_USE_AREA_B': '110',
\     'BLOCK_CODE_LIMBU': '111',
\     'BLOCK_CODE_TAI_LE': '112',
\     'BLOCK_CODE_KHMER_SYMBOLS': '113',
\     'BLOCK_CODE_PHONETIC_EXTENSIONS': '114',
\     'BLOCK_CODE_MISCELLANEOUS_SYMBOLS_AND_ARROWS': '115',
\     'BLOCK_CODE_YIJING_HEXAGRAM_SYMBOLS': '116',
\     'BLOCK_CODE_LINEAR_B_SYLLABARY': '117',
\     'BLOCK_CODE_LINEAR_B_IDEOGRAMS': '118',
\     'BLOCK_CODE_AEGEAN_NUMBERS': '119',
\     'BLOCK_CODE_UGARITIC': '120',
\     'BLOCK_CODE_SHAVIAN': '121',
\     'BLOCK_CODE_OSMANYA': '122',
\     'BLOCK_CODE_CYPRIOT_SYLLABARY': '123',
\     'BLOCK_CODE_TAI_XUAN_JING_SYMBOLS': '124',
\     'BLOCK_CODE_VARIATION_SELECTORS_SUPPLEMENT': '125',
\     'BLOCK_CODE_ANCIENT_GREEK_MUSICAL_NOTATION': '126',
\     'BLOCK_CODE_ANCIENT_GREEK_NUMBERS': '127',
\     'BLOCK_CODE_ARABIC_SUPPLEMENT': '128',
\     'BLOCK_CODE_BUGINESE': '129',
\     'BLOCK_CODE_CJK_STROKES': '130',
\     'BLOCK_CODE_COMBINING_DIACRITICAL_MARKS_SUPPLEMENT': '131',
\     'BLOCK_CODE_COPTIC': '132',
\     'BLOCK_CODE_ETHIOPIC_EXTENDED': '133',
\     'BLOCK_CODE_ETHIOPIC_SUPPLEMENT': '134',
\     'BLOCK_CODE_GEORGIAN_SUPPLEMENT': '135',
\     'BLOCK_CODE_GLAGOLITIC': '136',
\     'BLOCK_CODE_KHAROSHTHI': '137',
\     'BLOCK_CODE_MODIFIER_TONE_LETTERS': '138',
\     'BLOCK_CODE_NEW_TAI_LUE': '139',
\     'BLOCK_CODE_OLD_PERSIAN': '140',
\     'BLOCK_CODE_PHONETIC_EXTENSIONS_SUPPLEMENT': '141',
\     'BLOCK_CODE_SUPPLEMENTAL_PUNCTUATION': '142',
\     'BLOCK_CODE_SYLOTI_NAGRI': '143',
\     'BLOCK_CODE_TIFINAGH': '144',
\     'BLOCK_CODE_VERTICAL_FORMS': '145',
\     'BLOCK_CODE_NKO': '146',
\     'BLOCK_CODE_BALINESE': '147',
\     'BLOCK_CODE_LATIN_EXTENDED_C': '148',
\     'BLOCK_CODE_LATIN_EXTENDED_D': '149',
\     'BLOCK_CODE_PHAGS_PA': '150',
\     'BLOCK_CODE_PHOENICIAN': '151',
\     'BLOCK_CODE_CUNEIFORM': '152',
\     'BLOCK_CODE_CUNEIFORM_NUMBERS_AND_PUNCTUATION': '153',
\     'BLOCK_CODE_COUNTING_ROD_NUMERALS': '154',
\     'BLOCK_CODE_SUNDANESE': '155',
\     'BLOCK_CODE_LEPCHA': '156',
\     'BLOCK_CODE_OL_CHIKI': '157',
\     'BLOCK_CODE_CYRILLIC_EXTENDED_A': '158',
\     'BLOCK_CODE_VAI': '159',
\     'BLOCK_CODE_CYRILLIC_EXTENDED_B': '160',
\     'BLOCK_CODE_SAURASHTRA': '161',
\     'BLOCK_CODE_KAYAH_LI': '162',
\     'BLOCK_CODE_REJANG': '163',
\     'BLOCK_CODE_CHAM': '164',
\     'BLOCK_CODE_ANCIENT_SYMBOLS': '165',
\     'BLOCK_CODE_PHAISTOS_DISC': '166',
\     'BLOCK_CODE_LYCIAN': '167',
\     'BLOCK_CODE_CARIAN': '168',
\     'BLOCK_CODE_LYDIAN': '169',
\     'BLOCK_CODE_MAHJONG_TILES': '170',
\     'BLOCK_CODE_DOMINO_TILES': '171',
\     'BLOCK_CODE_SAMARITAN': '172',
\     'BLOCK_CODE_UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED': '173',
\     'BLOCK_CODE_TAI_THAM': '174',
\     'BLOCK_CODE_VEDIC_EXTENSIONS': '175',
\     'BLOCK_CODE_LISU': '176',
\     'BLOCK_CODE_BAMUM': '177',
\     'BLOCK_CODE_COMMON_INDIC_NUMBER_FORMS': '178',
\     'BLOCK_CODE_DEVANAGARI_EXTENDED': '179',
\     'BLOCK_CODE_HANGUL_JAMO_EXTENDED_A': '180',
\     'BLOCK_CODE_JAVANESE': '181',
\     'BLOCK_CODE_MYANMAR_EXTENDED_A': '182',
\     'BLOCK_CODE_TAI_VIET': '183',
\     'BLOCK_CODE_MEETEI_MAYEK': '184',
\     'BLOCK_CODE_HANGUL_JAMO_EXTENDED_B': '185',
\     'BLOCK_CODE_IMPERIAL_ARAMAIC': '186',
\     'BLOCK_CODE_OLD_SOUTH_ARABIAN': '187',
\     'BLOCK_CODE_AVESTAN': '188',
\     'BLOCK_CODE_INSCRIPTIONAL_PARTHIAN': '189',
\     'BLOCK_CODE_INSCRIPTIONAL_PAHLAVI': '190',
\     'BLOCK_CODE_OLD_TURKIC': '191',
\     'BLOCK_CODE_RUMI_NUMERAL_SYMBOLS': '192',
\     'BLOCK_CODE_KAITHI': '193',
\     'BLOCK_CODE_EGYPTIAN_HIEROGLYPHS': '194',
\     'BLOCK_CODE_ENCLOSED_ALPHANUMERIC_SUPPLEMENT': '195',
\     'BLOCK_CODE_ENCLOSED_IDEOGRAPHIC_SUPPLEMENT': '196',
\     'BLOCK_CODE_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C': '197',
\     'BLOCK_CODE_MANDAIC': '198',
\     'BLOCK_CODE_BATAK': '199',
\     'BLOCK_CODE_ETHIOPIC_EXTENDED_A': '200',
\     'BLOCK_CODE_BRAHMI': '201',
\     'BLOCK_CODE_BAMUM_SUPPLEMENT': '202',
\     'BLOCK_CODE_KANA_SUPPLEMENT': '203',
\     'BLOCK_CODE_PLAYING_CARDS': '204',
\     'BLOCK_CODE_MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS': '205',
\     'BLOCK_CODE_EMOTICONS': '206',
\     'BLOCK_CODE_TRANSPORT_AND_MAP_SYMBOLS': '207',
\     'BLOCK_CODE_ALCHEMICAL_SYMBOLS': '208',
\     'BLOCK_CODE_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D': '209',
\     'BLOCK_CODE_ARABIC_EXTENDED_A': '210',
\     'BLOCK_CODE_ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS': '211',
\     'BLOCK_CODE_CHAKMA': '212',
\     'BLOCK_CODE_MEETEI_MAYEK_EXTENSIONS': '213',
\     'BLOCK_CODE_MEROITIC_CURSIVE': '214',
\     'BLOCK_CODE_MEROITIC_HIEROGLYPHS': '215',
\     'BLOCK_CODE_MIAO': '216',
\     'BLOCK_CODE_SHARADA': '217',
\     'BLOCK_CODE_SORA_SOMPENG': '218',
\     'BLOCK_CODE_SUNDANESE_SUPPLEMENT': '219',
\     'BLOCK_CODE_TAKRI': '220',
\     'BLOCK_CODE_COUNT': '221',
\     'BLOCK_CODE_INVALID_CODE': '-1',
\     'BPT_NONE': '0',
\     'BPT_OPEN': '1',
\     'BPT_CLOSE': '2',
\     'BPT_COUNT': '3',
\     'EA_NEUTRAL': '0',
\     'EA_AMBIGUOUS': '1',
\     'EA_HALFWIDTH': '2',
\     'EA_FULLWIDTH': '3',
\     'EA_NARROW': '4',
\     'EA_WIDE': '5',
\     'EA_COUNT': '6',
\     'UNICODE_CHAR_NAME': '0',
\     'UNICODE_10_CHAR_NAME': '1',
\     'EXTENDED_CHAR_NAME': '2',
\     'CHAR_NAME_ALIAS': '3',
\     'CHAR_NAME_CHOICE_COUNT': '4',
\     'SHORT_PROPERTY_NAME': '0',
\     'LONG_PROPERTY_NAME': '1',
\     'PROPERTY_NAME_CHOICE_COUNT': '2',
\     'DT_NONE': '0',
\     'DT_CANONICAL': '1',
\     'DT_COMPAT': '2',
\     'DT_CIRCLE': '3',
\     'DT_FINAL': '4',
\     'DT_FONT': '5',
\     'DT_FRACTION': '6',
\     'DT_INITIAL': '7',
\     'DT_ISOLATED': '8',
\     'DT_MEDIAL': '9',
\     'DT_NARROW': '10',
\     'DT_NOBREAK': '11',
\     'DT_SMALL': '12',
\     'DT_SQUARE': '13',
\     'DT_SUB': '14',
\     'DT_SUPER': '15',
\     'DT_VERTICAL': '16',
\     'DT_WIDE': '17',
\     'DT_COUNT': '18',
\     'JT_NON_JOINING': '0',
\     'JT_JOIN_CAUSING': '1',
\     'JT_DUAL_JOINING': '2',
\     'JT_LEFT_JOINING': '3',
\     'JT_RIGHT_JOINING': '4',
\     'JT_TRANSPARENT': '5',
\     'JT_COUNT': '6',
\     'JG_NO_JOINING_GROUP': '0',
\     'JG_AIN': '1',
\     'JG_ALAPH': '2',
\     'JG_ALEF': '3',
\     'JG_BEH': '4',
\     'JG_BETH': '5',
\     'JG_DAL': '6',
\     'JG_DALATH_RISH': '7',
\     'JG_E': '8',
\     'JG_FEH': '9',
\     'JG_FINAL_SEMKATH': '10',
\     'JG_GAF': '11',
\     'JG_GAMAL': '12',
\     'JG_HAH': '13',
\     'JG_TEH_MARBUTA_GOAL': '14',
\     'JG_HAMZA_ON_HEH_GOAL': '14',
\     'JG_HE': '15',
\     'JG_HEH': '16',
\     'JG_HEH_GOAL': '17',
\     'JG_HETH': '18',
\     'JG_KAF': '19',
\     'JG_KAPH': '20',
\     'JG_KNOTTED_HEH': '21',
\     'JG_LAM': '22',
\     'JG_LAMADH': '23',
\     'JG_MEEM': '24',
\     'JG_MIM': '25',
\     'JG_NOON': '26',
\     'JG_NUN': '27',
\     'JG_PE': '28',
\     'JG_QAF': '29',
\     'JG_QAPH': '30',
\     'JG_REH': '31',
\     'JG_REVERSED_PE': '32',
\     'JG_SAD': '33',
\     'JG_SADHE': '34',
\     'JG_SEEN': '35',
\     'JG_SEMKATH': '36',
\     'JG_SHIN': '37',
\     'JG_SWASH_KAF': '38',
\     'JG_SYRIAC_WAW': '39',
\     'JG_TAH': '40',
\     'JG_TAW': '41',
\     'JG_TEH_MARBUTA': '42',
\     'JG_TETH': '43',
\     'JG_WAW': '44',
\     'JG_YEH': '45',
\     'JG_YEH_BARREE': '46',
\     'JG_YEH_WITH_TAIL': '47',
\     'JG_YUDH': '48',
\     'JG_YUDH_HE': '49',
\     'JG_ZAIN': '50',
\     'JG_FE': '51',
\     'JG_KHAPH': '52',
\     'JG_ZHAIN': '53',
\     'JG_BURUSHASKI_YEH_BARREE': '54',
\     'JG_FARSI_YEH': '55',
\     'JG_NYA': '56',
\     'JG_ROHINGYA_YEH': '57',
\     'JG_COUNT': '58',
\     'GCB_OTHER': '0',
\     'GCB_CONTROL': '1',
\     'GCB_CR': '2',
\     'GCB_EXTEND': '3',
\     'GCB_L': '4',
\     'GCB_LF': '5',
\     'GCB_LV': '6',
\     'GCB_LVT': '7',
\     'GCB_T': '8',
\     'GCB_V': '9',
\     'GCB_SPACING_MARK': '10',
\     'GCB_PREPEND': '11',
\     'GCB_REGIONAL_INDICATOR': '12',
\     'GCB_COUNT': '13',
\     'WB_OTHER': '0',
\     'WB_ALETTER': '1',
\     'WB_FORMAT': '2',
\     'WB_KATAKANA': '3',
\     'WB_MIDLETTER': '4',
\     'WB_MIDNUM': '5',
\     'WB_NUMERIC': '6',
\     'WB_EXTENDNUMLET': '7',
\     'WB_CR': '8',
\     'WB_EXTEND': '9',
\     'WB_LF': '10',
\     'WB_MIDNUMLET': '11',
\     'WB_NEWLINE': '12',
\     'WB_REGIONAL_INDICATOR': '13',
\     'WB_HEBREW_LETTER': '14',
\     'WB_SINGLE_QUOTE': '15',
\     'WB_DOUBLE_QUOTE': '16',
\     'WB_COUNT': '17',
\     'SB_OTHER': '0',
\     'SB_ATERM': '1',
\     'SB_CLOSE': '2',
\     'SB_FORMAT': '3',
\     'SB_LOWER': '4',
\     'SB_NUMERIC': '5',
\     'SB_OLETTER': '6',
\     'SB_SEP': '7',
\     'SB_SP': '8',
\     'SB_STERM': '9',
\     'SB_UPPER': '10',
\     'SB_CR': '11',
\     'SB_EXTEND': '12',
\     'SB_LF': '13',
\     'SB_SCONTINUE': '14',
\     'SB_COUNT': '15',
\     'LB_UNKNOWN': '0',
\     'LB_AMBIGUOUS': '1',
\     'LB_ALPHABETIC': '2',
\     'LB_BREAK_BOTH': '3',
\     'LB_BREAK_AFTER': '4',
\     'LB_BREAK_BEFORE': '5',
\     'LB_MANDATORY_BREAK': '6',
\     'LB_CONTINGENT_BREAK': '7',
\     'LB_CLOSE_PUNCTUATION': '8',
\     'LB_COMBINING_MARK': '9',
\     'LB_CARRIAGE_RETURN': '10',
\     'LB_EXCLAMATION': '11',
\     'LB_GLUE': '12',
\     'LB_HYPHEN': '13',
\     'LB_IDEOGRAPHIC': '14',
\     'LB_INSEPARABLE': '15',
\     'LB_INSEPERABLE': '15',
\     'LB_INFIX_NUMERIC': '16',
\     'LB_LINE_FEED': '17',
\     'LB_NONSTARTER': '18',
\     'LB_NUMERIC': '19',
\     'LB_OPEN_PUNCTUATION': '20',
\     'LB_POSTFIX_NUMERIC': '21',
\     'LB_PREFIX_NUMERIC': '22',
\     'LB_QUOTATION': '23',
\     'LB_COMPLEX_CONTEXT': '24',
\     'LB_SURROGATE': '25',
\     'LB_SPACE': '26',
\     'LB_BREAK_SYMBOLS': '27',
\     'LB_ZWSPACE': '28',
\     'LB_NEXT_LINE': '29',
\     'LB_WORD_JOINER': '30',
\     'LB_H2': '31',
\     'LB_H3': '32',
\     'LB_JL': '33',
\     'LB_JT': '34',
\     'LB_JV': '35',
\     'LB_CLOSE_PARENTHESIS': '36',
\     'LB_CONDITIONAL_JAPANESE_STARTER': '37',
\     'LB_HEBREW_LETTER': '38',
\     'LB_REGIONAL_INDICATOR': '39',
\     'LB_COUNT': '40',
\     'NT_NONE': '0',
\     'NT_DECIMAL': '1',
\     'NT_DIGIT': '2',
\     'NT_NUMERIC': '3',
\     'NT_COUNT': '4',
\     'HST_NOT_APPLICABLE': '0',
\     'HST_LEADING_JAMO': '1',
\     'HST_VOWEL_JAMO': '2',
\     'HST_TRAILING_JAMO': '3',
\     'HST_LV_SYLLABLE': '4',
\     'HST_LVT_SYLLABLE': '5',
\     'HST_COUNT': '6',
\   },
\   'static_methods': {
\     'charAge': { 'signature': 'mixed $codepoint | array', 'return_type': 'array'},
\     'charDigitValue': { 'signature': 'mixed $codepoint | int', 'return_type': 'int'},
\     'charDirection': { 'signature': 'mixed $codepoint | int', 'return_type': 'int'},
\     'charFromName': { 'signature': 'string $characterName [, int $nameChoice = IntlChar::UNICODE_CHAR_NAME] | int', 'return_type': 'int'},
\     'charMirror': { 'signature': 'mixed $codepoint | mixed', 'return_type': 'mixed'},
\     'charName': { 'signature': 'mixed $codepoint [, int $nameChoice = IntlChar::UNICODE_CHAR_NAME] | string', 'return_type': 'string'},
\     'charType': { 'signature': 'mixed $codepoint | int', 'return_type': 'int'},
\     'chr': { 'signature': 'mixed $codepoint | string', 'return_type': 'string'},
\     'digit': { 'signature': 'string $codepoint [, int $radix = 10] | int', 'return_type': 'int'},
\     'enumCharNames': { 'signature': 'mixed $start, mixed $limit, callable $callback [, int $nameChoice = IntlChar::UNICODE_CHAR_NAME] | void', 'return_type': 'void'},
\     'enumCharTypes': { 'signature': 'callable $callback | void', 'return_type': 'void'},
\     'foldCase': { 'signature': 'mixed $codepoint [, int $options = IntlChar::FOLD_CASE_DEFAULT] | mixed', 'return_type': 'mixed'},
\     'forDigit': { 'signature': 'int $digit [, int $radix = 10] | int', 'return_type': 'int'},
\     'getBidiPairedBracket': { 'signature': 'mixed $codepoint | mixed', 'return_type': 'mixed'},
\     'getBlockCode': { 'signature': 'mixed $codepoint | int', 'return_type': 'int'},
\     'getCombiningClass': { 'signature': 'mixed $codepoint | int', 'return_type': 'int'},
\     'getFC_NFKC_Closure': { 'signature': 'mixed $codepoint | string', 'return_type': 'string'},
\     'getIntPropertyMaxValue': { 'signature': 'int $property | int', 'return_type': 'int'},
\     'getIntPropertyMinValue': { 'signature': 'int $property | int', 'return_type': 'int'},
\     'getIntPropertyValue': { 'signature': 'mixed $codepoint, int $property | int', 'return_type': 'int'},
\     'getNumericValue': { 'signature': 'mixed $codepoint | float', 'return_type': 'float'},
\     'getPropertyEnum': { 'signature': 'string $alias | int', 'return_type': 'int'},
\     'getPropertyName': { 'signature': 'int $property [, int $nameChoice = IntlChar::LONG_PROPERTY_NAME] | string', 'return_type': 'string'},
\     'getPropertyValueEnum': { 'signature': 'int $property, string $name | int', 'return_type': 'int'},
\     'getPropertyValueName': { 'signature': 'int $property, int $value [, int $nameChoice = IntlChar::LONG_PROPERTY_NAME] | string', 'return_type': 'string'},
\     'getUnicodeVersion': { 'signature': 'void | array', 'return_type': 'array'},
\     'hasBinaryProperty': { 'signature': 'mixed $codepoint, int $property | bool', 'return_type': 'bool'},
\     'isalnum': { 'signature': 'mixed $codepoint | bool', 'return_type': 'bool'},
\     'isalpha': { 'signature': 'mixed $codepoint | bool', 'return_type': 'bool'},
\     'isbase': { 'signature': 'mixed $codepoint | bool', 'return_type': 'bool'},
\     'isblank': { 'signature': 'mixed $codepoint | bool', 'return_type': 'bool'},
\     'iscntrl': { 'signature': 'mixed $codepoint | bool', 'return_type': 'bool'},
\     'isdefined': { 'signature': 'mixed $codepoint | bool', 'return_type': 'bool'},
\     'isdigit': { 'signature': 'mixed $codepoint | bool', 'return_type': 'bool'},
\     'isgraph': { 'signature': 'mixed $codepoint | bool', 'return_type': 'bool'},
\     'isIDIgnorable': { 'signature': 'mixed $codepoint | bool', 'return_type': 'bool'},
\     'isIDPart': { 'signature': 'mixed $codepoint | bool', 'return_type': 'bool'},
\     'isIDStart': { 'signature': 'mixed $codepoint | bool', 'return_type': 'bool'},
\     'isISOControl': { 'signature': 'mixed $codepoint | bool', 'return_type': 'bool'},
\     'isJavaIDPart': { 'signature': 'mixed $codepoint | bool', 'return_type': 'bool'},
\     'isJavaIDStart': { 'signature': 'mixed $codepoint | bool', 'return_type': 'bool'},
\     'isJavaSpaceChar': { 'signature': 'mixed $codepoint | bool', 'return_type': 'bool'},
\     'islower': { 'signature': 'mixed $codepoint | bool', 'return_type': 'bool'},
\     'isMirrored': { 'signature': 'mixed $codepoint | bool', 'return_type': 'bool'},
\     'isprint': { 'signature': 'mixed $codepoint | bool', 'return_type': 'bool'},
\     'ispunct': { 'signature': 'mixed $codepoint | bool', 'return_type': 'bool'},
\     'isspace': { 'signature': 'mixed $codepoint | bool', 'return_type': 'bool'},
\     'istitle': { 'signature': 'mixed $codepoint | bool', 'return_type': 'bool'},
\     'isUAlphabetic': { 'signature': 'mixed $codepoint | bool', 'return_type': 'bool'},
\     'isULowercase': { 'signature': 'mixed $codepoint | bool', 'return_type': 'bool'},
\     'isupper': { 'signature': 'mixed $codepoint | bool', 'return_type': 'bool'},
\     'isUUppercase': { 'signature': 'mixed $codepoint | bool', 'return_type': 'bool'},
\     'isUWhiteSpace': { 'signature': 'mixed $codepoint | bool', 'return_type': 'bool'},
\     'isWhitespace': { 'signature': 'mixed $codepoint | bool', 'return_type': 'bool'},
\     'isxdigit': { 'signature': 'mixed $codepoint | bool', 'return_type': 'bool'},
\     'ord': { 'signature': 'mixed $character | int', 'return_type': 'int'},
\     'tolower': { 'signature': 'mixed $codepoint | mixed', 'return_type': 'mixed'},
\     'totitle': { 'signature': 'mixed $codepoint | mixed', 'return_type': 'mixed'},
\     'toupper': { 'signature': 'mixed $codepoint | mixed', 'return_type': 'mixed'},
\   },
\},
\'intlcodepointbreakiterator': {
\   'name': 'IntlCodePointBreakIterator',
\   'constants': {
\     'IntlBreakIterator::DONE': '-1',
\     'IntlBreakIterator::WORD_NONE': '0',
\     'IntlBreakIterator::WORD_NONE_LIMIT': '100',
\     'IntlBreakIterator::WORD_NUMBER': '100',
\     'IntlBreakIterator::WORD_NUMBER_LIMIT': '200',
\     'IntlBreakIterator::WORD_LETTER': '200',
\     'IntlBreakIterator::WORD_LETTER_LIMIT': '300',
\     'IntlBreakIterator::WORD_KANA': '300',
\     'IntlBreakIterator::WORD_KANA_LIMIT': '400',
\     'IntlBreakIterator::WORD_IDEO': '400',
\     'IntlBreakIterator::WORD_IDEO_LIMIT': '500',
\     'IntlBreakIterator::LINE_SOFT': '0',
\     'IntlBreakIterator::LINE_SOFT_LIMIT': '100',
\     'IntlBreakIterator::LINE_HARD': '100',
\     'IntlBreakIterator::LINE_HARD_LIMIT': '200',
\     'IntlBreakIterator::SENTENCE_TERM': '0',
\     'IntlBreakIterator::SENTENCE_TERM_LIMIT': '100',
\     'IntlBreakIterator::SENTENCE_SEP': '100',
\     'IntlBreakIterator::SENTENCE_SEP_LIMIT': '200',
\   },
\   'methods': {
\     'getLastCodePoint': { 'signature': 'void | int', 'return_type': 'int'},
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'current': { 'signature': 'void | int', 'return_type': 'int'},
\     'first': { 'signature': 'void | int', 'return_type': 'int'},
\     'following': { 'signature': 'int $offset | int', 'return_type': 'int'},
\     'getErrorCode': { 'signature': 'void | int', 'return_type': 'int'},
\     'intl_get_error_code': { 'signature': 'void | int', 'return_type': 'int'},
\     'getErrorMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'intl_get_error_message': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLocale': { 'signature': 'string $locale_type | string', 'return_type': 'string'},
\     'getPartsIterator': { 'signature': '[ int $key_type = IntlPartsIterator::KEY_SEQUENTIAL] | IntlPartsIterator', 'return_type': 'IntlPartsIterator'},
\     'getText': { 'signature': 'void | string', 'return_type': 'string'},
\     'isBoundary': { 'signature': 'int $offset | bool', 'return_type': 'bool'},
\     'last': { 'signature': 'void | int', 'return_type': 'int'},
\     'next': { 'signature': '[ int $offset] | int', 'return_type': 'int'},
\     'preceding': { 'signature': 'int $offset | int', 'return_type': 'int'},
\     'previous': { 'signature': 'void | int', 'return_type': 'int'},
\     'setText': { 'signature': 'string $text | bool', 'return_type': 'bool'},
\   },
\   'static_methods': {
\     'createCharacterInstance': { 'signature': '[ string $locale] | IntlBreakIterator', 'return_type': 'IntlBreakIterator'},
\     'createCodePointInstance': { 'signature': 'void | IntlBreakIterator', 'return_type': 'IntlBreakIterator'},
\     'createLineInstance': { 'signature': '[ string $locale] | IntlBreakIterator', 'return_type': 'IntlBreakIterator'},
\     'createSentenceInstance': { 'signature': '[ string $locale] | IntlBreakIterator', 'return_type': 'IntlBreakIterator'},
\     'createTitleInstance': { 'signature': '[ string $locale] | IntlBreakIterator', 'return_type': 'IntlBreakIterator'},
\     'createWordInstance': { 'signature': '[ string $locale] | IntlBreakIterator', 'return_type': 'IntlBreakIterator'},
\   },
\},
\'intldateformatter': {
\   'name': 'IntlDateFormatter',
\   'methods': {
\     '__construct': { 'signature': 'string $locale, int $datetype, int $timetype [, mixed $timezone = NULL [, mixed $calendar = NULL [, string $pattern = ""]]]', 'return_type': ''},
\     'format': { 'signature': 'mixed $value | string', 'return_type': 'string'},
\     'getCalendar': { 'signature': 'void | int', 'return_type': 'int'},
\     'getDateType': { 'signature': 'void | int', 'return_type': 'int'},
\     'getErrorCode': { 'signature': 'void | int', 'return_type': 'int'},
\     'getErrorMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLocale': { 'signature': '[ int $which] | string', 'return_type': 'string'},
\     'getPattern': { 'signature': 'void | string', 'return_type': 'string'},
\     'getTimeType': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTimeZoneId': { 'signature': 'void | string', 'return_type': 'string'},
\     'getCalendarObject': { 'signature': 'void | IntlCalendar', 'return_type': 'IntlCalendar'},
\     'getTimeZone': { 'signature': 'void | IntlTimeZone', 'return_type': 'IntlTimeZone'},
\     'isLenient': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'localtime': { 'signature': 'string $value [, int &$position] | array', 'return_type': 'array'},
\     'parse': { 'signature': 'string $value [, int &$position] | int', 'return_type': 'int'},
\     'setCalendar': { 'signature': 'mixed $which | bool', 'return_type': 'bool'},
\     'setLenient': { 'signature': 'bool $lenient | bool', 'return_type': 'bool'},
\     'setPattern': { 'signature': 'string $pattern | bool', 'return_type': 'bool'},
\     'setTimeZoneId': { 'signature': 'string $zone | bool', 'return_type': 'bool'},
\     'setTimeZone': { 'signature': 'mixed $zone | bool', 'return_type': 'bool'},
\   },
\   'static_methods': {
\     'create': { 'signature': 'string $locale, int $datetype, int $timetype [, mixed $timezone = NULL [, mixed $calendar = NULL [, string $pattern = ""]]] | IntlDateFormatter', 'return_type': 'IntlDateFormatter'},
\     'formatObject': { 'signature': 'object $object [, mixed $format = NULL [, string $locale = NULL]] | string', 'return_type': 'string'},
\   },
\},
\'intlexception': {
\   'name': 'IntlException',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'intlgregoriancalendar': {
\   'name': 'IntlGregorianCalendar',
\   'constants': {
\     'IntlCalendar::FIELD_ERA': '0',
\     'IntlCalendar::FIELD_YEAR': '1',
\     'IntlCalendar::FIELD_MONTH': '2',
\     'IntlCalendar::FIELD_WEEK_OF_YEAR': '3',
\     'IntlCalendar::FIELD_WEEK_OF_MONTH': '4',
\     'IntlCalendar::FIELD_DATE': '5',
\     'IntlCalendar::FIELD_DAY_OF_YEAR': '6',
\     'IntlCalendar::FIELD_DAY_OF_WEEK': '7',
\     'IntlCalendar::FIELD_DAY_OF_WEEK_IN_MONTH': '8',
\     'IntlCalendar::FIELD_AM_PM': '9',
\     'IntlCalendar::FIELD_HOUR': '10',
\     'IntlCalendar::FIELD_HOUR_OF_DAY': '11',
\     'IntlCalendar::FIELD_MINUTE': '12',
\     'IntlCalendar::FIELD_SECOND': '13',
\     'IntlCalendar::FIELD_MILLISECOND': '14',
\     'IntlCalendar::FIELD_ZONE_OFFSET': '15',
\     'IntlCalendar::FIELD_DST_OFFSET': '16',
\     'IntlCalendar::FIELD_YEAR_WOY': '17',
\     'IntlCalendar::FIELD_DOW_LOCAL': '18',
\     'IntlCalendar::FIELD_EXTENDED_YEAR': '19',
\     'IntlCalendar::FIELD_JULIAN_DAY': '20',
\     'IntlCalendar::FIELD_MILLISECONDS_IN_DAY': '21',
\     'IntlCalendar::FIELD_IS_LEAP_MONTH': '22',
\     'IntlCalendar::FIELD_FIELD_COUNT': '23',
\     'IntlCalendar::FIELD_DAY_OF_MONTH': '5',
\     'IntlCalendar::DOW_SUNDAY': '1',
\     'IntlCalendar::DOW_MONDAY': '2',
\     'IntlCalendar::DOW_TUESDAY': '3',
\     'IntlCalendar::DOW_WEDNESDAY': '4',
\     'IntlCalendar::DOW_THURSDAY': '5',
\     'IntlCalendar::DOW_FRIDAY': '6',
\     'IntlCalendar::DOW_SATURDAY': '7',
\     'IntlCalendar::DOW_TYPE_WEEKDAY': '0',
\     'IntlCalendar::DOW_TYPE_WEEKEND': '1',
\     'IntlCalendar::DOW_TYPE_WEEKEND_OFFSET': '2',
\     'IntlCalendar::DOW_TYPE_WEEKEND_CEASE': '3',
\     'IntlCalendar::WALLTIME_FIRST': '1',
\     'IntlCalendar::WALLTIME_LAST': '0',
\     'IntlCalendar::WALLTIME_NEXT_VALID': '2',
\   },
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'getGregorianChange': { 'signature': 'void | float', 'return_type': 'float'},
\     'isLeapYear': { 'signature': 'int $year | bool', 'return_type': 'bool'},
\     'setGregorianChange': { 'signature': 'float $date | bool', 'return_type': 'bool'},
\     'add': { 'signature': 'int $field, int $amount | bool', 'return_type': 'bool'},
\     'intlcal_add': { 'signature': 'IntlCalendar $cal, int $field, int $amount | bool', 'return_type': 'bool'},
\     'after': { 'signature': 'IntlCalendar $other | bool', 'return_type': 'bool'},
\     'intlcal_after': { 'signature': 'IntlCalendar $cal, IntlCalendar $other | bool', 'return_type': 'bool'},
\     'before': { 'signature': 'IntlCalendar $other | bool', 'return_type': 'bool'},
\     'intlcal_before': { 'signature': 'IntlCalendar $cal, IntlCalendar $other | bool', 'return_type': 'bool'},
\     'clear': { 'signature': '[ int $field = NULL] | bool', 'return_type': 'bool'},
\     'intlcal_clear': { 'signature': 'IntlCalendar $cal [, int $field = NULL] | bool', 'return_type': 'bool'},
\     'intlcal_create_instance': { 'signature': '[ mixed $timeZone = NULL [, string $locale = ""]] | IntlCalendar', 'return_type': 'IntlCalendar'},
\     'equals': { 'signature': 'IntlCalendar $other | bool', 'return_type': 'bool'},
\     'intlcal_equals': { 'signature': 'IntlCalendar $cal, IntlCalendar $other | bool', 'return_type': 'bool'},
\     'fieldDifference': { 'signature': 'float $when, int $field | int', 'return_type': 'int'},
\     'intlcal_field_difference': { 'signature': 'IntlCalendar $cal, float $when, int $field | int', 'return_type': 'int'},
\     'intlcal_from_date_time': { 'signature': 'mixed $dateTime | IntlCalendar', 'return_type': 'IntlCalendar'},
\     'get': { 'signature': 'int $field | int', 'return_type': 'int'},
\     'intlcal_get': { 'signature': 'IntlCalendar $cal, int $field | int', 'return_type': 'int'},
\     'getActualMaximum': { 'signature': 'int $field | int', 'return_type': 'int'},
\     'intlcal_get_actual_maximum': { 'signature': 'IntlCalendar $cal, int $field | int', 'return_type': 'int'},
\     'getActualMinimum': { 'signature': 'int $field | int', 'return_type': 'int'},
\     'intlcal_get_actual_minimum': { 'signature': 'IntlCalendar $cal, int $field | int', 'return_type': 'int'},
\     'intlcal_get_available_locales': { 'signature': 'void | array', 'return_type': 'array'},
\     'getDayOfWeekType': { 'signature': 'int $dayOfWeek | int', 'return_type': 'int'},
\     'intlcal_get_day_of_week_type': { 'signature': 'IntlCalendar $cal, int $dayOfWeek | int', 'return_type': 'int'},
\     'getErrorCode': { 'signature': 'void | int', 'return_type': 'int'},
\     'getErrorMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getFirstDayOfWeek': { 'signature': 'void | int', 'return_type': 'int'},
\     'intlcal_get_first_day_of_week': { 'signature': 'IntlCalendar $cal | int', 'return_type': 'int'},
\     'getGreatestMinimum': { 'signature': 'int $field | int', 'return_type': 'int'},
\     'intlcal_get_greatest_minimum': { 'signature': 'IntlCalendar $cal, int $field | int', 'return_type': 'int'},
\     'intlcal_get_keyword_values_for_locale': { 'signature': 'string $key, string $locale, bool $commonlyUsed | Iterator', 'return_type': 'Iterator'},
\     'getLeastMaximum': { 'signature': 'int $field | int', 'return_type': 'int'},
\     'intlcal_get_least_maximum': { 'signature': 'IntlCalendar $cal, int $field | int', 'return_type': 'int'},
\     'getLocale': { 'signature': 'int $localeType | string', 'return_type': 'string'},
\     'intlcal_get_locale': { 'signature': 'IntlCalendar $cal, int $localeType | string', 'return_type': 'string'},
\     'getMaximum': { 'signature': 'int $field | int', 'return_type': 'int'},
\     'intlcal_get_maximum': { 'signature': 'IntlCalendar $cal, int $field | int', 'return_type': 'int'},
\     'getMinimalDaysInFirstWeek': { 'signature': 'void | int', 'return_type': 'int'},
\     'intlcal_get_minimal_days_in_first_week': { 'signature': 'IntlCalendar $cal, int $minimalDays | bool', 'return_type': 'bool'},
\     'getMinimum': { 'signature': 'int $field | int', 'return_type': 'int'},
\     'intlcal_get_minimum': { 'signature': 'IntlCalendar $cal, int $field | int', 'return_type': 'int'},
\     'intlcal_get_now': { 'signature': 'void | float', 'return_type': 'float'},
\     'getRepeatedWallTimeOption': { 'signature': 'void | int', 'return_type': 'int'},
\     'intlcal_get_repeated_wall_time_option': { 'signature': 'IntlCalendar $cal | int', 'return_type': 'int'},
\     'getSkippedWallTimeOption': { 'signature': 'void | int', 'return_type': 'int'},
\     'intlcal_get_skipped_wall_time_option': { 'signature': 'IntlCalendar $cal | int', 'return_type': 'int'},
\     'getTime': { 'signature': 'void | float', 'return_type': 'float'},
\     'intlcal_get_time': { 'signature': 'IntlCalendar $cal | float', 'return_type': 'float'},
\     'getTimeZone': { 'signature': 'void | IntlTimeZone', 'return_type': 'IntlTimeZone'},
\     'intlcal_get_time_zone': { 'signature': 'IntlCalendar $cal | IntlTimeZone', 'return_type': 'IntlTimeZone'},
\     'getType': { 'signature': 'void | string', 'return_type': 'string'},
\     'intlcal_get_type': { 'signature': 'IntlCalendar $cal | string', 'return_type': 'string'},
\     'getWeekendTransition': { 'signature': 'string $dayOfWeek | int', 'return_type': 'int'},
\     'intlcal_get_weekend_transition': { 'signature': 'IntlCalendar $cal, string $dayOfWeek | int', 'return_type': 'int'},
\     'inDaylightTime': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'intlcal_in_daylight_time': { 'signature': 'IntlCalendar $cal | bool', 'return_type': 'bool'},
\     'isEquivalentTo': { 'signature': 'IntlCalendar $other | bool', 'return_type': 'bool'},
\     'intlcal_is_equivalent_to': { 'signature': 'IntlCalendar $cal, IntlCalendar $other | bool', 'return_type': 'bool'},
\     'isLenient': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'intlcal_is_lenient': { 'signature': 'IntlCalendar $cal | bool', 'return_type': 'bool'},
\     'isSet': { 'signature': 'int $field | bool', 'return_type': 'bool'},
\     'intlcal_is_set': { 'signature': 'IntlCalendar $cal, int $field | bool', 'return_type': 'bool'},
\     'isWeekend': { 'signature': '[ float $date = NULL] | bool', 'return_type': 'bool'},
\     'intlcal_is_weekend': { 'signature': 'IntlCalendar $cal [, float $date = NULL] | bool', 'return_type': 'bool'},
\     'roll': { 'signature': 'int $field, mixed $amountOrUpOrDown | bool', 'return_type': 'bool'},
\     'intlcal_roll': { 'signature': 'IntlCalendar $cal, int $field, mixed $amountOrUpOrDown | bool', 'return_type': 'bool'},
\     'set': { 'signature': 'int $year, int $month [, int $dayOfMonth = NULL [, int $hour = NULL [, int $minute = NULL [, int $second = NULL]]]] | bool', 'return_type': 'bool'},
\     'intlcal_set': { 'signature': 'IntlCalendar $cal, int $year, int $month [, int $dayOfMonth = NULL [, int $hour = NULL [, int $minute = NULL [, int $second = NULL]]]] | bool', 'return_type': 'bool'},
\     'setFirstDayOfWeek': { 'signature': 'int $dayOfWeek | bool', 'return_type': 'bool'},
\     'intlcal_set_first_day_of_week': { 'signature': 'IntlCalendar $cal, int $dayOfWeek | bool', 'return_type': 'bool'},
\     'setLenient': { 'signature': 'bool $isLenient | bool', 'return_type': 'bool'},
\     'intlcal_set_lenient': { 'signature': 'IntlCalendar $cal, bool $isLenient | bool', 'return_type': 'bool'},
\     'setMinimalDaysInFirstWeek': { 'signature': 'int $minimalDays | bool', 'return_type': 'bool'},
\     'setRepeatedWallTimeOption': { 'signature': 'int $wallTimeOption | bool', 'return_type': 'bool'},
\     'intlcal_set_repeated_wall_time_option': { 'signature': 'IntlCalendar $cal, int $wallTimeOption | bool', 'return_type': 'bool'},
\     'setSkippedWallTimeOption': { 'signature': 'int $wallTimeOption | bool', 'return_type': 'bool'},
\     'intlcal_set_skipped_wall_time_option': { 'signature': 'IntlCalendar $cal, int $wallTimeOption | bool', 'return_type': 'bool'},
\     'setTime': { 'signature': 'float $date | bool', 'return_type': 'bool'},
\     'intlcal_set_time': { 'signature': 'IntlCalendar $cal, float $date | bool', 'return_type': 'bool'},
\     'setTimeZone': { 'signature': 'mixed $timeZone | bool', 'return_type': 'bool'},
\     'intlcal_set_time_zone': { 'signature': 'IntlCalendar $cal, mixed $timeZone | bool', 'return_type': 'bool'},
\     'toDateTime': { 'signature': 'void | DateTime', 'return_type': 'DateTime'},
\     'intlcal_to_date_time': { 'signature': 'IntlCalendar $cal | DateTime', 'return_type': 'DateTime'},
\   },
\   'static_methods': {
\     'createInstance': { 'signature': '[ mixed $timeZone = NULL [, string $locale = ""]] | IntlCalendar', 'return_type': 'IntlCalendar'},
\     'fromDateTime': { 'signature': 'mixed $dateTime | IntlCalendar', 'return_type': 'IntlCalendar'},
\     'getAvailableLocales': { 'signature': 'void | array', 'return_type': 'array'},
\     'getKeywordValuesForLocale': { 'signature': 'string $key, string $locale, bool $commonlyUsed | Iterator', 'return_type': 'Iterator'},
\     'getNow': { 'signature': 'void | float', 'return_type': 'float'},
\   },
\},
\'intliterator': {
\   'name': 'IntlIterator',
\   'methods': {
\     'current': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'key': { 'signature': 'void | string', 'return_type': 'string'},
\     'next': { 'signature': 'void | void', 'return_type': 'void'},
\     'rewind': { 'signature': 'void | void', 'return_type': 'void'},
\     'valid': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'intlpartsiterator': {
\   'name': 'IntlPartsIterator',
\   'constants': {
\     'KEY_SEQUENTIAL': '0',
\     'KEY_LEFT': '1',
\     'KEY_RIGHT': '2',
\   },
\   'methods': {
\     'getBreakIterator': { 'signature': 'void | IntlBreakIterator', 'return_type': 'IntlBreakIterator'},
\     'current': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'key': { 'signature': 'void | string', 'return_type': 'string'},
\     'next': { 'signature': 'void | void', 'return_type': 'void'},
\     'rewind': { 'signature': 'void | void', 'return_type': 'void'},
\     'valid': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'intlrulebasedbreakiterator': {
\   'name': 'IntlRuleBasedBreakIterator',
\   'constants': {
\     'IntlBreakIterator::DONE': '-1',
\     'IntlBreakIterator::WORD_NONE': '0',
\     'IntlBreakIterator::WORD_NONE_LIMIT': '100',
\     'IntlBreakIterator::WORD_NUMBER': '100',
\     'IntlBreakIterator::WORD_NUMBER_LIMIT': '200',
\     'IntlBreakIterator::WORD_LETTER': '200',
\     'IntlBreakIterator::WORD_LETTER_LIMIT': '300',
\     'IntlBreakIterator::WORD_KANA': '300',
\     'IntlBreakIterator::WORD_KANA_LIMIT': '400',
\     'IntlBreakIterator::WORD_IDEO': '400',
\     'IntlBreakIterator::WORD_IDEO_LIMIT': '500',
\     'IntlBreakIterator::LINE_SOFT': '0',
\     'IntlBreakIterator::LINE_SOFT_LIMIT': '100',
\     'IntlBreakIterator::LINE_HARD': '100',
\     'IntlBreakIterator::LINE_HARD_LIMIT': '200',
\     'IntlBreakIterator::SENTENCE_TERM': '0',
\     'IntlBreakIterator::SENTENCE_TERM_LIMIT': '100',
\     'IntlBreakIterator::SENTENCE_SEP': '100',
\     'IntlBreakIterator::SENTENCE_SEP_LIMIT': '200',
\   },
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'getBinaryRules': { 'signature': 'void | string', 'return_type': 'string'},
\     'getRules': { 'signature': 'void | string', 'return_type': 'string'},
\     'getRuleStatus': { 'signature': 'void | int', 'return_type': 'int'},
\     'getRuleStatusVec': { 'signature': 'void | array', 'return_type': 'array'},
\     'current': { 'signature': 'void | int', 'return_type': 'int'},
\     'first': { 'signature': 'void | int', 'return_type': 'int'},
\     'following': { 'signature': 'int $offset | int', 'return_type': 'int'},
\     'getErrorCode': { 'signature': 'void | int', 'return_type': 'int'},
\     'intl_get_error_code': { 'signature': 'void | int', 'return_type': 'int'},
\     'getErrorMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'intl_get_error_message': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLocale': { 'signature': 'string $locale_type | string', 'return_type': 'string'},
\     'getPartsIterator': { 'signature': '[ int $key_type = IntlPartsIterator::KEY_SEQUENTIAL] | IntlPartsIterator', 'return_type': 'IntlPartsIterator'},
\     'getText': { 'signature': 'void | string', 'return_type': 'string'},
\     'isBoundary': { 'signature': 'int $offset | bool', 'return_type': 'bool'},
\     'last': { 'signature': 'void | int', 'return_type': 'int'},
\     'next': { 'signature': '[ int $offset] | int', 'return_type': 'int'},
\     'preceding': { 'signature': 'int $offset | int', 'return_type': 'int'},
\     'previous': { 'signature': 'void | int', 'return_type': 'int'},
\     'setText': { 'signature': 'string $text | bool', 'return_type': 'bool'},
\   },
\   'static_methods': {
\     'createCharacterInstance': { 'signature': '[ string $locale] | IntlBreakIterator', 'return_type': 'IntlBreakIterator'},
\     'createCodePointInstance': { 'signature': 'void | IntlBreakIterator', 'return_type': 'IntlBreakIterator'},
\     'createLineInstance': { 'signature': '[ string $locale] | IntlBreakIterator', 'return_type': 'IntlBreakIterator'},
\     'createSentenceInstance': { 'signature': '[ string $locale] | IntlBreakIterator', 'return_type': 'IntlBreakIterator'},
\     'createTitleInstance': { 'signature': '[ string $locale] | IntlBreakIterator', 'return_type': 'IntlBreakIterator'},
\     'createWordInstance': { 'signature': '[ string $locale] | IntlBreakIterator', 'return_type': 'IntlBreakIterator'},
\   },
\},
\'intltimezone': {
\   'name': 'IntlTimeZone',
\   'constants': {
\     'DISPLAY_SHORT': '1',
\     'DISPLAY_LONG': '2',
\   },
\   'methods': {
\     'getDisplayName': { 'signature': '[ bool $isDaylight [, int $style [, string $locale]]] | string', 'return_type': 'string'},
\     'getDSTSavings': { 'signature': 'void | int', 'return_type': 'int'},
\     'getErrorCode': { 'signature': 'void | int', 'return_type': 'int'},
\     'getErrorMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getID': { 'signature': 'void | string', 'return_type': 'string'},
\     'getOffset': { 'signature': 'float $date, bool $local, int &$rawOffset, int &$dstOffset | int', 'return_type': 'int'},
\     'getRawOffset': { 'signature': 'void | int', 'return_type': 'int'},
\     'hasSameRules': { 'signature': 'IntlTimeZone $otherTimeZone | bool', 'return_type': 'bool'},
\     'toDateTimeZone': { 'signature': 'void | DateTimeZone', 'return_type': 'DateTimeZone'},
\     'useDaylightTime': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\   'static_methods': {
\     'countEquivalentIDs': { 'signature': 'string $zoneId | int', 'return_type': 'int'},
\     'createDefault': { 'signature': 'void | IntlTimeZone', 'return_type': 'IntlTimeZone'},
\     'createEnumeration': { 'signature': '[ mixed $countryOrRawOffset] | IntlIterator', 'return_type': 'IntlIterator'},
\     'createTimeZone': { 'signature': 'string $zoneId | IntlTimeZone', 'return_type': 'IntlTimeZone'},
\     'createTimeZoneIDEnumeration': { 'signature': 'int $zoneType [, string $region [, int $rawOffset]] | IntlIterator', 'return_type': 'IntlIterator'},
\     'fromDateTimeZone': { 'signature': 'DateTimeZone $zoneId | IntlTimeZone', 'return_type': 'IntlTimeZone'},
\     'getCanonicalID': { 'signature': 'string $zoneId [, bool &$isSystemID] | string', 'return_type': 'string'},
\     'getEquivalentID': { 'signature': 'string $zoneId, int $index | string', 'return_type': 'string'},
\     'getGMT': { 'signature': 'void | IntlTimeZone', 'return_type': 'IntlTimeZone'},
\     'getIDForWindowsID': { 'signature': 'string $timezone [, string $region] | string', 'return_type': 'string'},
\     'getRegion': { 'signature': 'string $zoneId | string', 'return_type': 'string'},
\     'getTZDataVersion': { 'signature': 'void | string', 'return_type': 'string'},
\     'getUnknown': { 'signature': 'void | IntlTimeZone', 'return_type': 'IntlTimeZone'},
\     'getWindowsID': { 'signature': 'string $timezone | string', 'return_type': 'string'},
\   },
\},
\'locale': {
\   'name': 'Locale',
\   'static_methods': {
\     'acceptFromHttp': { 'signature': 'string $header | string', 'return_type': 'string'},
\     'canonicalize': { 'signature': 'string $locale | string', 'return_type': 'string'},
\     'composeLocale': { 'signature': 'array $subtags | string', 'return_type': 'string'},
\     'filterMatches': { 'signature': 'string $langtag, string $locale [, bool $canonicalize = FALSE] | bool', 'return_type': 'bool'},
\     'getAllVariants': { 'signature': 'string $locale | array', 'return_type': 'array'},
\     'getDefault': { 'signature': 'void | string', 'return_type': 'string'},
\     'getDisplayLanguage': { 'signature': 'string $locale [, string $in_locale] | string', 'return_type': 'string'},
\     'getDisplayName': { 'signature': 'string $locale [, string $in_locale] | string', 'return_type': 'string'},
\     'getDisplayRegion': { 'signature': 'string $locale [, string $in_locale] | string', 'return_type': 'string'},
\     'getDisplayScript': { 'signature': 'string $locale [, string $in_locale] | string', 'return_type': 'string'},
\     'getDisplayVariant': { 'signature': 'string $locale [, string $in_locale] | string', 'return_type': 'string'},
\     'getKeywords': { 'signature': 'string $locale | array', 'return_type': 'array'},
\     'getPrimaryLanguage': { 'signature': 'string $locale | string', 'return_type': 'string'},
\     'getRegion': { 'signature': 'string $locale | string', 'return_type': 'string'},
\     'getScript': { 'signature': 'string $locale | string', 'return_type': 'string'},
\     'lookup': { 'signature': 'array $langtag, string $locale [, bool $canonicalize = FALSE [, string $default]] | string', 'return_type': 'string'},
\     'parseLocale': { 'signature': 'string $locale | array', 'return_type': 'array'},
\     'setDefault': { 'signature': 'string $locale | bool', 'return_type': 'bool'},
\   },
\},
\'messageformatter': {
\   'name': 'MessageFormatter',
\   'methods': {
\     '__construct': { 'signature': 'string $locale, string $pattern', 'return_type': ''},
\     'format': { 'signature': 'array $args | string', 'return_type': 'string'},
\     'getErrorCode': { 'signature': 'void | int', 'return_type': 'int'},
\     'getErrorMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLocale': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPattern': { 'signature': 'void | string', 'return_type': 'string'},
\     'parse': { 'signature': 'string $value | array', 'return_type': 'array'},
\     'setPattern': { 'signature': 'string $pattern | bool', 'return_type': 'bool'},
\   },
\   'static_methods': {
\     'create': { 'signature': 'string $locale, string $pattern | MessageFormatter', 'return_type': 'MessageFormatter'},
\     'formatMessage': { 'signature': 'string $locale, string $pattern, array $args | string', 'return_type': 'string'},
\     'parseMessage': { 'signature': 'string $locale, string $pattern, string $source | array', 'return_type': 'array'},
\   },
\},
\'normalizer': {
\   'name': 'Normalizer',
\   'static_methods': {
\     'getRawDecomposition': { 'signature': 'string $input | string', 'return_type': 'string'},
\     'isNormalized': { 'signature': 'string $input [, int $form = Normalizer::FORM_C] | bool', 'return_type': 'bool'},
\     'normalize': { 'signature': 'string $input [, int $form = Normalizer::FORM_C] | string', 'return_type': 'string'},
\   },
\},
\'numberformatter': {
\   'name': 'NumberFormatter',
\   'methods': {
\     '__construct': { 'signature': 'string $locale, int $style [, string $pattern]', 'return_type': ''},
\     'formatCurrency': { 'signature': 'float $value, string $currency | string', 'return_type': 'string'},
\     'format': { 'signature': 'number $value [, int $type] | string', 'return_type': 'string'},
\     'getAttribute': { 'signature': 'int $attr | int', 'return_type': 'int'},
\     'getErrorCode': { 'signature': 'void | int', 'return_type': 'int'},
\     'getErrorMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLocale': { 'signature': '[ int $type] | string', 'return_type': 'string'},
\     'getPattern': { 'signature': 'void | string', 'return_type': 'string'},
\     'getSymbol': { 'signature': 'int $attr | string', 'return_type': 'string'},
\     'getTextAttribute': { 'signature': 'int $attr | string', 'return_type': 'string'},
\     'parseCurrency': { 'signature': 'string $value, string &$currency [, int &$position] | float', 'return_type': 'float'},
\     'parse': { 'signature': 'string $value [, int $type [, int &$position]] | mixed', 'return_type': 'mixed'},
\     'setAttribute': { 'signature': 'int $attr, int $value | bool', 'return_type': 'bool'},
\     'setPattern': { 'signature': 'string $pattern | bool', 'return_type': 'bool'},
\     'setSymbol': { 'signature': 'int $attr, string $value | bool', 'return_type': 'bool'},
\     'setTextAttribute': { 'signature': 'int $attr, string $value | bool', 'return_type': 'bool'},
\   },
\   'static_methods': {
\     'create': { 'signature': 'string $locale, int $style [, string $pattern] | NumberFormatter', 'return_type': 'NumberFormatter'},
\   },
\},
\'resourcebundle': {
\   'name': 'ResourceBundle',
\   'methods': {
\     '__construct': { 'signature': 'string $locale, string $bundlename [, bool $fallback]', 'return_type': ''},
\     'count': { 'signature': 'void | int', 'return_type': 'int'},
\     'getErrorCode': { 'signature': 'void | int', 'return_type': 'int'},
\     'getErrorMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'get': { 'signature': 'string|int $index [, bool $fallback = TRUE] | mixed', 'return_type': 'mixed'},
\     'getLocales': { 'signature': 'string $bundlename | array', 'return_type': 'array'},
\   },
\   'static_methods': {
\     'create': { 'signature': 'string $locale, string $bundlename [, bool $fallback] | ResourceBundle', 'return_type': 'ResourceBundle'},
\   },
\},
\'spoofchecker': {
\   'name': 'Spoofchecker',
\   'constants': {
\     'ASCII': '0x10000000',
\     'HIGHLY_RESTRICTIVE': '0x30000000',
\     'MODERATELY_RESTRICTIVE': '0x40000000',
\     'MINIMALLY_RESTRICTIVE': '0x50000000',
\     'UNRESTRICTIVE': '0x60000000',
\     'SINGLE_SCRIPT_RESTRICTIVE': '0x20000000',
\     'SINGLE_SCRIPT_CONFUSABLE': '1',
\     'MIXED_SCRIPT_CONFUSABLE': '2',
\     'WHOLE_SCRIPT_CONFUSABLE': '4',
\     'ANY_CASE': '8',
\     'SINGLE_SCRIPT': '16',
\     'INVISIBLE': '32',
\     'CHAR_LIMIT': '64',
\   },
\   'methods': {
\     'areConfusable': { 'signature': 'string $str1, string $str2 [, string &$error] | bool', 'return_type': 'bool'},
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'isSuspicious': { 'signature': 'string $text [, string &$error] | bool', 'return_type': 'bool'},
\     'setAllowedLocales': { 'signature': 'string $locale_list | void', 'return_type': 'void'},
\     'setChecks': { 'signature': 'int $checks | void', 'return_type': 'void'},
\   },
\},
\'transliterator': {
\   'name': 'Transliterator',
\   'constants': {
\     'FORWARD': '0',
\     'REVERSE': '1',
\   },
\   'properties': {
\     'id': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'createInverse': { 'signature': 'void | Transliterator', 'return_type': 'Transliterator'},
\     'getErrorCode': { 'signature': 'void | int', 'return_type': 'int'},
\     'getErrorMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'transliterate': { 'signature': 'string $subject [, int $start [, int $end]] | string', 'return_type': 'string'},
\   },
\   'static_methods': {
\     'create': { 'signature': 'string $id [, int $direction] | Transliterator', 'return_type': 'Transliterator'},
\     'createFromRules': { 'signature': 'string $rules [, string $direction] | Transliterator', 'return_type': 'Transliterator'},
\     'listIDs': { 'signature': 'void | array', 'return_type': 'array'},
\   },
\},
\'uconverter': {
\   'name': 'UConverter',
\   'constants': {
\     'REASON_UNASSIGNED': '0',
\     'REASON_ILLEGAL': '1',
\     'REASON_IRREGULAR': '2',
\     'REASON_RESET': '3',
\     'REASON_CLOSE': '4',
\     'REASON_CLONE': '5',
\     'UNSUPPORTED_CONVERTER': '-1',
\     'SBCS': '0',
\     'DBCS': '1',
\     'MBCS': '2',
\     'LATIN_1': '3',
\     'UTF8': '4',
\     'UTF16_BigEndian': '5',
\     'UTF16_LittleEndian': '6',
\     'UTF32_BigEndian': '7',
\     'UTF32_LittleEndian': '8',
\     'EBCDIC_STATEFUL': '9',
\     'ISO_2022': '10',
\     'LMBCS_1': '11',
\     'LMBCS_2': '12',
\     'LMBCS_3': '13',
\     'LMBCS_4': '14',
\     'LMBCS_5': '15',
\     'LMBCS_6': '16',
\     'LMBCS_8': '17',
\     'LMBCS_11': '18',
\     'LMBCS_16': '19',
\     'LMBCS_17': '20',
\     'LMBCS_18': '21',
\     'LMBCS_19': '22',
\     'LMBCS_LAST': '22',
\     'HZ': '23',
\     'SCSU': '24',
\     'ISCII': '25',
\     'US_ASCII': '26',
\     'UTF7': '27',
\     'BOCU1': '28',
\     'UTF16': '29',
\     'UTF32': '30',
\     'CESU8': '31',
\     'IMAP_MAILBOX': '32',
\   },
\   'methods': {
\     '__construct': { 'signature': '[ string $destination_encoding [, string $source_encoding]]', 'return_type': ''},
\     'convert': { 'signature': 'string $str [, bool $reverse] | string', 'return_type': 'string'},
\     'fromUCallback': { 'signature': 'int $reason, string $source, string $codePoint, int &$error | mixed', 'return_type': 'mixed'},
\     'getDestinationEncoding': { 'signature': 'void | string', 'return_type': 'string'},
\     'getDestinationType': { 'signature': 'void | int', 'return_type': 'int'},
\     'getErrorCode': { 'signature': 'void | int', 'return_type': 'int'},
\     'getErrorMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getSourceEncoding': { 'signature': 'void | string', 'return_type': 'string'},
\     'getSourceType': { 'signature': 'void | int', 'return_type': 'int'},
\     'getSubstChars': { 'signature': 'void | string', 'return_type': 'string'},
\     'setDestinationEncoding': { 'signature': 'string $encoding | void', 'return_type': 'void'},
\     'setSourceEncoding': { 'signature': 'string $encoding | void', 'return_type': 'void'},
\     'setSubstChars': { 'signature': 'string $chars | void', 'return_type': 'void'},
\     'toUCallback': { 'signature': 'int $reason, string $source, string $codeUnits, int &$error | mixed', 'return_type': 'mixed'},
\   },
\   'static_methods': {
\     'getAliases': { 'signature': 'string $name | array', 'return_type': 'array'},
\     'getAvailable': { 'signature': 'void | array', 'return_type': 'array'},
\     'getStandards': { 'signature': 'void | array', 'return_type': 'array'},
\     'reasonText': { 'signature': '[ int $reason] | string', 'return_type': 'string'},
\     'transcode': { 'signature': 'string $str, string $toEncoding, string $fromEncoding [, array $options] | string', 'return_type': 'string'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['com'] = {
\'com_exception': {
\   'name': 'com_exception',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'com': {
\   'name': 'COM',
\   'methods': {
\     '__construct': { 'signature': 'string $module_name [, mixed $server_name = NULL [, int $codepage = CP_ACP [, string $typelib]]]', 'return_type': ''},
\   },
\},
\'dotnet': {
\   'name': 'DOTNET',
\   'methods': {
\     '__construct': { 'signature': 'string $assembly_name, string $class_name [, int $codepage = CP_ACP]', 'return_type': ''},
\   },
\},
\'variant': {
\   'name': 'VARIANT',
\   'methods': {
\     '__construct': { 'signature': '[ mixed $value = NULL [, int $type = VT_EMPTY [, int $codepage = CP_ACP]]]', 'return_type': ''},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['commonmark'] = {
\'commonmark\cql': {
\   'name': 'CommonMark\CQL',
\   'methods': {
\     '__construct': { 'signature': 'string $query', 'return_type': ''},
\   },
\},
\'commonmark\node\blockquote': {
\   'name': 'CommonMark\Node\BlockQuote',
\   'properties': {
\     'parent': { 'initializer': '', 'type': '?Node'},
\     'previous': { 'initializer': '', 'type': '?Node'},
\     'next': { 'initializer': '', 'type': '?Node'},
\     'lastChild': { 'initializer': '', 'type': '?Node'},
\     'firstChild': { 'initializer': '', 'type': '?Node'},
\     'startLine': { 'initializer': '', 'type': 'int'},
\     'endLine': { 'initializer': '', 'type': 'int'},
\     'startColumn': { 'initializer': '', 'type': 'int'},
\     'endColumn': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'appendChild': { 'signature': 'CommonMark\Node $child | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'prependChild': { 'signature': 'CommonMark\Node $child | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'insertAfter': { 'signature': 'CommonMark\Node $sibling | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'insertBefore': { 'signature': 'CommonMark\Node $sibling | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'replace': { 'signature': 'CommonMark\Node $target | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'unlink': { 'signature': 'void | void', 'return_type': 'void'},
\     'accept': { 'signature': 'CommonMark\Interfaces\IVisitor $visitor | void', 'return_type': 'void'},
\   },
\},
\'commonmark\node\bulletlist': {
\   'name': 'CommonMark\Node\BulletList',
\   'properties': {
\     'parent': { 'initializer': '', 'type': '?Node'},
\     'previous': { 'initializer': '', 'type': '?Node'},
\     'next': { 'initializer': '', 'type': '?Node'},
\     'lastChild': { 'initializer': '', 'type': '?Node'},
\     'firstChild': { 'initializer': '', 'type': '?Node'},
\     'startLine': { 'initializer': '', 'type': 'int'},
\     'endLine': { 'initializer': '', 'type': 'int'},
\     'startColumn': { 'initializer': '', 'type': 'int'},
\     'endColumn': { 'initializer': '', 'type': 'int'},
\     'tight': { 'initializer': '', 'type': 'bool'},
\     'delimiter': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     '__construct': { 'signature': 'int $tight, int $delimiter', 'return_type': ''},
\     'appendChild': { 'signature': 'CommonMark\Node $child | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'prependChild': { 'signature': 'CommonMark\Node $child | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'insertAfter': { 'signature': 'CommonMark\Node $sibling | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'insertBefore': { 'signature': 'CommonMark\Node $sibling | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'replace': { 'signature': 'CommonMark\Node $target | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'unlink': { 'signature': 'void | void', 'return_type': 'void'},
\     'accept': { 'signature': 'CommonMark\Interfaces\IVisitor $visitor | void', 'return_type': 'void'},
\   },
\},
\'commonmark\node\code': {
\   'name': 'CommonMark\Node\Code',
\   'properties': {
\     'parent': { 'initializer': '', 'type': '?Node'},
\     'previous': { 'initializer': '', 'type': '?Node'},
\     'next': { 'initializer': '', 'type': '?Node'},
\     'lastChild': { 'initializer': '', 'type': '?Node'},
\     'firstChild': { 'initializer': '', 'type': '?Node'},
\     'startLine': { 'initializer': '', 'type': 'int'},
\     'endLine': { 'initializer': '', 'type': 'int'},
\     'startColumn': { 'initializer': '', 'type': 'int'},
\     'endColumn': { 'initializer': '', 'type': 'int'},
\     'literal': { 'initializer': '', 'type': '?string'},
\   },
\   'methods': {
\     '__construct': { 'signature': 'string $literal', 'return_type': ''},
\     'appendChild': { 'signature': 'CommonMark\Node $child | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'prependChild': { 'signature': 'CommonMark\Node $child | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'insertAfter': { 'signature': 'CommonMark\Node $sibling | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'insertBefore': { 'signature': 'CommonMark\Node $sibling | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'replace': { 'signature': 'CommonMark\Node $target | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'unlink': { 'signature': 'void | void', 'return_type': 'void'},
\     'accept': { 'signature': 'CommonMark\Interfaces\IVisitor $visitor | void', 'return_type': 'void'},
\   },
\},
\'commonmark\node\codeblock': {
\   'name': 'CommonMark\Node\CodeBlock',
\   'properties': {
\     'parent': { 'initializer': '', 'type': '?Node'},
\     'previous': { 'initializer': '', 'type': '?Node'},
\     'next': { 'initializer': '', 'type': '?Node'},
\     'lastChild': { 'initializer': '', 'type': '?Node'},
\     'firstChild': { 'initializer': '', 'type': '?Node'},
\     'startLine': { 'initializer': '', 'type': 'int'},
\     'endLine': { 'initializer': '', 'type': 'int'},
\     'startColumn': { 'initializer': '', 'type': 'int'},
\     'endColumn': { 'initializer': '', 'type': 'int'},
\     'literal': { 'initializer': '', 'type': '?string'},
\     'fence': { 'initializer': '', 'type': '?string'},
\   },
\   'methods': {
\     '__construct': { 'signature': 'string $fence, string $literal', 'return_type': ''},
\     'appendChild': { 'signature': 'CommonMark\Node $child | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'prependChild': { 'signature': 'CommonMark\Node $child | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'insertAfter': { 'signature': 'CommonMark\Node $sibling | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'insertBefore': { 'signature': 'CommonMark\Node $sibling | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'replace': { 'signature': 'CommonMark\Node $target | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'unlink': { 'signature': 'void | void', 'return_type': 'void'},
\     'accept': { 'signature': 'CommonMark\Interfaces\IVisitor $visitor | void', 'return_type': 'void'},
\   },
\},
\'commonmark\node\customblock': {
\   'name': 'CommonMark\Node\CustomBlock',
\   'properties': {
\     'parent': { 'initializer': '', 'type': '?Node'},
\     'previous': { 'initializer': '', 'type': '?Node'},
\     'next': { 'initializer': '', 'type': '?Node'},
\     'lastChild': { 'initializer': '', 'type': '?Node'},
\     'firstChild': { 'initializer': '', 'type': '?Node'},
\     'startLine': { 'initializer': '', 'type': 'int'},
\     'endLine': { 'initializer': '', 'type': 'int'},
\     'startColumn': { 'initializer': '', 'type': 'int'},
\     'endColumn': { 'initializer': '', 'type': 'int'},
\     'onEnter': { 'initializer': '', 'type': '?string'},
\     'onLeave': { 'initializer': '', 'type': '?string'},
\   },
\   'methods': {
\     'appendChild': { 'signature': 'CommonMark\Node $child | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'prependChild': { 'signature': 'CommonMark\Node $child | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'insertAfter': { 'signature': 'CommonMark\Node $sibling | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'insertBefore': { 'signature': 'CommonMark\Node $sibling | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'replace': { 'signature': 'CommonMark\Node $target | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'unlink': { 'signature': 'void | void', 'return_type': 'void'},
\     'accept': { 'signature': 'CommonMark\Interfaces\IVisitor $visitor | void', 'return_type': 'void'},
\   },
\},
\'commonmark\node\custominline': {
\   'name': 'CommonMark\Node\CustomInline',
\   'properties': {
\     'parent': { 'initializer': '', 'type': '?Node'},
\     'previous': { 'initializer': '', 'type': '?Node'},
\     'next': { 'initializer': '', 'type': '?Node'},
\     'lastChild': { 'initializer': '', 'type': '?Node'},
\     'firstChild': { 'initializer': '', 'type': '?Node'},
\     'startLine': { 'initializer': '', 'type': 'int'},
\     'endLine': { 'initializer': '', 'type': 'int'},
\     'startColumn': { 'initializer': '', 'type': 'int'},
\     'endColumn': { 'initializer': '', 'type': 'int'},
\     'onEnter': { 'initializer': '', 'type': '?string'},
\     'onLeave': { 'initializer': '', 'type': '?string'},
\   },
\   'methods': {
\     'appendChild': { 'signature': 'CommonMark\Node $child | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'prependChild': { 'signature': 'CommonMark\Node $child | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'insertAfter': { 'signature': 'CommonMark\Node $sibling | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'insertBefore': { 'signature': 'CommonMark\Node $sibling | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'replace': { 'signature': 'CommonMark\Node $target | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'unlink': { 'signature': 'void | void', 'return_type': 'void'},
\     'accept': { 'signature': 'CommonMark\Interfaces\IVisitor $visitor | void', 'return_type': 'void'},
\   },
\},
\'commonmark\node\document': {
\   'name': 'CommonMark\Node\Document',
\   'properties': {
\     'parent': { 'initializer': '', 'type': '?Node'},
\     'previous': { 'initializer': '', 'type': '?Node'},
\     'next': { 'initializer': '', 'type': '?Node'},
\     'lastChild': { 'initializer': '', 'type': '?Node'},
\     'firstChild': { 'initializer': '', 'type': '?Node'},
\     'startLine': { 'initializer': '', 'type': 'int'},
\     'endLine': { 'initializer': '', 'type': 'int'},
\     'startColumn': { 'initializer': '', 'type': 'int'},
\     'endColumn': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'appendChild': { 'signature': 'CommonMark\Node $child | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'prependChild': { 'signature': 'CommonMark\Node $child | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'insertAfter': { 'signature': 'CommonMark\Node $sibling | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'insertBefore': { 'signature': 'CommonMark\Node $sibling | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'replace': { 'signature': 'CommonMark\Node $target | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'unlink': { 'signature': 'void | void', 'return_type': 'void'},
\     'accept': { 'signature': 'CommonMark\Interfaces\IVisitor $visitor | void', 'return_type': 'void'},
\   },
\},
\'commonmark\node\heading': {
\   'name': 'CommonMark\Node\Heading',
\   'properties': {
\     'parent': { 'initializer': '', 'type': '?Node'},
\     'previous': { 'initializer': '', 'type': '?Node'},
\     'next': { 'initializer': '', 'type': '?Node'},
\     'lastChild': { 'initializer': '', 'type': '?Node'},
\     'firstChild': { 'initializer': '', 'type': '?Node'},
\     'startLine': { 'initializer': '', 'type': 'int'},
\     'endLine': { 'initializer': '', 'type': 'int'},
\     'startColumn': { 'initializer': '', 'type': 'int'},
\     'endColumn': { 'initializer': '', 'type': 'int'},
\     'level': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     '__construct': { 'signature': 'int $level', 'return_type': ''},
\     'appendChild': { 'signature': 'CommonMark\Node $child | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'prependChild': { 'signature': 'CommonMark\Node $child | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'insertAfter': { 'signature': 'CommonMark\Node $sibling | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'insertBefore': { 'signature': 'CommonMark\Node $sibling | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'replace': { 'signature': 'CommonMark\Node $target | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'unlink': { 'signature': 'void | void', 'return_type': 'void'},
\     'accept': { 'signature': 'CommonMark\Interfaces\IVisitor $visitor | void', 'return_type': 'void'},
\   },
\},
\'commonmark\node\htmlblock': {
\   'name': 'CommonMark\Node\HTMLBlock',
\   'properties': {
\     'parent': { 'initializer': '', 'type': '?Node'},
\     'previous': { 'initializer': '', 'type': '?Node'},
\     'next': { 'initializer': '', 'type': '?Node'},
\     'lastChild': { 'initializer': '', 'type': '?Node'},
\     'firstChild': { 'initializer': '', 'type': '?Node'},
\     'startLine': { 'initializer': '', 'type': 'int'},
\     'endLine': { 'initializer': '', 'type': 'int'},
\     'startColumn': { 'initializer': '', 'type': 'int'},
\     'endColumn': { 'initializer': '', 'type': 'int'},
\     'literal': { 'initializer': '', 'type': '?string'},
\   },
\   'methods': {
\     '__construct': { 'signature': 'string $literal', 'return_type': ''},
\     'appendChild': { 'signature': 'CommonMark\Node $child | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'prependChild': { 'signature': 'CommonMark\Node $child | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'insertAfter': { 'signature': 'CommonMark\Node $sibling | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'insertBefore': { 'signature': 'CommonMark\Node $sibling | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'replace': { 'signature': 'CommonMark\Node $target | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'unlink': { 'signature': 'void | void', 'return_type': 'void'},
\     'accept': { 'signature': 'CommonMark\Interfaces\IVisitor $visitor | void', 'return_type': 'void'},
\   },
\},
\'commonmark\node\htmlinline': {
\   'name': 'CommonMark\Node\HTMLInline',
\   'properties': {
\     'parent': { 'initializer': '', 'type': '?Node'},
\     'previous': { 'initializer': '', 'type': '?Node'},
\     'next': { 'initializer': '', 'type': '?Node'},
\     'lastChild': { 'initializer': '', 'type': '?Node'},
\     'firstChild': { 'initializer': '', 'type': '?Node'},
\     'startLine': { 'initializer': '', 'type': 'int'},
\     'endLine': { 'initializer': '', 'type': 'int'},
\     'startColumn': { 'initializer': '', 'type': 'int'},
\     'endColumn': { 'initializer': '', 'type': 'int'},
\     'literal': { 'initializer': '', 'type': '?string'},
\   },
\   'methods': {
\     '__construct': { 'signature': 'string $literal', 'return_type': ''},
\     'appendChild': { 'signature': 'CommonMark\Node $child | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'prependChild': { 'signature': 'CommonMark\Node $child | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'insertAfter': { 'signature': 'CommonMark\Node $sibling | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'insertBefore': { 'signature': 'CommonMark\Node $sibling | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'replace': { 'signature': 'CommonMark\Node $target | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'unlink': { 'signature': 'void | void', 'return_type': 'void'},
\     'accept': { 'signature': 'CommonMark\Interfaces\IVisitor $visitor | void', 'return_type': 'void'},
\   },
\},
\'commonmark\node\image': {
\   'name': 'CommonMark\Node\Image',
\   'properties': {
\     'parent': { 'initializer': '', 'type': '?Node'},
\     'previous': { 'initializer': '', 'type': '?Node'},
\     'next': { 'initializer': '', 'type': '?Node'},
\     'lastChild': { 'initializer': '', 'type': '?Node'},
\     'firstChild': { 'initializer': '', 'type': '?Node'},
\     'startLine': { 'initializer': '', 'type': 'int'},
\     'endLine': { 'initializer': '', 'type': 'int'},
\     'startColumn': { 'initializer': '', 'type': 'int'},
\     'endColumn': { 'initializer': '', 'type': 'int'},
\     'url': { 'initializer': '', 'type': '?string'},
\     'title': { 'initializer': '', 'type': '?string'},
\   },
\   'methods': {
\     '__construct': { 'signature': 'string $url, string $title', 'return_type': ''},
\     'appendChild': { 'signature': 'CommonMark\Node $child | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'prependChild': { 'signature': 'CommonMark\Node $child | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'insertAfter': { 'signature': 'CommonMark\Node $sibling | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'insertBefore': { 'signature': 'CommonMark\Node $sibling | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'replace': { 'signature': 'CommonMark\Node $target | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'unlink': { 'signature': 'void | void', 'return_type': 'void'},
\     'accept': { 'signature': 'CommonMark\Interfaces\IVisitor $visitor | void', 'return_type': 'void'},
\   },
\},
\'commonmark\node\item': {
\   'name': 'CommonMark\Node\Item',
\   'properties': {
\     'parent': { 'initializer': '', 'type': '?Node'},
\     'previous': { 'initializer': '', 'type': '?Node'},
\     'next': { 'initializer': '', 'type': '?Node'},
\     'lastChild': { 'initializer': '', 'type': '?Node'},
\     'firstChild': { 'initializer': '', 'type': '?Node'},
\     'startLine': { 'initializer': '', 'type': 'int'},
\     'endLine': { 'initializer': '', 'type': 'int'},
\     'startColumn': { 'initializer': '', 'type': 'int'},
\     'endColumn': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'appendChild': { 'signature': 'CommonMark\Node $child | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'prependChild': { 'signature': 'CommonMark\Node $child | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'insertAfter': { 'signature': 'CommonMark\Node $sibling | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'insertBefore': { 'signature': 'CommonMark\Node $sibling | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'replace': { 'signature': 'CommonMark\Node $target | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'unlink': { 'signature': 'void | void', 'return_type': 'void'},
\     'accept': { 'signature': 'CommonMark\Interfaces\IVisitor $visitor | void', 'return_type': 'void'},
\   },
\},
\'commonmark\node\linebreak': {
\   'name': 'CommonMark\Node\LineBreak',
\   'properties': {
\     'parent': { 'initializer': '', 'type': '?Node'},
\     'previous': { 'initializer': '', 'type': '?Node'},
\     'next': { 'initializer': '', 'type': '?Node'},
\     'lastChild': { 'initializer': '', 'type': '?Node'},
\     'firstChild': { 'initializer': '', 'type': '?Node'},
\     'startLine': { 'initializer': '', 'type': 'int'},
\     'endLine': { 'initializer': '', 'type': 'int'},
\     'startColumn': { 'initializer': '', 'type': 'int'},
\     'endColumn': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'appendChild': { 'signature': 'CommonMark\Node $child | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'prependChild': { 'signature': 'CommonMark\Node $child | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'insertAfter': { 'signature': 'CommonMark\Node $sibling | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'insertBefore': { 'signature': 'CommonMark\Node $sibling | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'replace': { 'signature': 'CommonMark\Node $target | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'unlink': { 'signature': 'void | void', 'return_type': 'void'},
\     'accept': { 'signature': 'CommonMark\Interfaces\IVisitor $visitor | void', 'return_type': 'void'},
\   },
\},
\'commonmark\node\link': {
\   'name': 'CommonMark\Node\Link',
\   'properties': {
\     'parent': { 'initializer': '', 'type': '?Node'},
\     'previous': { 'initializer': '', 'type': '?Node'},
\     'next': { 'initializer': '', 'type': '?Node'},
\     'lastChild': { 'initializer': '', 'type': '?Node'},
\     'firstChild': { 'initializer': '', 'type': '?Node'},
\     'startLine': { 'initializer': '', 'type': 'int'},
\     'endLine': { 'initializer': '', 'type': 'int'},
\     'startColumn': { 'initializer': '', 'type': 'int'},
\     'endColumn': { 'initializer': '', 'type': 'int'},
\     'url': { 'initializer': '', 'type': '?string'},
\     'title': { 'initializer': '', 'type': '?string'},
\   },
\   'methods': {
\     '__construct': { 'signature': 'string $url, string $title', 'return_type': ''},
\     'appendChild': { 'signature': 'CommonMark\Node $child | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'prependChild': { 'signature': 'CommonMark\Node $child | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'insertAfter': { 'signature': 'CommonMark\Node $sibling | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'insertBefore': { 'signature': 'CommonMark\Node $sibling | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'replace': { 'signature': 'CommonMark\Node $target | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'unlink': { 'signature': 'void | void', 'return_type': 'void'},
\     'accept': { 'signature': 'CommonMark\Interfaces\IVisitor $visitor | void', 'return_type': 'void'},
\   },
\},
\'commonmark\node\orderedlist': {
\   'name': 'CommonMark\Node\OrderedList',
\   'properties': {
\     'parent': { 'initializer': '', 'type': '?Node'},
\     'previous': { 'initializer': '', 'type': '?Node'},
\     'next': { 'initializer': '', 'type': '?Node'},
\     'lastChild': { 'initializer': '', 'type': '?Node'},
\     'firstChild': { 'initializer': '', 'type': '?Node'},
\     'startLine': { 'initializer': '', 'type': 'int'},
\     'endLine': { 'initializer': '', 'type': 'int'},
\     'startColumn': { 'initializer': '', 'type': 'int'},
\     'endColumn': { 'initializer': '', 'type': 'int'},
\     'tight': { 'initializer': '', 'type': 'bool'},
\     'delimiter': { 'initializer': '', 'type': 'int'},
\     'start': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     '__construct': { 'signature': 'int $tight, int $delimiter, int $start', 'return_type': ''},
\     'appendChild': { 'signature': 'CommonMark\Node $child | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'prependChild': { 'signature': 'CommonMark\Node $child | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'insertAfter': { 'signature': 'CommonMark\Node $sibling | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'insertBefore': { 'signature': 'CommonMark\Node $sibling | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'replace': { 'signature': 'CommonMark\Node $target | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'unlink': { 'signature': 'void | void', 'return_type': 'void'},
\     'accept': { 'signature': 'CommonMark\Interfaces\IVisitor $visitor | void', 'return_type': 'void'},
\   },
\},
\'commonmark\node\paragraph': {
\   'name': 'CommonMark\Node\Paragraph',
\   'properties': {
\     'parent': { 'initializer': '', 'type': '?Node'},
\     'previous': { 'initializer': '', 'type': '?Node'},
\     'next': { 'initializer': '', 'type': '?Node'},
\     'lastChild': { 'initializer': '', 'type': '?Node'},
\     'firstChild': { 'initializer': '', 'type': '?Node'},
\     'startLine': { 'initializer': '', 'type': 'int'},
\     'endLine': { 'initializer': '', 'type': 'int'},
\     'startColumn': { 'initializer': '', 'type': 'int'},
\     'endColumn': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'appendChild': { 'signature': 'CommonMark\Node $child | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'prependChild': { 'signature': 'CommonMark\Node $child | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'insertAfter': { 'signature': 'CommonMark\Node $sibling | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'insertBefore': { 'signature': 'CommonMark\Node $sibling | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'replace': { 'signature': 'CommonMark\Node $target | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'unlink': { 'signature': 'void | void', 'return_type': 'void'},
\     'accept': { 'signature': 'CommonMark\Interfaces\IVisitor $visitor | void', 'return_type': 'void'},
\   },
\},
\'commonmark\node\softbreak': {
\   'name': 'CommonMark\Node\SoftBreak',
\   'properties': {
\     'parent': { 'initializer': '', 'type': '?Node'},
\     'previous': { 'initializer': '', 'type': '?Node'},
\     'next': { 'initializer': '', 'type': '?Node'},
\     'lastChild': { 'initializer': '', 'type': '?Node'},
\     'firstChild': { 'initializer': '', 'type': '?Node'},
\     'startLine': { 'initializer': '', 'type': 'int'},
\     'endLine': { 'initializer': '', 'type': 'int'},
\     'startColumn': { 'initializer': '', 'type': 'int'},
\     'endColumn': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'appendChild': { 'signature': 'CommonMark\Node $child | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'prependChild': { 'signature': 'CommonMark\Node $child | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'insertAfter': { 'signature': 'CommonMark\Node $sibling | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'insertBefore': { 'signature': 'CommonMark\Node $sibling | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'replace': { 'signature': 'CommonMark\Node $target | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'unlink': { 'signature': 'void | void', 'return_type': 'void'},
\     'accept': { 'signature': 'CommonMark\Interfaces\IVisitor $visitor | void', 'return_type': 'void'},
\   },
\},
\'commonmark\node\text\emphasis': {
\   'name': 'CommonMark\Node\Text\Emphasis',
\   'properties': {
\     'parent': { 'initializer': '', 'type': '?Node'},
\     'previous': { 'initializer': '', 'type': '?Node'},
\     'next': { 'initializer': '', 'type': '?Node'},
\     'lastChild': { 'initializer': '', 'type': '?Node'},
\     'firstChild': { 'initializer': '', 'type': '?Node'},
\     'startLine': { 'initializer': '', 'type': 'int'},
\     'endLine': { 'initializer': '', 'type': 'int'},
\     'startColumn': { 'initializer': '', 'type': 'int'},
\     'endColumn': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'appendChild': { 'signature': 'CommonMark\Node $child | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'prependChild': { 'signature': 'CommonMark\Node $child | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'insertAfter': { 'signature': 'CommonMark\Node $sibling | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'insertBefore': { 'signature': 'CommonMark\Node $sibling | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'replace': { 'signature': 'CommonMark\Node $target | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'unlink': { 'signature': 'void | void', 'return_type': 'void'},
\     'accept': { 'signature': 'CommonMark\Interfaces\IVisitor $visitor | void', 'return_type': 'void'},
\   },
\},
\'commonmark\node\text\strong': {
\   'name': 'CommonMark\Node\Text\Strong',
\   'properties': {
\     'parent': { 'initializer': '', 'type': '?Node'},
\     'previous': { 'initializer': '', 'type': '?Node'},
\     'next': { 'initializer': '', 'type': '?Node'},
\     'lastChild': { 'initializer': '', 'type': '?Node'},
\     'firstChild': { 'initializer': '', 'type': '?Node'},
\     'startLine': { 'initializer': '', 'type': 'int'},
\     'endLine': { 'initializer': '', 'type': 'int'},
\     'startColumn': { 'initializer': '', 'type': 'int'},
\     'endColumn': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'appendChild': { 'signature': 'CommonMark\Node $child | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'prependChild': { 'signature': 'CommonMark\Node $child | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'insertAfter': { 'signature': 'CommonMark\Node $sibling | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'insertBefore': { 'signature': 'CommonMark\Node $sibling | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'replace': { 'signature': 'CommonMark\Node $target | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'unlink': { 'signature': 'void | void', 'return_type': 'void'},
\     'accept': { 'signature': 'CommonMark\Interfaces\IVisitor $visitor | void', 'return_type': 'void'},
\   },
\},
\'commonmark\node\text': {
\   'name': 'CommonMark\Node\Text',
\   'properties': {
\     'parent': { 'initializer': '', 'type': '?Node'},
\     'previous': { 'initializer': '', 'type': '?Node'},
\     'next': { 'initializer': '', 'type': '?Node'},
\     'lastChild': { 'initializer': '', 'type': '?Node'},
\     'firstChild': { 'initializer': '', 'type': '?Node'},
\     'startLine': { 'initializer': '', 'type': 'int'},
\     'endLine': { 'initializer': '', 'type': 'int'},
\     'startColumn': { 'initializer': '', 'type': 'int'},
\     'endColumn': { 'initializer': '', 'type': 'int'},
\     'literal': { 'initializer': '', 'type': '?string'},
\   },
\   'methods': {
\     '__construct': { 'signature': 'string $literal', 'return_type': ''},
\     'appendChild': { 'signature': 'CommonMark\Node $child | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'prependChild': { 'signature': 'CommonMark\Node $child | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'insertAfter': { 'signature': 'CommonMark\Node $sibling | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'insertBefore': { 'signature': 'CommonMark\Node $sibling | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'replace': { 'signature': 'CommonMark\Node $target | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'unlink': { 'signature': 'void | void', 'return_type': 'void'},
\     'accept': { 'signature': 'CommonMark\Interfaces\IVisitor $visitor | void', 'return_type': 'void'},
\   },
\},
\'commonmark\node\thematicbreak': {
\   'name': 'CommonMark\Node\ThematicBreak',
\   'properties': {
\     'parent': { 'initializer': '', 'type': '?Node'},
\     'previous': { 'initializer': '', 'type': '?Node'},
\     'next': { 'initializer': '', 'type': '?Node'},
\     'lastChild': { 'initializer': '', 'type': '?Node'},
\     'firstChild': { 'initializer': '', 'type': '?Node'},
\     'startLine': { 'initializer': '', 'type': 'int'},
\     'endLine': { 'initializer': '', 'type': 'int'},
\     'startColumn': { 'initializer': '', 'type': 'int'},
\     'endColumn': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'appendChild': { 'signature': 'CommonMark\Node $child | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'prependChild': { 'signature': 'CommonMark\Node $child | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'insertAfter': { 'signature': 'CommonMark\Node $sibling | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'insertBefore': { 'signature': 'CommonMark\Node $sibling | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'replace': { 'signature': 'CommonMark\Node $target | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'unlink': { 'signature': 'void | void', 'return_type': 'void'},
\     'accept': { 'signature': 'CommonMark\Interfaces\IVisitor $visitor | void', 'return_type': 'void'},
\   },
\},
\'commonmark\node': {
\   'name': 'CommonMark\Node',
\   'properties': {
\     'parent': { 'initializer': '', 'type': '?Node'},
\     'previous': { 'initializer': '', 'type': '?Node'},
\     'next': { 'initializer': '', 'type': '?Node'},
\     'lastChild': { 'initializer': '', 'type': '?Node'},
\     'firstChild': { 'initializer': '', 'type': '?Node'},
\     'startLine': { 'initializer': '', 'type': 'int'},
\     'endLine': { 'initializer': '', 'type': 'int'},
\     'startColumn': { 'initializer': '', 'type': 'int'},
\     'endColumn': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'appendChild': { 'signature': 'CommonMark\Node $child | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'prependChild': { 'signature': 'CommonMark\Node $child | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'insertAfter': { 'signature': 'CommonMark\Node $sibling | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'insertBefore': { 'signature': 'CommonMark\Node $sibling | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'replace': { 'signature': 'CommonMark\Node $target | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\     'unlink': { 'signature': 'void | void', 'return_type': 'void'},
\     'accept': { 'signature': 'CommonMark\Interfaces\IVisitor $visitor | void', 'return_type': 'void'},
\   },
\},
\'commonmark\parser': {
\   'name': 'CommonMark\Parser',
\   'methods': {
\     '__construct': { 'signature': '[ int $options]', 'return_type': ''},
\     'parse': { 'signature': 'string $buffer | void', 'return_type': 'void'},
\     'finish': { 'signature': 'void | CommonMark\Node', 'return_type': 'CommonMark\Node'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['componere'] = {
\'componere\abstract\definition': {
\   'name': 'Componere\Abstract\Definition',
\   'methods': {
\     'addInterface': { 'signature': 'string $interface | Definition', 'return_type': 'Definition'},
\     'addMethod': { 'signature': 'string $name, \Componere\Method $method | Definition', 'return_type': 'Definition'},
\     'addTrait': { 'signature': 'string $trait | Definition', 'return_type': 'Definition'},
\     'getReflector': { 'signature': 'void | \ReflectionClass', 'return_type': '\ReflectionClass'},
\   },
\},
\'componere\definition': {
\   'name': 'Componere\Definition',
\   'methods': {
\     '__construct': { 'signature': 'string $name, string $parent, array $interfaces', 'return_type': ''},
\     'addConstant': { 'signature': 'string $name, \Componere\Value $value | Definition', 'return_type': 'Definition'},
\     'addProperty': { 'signature': 'string $name, \Componere\Value $value | Definition', 'return_type': 'Definition'},
\     'register': { 'signature': 'void | void', 'return_type': 'void'},
\     'isRegistered': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getClosure': { 'signature': 'string $name | \Closure', 'return_type': '\Closure'},
\     'getClosures': { 'signature': 'void | array', 'return_type': 'array'},
\     'addInterface': { 'signature': 'string $interface | Definition', 'return_type': 'Definition'},
\     'addMethod': { 'signature': 'string $name, \Componere\Method $method | Definition', 'return_type': 'Definition'},
\     'addTrait': { 'signature': 'string $trait | Definition', 'return_type': 'Definition'},
\     'getReflector': { 'signature': 'void | \ReflectionClass', 'return_type': '\ReflectionClass'},
\   },
\},
\'componere\method': {
\   'name': 'Componere\Method',
\   'methods': {
\     '__construct': { 'signature': '\Closure $closure', 'return_type': ''},
\     'setPrivate': { 'signature': 'void | Method', 'return_type': 'Method'},
\     'setProtected': { 'signature': 'void | Method', 'return_type': 'Method'},
\     'setStatic': { 'signature': 'void | Method', 'return_type': 'Method'},
\     'getReflector': { 'signature': 'void | \ReflectionMethod', 'return_type': '\ReflectionMethod'},
\   },
\},
\'componere\patch': {
\   'name': 'Componere\Patch',
\   'methods': {
\     '__construct': { 'signature': 'object $instance, array $interfaces', 'return_type': ''},
\     'apply': { 'signature': 'void | void', 'return_type': 'void'},
\     'revert': { 'signature': 'void | void', 'return_type': 'void'},
\     'isApplied': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'derive': { 'signature': 'object $instance | Patch', 'return_type': 'Patch'},
\     'getClosure': { 'signature': 'string $name | \Closure', 'return_type': '\Closure'},
\     'getClosures': { 'signature': 'void | array', 'return_type': 'array'},
\     'addInterface': { 'signature': 'string $interface | Definition', 'return_type': 'Definition'},
\     'addMethod': { 'signature': 'string $name, \Componere\Method $method | Definition', 'return_type': 'Definition'},
\     'addTrait': { 'signature': 'string $trait | Definition', 'return_type': 'Definition'},
\     'getReflector': { 'signature': 'void | \ReflectionClass', 'return_type': '\ReflectionClass'},
\   },
\},
\'componere\value': {
\   'name': 'Componere\Value',
\   'methods': {
\     '__construct': { 'signature': '[  $default]', 'return_type': ''},
\     'setPrivate': { 'signature': 'void | Value', 'return_type': 'Value'},
\     'setProtected': { 'signature': 'void | Value', 'return_type': 'Value'},
\     'setStatic': { 'signature': 'void | Value', 'return_type': 'Value'},
\     'isPrivate': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isProtected': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isStatic': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'hasDefault': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['pthreads'] = {
\'cond': {
\   'name': 'Cond',
\   'static_methods': {
\     'broadcast': { 'signature': 'int $condition | bool', 'return_type': 'bool'},
\     'create': { 'signature': 'void | int', 'return_type': 'int'},
\     'destroy': { 'signature': 'int $condition | bool', 'return_type': 'bool'},
\     'signal': { 'signature': 'int $condition | bool', 'return_type': 'bool'},
\     'wait': { 'signature': 'int $condition, int $mutex [, int $timeout] | bool', 'return_type': 'bool'},
\   },
\},
\'mutex': {
\   'name': 'Mutex',
\   'static_methods': {
\     'create': { 'signature': '[ bool $lock] | int', 'return_type': 'int'},
\     'destroy': { 'signature': 'int $mutex | bool', 'return_type': 'bool'},
\     'lock': { 'signature': 'int $mutex | bool', 'return_type': 'bool'},
\     'trylock': { 'signature': 'int $mutex | bool', 'return_type': 'bool'},
\     'unlock': { 'signature': 'int $mutex [, bool $destroy] | bool', 'return_type': 'bool'},
\   },
\},
\'pool': {
\   'name': 'Pool',
\   'properties': {
\     'size': { 'initializer': '', 'type': ''},
\     'class': { 'initializer': '', 'type': ''},
\     'workers': { 'initializer': '', 'type': ''},
\     'ctor': { 'initializer': '', 'type': ''},
\     'last': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     'collect': { 'signature': '[ Callable $collector] | int', 'return_type': 'int'},
\     '__construct': { 'signature': 'int $size [, string $class [, array $ctor]] | Pool', 'return_type': 'Pool'},
\     'resize': { 'signature': 'int $size | void', 'return_type': 'void'},
\     'shutdown': { 'signature': 'void | void', 'return_type': 'void'},
\     'submit': { 'signature': 'Threaded $task | int', 'return_type': 'int'},
\     'submitTo': { 'signature': 'int $worker, Threaded $task | int', 'return_type': 'int'},
\   },
\},
\'thread': {
\   'name': 'Thread',
\   'methods': {
\     'detach': { 'signature': 'void | void', 'return_type': 'void'},
\     'getCreatorId': { 'signature': 'void | int', 'return_type': 'int'},
\     'getThreadId': { 'signature': 'void | int', 'return_type': 'int'},
\     'isJoined': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isStarted': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'join': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'kill': { 'signature': 'void | void', 'return_type': 'void'},
\     'start': { 'signature': '[ int $options] | bool', 'return_type': 'bool'},
\     'chunk': { 'signature': 'int $size, bool $preserve | array', 'return_type': 'array'},
\     'count': { 'signature': 'void | int', 'return_type': 'int'},
\     'extend': { 'signature': 'string $class | bool', 'return_type': 'bool'},
\     'from': { 'signature': 'Closure $run [, Closure $construct [, array $args]] | Threaded', 'return_type': 'Threaded'},
\     'getTerminationInfo': { 'signature': 'void | array', 'return_type': 'array'},
\     'isRunning': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isTerminated': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isWaiting': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'lock': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'merge': { 'signature': 'mixed $from [, bool $overwrite] | bool', 'return_type': 'bool'},
\     'notify': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'notifyOne': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'pop': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'run': { 'signature': 'void | void', 'return_type': 'void'},
\     'shift': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'synchronized': { 'signature': 'Closure $block [, mixed $...] | mixed', 'return_type': 'mixed'},
\     'unlock': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'wait': { 'signature': '[ int $timeout] | bool', 'return_type': 'bool'},
\   },
\   'static_methods': {
\     'getCurrentThread': { 'signature': 'void | Thread', 'return_type': 'Thread'},
\     'getCurrentThreadId': { 'signature': 'void | int', 'return_type': 'int'},
\     'globally': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\   },
\},
\'threaded': {
\   'name': 'Threaded',
\   'methods': {
\     'chunk': { 'signature': 'int $size, bool $preserve | array', 'return_type': 'array'},
\     'count': { 'signature': 'void | int', 'return_type': 'int'},
\     'extend': { 'signature': 'string $class | bool', 'return_type': 'bool'},
\     'from': { 'signature': 'Closure $run [, Closure $construct [, array $args]] | Threaded', 'return_type': 'Threaded'},
\     'getTerminationInfo': { 'signature': 'void | array', 'return_type': 'array'},
\     'isRunning': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isTerminated': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isWaiting': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'lock': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'merge': { 'signature': 'mixed $from [, bool $overwrite] | bool', 'return_type': 'bool'},
\     'notify': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'notifyOne': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'pop': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'run': { 'signature': 'void | void', 'return_type': 'void'},
\     'shift': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'synchronized': { 'signature': 'Closure $block [, mixed $...] | mixed', 'return_type': 'mixed'},
\     'unlock': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'wait': { 'signature': '[ int $timeout] | bool', 'return_type': 'bool'},
\   },
\},
\'volatile': {
\   'name': 'Volatile',
\   'methods': {
\     'chunk': { 'signature': 'int $size, bool $preserve | array', 'return_type': 'array'},
\     'count': { 'signature': 'void | int', 'return_type': 'int'},
\     'extend': { 'signature': 'string $class | bool', 'return_type': 'bool'},
\     'from': { 'signature': 'Closure $run [, Closure $construct [, array $args]] | Threaded', 'return_type': 'Threaded'},
\     'getTerminationInfo': { 'signature': 'void | array', 'return_type': 'array'},
\     'isRunning': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isTerminated': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isWaiting': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'lock': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'merge': { 'signature': 'mixed $from [, bool $overwrite] | bool', 'return_type': 'bool'},
\     'notify': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'notifyOne': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'pop': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'run': { 'signature': 'void | void', 'return_type': 'void'},
\     'shift': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'synchronized': { 'signature': 'Closure $block [, mixed $...] | mixed', 'return_type': 'mixed'},
\     'unlock': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'wait': { 'signature': '[ int $timeout] | bool', 'return_type': 'bool'},
\   },
\},
\'worker': {
\   'name': 'Worker',
\   'methods': {
\     'collect': { 'signature': '[ Callable $collector] | int', 'return_type': 'int'},
\     'getStacked': { 'signature': 'void | int', 'return_type': 'int'},
\     'isShutdown': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isWorking': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'shutdown': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'stack': { 'signature': 'Threaded &$work | int', 'return_type': 'int'},
\     'unstack': { 'signature': 'void | int', 'return_type': 'int'},
\     'detach': { 'signature': 'void | void', 'return_type': 'void'},
\     'getCreatorId': { 'signature': 'void | int', 'return_type': 'int'},
\     'getThreadId': { 'signature': 'void | int', 'return_type': 'int'},
\     'isJoined': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isStarted': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'join': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'kill': { 'signature': 'void | void', 'return_type': 'void'},
\     'start': { 'signature': '[ int $options] | bool', 'return_type': 'bool'},
\   },
\   'static_methods': {
\     'getCurrentThread': { 'signature': 'void | Thread', 'return_type': 'Thread'},
\     'getCurrentThreadId': { 'signature': 'void | int', 'return_type': 'int'},
\     'globally': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['curl'] = {
\'curlfile': {
\   'name': 'CURLFile',
\   'properties': {
\     'name': { 'initializer': '', 'type': ''},
\     'mime': { 'initializer': '', 'type': ''},
\     'postname': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     '__construct': { 'signature': 'string $filename [, string $mimetype [, string $postname]]', 'return_type': ''},
\     'getFilename': { 'signature': 'void | string', 'return_type': 'string'},
\     'getMimeType': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPostFilename': { 'signature': 'void | string', 'return_type': 'string'},
\     'setMimeType': { 'signature': 'string $mime | void', 'return_type': 'void'},
\     'setPostFilename': { 'signature': 'string $postname | void', 'return_type': 'void'},
\     '__wakeup': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['date_time'] = {
\'dateinterval': {
\   'name': 'DateInterval',
\   'properties': {
\     'y': { 'initializer': '', 'type': 'integer'},
\     'm': { 'initializer': '', 'type': 'integer'},
\     'd': { 'initializer': '', 'type': 'integer'},
\     'h': { 'initializer': '', 'type': 'integer'},
\     'i': { 'initializer': '', 'type': 'integer'},
\     's': { 'initializer': '', 'type': 'integer'},
\     'f': { 'initializer': '', 'type': 'float'},
\     'invert': { 'initializer': '', 'type': 'integer'},
\     'days': { 'initializer': '', 'type': 'mixed'},
\   },
\   'methods': {
\     '__construct': { 'signature': 'string $interval_spec', 'return_type': ''},
\     'format': { 'signature': 'string $format | string', 'return_type': 'string'},
\   },
\   'static_methods': {
\     'createFromDateString': { 'signature': 'string $time | DateInterval', 'return_type': 'DateInterval'},
\   },
\},
\'dateperiod': {
\   'name': 'DatePeriod',
\   'constants': {
\     'EXCLUDE_START_DATE': '1',
\   },
\   'properties': {
\     'recurrences': { 'initializer': '', 'type': 'integer'},
\     'include_start_date': { 'initializer': '', 'type': 'boolean'},
\     'start': { 'initializer': '', 'type': 'DateTimeInterface'},
\     'current': { 'initializer': '', 'type': 'DateTimeInterface'},
\     'end': { 'initializer': '', 'type': 'DateTimeInterface'},
\     'interval': { 'initializer': '', 'type': 'DateInterval'},
\   },
\   'methods': {
\     '__construct': { 'signature': 'string $isostr [, int $options]', 'return_type': ''},
\     'getDateInterval': { 'signature': 'void | DateInterval', 'return_type': 'DateInterval'},
\     'getEndDate': { 'signature': 'void | DateTimeInterface', 'return_type': 'DateTimeInterface'},
\     'getRecurrences': { 'signature': 'void | int', 'return_type': 'int'},
\     'getStartDate': { 'signature': 'void | DateTimeInterface', 'return_type': 'DateTimeInterface'},
\   },
\},
\'datetime': {
\   'name': 'DateTime',
\   'constants': {
\     'DateTimeInterface::ATOM': '"Y-m-d\TH:i:sP"',
\     'DateTimeInterface::COOKIE': '"l, d-M-Y H:i:s T"',
\     'DateTimeInterface::ISO8601': '"Y-m-d\TH:i:sO"',
\     'DateTimeInterface::RFC822': '"D, d M y H:i:s O"',
\     'DateTimeInterface::RFC850': '"l, d-M-y H:i:s T"',
\     'DateTimeInterface::RFC1036': '"D, d M y H:i:s O"',
\     'DateTimeInterface::RFC1123': '"D, d M Y H:i:s O"',
\     'DateTimeInterface::RFC2822': '"D, d M Y H:i:s O"',
\     'DateTimeInterface::RFC3339': '"Y-m-d\TH:i:sP"',
\     'DateTimeInterface::RFC3339_EXTENDED': '"Y-m-d\TH:i:s.vP"',
\     'DateTimeInterface::RSS': '"D, d M Y H:i:s O"',
\     'DateTimeInterface::W3C': '"Y-m-d\TH:i:sP"',
\   },
\   'methods': {
\     '__construct': { 'signature': '[ string $time = "now" [, DateTimeZone $timezone = NULL]]', 'return_type': ''},
\     'add': { 'signature': 'DateInterval $interval | DateTime', 'return_type': 'DateTime'},
\     'modify': { 'signature': 'string $modify | DateTime', 'return_type': 'DateTime'},
\     'setDate': { 'signature': 'int $year, int $month, int $day | DateTime', 'return_type': 'DateTime'},
\     'setISODate': { 'signature': 'int $year, int $week [, int $day = 1] | DateTime', 'return_type': 'DateTime'},
\     'setTime': { 'signature': 'int $hour, int $minute [, int $second = 0 [, int $microseconds = 0]] | DateTime', 'return_type': 'DateTime'},
\     'setTimestamp': { 'signature': 'int $unixtimestamp | DateTime', 'return_type': 'DateTime'},
\     'setTimezone': { 'signature': 'DateTimeZone $timezone | DateTime', 'return_type': 'DateTime'},
\     'sub': { 'signature': 'DateInterval $interval | DateTime', 'return_type': 'DateTime'},
\     'diff': { 'signature': 'DateTimeInterface $datetime2 [, bool $absolute = FALSE] | DateInterval', 'return_type': 'DateInterval'},
\     'format': { 'signature': 'string $format | string', 'return_type': 'string'},
\     'getOffset': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTimestamp': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTimezone': { 'signature': 'void | DateTimeZone', 'return_type': 'DateTimeZone'},
\     '__wakeup': { 'signature': 'void', 'return_type': ''},
\   },
\   'static_methods': {
\     'createFromFormat': { 'signature': 'string $format, string $time [, DateTimeZone $timezone] | DateTime', 'return_type': 'DateTime'},
\     'createFromImmutable': { 'signature': 'DateTimeImmutable $datetime | DateTime', 'return_type': 'DateTime'},
\     'getLastErrors': { 'signature': 'void | array', 'return_type': 'array'},
\     '__set_state': { 'signature': 'array $array | DateTime', 'return_type': 'DateTime'},
\   },
\},
\'datetimeimmutable': {
\   'name': 'DateTimeImmutable',
\   'constants': {
\     'DateTimeInterface::ATOM': '"Y-m-d\TH:i:sP"',
\     'DateTimeInterface::COOKIE': '"l, d-M-Y H:i:s T"',
\     'DateTimeInterface::ISO8601': '"Y-m-d\TH:i:sO"',
\     'DateTimeInterface::RFC822': '"D, d M y H:i:s O"',
\     'DateTimeInterface::RFC850': '"l, d-M-y H:i:s T"',
\     'DateTimeInterface::RFC1036': '"D, d M y H:i:s O"',
\     'DateTimeInterface::RFC1123': '"D, d M Y H:i:s O"',
\     'DateTimeInterface::RFC2822': '"D, d M Y H:i:s O"',
\     'DateTimeInterface::RFC3339': '"Y-m-d\TH:i:sP"',
\     'DateTimeInterface::RFC3339_EXTENDED': '"Y-m-d\TH:i:s.vP"',
\     'DateTimeInterface::RSS': '"D, d M Y H:i:s O"',
\     'DateTimeInterface::W3C': '"Y-m-d\TH:i:sP"',
\   },
\   'methods': {
\     '__construct': { 'signature': '[ string $time = "now" [, DateTimeZone $timezone = NULL]]', 'return_type': ''},
\     'add': { 'signature': 'DateInterval $interval | DateTimeImmutable', 'return_type': 'DateTimeImmutable'},
\     'modify': { 'signature': 'string $modify | DateTimeImmutable', 'return_type': 'DateTimeImmutable'},
\     'setDate': { 'signature': 'int $year, int $month, int $day | DateTimeImmutable', 'return_type': 'DateTimeImmutable'},
\     'setISODate': { 'signature': 'int $year, int $week [, int $day = 1] | DateTimeImmutable', 'return_type': 'DateTimeImmutable'},
\     'setTime': { 'signature': 'int $hour, int $minute [, int $second = 0 [, int $microseconds = 0]] | DateTimeImmutable', 'return_type': 'DateTimeImmutable'},
\     'setTimestamp': { 'signature': 'int $unixtimestamp | DateTimeImmutable', 'return_type': 'DateTimeImmutable'},
\     'setTimezone': { 'signature': 'DateTimeZone $timezone | DateTimeImmutable', 'return_type': 'DateTimeImmutable'},
\     'sub': { 'signature': 'DateInterval $interval | DateTimeImmutable', 'return_type': 'DateTimeImmutable'},
\     'diff': { 'signature': 'DateTimeInterface $datetime2 [, bool $absolute = FALSE] | DateInterval', 'return_type': 'DateInterval'},
\     'format': { 'signature': 'string $format | string', 'return_type': 'string'},
\     'getOffset': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTimestamp': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTimezone': { 'signature': 'void | DateTimeZone', 'return_type': 'DateTimeZone'},
\     '__wakeup': { 'signature': 'void', 'return_type': ''},
\   },
\   'static_methods': {
\     'createFromFormat': { 'signature': 'string $format, string $time [, DateTimeZone $timezone] | DateTimeImmutable', 'return_type': 'DateTimeImmutable'},
\     'createFromMutable': { 'signature': 'DateTime $datetime | DateTimeImmutable', 'return_type': 'DateTimeImmutable'},
\     'getLastErrors': { 'signature': 'void | array', 'return_type': 'array'},
\     '__set_state': { 'signature': 'array $array | DateTimeImmutable', 'return_type': 'DateTimeImmutable'},
\   },
\},
\'datetimezone': {
\   'name': 'DateTimeZone',
\   'constants': {
\     'AFRICA': '1',
\     'AMERICA': '2',
\     'ANTARCTICA': '4',
\     'ARCTIC': '8',
\     'ASIA': '16',
\     'ATLANTIC': '32',
\     'AUSTRALIA': '64',
\     'EUROPE': '128',
\     'INDIAN': '256',
\     'PACIFIC': '512',
\     'UTC': '1024',
\     'ALL': '2047',
\     'ALL_WITH_BC': '4095',
\     'PER_COUNTRY': '4096',
\   },
\   'methods': {
\     '__construct': { 'signature': 'string $timezone', 'return_type': ''},
\     'getLocation': { 'signature': 'void | array', 'return_type': 'array'},
\     'getName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getOffset': { 'signature': 'DateTimeInterface $datetime | int', 'return_type': 'int'},
\     'getTransitions': { 'signature': '[ int $timestamp_begin = PHP_INT_MIN [, int $timestamp_end = PHP_INT_MAX]] | array', 'return_type': 'array'},
\   },
\   'static_methods': {
\     'listAbbreviations': { 'signature': 'void | array', 'return_type': 'array'},
\     'listIdentifiers': { 'signature': '[ int $what = DateTimeZone::ALL [, string $country = NULL]] | array', 'return_type': 'array'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['directories'] = {
\'directory': {
\   'name': 'Directory',
\   'properties': {
\     'path': { 'initializer': '', 'type': 'string'},
\     'handle': { 'initializer': '', 'type': 'resource'},
\   },
\   'methods': {
\     'close': { 'signature': '[ resource $dir_handle] | void', 'return_type': 'void'},
\     'read': { 'signature': '[ resource $dir_handle] | string', 'return_type': 'string'},
\     'rewind': { 'signature': '[ resource $dir_handle] | void', 'return_type': 'void'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['dom'] = {
\'domattr': {
\   'name': 'DOMAttr',
\   'properties': {
\     'name': { 'initializer': '', 'type': 'string'},
\     'ownerElement': { 'initializer': '', 'type': 'DOMElement'},
\     'schemaTypeInfo': { 'initializer': '', 'type': 'bool'},
\     'specified': { 'initializer': '', 'type': 'bool'},
\     'value': { 'initializer': '', 'type': 'string'},
\     'nodeName': { 'initializer': '', 'type': 'string'},
\     'nodeValue': { 'initializer': '', 'type': 'string'},
\     'nodeType': { 'initializer': '', 'type': 'int'},
\     'parentNode': { 'initializer': '', 'type': 'DOMNode'},
\     'childNodes': { 'initializer': '', 'type': 'DOMNodeList'},
\     'firstChild': { 'initializer': '', 'type': 'DOMNode'},
\     'lastChild': { 'initializer': '', 'type': 'DOMNode'},
\     'previousSibling': { 'initializer': '', 'type': 'DOMNode'},
\     'nextSibling': { 'initializer': '', 'type': 'DOMNode'},
\     'attributes': { 'initializer': '', 'type': 'DOMNamedNodeMap'},
\     'ownerDocument': { 'initializer': '', 'type': 'DOMDocument'},
\     'namespaceURI': { 'initializer': '', 'type': 'string'},
\     'prefix': { 'initializer': '', 'type': 'string'},
\     'localName': { 'initializer': '', 'type': 'string'},
\     'baseURI': { 'initializer': '', 'type': 'string'},
\     'textContent': { 'initializer': '', 'type': 'string'},
\   },
\   'methods': {
\     '__construct': { 'signature': 'string $name [, string $value]', 'return_type': ''},
\     'isId': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'appendChild': { 'signature': 'DOMNode $newnode | DOMNode', 'return_type': 'DOMNode'},
\     'C14N': { 'signature': '[ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes]]]] | string', 'return_type': 'string'},
\     'C14NFile': { 'signature': 'string $uri [, bool $exclusive = FALSE [, bool $with_comments = FALSE [, array $xpath [, array $ns_prefixes]]]] | int', 'return_type': 'int'},
\     'cloneNode': { 'signature': '[ bool $deep] | DOMNode', 'return_type': 'DOMNode'},
\     'getLineNo': { 'signature': 'void | int', 'return_type': 'int'},
\     'getNodePath': { 'signature': 'void | string', 'return_type': 'string'},
\     'hasAttributes': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'hasChildNodes': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'insertBefore': { 'signature': 'DOMNode $newnode [, DOMNode $refnode] | DOMNode', 'return_type': 'DOMNode'},
\     'isDefaultNamespace': { 'signature': 'string $namespaceURI | bool', 'return_type': 'bool'},
\     'isSameNode': { 'signature': 'DOMNode $node | bool', 'return_type': 'bool'},
\     'isSupported': { 'signature': 'string $feature, string $version | bool', 'return_type': 'bool'},
\     'lookupNamespaceUri': { 'signature': 'string $prefix | string', 'return_type': 'string'},
\     'lookupPrefix': { 'signature': 'string $namespaceURI | string', 'return_type': 'string'},
\     'normalize': { 'signature': 'void | void', 'return_type': 'void'},
\     'removeChild': { 'signature': 'DOMNode $oldnode | DOMNode', 'return_type': 'DOMNode'},
\     'replaceChild': { 'signature': 'DOMNode $newnode, DOMNode $oldnode | DOMNode', 'return_type': 'DOMNode'},
\   },
\},
\'domcdatasection': {
\   'name': 'DOMCdataSection',
\   'properties': {
\     'wholeText': { 'initializer': '', 'type': 'string'},
\     'data': { 'initializer': '', 'type': 'string'},
\     'length': { 'initializer': '', 'type': 'int'},
\     'nodeName': { 'initializer': '', 'type': 'string'},
\     'nodeValue': { 'initializer': '', 'type': 'string'},
\     'nodeType': { 'initializer': '', 'type': 'int'},
\     'parentNode': { 'initializer': '', 'type': 'DOMNode'},
\     'childNodes': { 'initializer': '', 'type': 'DOMNodeList'},
\     'firstChild': { 'initializer': '', 'type': 'DOMNode'},
\     'lastChild': { 'initializer': '', 'type': 'DOMNode'},
\     'previousSibling': { 'initializer': '', 'type': 'DOMNode'},
\     'nextSibling': { 'initializer': '', 'type': 'DOMNode'},
\     'attributes': { 'initializer': '', 'type': 'DOMNamedNodeMap'},
\     'ownerDocument': { 'initializer': '', 'type': 'DOMDocument'},
\     'namespaceURI': { 'initializer': '', 'type': 'string'},
\     'prefix': { 'initializer': '', 'type': 'string'},
\     'localName': { 'initializer': '', 'type': 'string'},
\     'baseURI': { 'initializer': '', 'type': 'string'},
\     'textContent': { 'initializer': '', 'type': 'string'},
\   },
\   'methods': {
\     '__construct': { 'signature': 'string $value', 'return_type': ''},
\     'isElementContentWhitespace': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isWhitespaceInElementContent': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'splitText': { 'signature': 'int $offset | DOMText', 'return_type': 'DOMText'},
\     'appendData': { 'signature': 'string $data | void', 'return_type': 'void'},
\     'deleteData': { 'signature': 'int $offset, int $count | void', 'return_type': 'void'},
\     'insertData': { 'signature': 'int $offset, string $data | void', 'return_type': 'void'},
\     'replaceData': { 'signature': 'int $offset, int $count, string $data | void', 'return_type': 'void'},
\     'substringData': { 'signature': 'int $offset, int $count | string', 'return_type': 'string'},
\     'appendChild': { 'signature': 'DOMNode $newnode | DOMNode', 'return_type': 'DOMNode'},
\     'C14N': { 'signature': '[ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes]]]] | string', 'return_type': 'string'},
\     'C14NFile': { 'signature': 'string $uri [, bool $exclusive = FALSE [, bool $with_comments = FALSE [, array $xpath [, array $ns_prefixes]]]] | int', 'return_type': 'int'},
\     'cloneNode': { 'signature': '[ bool $deep] | DOMNode', 'return_type': 'DOMNode'},
\     'getLineNo': { 'signature': 'void | int', 'return_type': 'int'},
\     'getNodePath': { 'signature': 'void | string', 'return_type': 'string'},
\     'hasAttributes': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'hasChildNodes': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'insertBefore': { 'signature': 'DOMNode $newnode [, DOMNode $refnode] | DOMNode', 'return_type': 'DOMNode'},
\     'isDefaultNamespace': { 'signature': 'string $namespaceURI | bool', 'return_type': 'bool'},
\     'isSameNode': { 'signature': 'DOMNode $node | bool', 'return_type': 'bool'},
\     'isSupported': { 'signature': 'string $feature, string $version | bool', 'return_type': 'bool'},
\     'lookupNamespaceUri': { 'signature': 'string $prefix | string', 'return_type': 'string'},
\     'lookupPrefix': { 'signature': 'string $namespaceURI | string', 'return_type': 'string'},
\     'normalize': { 'signature': 'void | void', 'return_type': 'void'},
\     'removeChild': { 'signature': 'DOMNode $oldnode | DOMNode', 'return_type': 'DOMNode'},
\     'replaceChild': { 'signature': 'DOMNode $newnode, DOMNode $oldnode | DOMNode', 'return_type': 'DOMNode'},
\   },
\},
\'domcharacterdata': {
\   'name': 'DOMCharacterData',
\   'properties': {
\     'data': { 'initializer': '', 'type': 'string'},
\     'length': { 'initializer': '', 'type': 'int'},
\     'nodeName': { 'initializer': '', 'type': 'string'},
\     'nodeValue': { 'initializer': '', 'type': 'string'},
\     'nodeType': { 'initializer': '', 'type': 'int'},
\     'parentNode': { 'initializer': '', 'type': 'DOMNode'},
\     'childNodes': { 'initializer': '', 'type': 'DOMNodeList'},
\     'firstChild': { 'initializer': '', 'type': 'DOMNode'},
\     'lastChild': { 'initializer': '', 'type': 'DOMNode'},
\     'previousSibling': { 'initializer': '', 'type': 'DOMNode'},
\     'nextSibling': { 'initializer': '', 'type': 'DOMNode'},
\     'attributes': { 'initializer': '', 'type': 'DOMNamedNodeMap'},
\     'ownerDocument': { 'initializer': '', 'type': 'DOMDocument'},
\     'namespaceURI': { 'initializer': '', 'type': 'string'},
\     'prefix': { 'initializer': '', 'type': 'string'},
\     'localName': { 'initializer': '', 'type': 'string'},
\     'baseURI': { 'initializer': '', 'type': 'string'},
\     'textContent': { 'initializer': '', 'type': 'string'},
\   },
\   'methods': {
\     'appendData': { 'signature': 'string $data | void', 'return_type': 'void'},
\     'deleteData': { 'signature': 'int $offset, int $count | void', 'return_type': 'void'},
\     'insertData': { 'signature': 'int $offset, string $data | void', 'return_type': 'void'},
\     'replaceData': { 'signature': 'int $offset, int $count, string $data | void', 'return_type': 'void'},
\     'substringData': { 'signature': 'int $offset, int $count | string', 'return_type': 'string'},
\     'appendChild': { 'signature': 'DOMNode $newnode | DOMNode', 'return_type': 'DOMNode'},
\     'C14N': { 'signature': '[ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes]]]] | string', 'return_type': 'string'},
\     'C14NFile': { 'signature': 'string $uri [, bool $exclusive = FALSE [, bool $with_comments = FALSE [, array $xpath [, array $ns_prefixes]]]] | int', 'return_type': 'int'},
\     'cloneNode': { 'signature': '[ bool $deep] | DOMNode', 'return_type': 'DOMNode'},
\     'getLineNo': { 'signature': 'void | int', 'return_type': 'int'},
\     'getNodePath': { 'signature': 'void | string', 'return_type': 'string'},
\     'hasAttributes': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'hasChildNodes': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'insertBefore': { 'signature': 'DOMNode $newnode [, DOMNode $refnode] | DOMNode', 'return_type': 'DOMNode'},
\     'isDefaultNamespace': { 'signature': 'string $namespaceURI | bool', 'return_type': 'bool'},
\     'isSameNode': { 'signature': 'DOMNode $node | bool', 'return_type': 'bool'},
\     'isSupported': { 'signature': 'string $feature, string $version | bool', 'return_type': 'bool'},
\     'lookupNamespaceUri': { 'signature': 'string $prefix | string', 'return_type': 'string'},
\     'lookupPrefix': { 'signature': 'string $namespaceURI | string', 'return_type': 'string'},
\     'normalize': { 'signature': 'void | void', 'return_type': 'void'},
\     'removeChild': { 'signature': 'DOMNode $oldnode | DOMNode', 'return_type': 'DOMNode'},
\     'replaceChild': { 'signature': 'DOMNode $newnode, DOMNode $oldnode | DOMNode', 'return_type': 'DOMNode'},
\   },
\},
\'domcomment': {
\   'name': 'DOMComment',
\   'properties': {
\     'data': { 'initializer': '', 'type': 'string'},
\     'length': { 'initializer': '', 'type': 'int'},
\     'nodeName': { 'initializer': '', 'type': 'string'},
\     'nodeValue': { 'initializer': '', 'type': 'string'},
\     'nodeType': { 'initializer': '', 'type': 'int'},
\     'parentNode': { 'initializer': '', 'type': 'DOMNode'},
\     'childNodes': { 'initializer': '', 'type': 'DOMNodeList'},
\     'firstChild': { 'initializer': '', 'type': 'DOMNode'},
\     'lastChild': { 'initializer': '', 'type': 'DOMNode'},
\     'previousSibling': { 'initializer': '', 'type': 'DOMNode'},
\     'nextSibling': { 'initializer': '', 'type': 'DOMNode'},
\     'attributes': { 'initializer': '', 'type': 'DOMNamedNodeMap'},
\     'ownerDocument': { 'initializer': '', 'type': 'DOMDocument'},
\     'namespaceURI': { 'initializer': '', 'type': 'string'},
\     'prefix': { 'initializer': '', 'type': 'string'},
\     'localName': { 'initializer': '', 'type': 'string'},
\     'baseURI': { 'initializer': '', 'type': 'string'},
\     'textContent': { 'initializer': '', 'type': 'string'},
\   },
\   'methods': {
\     '__construct': { 'signature': '[ string $value]', 'return_type': ''},
\     'appendData': { 'signature': 'string $data | void', 'return_type': 'void'},
\     'deleteData': { 'signature': 'int $offset, int $count | void', 'return_type': 'void'},
\     'insertData': { 'signature': 'int $offset, string $data | void', 'return_type': 'void'},
\     'replaceData': { 'signature': 'int $offset, int $count, string $data | void', 'return_type': 'void'},
\     'substringData': { 'signature': 'int $offset, int $count | string', 'return_type': 'string'},
\     'appendChild': { 'signature': 'DOMNode $newnode | DOMNode', 'return_type': 'DOMNode'},
\     'C14N': { 'signature': '[ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes]]]] | string', 'return_type': 'string'},
\     'C14NFile': { 'signature': 'string $uri [, bool $exclusive = FALSE [, bool $with_comments = FALSE [, array $xpath [, array $ns_prefixes]]]] | int', 'return_type': 'int'},
\     'cloneNode': { 'signature': '[ bool $deep] | DOMNode', 'return_type': 'DOMNode'},
\     'getLineNo': { 'signature': 'void | int', 'return_type': 'int'},
\     'getNodePath': { 'signature': 'void | string', 'return_type': 'string'},
\     'hasAttributes': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'hasChildNodes': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'insertBefore': { 'signature': 'DOMNode $newnode [, DOMNode $refnode] | DOMNode', 'return_type': 'DOMNode'},
\     'isDefaultNamespace': { 'signature': 'string $namespaceURI | bool', 'return_type': 'bool'},
\     'isSameNode': { 'signature': 'DOMNode $node | bool', 'return_type': 'bool'},
\     'isSupported': { 'signature': 'string $feature, string $version | bool', 'return_type': 'bool'},
\     'lookupNamespaceUri': { 'signature': 'string $prefix | string', 'return_type': 'string'},
\     'lookupPrefix': { 'signature': 'string $namespaceURI | string', 'return_type': 'string'},
\     'normalize': { 'signature': 'void | void', 'return_type': 'void'},
\     'removeChild': { 'signature': 'DOMNode $oldnode | DOMNode', 'return_type': 'DOMNode'},
\     'replaceChild': { 'signature': 'DOMNode $newnode, DOMNode $oldnode | DOMNode', 'return_type': 'DOMNode'},
\   },
\},
\'domdocument': {
\   'name': 'DOMDocument',
\   'properties': {
\     'actualEncoding': { 'initializer': '', 'type': 'string'},
\     'config': { 'initializer': '', 'type': 'DOMConfiguration'},
\     'doctype': { 'initializer': '', 'type': 'DOMDocumentType'},
\     'documentElement': { 'initializer': '', 'type': 'DOMElement'},
\     'documentURI': { 'initializer': '', 'type': 'string'},
\     'encoding': { 'initializer': '', 'type': 'string'},
\     'formatOutput': { 'initializer': '', 'type': 'bool'},
\     'implementation': { 'initializer': '', 'type': 'DOMImplementation'},
\     'preserveWhiteSpace': { 'initializer': 'TRUE', 'type': 'bool'},
\     'recover': { 'initializer': '', 'type': 'bool'},
\     'resolveExternals': { 'initializer': '', 'type': 'bool'},
\     'standalone': { 'initializer': '', 'type': 'bool'},
\     'strictErrorChecking': { 'initializer': 'TRUE', 'type': 'bool'},
\     'substituteEntities': { 'initializer': '', 'type': 'bool'},
\     'validateOnParse': { 'initializer': 'FALSE', 'type': 'bool'},
\     'version': { 'initializer': '', 'type': 'string'},
\     'xmlEncoding': { 'initializer': '', 'type': 'string'},
\     'xmlStandalone': { 'initializer': '', 'type': 'bool'},
\     'xmlVersion': { 'initializer': '', 'type': 'string'},
\     'nodeName': { 'initializer': '', 'type': 'string'},
\     'nodeValue': { 'initializer': '', 'type': 'string'},
\     'nodeType': { 'initializer': '', 'type': 'int'},
\     'parentNode': { 'initializer': '', 'type': 'DOMNode'},
\     'childNodes': { 'initializer': '', 'type': 'DOMNodeList'},
\     'firstChild': { 'initializer': '', 'type': 'DOMNode'},
\     'lastChild': { 'initializer': '', 'type': 'DOMNode'},
\     'previousSibling': { 'initializer': '', 'type': 'DOMNode'},
\     'nextSibling': { 'initializer': '', 'type': 'DOMNode'},
\     'attributes': { 'initializer': '', 'type': 'DOMNamedNodeMap'},
\     'ownerDocument': { 'initializer': '', 'type': 'DOMDocument'},
\     'namespaceURI': { 'initializer': '', 'type': 'string'},
\     'prefix': { 'initializer': '', 'type': 'string'},
\     'localName': { 'initializer': '', 'type': 'string'},
\     'baseURI': { 'initializer': '', 'type': 'string'},
\     'textContent': { 'initializer': '', 'type': 'string'},
\   },
\   'methods': {
\     '__construct': { 'signature': '[ string $version [, string $encoding]]', 'return_type': ''},
\     'createAttribute': { 'signature': 'string $name | DOMAttr', 'return_type': 'DOMAttr'},
\     'createAttributeNS': { 'signature': 'string $namespaceURI, string $qualifiedName | DOMAttr', 'return_type': 'DOMAttr'},
\     'createCDATASection': { 'signature': 'string $data | DOMCDATASection', 'return_type': 'DOMCDATASection'},
\     'createComment': { 'signature': 'string $data | DOMComment', 'return_type': 'DOMComment'},
\     'createDocumentFragment': { 'signature': 'void | DOMDocumentFragment', 'return_type': 'DOMDocumentFragment'},
\     'createElement': { 'signature': 'string $name [, string $value] | DOMElement', 'return_type': 'DOMElement'},
\     'createElementNS': { 'signature': 'string $namespaceURI, string $qualifiedName [, string $value] | DOMElement', 'return_type': 'DOMElement'},
\     'createEntityReference': { 'signature': 'string $name | DOMEntityReference', 'return_type': 'DOMEntityReference'},
\     'createProcessingInstruction': { 'signature': 'string $target [, string $data] | DOMProcessingInstruction', 'return_type': 'DOMProcessingInstruction'},
\     'createTextNode': { 'signature': 'string $content | DOMText', 'return_type': 'DOMText'},
\     'getElementById': { 'signature': 'string $elementId | DOMElement', 'return_type': 'DOMElement'},
\     'getElementsByTagName': { 'signature': 'string $name | DOMNodeList', 'return_type': 'DOMNodeList'},
\     'getElementsByTagNameNS': { 'signature': 'string $namespaceURI, string $localName | DOMNodeList', 'return_type': 'DOMNodeList'},
\     'importNode': { 'signature': 'DOMNode $importedNode [, bool $deep = FALSE] | DOMNode', 'return_type': 'DOMNode'},
\     'load': { 'signature': 'string $filename [, int $options = 0] | mixed', 'return_type': 'mixed'},
\     'loadHTML': { 'signature': 'string $source [, int $options = 0] | bool', 'return_type': 'bool'},
\     'loadHTMLFile': { 'signature': 'string $filename [, int $options = 0] | bool', 'return_type': 'bool'},
\     'loadXML': { 'signature': 'string $source [, int $options = 0] | mixed', 'return_type': 'mixed'},
\     'normalizeDocument': { 'signature': 'void | void', 'return_type': 'void'},
\     'registerNodeClass': { 'signature': 'string $baseclass, string $extendedclass | bool', 'return_type': 'bool'},
\     'relaxNGValidate': { 'signature': 'string $filename | bool', 'return_type': 'bool'},
\     'relaxNGValidateSource': { 'signature': 'string $source | bool', 'return_type': 'bool'},
\     'save': { 'signature': 'string $filename [, int $options = 0] | int', 'return_type': 'int'},
\     'saveHTML': { 'signature': '[ DOMNode $node = NULL] | string', 'return_type': 'string'},
\     'saveHTMLFile': { 'signature': 'string $filename | int', 'return_type': 'int'},
\     'saveXML': { 'signature': '[ DOMNode $node [, int $options = 0]] | string', 'return_type': 'string'},
\     'schemaValidate': { 'signature': 'string $filename [, int $flags = 0] | bool', 'return_type': 'bool'},
\     'schemaValidateSource': { 'signature': 'string $source [, int $flags] | bool', 'return_type': 'bool'},
\     'validate': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'xinclude': { 'signature': '[ int $options = 0] | int', 'return_type': 'int'},
\     'appendChild': { 'signature': 'DOMNode $newnode | DOMNode', 'return_type': 'DOMNode'},
\     'C14N': { 'signature': '[ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes]]]] | string', 'return_type': 'string'},
\     'C14NFile': { 'signature': 'string $uri [, bool $exclusive = FALSE [, bool $with_comments = FALSE [, array $xpath [, array $ns_prefixes]]]] | int', 'return_type': 'int'},
\     'cloneNode': { 'signature': '[ bool $deep] | DOMNode', 'return_type': 'DOMNode'},
\     'getLineNo': { 'signature': 'void | int', 'return_type': 'int'},
\     'getNodePath': { 'signature': 'void | string', 'return_type': 'string'},
\     'hasAttributes': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'hasChildNodes': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'insertBefore': { 'signature': 'DOMNode $newnode [, DOMNode $refnode] | DOMNode', 'return_type': 'DOMNode'},
\     'isDefaultNamespace': { 'signature': 'string $namespaceURI | bool', 'return_type': 'bool'},
\     'isSameNode': { 'signature': 'DOMNode $node | bool', 'return_type': 'bool'},
\     'isSupported': { 'signature': 'string $feature, string $version | bool', 'return_type': 'bool'},
\     'lookupNamespaceUri': { 'signature': 'string $prefix | string', 'return_type': 'string'},
\     'lookupPrefix': { 'signature': 'string $namespaceURI | string', 'return_type': 'string'},
\     'normalize': { 'signature': 'void | void', 'return_type': 'void'},
\     'removeChild': { 'signature': 'DOMNode $oldnode | DOMNode', 'return_type': 'DOMNode'},
\     'replaceChild': { 'signature': 'DOMNode $newnode, DOMNode $oldnode | DOMNode', 'return_type': 'DOMNode'},
\   },
\},
\'domdocumentfragment': {
\   'name': 'DOMDocumentFragment',
\   'properties': {
\     'nodeName': { 'initializer': '', 'type': 'string'},
\     'nodeValue': { 'initializer': '', 'type': 'string'},
\     'nodeType': { 'initializer': '', 'type': 'int'},
\     'parentNode': { 'initializer': '', 'type': 'DOMNode'},
\     'childNodes': { 'initializer': '', 'type': 'DOMNodeList'},
\     'firstChild': { 'initializer': '', 'type': 'DOMNode'},
\     'lastChild': { 'initializer': '', 'type': 'DOMNode'},
\     'previousSibling': { 'initializer': '', 'type': 'DOMNode'},
\     'nextSibling': { 'initializer': '', 'type': 'DOMNode'},
\     'attributes': { 'initializer': '', 'type': 'DOMNamedNodeMap'},
\     'ownerDocument': { 'initializer': '', 'type': 'DOMDocument'},
\     'namespaceURI': { 'initializer': '', 'type': 'string'},
\     'prefix': { 'initializer': '', 'type': 'string'},
\     'localName': { 'initializer': '', 'type': 'string'},
\     'baseURI': { 'initializer': '', 'type': 'string'},
\     'textContent': { 'initializer': '', 'type': 'string'},
\   },
\   'methods': {
\     'appendXML': { 'signature': 'string $data | bool', 'return_type': 'bool'},
\     'appendChild': { 'signature': 'DOMNode $newnode | DOMNode', 'return_type': 'DOMNode'},
\     'C14N': { 'signature': '[ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes]]]] | string', 'return_type': 'string'},
\     'C14NFile': { 'signature': 'string $uri [, bool $exclusive = FALSE [, bool $with_comments = FALSE [, array $xpath [, array $ns_prefixes]]]] | int', 'return_type': 'int'},
\     'cloneNode': { 'signature': '[ bool $deep] | DOMNode', 'return_type': 'DOMNode'},
\     'getLineNo': { 'signature': 'void | int', 'return_type': 'int'},
\     'getNodePath': { 'signature': 'void | string', 'return_type': 'string'},
\     'hasAttributes': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'hasChildNodes': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'insertBefore': { 'signature': 'DOMNode $newnode [, DOMNode $refnode] | DOMNode', 'return_type': 'DOMNode'},
\     'isDefaultNamespace': { 'signature': 'string $namespaceURI | bool', 'return_type': 'bool'},
\     'isSameNode': { 'signature': 'DOMNode $node | bool', 'return_type': 'bool'},
\     'isSupported': { 'signature': 'string $feature, string $version | bool', 'return_type': 'bool'},
\     'lookupNamespaceUri': { 'signature': 'string $prefix | string', 'return_type': 'string'},
\     'lookupPrefix': { 'signature': 'string $namespaceURI | string', 'return_type': 'string'},
\     'normalize': { 'signature': 'void | void', 'return_type': 'void'},
\     'removeChild': { 'signature': 'DOMNode $oldnode | DOMNode', 'return_type': 'DOMNode'},
\     'replaceChild': { 'signature': 'DOMNode $newnode, DOMNode $oldnode | DOMNode', 'return_type': 'DOMNode'},
\   },
\},
\'domdocumenttype': {
\   'name': 'DOMDocumentType',
\   'properties': {
\     'publicId': { 'initializer': '', 'type': 'string'},
\     'systemId': { 'initializer': '', 'type': 'string'},
\     'name': { 'initializer': '', 'type': 'string'},
\     'entities': { 'initializer': '', 'type': 'DOMNamedNodeMap'},
\     'notations': { 'initializer': '', 'type': 'DOMNamedNodeMap'},
\     'internalSubset': { 'initializer': '', 'type': 'string'},
\     'nodeName': { 'initializer': '', 'type': 'string'},
\     'nodeValue': { 'initializer': '', 'type': 'string'},
\     'nodeType': { 'initializer': '', 'type': 'int'},
\     'parentNode': { 'initializer': '', 'type': 'DOMNode'},
\     'childNodes': { 'initializer': '', 'type': 'DOMNodeList'},
\     'firstChild': { 'initializer': '', 'type': 'DOMNode'},
\     'lastChild': { 'initializer': '', 'type': 'DOMNode'},
\     'previousSibling': { 'initializer': '', 'type': 'DOMNode'},
\     'nextSibling': { 'initializer': '', 'type': 'DOMNode'},
\     'attributes': { 'initializer': '', 'type': 'DOMNamedNodeMap'},
\     'ownerDocument': { 'initializer': '', 'type': 'DOMDocument'},
\     'namespaceURI': { 'initializer': '', 'type': 'string'},
\     'prefix': { 'initializer': '', 'type': 'string'},
\     'localName': { 'initializer': '', 'type': 'string'},
\     'baseURI': { 'initializer': '', 'type': 'string'},
\     'textContent': { 'initializer': '', 'type': 'string'},
\   },
\   'methods': {
\     'appendChild': { 'signature': 'DOMNode $newnode | DOMNode', 'return_type': 'DOMNode'},
\     'C14N': { 'signature': '[ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes]]]] | string', 'return_type': 'string'},
\     'C14NFile': { 'signature': 'string $uri [, bool $exclusive = FALSE [, bool $with_comments = FALSE [, array $xpath [, array $ns_prefixes]]]] | int', 'return_type': 'int'},
\     'cloneNode': { 'signature': '[ bool $deep] | DOMNode', 'return_type': 'DOMNode'},
\     'getLineNo': { 'signature': 'void | int', 'return_type': 'int'},
\     'getNodePath': { 'signature': 'void | string', 'return_type': 'string'},
\     'hasAttributes': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'hasChildNodes': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'insertBefore': { 'signature': 'DOMNode $newnode [, DOMNode $refnode] | DOMNode', 'return_type': 'DOMNode'},
\     'isDefaultNamespace': { 'signature': 'string $namespaceURI | bool', 'return_type': 'bool'},
\     'isSameNode': { 'signature': 'DOMNode $node | bool', 'return_type': 'bool'},
\     'isSupported': { 'signature': 'string $feature, string $version | bool', 'return_type': 'bool'},
\     'lookupNamespaceUri': { 'signature': 'string $prefix | string', 'return_type': 'string'},
\     'lookupPrefix': { 'signature': 'string $namespaceURI | string', 'return_type': 'string'},
\     'normalize': { 'signature': 'void | void', 'return_type': 'void'},
\     'removeChild': { 'signature': 'DOMNode $oldnode | DOMNode', 'return_type': 'DOMNode'},
\     'replaceChild': { 'signature': 'DOMNode $newnode, DOMNode $oldnode | DOMNode', 'return_type': 'DOMNode'},
\   },
\},
\'domelement': {
\   'name': 'DOMElement',
\   'properties': {
\     'schemaTypeInfo': { 'initializer': '', 'type': 'bool'},
\     'tagName': { 'initializer': '', 'type': 'string'},
\     'nodeName': { 'initializer': '', 'type': 'string'},
\     'nodeValue': { 'initializer': '', 'type': 'string'},
\     'nodeType': { 'initializer': '', 'type': 'int'},
\     'parentNode': { 'initializer': '', 'type': 'DOMNode'},
\     'childNodes': { 'initializer': '', 'type': 'DOMNodeList'},
\     'firstChild': { 'initializer': '', 'type': 'DOMNode'},
\     'lastChild': { 'initializer': '', 'type': 'DOMNode'},
\     'previousSibling': { 'initializer': '', 'type': 'DOMNode'},
\     'nextSibling': { 'initializer': '', 'type': 'DOMNode'},
\     'attributes': { 'initializer': '', 'type': 'DOMNamedNodeMap'},
\     'ownerDocument': { 'initializer': '', 'type': 'DOMDocument'},
\     'namespaceURI': { 'initializer': '', 'type': 'string'},
\     'prefix': { 'initializer': '', 'type': 'string'},
\     'localName': { 'initializer': '', 'type': 'string'},
\     'baseURI': { 'initializer': '', 'type': 'string'},
\     'textContent': { 'initializer': '', 'type': 'string'},
\   },
\   'methods': {
\     '__construct': { 'signature': 'string $name [, string $value [, string $namespaceURI]]', 'return_type': ''},
\     'getAttribute': { 'signature': 'string $name | string', 'return_type': 'string'},
\     'getAttributeNode': { 'signature': 'string $name | DOMAttr', 'return_type': 'DOMAttr'},
\     'getAttributeNodeNS': { 'signature': 'string $namespaceURI, string $localName | DOMAttr', 'return_type': 'DOMAttr'},
\     'getAttributeNS': { 'signature': 'string $namespaceURI, string $localName | string', 'return_type': 'string'},
\     'getElementsByTagName': { 'signature': 'string $name | DOMNodeList', 'return_type': 'DOMNodeList'},
\     'getElementsByTagNameNS': { 'signature': 'string $namespaceURI, string $localName | DOMNodeList', 'return_type': 'DOMNodeList'},
\     'hasAttribute': { 'signature': 'string $name | bool', 'return_type': 'bool'},
\     'hasAttributeNS': { 'signature': 'string $namespaceURI, string $localName | bool', 'return_type': 'bool'},
\     'removeAttribute': { 'signature': 'string $name | bool', 'return_type': 'bool'},
\     'removeAttributeNode': { 'signature': 'DOMAttr $oldnode | bool', 'return_type': 'bool'},
\     'removeAttributeNS': { 'signature': 'string $namespaceURI, string $localName | bool', 'return_type': 'bool'},
\     'setAttribute': { 'signature': 'string $name, string $value | DOMAttr', 'return_type': 'DOMAttr'},
\     'setAttributeNode': { 'signature': 'DOMAttr $attr | DOMAttr', 'return_type': 'DOMAttr'},
\     'setAttributeNodeNS': { 'signature': 'DOMAttr $attr | DOMAttr', 'return_type': 'DOMAttr'},
\     'setAttributeNS': { 'signature': 'string $namespaceURI, string $qualifiedName, string $value | void', 'return_type': 'void'},
\     'setIdAttribute': { 'signature': 'string $name, bool $isId | void', 'return_type': 'void'},
\     'setIdAttributeNode': { 'signature': 'DOMAttr $attr, bool $isId | void', 'return_type': 'void'},
\     'setIdAttributeNS': { 'signature': 'string $namespaceURI, string $localName, bool $isId | void', 'return_type': 'void'},
\     'appendChild': { 'signature': 'DOMNode $newnode | DOMNode', 'return_type': 'DOMNode'},
\     'C14N': { 'signature': '[ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes]]]] | string', 'return_type': 'string'},
\     'C14NFile': { 'signature': 'string $uri [, bool $exclusive = FALSE [, bool $with_comments = FALSE [, array $xpath [, array $ns_prefixes]]]] | int', 'return_type': 'int'},
\     'cloneNode': { 'signature': '[ bool $deep] | DOMNode', 'return_type': 'DOMNode'},
\     'getLineNo': { 'signature': 'void | int', 'return_type': 'int'},
\     'getNodePath': { 'signature': 'void | string', 'return_type': 'string'},
\     'hasAttributes': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'hasChildNodes': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'insertBefore': { 'signature': 'DOMNode $newnode [, DOMNode $refnode] | DOMNode', 'return_type': 'DOMNode'},
\     'isDefaultNamespace': { 'signature': 'string $namespaceURI | bool', 'return_type': 'bool'},
\     'isSameNode': { 'signature': 'DOMNode $node | bool', 'return_type': 'bool'},
\     'isSupported': { 'signature': 'string $feature, string $version | bool', 'return_type': 'bool'},
\     'lookupNamespaceUri': { 'signature': 'string $prefix | string', 'return_type': 'string'},
\     'lookupPrefix': { 'signature': 'string $namespaceURI | string', 'return_type': 'string'},
\     'normalize': { 'signature': 'void | void', 'return_type': 'void'},
\     'removeChild': { 'signature': 'DOMNode $oldnode | DOMNode', 'return_type': 'DOMNode'},
\     'replaceChild': { 'signature': 'DOMNode $newnode, DOMNode $oldnode | DOMNode', 'return_type': 'DOMNode'},
\   },
\},
\'domentity': {
\   'name': 'DOMEntity',
\   'properties': {
\     'publicId': { 'initializer': '', 'type': 'string'},
\     'systemId': { 'initializer': '', 'type': 'string'},
\     'notationName': { 'initializer': '', 'type': 'string'},
\     'actualEncoding': { 'initializer': '', 'type': 'string'},
\     'encoding': { 'initializer': '', 'type': 'string'},
\     'version': { 'initializer': '', 'type': 'string'},
\     'nodeName': { 'initializer': '', 'type': 'string'},
\     'nodeValue': { 'initializer': '', 'type': 'string'},
\     'nodeType': { 'initializer': '', 'type': 'int'},
\     'parentNode': { 'initializer': '', 'type': 'DOMNode'},
\     'childNodes': { 'initializer': '', 'type': 'DOMNodeList'},
\     'firstChild': { 'initializer': '', 'type': 'DOMNode'},
\     'lastChild': { 'initializer': '', 'type': 'DOMNode'},
\     'previousSibling': { 'initializer': '', 'type': 'DOMNode'},
\     'nextSibling': { 'initializer': '', 'type': 'DOMNode'},
\     'attributes': { 'initializer': '', 'type': 'DOMNamedNodeMap'},
\     'ownerDocument': { 'initializer': '', 'type': 'DOMDocument'},
\     'namespaceURI': { 'initializer': '', 'type': 'string'},
\     'prefix': { 'initializer': '', 'type': 'string'},
\     'localName': { 'initializer': '', 'type': 'string'},
\     'baseURI': { 'initializer': '', 'type': 'string'},
\     'textContent': { 'initializer': '', 'type': 'string'},
\   },
\   'methods': {
\     'appendChild': { 'signature': 'DOMNode $newnode | DOMNode', 'return_type': 'DOMNode'},
\     'C14N': { 'signature': '[ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes]]]] | string', 'return_type': 'string'},
\     'C14NFile': { 'signature': 'string $uri [, bool $exclusive = FALSE [, bool $with_comments = FALSE [, array $xpath [, array $ns_prefixes]]]] | int', 'return_type': 'int'},
\     'cloneNode': { 'signature': '[ bool $deep] | DOMNode', 'return_type': 'DOMNode'},
\     'getLineNo': { 'signature': 'void | int', 'return_type': 'int'},
\     'getNodePath': { 'signature': 'void | string', 'return_type': 'string'},
\     'hasAttributes': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'hasChildNodes': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'insertBefore': { 'signature': 'DOMNode $newnode [, DOMNode $refnode] | DOMNode', 'return_type': 'DOMNode'},
\     'isDefaultNamespace': { 'signature': 'string $namespaceURI | bool', 'return_type': 'bool'},
\     'isSameNode': { 'signature': 'DOMNode $node | bool', 'return_type': 'bool'},
\     'isSupported': { 'signature': 'string $feature, string $version | bool', 'return_type': 'bool'},
\     'lookupNamespaceUri': { 'signature': 'string $prefix | string', 'return_type': 'string'},
\     'lookupPrefix': { 'signature': 'string $namespaceURI | string', 'return_type': 'string'},
\     'normalize': { 'signature': 'void | void', 'return_type': 'void'},
\     'removeChild': { 'signature': 'DOMNode $oldnode | DOMNode', 'return_type': 'DOMNode'},
\     'replaceChild': { 'signature': 'DOMNode $newnode, DOMNode $oldnode | DOMNode', 'return_type': 'DOMNode'},
\   },
\},
\'domentityreference': {
\   'name': 'DOMEntityReference',
\   'properties': {
\     'nodeName': { 'initializer': '', 'type': 'string'},
\     'nodeValue': { 'initializer': '', 'type': 'string'},
\     'nodeType': { 'initializer': '', 'type': 'int'},
\     'parentNode': { 'initializer': '', 'type': 'DOMNode'},
\     'childNodes': { 'initializer': '', 'type': 'DOMNodeList'},
\     'firstChild': { 'initializer': '', 'type': 'DOMNode'},
\     'lastChild': { 'initializer': '', 'type': 'DOMNode'},
\     'previousSibling': { 'initializer': '', 'type': 'DOMNode'},
\     'nextSibling': { 'initializer': '', 'type': 'DOMNode'},
\     'attributes': { 'initializer': '', 'type': 'DOMNamedNodeMap'},
\     'ownerDocument': { 'initializer': '', 'type': 'DOMDocument'},
\     'namespaceURI': { 'initializer': '', 'type': 'string'},
\     'prefix': { 'initializer': '', 'type': 'string'},
\     'localName': { 'initializer': '', 'type': 'string'},
\     'baseURI': { 'initializer': '', 'type': 'string'},
\     'textContent': { 'initializer': '', 'type': 'string'},
\   },
\   'methods': {
\     '__construct': { 'signature': 'string $name', 'return_type': ''},
\     'appendChild': { 'signature': 'DOMNode $newnode | DOMNode', 'return_type': 'DOMNode'},
\     'C14N': { 'signature': '[ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes]]]] | string', 'return_type': 'string'},
\     'C14NFile': { 'signature': 'string $uri [, bool $exclusive = FALSE [, bool $with_comments = FALSE [, array $xpath [, array $ns_prefixes]]]] | int', 'return_type': 'int'},
\     'cloneNode': { 'signature': '[ bool $deep] | DOMNode', 'return_type': 'DOMNode'},
\     'getLineNo': { 'signature': 'void | int', 'return_type': 'int'},
\     'getNodePath': { 'signature': 'void | string', 'return_type': 'string'},
\     'hasAttributes': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'hasChildNodes': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'insertBefore': { 'signature': 'DOMNode $newnode [, DOMNode $refnode] | DOMNode', 'return_type': 'DOMNode'},
\     'isDefaultNamespace': { 'signature': 'string $namespaceURI | bool', 'return_type': 'bool'},
\     'isSameNode': { 'signature': 'DOMNode $node | bool', 'return_type': 'bool'},
\     'isSupported': { 'signature': 'string $feature, string $version | bool', 'return_type': 'bool'},
\     'lookupNamespaceUri': { 'signature': 'string $prefix | string', 'return_type': 'string'},
\     'lookupPrefix': { 'signature': 'string $namespaceURI | string', 'return_type': 'string'},
\     'normalize': { 'signature': 'void | void', 'return_type': 'void'},
\     'removeChild': { 'signature': 'DOMNode $oldnode | DOMNode', 'return_type': 'DOMNode'},
\     'replaceChild': { 'signature': 'DOMNode $newnode, DOMNode $oldnode | DOMNode', 'return_type': 'DOMNode'},
\   },
\},
\'domexception': {
\   'name': 'DOMException',
\   'properties': {
\     'code': { 'initializer': '', 'type': 'int'},
\     'message': { 'initializer': '', 'type': 'string'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'domimplementation': {
\   'name': 'DOMImplementation',
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'createDocument': { 'signature': '[ string $namespaceURI = NULL [, string $qualifiedName = NULL [, DOMDocumentType $doctype = NULL]]] | DOMDocument', 'return_type': 'DOMDocument'},
\     'createDocumentType': { 'signature': '[ string $qualifiedName = NULL [, string $publicId = NULL [, string $systemId = NULL]]] | DOMDocumentType', 'return_type': 'DOMDocumentType'},
\     'hasFeature': { 'signature': 'string $feature, string $version | bool', 'return_type': 'bool'},
\   },
\},
\'domnamednodemap': {
\   'name': 'DOMNamedNodeMap',
\   'properties': {
\     'length': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'count': { 'signature': 'void | int', 'return_type': 'int'},
\     'getNamedItem': { 'signature': 'string $name | DOMNode', 'return_type': 'DOMNode'},
\     'getNamedItemNS': { 'signature': 'string $namespaceURI, string $localName | DOMNode', 'return_type': 'DOMNode'},
\     'item': { 'signature': 'int $index | DOMNode', 'return_type': 'DOMNode'},
\   },
\},
\'domnode': {
\   'name': 'DOMNode',
\   'properties': {
\     'nodeName': { 'initializer': '', 'type': 'string'},
\     'nodeValue': { 'initializer': '', 'type': 'string'},
\     'nodeType': { 'initializer': '', 'type': 'int'},
\     'parentNode': { 'initializer': '', 'type': 'DOMNode'},
\     'childNodes': { 'initializer': '', 'type': 'DOMNodeList'},
\     'firstChild': { 'initializer': '', 'type': 'DOMNode'},
\     'lastChild': { 'initializer': '', 'type': 'DOMNode'},
\     'previousSibling': { 'initializer': '', 'type': 'DOMNode'},
\     'nextSibling': { 'initializer': '', 'type': 'DOMNode'},
\     'attributes': { 'initializer': '', 'type': 'DOMNamedNodeMap'},
\     'ownerDocument': { 'initializer': '', 'type': 'DOMDocument'},
\     'namespaceURI': { 'initializer': '', 'type': 'string'},
\     'prefix': { 'initializer': '', 'type': 'string'},
\     'localName': { 'initializer': '', 'type': 'string'},
\     'baseURI': { 'initializer': '', 'type': 'string'},
\     'textContent': { 'initializer': '', 'type': 'string'},
\   },
\   'methods': {
\     'appendChild': { 'signature': 'DOMNode $newnode | DOMNode', 'return_type': 'DOMNode'},
\     'C14N': { 'signature': '[ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes]]]] | string', 'return_type': 'string'},
\     'C14NFile': { 'signature': 'string $uri [, bool $exclusive = FALSE [, bool $with_comments = FALSE [, array $xpath [, array $ns_prefixes]]]] | int', 'return_type': 'int'},
\     'cloneNode': { 'signature': '[ bool $deep] | DOMNode', 'return_type': 'DOMNode'},
\     'getLineNo': { 'signature': 'void | int', 'return_type': 'int'},
\     'getNodePath': { 'signature': 'void | string', 'return_type': 'string'},
\     'hasAttributes': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'hasChildNodes': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'insertBefore': { 'signature': 'DOMNode $newnode [, DOMNode $refnode] | DOMNode', 'return_type': 'DOMNode'},
\     'isDefaultNamespace': { 'signature': 'string $namespaceURI | bool', 'return_type': 'bool'},
\     'isSameNode': { 'signature': 'DOMNode $node | bool', 'return_type': 'bool'},
\     'isSupported': { 'signature': 'string $feature, string $version | bool', 'return_type': 'bool'},
\     'lookupNamespaceUri': { 'signature': 'string $prefix | string', 'return_type': 'string'},
\     'lookupPrefix': { 'signature': 'string $namespaceURI | string', 'return_type': 'string'},
\     'normalize': { 'signature': 'void | void', 'return_type': 'void'},
\     'removeChild': { 'signature': 'DOMNode $oldnode | DOMNode', 'return_type': 'DOMNode'},
\     'replaceChild': { 'signature': 'DOMNode $newnode, DOMNode $oldnode | DOMNode', 'return_type': 'DOMNode'},
\   },
\},
\'domnodelist': {
\   'name': 'DOMNodeList',
\   'properties': {
\     'length': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'count': { 'signature': 'void | int', 'return_type': 'int'},
\     'item': { 'signature': 'int $index | DOMNode', 'return_type': 'DOMNode'},
\   },
\},
\'domnotation': {
\   'name': 'DOMNotation',
\   'properties': {
\     'publicId': { 'initializer': '', 'type': 'string'},
\     'systemId': { 'initializer': '', 'type': 'string'},
\     'nodeName': { 'initializer': '', 'type': 'string'},
\     'nodeValue': { 'initializer': '', 'type': 'string'},
\     'nodeType': { 'initializer': '', 'type': 'int'},
\     'parentNode': { 'initializer': '', 'type': 'DOMNode'},
\     'childNodes': { 'initializer': '', 'type': 'DOMNodeList'},
\     'firstChild': { 'initializer': '', 'type': 'DOMNode'},
\     'lastChild': { 'initializer': '', 'type': 'DOMNode'},
\     'previousSibling': { 'initializer': '', 'type': 'DOMNode'},
\     'nextSibling': { 'initializer': '', 'type': 'DOMNode'},
\     'attributes': { 'initializer': '', 'type': 'DOMNamedNodeMap'},
\     'ownerDocument': { 'initializer': '', 'type': 'DOMDocument'},
\     'namespaceURI': { 'initializer': '', 'type': 'string'},
\     'prefix': { 'initializer': '', 'type': 'string'},
\     'localName': { 'initializer': '', 'type': 'string'},
\     'baseURI': { 'initializer': '', 'type': 'string'},
\     'textContent': { 'initializer': '', 'type': 'string'},
\   },
\   'methods': {
\     'appendChild': { 'signature': 'DOMNode $newnode | DOMNode', 'return_type': 'DOMNode'},
\     'C14N': { 'signature': '[ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes]]]] | string', 'return_type': 'string'},
\     'C14NFile': { 'signature': 'string $uri [, bool $exclusive = FALSE [, bool $with_comments = FALSE [, array $xpath [, array $ns_prefixes]]]] | int', 'return_type': 'int'},
\     'cloneNode': { 'signature': '[ bool $deep] | DOMNode', 'return_type': 'DOMNode'},
\     'getLineNo': { 'signature': 'void | int', 'return_type': 'int'},
\     'getNodePath': { 'signature': 'void | string', 'return_type': 'string'},
\     'hasAttributes': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'hasChildNodes': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'insertBefore': { 'signature': 'DOMNode $newnode [, DOMNode $refnode] | DOMNode', 'return_type': 'DOMNode'},
\     'isDefaultNamespace': { 'signature': 'string $namespaceURI | bool', 'return_type': 'bool'},
\     'isSameNode': { 'signature': 'DOMNode $node | bool', 'return_type': 'bool'},
\     'isSupported': { 'signature': 'string $feature, string $version | bool', 'return_type': 'bool'},
\     'lookupNamespaceUri': { 'signature': 'string $prefix | string', 'return_type': 'string'},
\     'lookupPrefix': { 'signature': 'string $namespaceURI | string', 'return_type': 'string'},
\     'normalize': { 'signature': 'void | void', 'return_type': 'void'},
\     'removeChild': { 'signature': 'DOMNode $oldnode | DOMNode', 'return_type': 'DOMNode'},
\     'replaceChild': { 'signature': 'DOMNode $newnode, DOMNode $oldnode | DOMNode', 'return_type': 'DOMNode'},
\   },
\},
\'domprocessinginstruction': {
\   'name': 'DOMProcessingInstruction',
\   'properties': {
\     'target': { 'initializer': '', 'type': 'string'},
\     'data': { 'initializer': '', 'type': 'string'},
\     'nodeName': { 'initializer': '', 'type': 'string'},
\     'nodeValue': { 'initializer': '', 'type': 'string'},
\     'nodeType': { 'initializer': '', 'type': 'int'},
\     'parentNode': { 'initializer': '', 'type': 'DOMNode'},
\     'childNodes': { 'initializer': '', 'type': 'DOMNodeList'},
\     'firstChild': { 'initializer': '', 'type': 'DOMNode'},
\     'lastChild': { 'initializer': '', 'type': 'DOMNode'},
\     'previousSibling': { 'initializer': '', 'type': 'DOMNode'},
\     'nextSibling': { 'initializer': '', 'type': 'DOMNode'},
\     'attributes': { 'initializer': '', 'type': 'DOMNamedNodeMap'},
\     'ownerDocument': { 'initializer': '', 'type': 'DOMDocument'},
\     'namespaceURI': { 'initializer': '', 'type': 'string'},
\     'prefix': { 'initializer': '', 'type': 'string'},
\     'localName': { 'initializer': '', 'type': 'string'},
\     'baseURI': { 'initializer': '', 'type': 'string'},
\     'textContent': { 'initializer': '', 'type': 'string'},
\   },
\   'methods': {
\     '__construct': { 'signature': 'string $name [, string $value]', 'return_type': ''},
\     'appendChild': { 'signature': 'DOMNode $newnode | DOMNode', 'return_type': 'DOMNode'},
\     'C14N': { 'signature': '[ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes]]]] | string', 'return_type': 'string'},
\     'C14NFile': { 'signature': 'string $uri [, bool $exclusive = FALSE [, bool $with_comments = FALSE [, array $xpath [, array $ns_prefixes]]]] | int', 'return_type': 'int'},
\     'cloneNode': { 'signature': '[ bool $deep] | DOMNode', 'return_type': 'DOMNode'},
\     'getLineNo': { 'signature': 'void | int', 'return_type': 'int'},
\     'getNodePath': { 'signature': 'void | string', 'return_type': 'string'},
\     'hasAttributes': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'hasChildNodes': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'insertBefore': { 'signature': 'DOMNode $newnode [, DOMNode $refnode] | DOMNode', 'return_type': 'DOMNode'},
\     'isDefaultNamespace': { 'signature': 'string $namespaceURI | bool', 'return_type': 'bool'},
\     'isSameNode': { 'signature': 'DOMNode $node | bool', 'return_type': 'bool'},
\     'isSupported': { 'signature': 'string $feature, string $version | bool', 'return_type': 'bool'},
\     'lookupNamespaceUri': { 'signature': 'string $prefix | string', 'return_type': 'string'},
\     'lookupPrefix': { 'signature': 'string $namespaceURI | string', 'return_type': 'string'},
\     'normalize': { 'signature': 'void | void', 'return_type': 'void'},
\     'removeChild': { 'signature': 'DOMNode $oldnode | DOMNode', 'return_type': 'DOMNode'},
\     'replaceChild': { 'signature': 'DOMNode $newnode, DOMNode $oldnode | DOMNode', 'return_type': 'DOMNode'},
\   },
\},
\'domtext': {
\   'name': 'DOMText',
\   'properties': {
\     'wholeText': { 'initializer': '', 'type': 'string'},
\     'data': { 'initializer': '', 'type': 'string'},
\     'length': { 'initializer': '', 'type': 'int'},
\     'nodeName': { 'initializer': '', 'type': 'string'},
\     'nodeValue': { 'initializer': '', 'type': 'string'},
\     'nodeType': { 'initializer': '', 'type': 'int'},
\     'parentNode': { 'initializer': '', 'type': 'DOMNode'},
\     'childNodes': { 'initializer': '', 'type': 'DOMNodeList'},
\     'firstChild': { 'initializer': '', 'type': 'DOMNode'},
\     'lastChild': { 'initializer': '', 'type': 'DOMNode'},
\     'previousSibling': { 'initializer': '', 'type': 'DOMNode'},
\     'nextSibling': { 'initializer': '', 'type': 'DOMNode'},
\     'attributes': { 'initializer': '', 'type': 'DOMNamedNodeMap'},
\     'ownerDocument': { 'initializer': '', 'type': 'DOMDocument'},
\     'namespaceURI': { 'initializer': '', 'type': 'string'},
\     'prefix': { 'initializer': '', 'type': 'string'},
\     'localName': { 'initializer': '', 'type': 'string'},
\     'baseURI': { 'initializer': '', 'type': 'string'},
\     'textContent': { 'initializer': '', 'type': 'string'},
\   },
\   'methods': {
\     '__construct': { 'signature': '[ string $value]', 'return_type': ''},
\     'isElementContentWhitespace': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isWhitespaceInElementContent': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'splitText': { 'signature': 'int $offset | DOMText', 'return_type': 'DOMText'},
\     'appendData': { 'signature': 'string $data | void', 'return_type': 'void'},
\     'deleteData': { 'signature': 'int $offset, int $count | void', 'return_type': 'void'},
\     'insertData': { 'signature': 'int $offset, string $data | void', 'return_type': 'void'},
\     'replaceData': { 'signature': 'int $offset, int $count, string $data | void', 'return_type': 'void'},
\     'substringData': { 'signature': 'int $offset, int $count | string', 'return_type': 'string'},
\     'appendChild': { 'signature': 'DOMNode $newnode | DOMNode', 'return_type': 'DOMNode'},
\     'C14N': { 'signature': '[ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes]]]] | string', 'return_type': 'string'},
\     'C14NFile': { 'signature': 'string $uri [, bool $exclusive = FALSE [, bool $with_comments = FALSE [, array $xpath [, array $ns_prefixes]]]] | int', 'return_type': 'int'},
\     'cloneNode': { 'signature': '[ bool $deep] | DOMNode', 'return_type': 'DOMNode'},
\     'getLineNo': { 'signature': 'void | int', 'return_type': 'int'},
\     'getNodePath': { 'signature': 'void | string', 'return_type': 'string'},
\     'hasAttributes': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'hasChildNodes': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'insertBefore': { 'signature': 'DOMNode $newnode [, DOMNode $refnode] | DOMNode', 'return_type': 'DOMNode'},
\     'isDefaultNamespace': { 'signature': 'string $namespaceURI | bool', 'return_type': 'bool'},
\     'isSameNode': { 'signature': 'DOMNode $node | bool', 'return_type': 'bool'},
\     'isSupported': { 'signature': 'string $feature, string $version | bool', 'return_type': 'bool'},
\     'lookupNamespaceUri': { 'signature': 'string $prefix | string', 'return_type': 'string'},
\     'lookupPrefix': { 'signature': 'string $namespaceURI | string', 'return_type': 'string'},
\     'normalize': { 'signature': 'void | void', 'return_type': 'void'},
\     'removeChild': { 'signature': 'DOMNode $oldnode | DOMNode', 'return_type': 'DOMNode'},
\     'replaceChild': { 'signature': 'DOMNode $newnode, DOMNode $oldnode | DOMNode', 'return_type': 'DOMNode'},
\   },
\},
\'domxpath': {
\   'name': 'DOMXPath',
\   'properties': {
\     'document': { 'initializer': '', 'type': 'DOMDocument'},
\   },
\   'methods': {
\     '__construct': { 'signature': 'DOMDocument $doc', 'return_type': ''},
\     'evaluate': { 'signature': 'string $expression [, DOMNode $contextnode [, bool $registerNodeNS = TRUE]] | mixed', 'return_type': 'mixed'},
\     'query': { 'signature': 'string $expression [, DOMNode $contextnode [, bool $registerNodeNS = TRUE]] | DOMNodeList', 'return_type': 'DOMNodeList'},
\     'registerNamespace': { 'signature': 'string $prefix, string $namespaceURI | bool', 'return_type': 'bool'},
\     'registerPhpFunctions': { 'signature': '[ mixed $restrict] | void', 'return_type': 'void'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['data_structures'] = {
\'ds\deque': {
\   'name': 'Ds\Deque',
\   'constants': {
\     'MIN_CAPACITY': '8',
\   },
\   'methods': {
\     'allocate': { 'signature': 'int $capacity | void', 'return_type': 'void'},
\     'apply': { 'signature': 'callable $callback | void', 'return_type': 'void'},
\     'capacity': { 'signature': 'void | int', 'return_type': 'int'},
\     'clear': { 'signature': 'void | void', 'return_type': 'void'},
\     'contains': { 'signature': '[ mixed $...values] | bool', 'return_type': 'bool'},
\     'copy': { 'signature': 'void | Ds\Deque', 'return_type': 'Ds\Deque'},
\     'filter': { 'signature': '[ callable $callback] | Ds\Deque', 'return_type': 'Ds\Deque'},
\     'find': { 'signature': 'mixed $value | mixed', 'return_type': 'mixed'},
\     'first': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'get': { 'signature': 'int $index | mixed', 'return_type': 'mixed'},
\     'insert': { 'signature': 'int $index [, mixed $...values] | void', 'return_type': 'void'},
\     'isEmpty': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'join': { 'signature': '[ string $glue] | string', 'return_type': 'string'},
\     'last': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'map': { 'signature': 'callable $callback | Ds\Deque', 'return_type': 'Ds\Deque'},
\     'merge': { 'signature': 'mixed $values | Ds\Deque', 'return_type': 'Ds\Deque'},
\     'pop': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'push': { 'signature': '[ mixed $...values] | void', 'return_type': 'void'},
\     'reduce': { 'signature': 'callable $callback [, mixed $initial] | mixed', 'return_type': 'mixed'},
\     'remove': { 'signature': 'int $index | mixed', 'return_type': 'mixed'},
\     'reverse': { 'signature': 'void | void', 'return_type': 'void'},
\     'reversed': { 'signature': 'void | Ds\Deque', 'return_type': 'Ds\Deque'},
\     'rotate': { 'signature': 'int $rotations | void', 'return_type': 'void'},
\     'set': { 'signature': 'int $index, mixed $value | void', 'return_type': 'void'},
\     'shift': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'slice': { 'signature': 'int $index [, int $length] | Ds\Deque', 'return_type': 'Ds\Deque'},
\     'sort': { 'signature': '[ callable $comparator] | void', 'return_type': 'void'},
\     'sorted': { 'signature': '[ callable $comparator] | Ds\Deque', 'return_type': 'Ds\Deque'},
\     'sum': { 'signature': 'void | number', 'return_type': 'number'},
\     'toArray': { 'signature': 'void | array', 'return_type': 'array'},
\     'unshift': { 'signature': '[ mixed $values] | void', 'return_type': 'void'},
\   },
\},
\'ds\map': {
\   'name': 'Ds\Map',
\   'constants': {
\     'MIN_CAPACITY': '16',
\   },
\   'methods': {
\     'allocate': { 'signature': 'int $capacity | void', 'return_type': 'void'},
\     'apply': { 'signature': 'callable $callback | void', 'return_type': 'void'},
\     'capacity': { 'signature': 'void | int', 'return_type': 'int'},
\     'clear': { 'signature': 'void | void', 'return_type': 'void'},
\     'copy': { 'signature': 'void | Ds\Map', 'return_type': 'Ds\Map'},
\     'diff': { 'signature': 'Ds\Map $map | Ds\Map', 'return_type': 'Ds\Map'},
\     'filter': { 'signature': '[ callable $callback] | Ds\Map', 'return_type': 'Ds\Map'},
\     'first': { 'signature': 'void | Ds\Pair', 'return_type': 'Ds\Pair'},
\     'get': { 'signature': 'mixed $key [, mixed $default] | mixed', 'return_type': 'mixed'},
\     'hasKey': { 'signature': 'mixed $key | bool', 'return_type': 'bool'},
\     'hasValue': { 'signature': 'mixed $value | bool', 'return_type': 'bool'},
\     'intersect': { 'signature': 'Ds\Map $map | Ds\Map', 'return_type': 'Ds\Map'},
\     'isEmpty': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'keys': { 'signature': 'void | Ds\Set', 'return_type': 'Ds\Set'},
\     'ksort': { 'signature': '[ callable $comparator] | void', 'return_type': 'void'},
\     'ksorted': { 'signature': '[ callable $comparator] | Ds\Map', 'return_type': 'Ds\Map'},
\     'last': { 'signature': 'void | Ds\Pair', 'return_type': 'Ds\Pair'},
\     'map': { 'signature': 'callable $callback | Ds\Map', 'return_type': 'Ds\Map'},
\     'merge': { 'signature': 'mixed $values | Ds\Map', 'return_type': 'Ds\Map'},
\     'pairs': { 'signature': 'void | Ds\Sequence', 'return_type': 'Ds\Sequence'},
\     'put': { 'signature': 'mixed $key, mixed $value | void', 'return_type': 'void'},
\     'putAll': { 'signature': 'mixed $pairs | void', 'return_type': 'void'},
\     'reduce': { 'signature': 'callable $callback [, mixed $initial] | mixed', 'return_type': 'mixed'},
\     'remove': { 'signature': 'mixed $key [, mixed $default] | mixed', 'return_type': 'mixed'},
\     'reverse': { 'signature': 'void | void', 'return_type': 'void'},
\     'reversed': { 'signature': 'void | Ds\Map', 'return_type': 'Ds\Map'},
\     'skip': { 'signature': 'int $position | Ds\Pair', 'return_type': 'Ds\Pair'},
\     'slice': { 'signature': 'int $index [, int $length] | Ds\Map', 'return_type': 'Ds\Map'},
\     'sort': { 'signature': '[ callable $comparator] | void', 'return_type': 'void'},
\     'sorted': { 'signature': '[ callable $comparator] | Ds\Map', 'return_type': 'Ds\Map'},
\     'sum': { 'signature': 'void | number', 'return_type': 'number'},
\     'toArray': { 'signature': 'void | array', 'return_type': 'array'},
\     'union': { 'signature': 'Ds\Map $map | Ds\Map', 'return_type': 'Ds\Map'},
\     'values': { 'signature': 'void | Ds\Sequence', 'return_type': 'Ds\Sequence'},
\     'xor': { 'signature': 'Ds\Map $map | Ds\Map', 'return_type': 'Ds\Map'},
\   },
\},
\'ds\pair': {
\   'name': 'Ds\Pair',
\   'methods': {
\     '__construct': { 'signature': '[ mixed $key [, mixed $value]]', 'return_type': ''},
\     'clear': { 'signature': 'void | void', 'return_type': 'void'},
\     'copy': { 'signature': 'void | Ds\Pair', 'return_type': 'Ds\Pair'},
\     'isEmpty': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'toArray': { 'signature': 'void | array', 'return_type': 'array'},
\   },
\},
\'ds\priorityqueue': {
\   'name': 'Ds\PriorityQueue',
\   'constants': {
\     'MIN_CAPACITY': '8',
\   },
\   'methods': {
\     'allocate': { 'signature': 'int $capacity | void', 'return_type': 'void'},
\     'capacity': { 'signature': 'void | int', 'return_type': 'int'},
\     'clear': { 'signature': 'void | void', 'return_type': 'void'},
\     'copy': { 'signature': 'void | Ds\PriorityQueue', 'return_type': 'Ds\PriorityQueue'},
\     'isEmpty': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'peek': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'pop': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'push': { 'signature': 'mixed $value, int $priority | void', 'return_type': 'void'},
\     'toArray': { 'signature': 'void | array', 'return_type': 'array'},
\   },
\},
\'ds\queue': {
\   'name': 'Ds\Queue',
\   'constants': {
\     'MIN_CAPACITY': '8',
\   },
\   'methods': {
\     'allocate': { 'signature': 'int $capacity | void', 'return_type': 'void'},
\     'capacity': { 'signature': 'void | int', 'return_type': 'int'},
\     'clear': { 'signature': 'void | void', 'return_type': 'void'},
\     'copy': { 'signature': 'void | Ds\Queue', 'return_type': 'Ds\Queue'},
\     'isEmpty': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'peek': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'pop': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'push': { 'signature': '[ mixed $...values] | void', 'return_type': 'void'},
\     'toArray': { 'signature': 'void | array', 'return_type': 'array'},
\   },
\},
\'ds\set': {
\   'name': 'Ds\Set',
\   'constants': {
\     'MIN_CAPACITY': '16',
\   },
\   'methods': {
\     'add': { 'signature': '[ mixed $...values] | void', 'return_type': 'void'},
\     'allocate': { 'signature': 'int $capacity | void', 'return_type': 'void'},
\     'capacity': { 'signature': 'void | int', 'return_type': 'int'},
\     'clear': { 'signature': 'void | void', 'return_type': 'void'},
\     'contains': { 'signature': '[ mixed $...values] | bool', 'return_type': 'bool'},
\     'copy': { 'signature': 'void | Ds\Set', 'return_type': 'Ds\Set'},
\     'diff': { 'signature': 'Ds\Set $set | Ds\Set', 'return_type': 'Ds\Set'},
\     'filter': { 'signature': '[ callable $callback] | Ds\Set', 'return_type': 'Ds\Set'},
\     'first': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'get': { 'signature': 'int $index | mixed', 'return_type': 'mixed'},
\     'intersect': { 'signature': 'Ds\Set $set | Ds\Set', 'return_type': 'Ds\Set'},
\     'isEmpty': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'join': { 'signature': '[ string $glue] | string', 'return_type': 'string'},
\     'last': { 'signature': 'void | void', 'return_type': 'void'},
\     'merge': { 'signature': 'mixed $values | Ds\Set', 'return_type': 'Ds\Set'},
\     'reduce': { 'signature': 'callable $callback [, mixed $initial] | mixed', 'return_type': 'mixed'},
\     'remove': { 'signature': '[ mixed $...values] | void', 'return_type': 'void'},
\     'reverse': { 'signature': 'void | void', 'return_type': 'void'},
\     'reversed': { 'signature': 'void | Ds\Set', 'return_type': 'Ds\Set'},
\     'slice': { 'signature': 'int $index [, int $length] | Ds\Set', 'return_type': 'Ds\Set'},
\     'sort': { 'signature': '[ callable $comparator] | void', 'return_type': 'void'},
\     'sorted': { 'signature': '[ callable $comparator] | Ds\Set', 'return_type': 'Ds\Set'},
\     'sum': { 'signature': 'void | number', 'return_type': 'number'},
\     'toArray': { 'signature': 'void | array', 'return_type': 'array'},
\     'union': { 'signature': 'Ds\Set $set | Ds\Set', 'return_type': 'Ds\Set'},
\     'xor': { 'signature': 'Ds\Set $set | Ds\Set', 'return_type': 'Ds\Set'},
\   },
\},
\'ds\stack': {
\   'name': 'Ds\Stack',
\   'methods': {
\     'allocate': { 'signature': 'int $capacity | void', 'return_type': 'void'},
\     'capacity': { 'signature': 'void | int', 'return_type': 'int'},
\     'clear': { 'signature': 'void | void', 'return_type': 'void'},
\     'copy': { 'signature': 'void | Ds\Stack', 'return_type': 'Ds\Stack'},
\     'isEmpty': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'peek': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'pop': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'push': { 'signature': '[ mixed $...values] | void', 'return_type': 'void'},
\     'toArray': { 'signature': 'void | array', 'return_type': 'array'},
\   },
\},
\'ds\vector': {
\   'name': 'Ds\Vector',
\   'constants': {
\     'MIN_CAPACITY': '10',
\   },
\   'methods': {
\     'allocate': { 'signature': 'int $capacity | void', 'return_type': 'void'},
\     'apply': { 'signature': 'callable $callback | void', 'return_type': 'void'},
\     'capacity': { 'signature': 'void | int', 'return_type': 'int'},
\     'clear': { 'signature': 'void | void', 'return_type': 'void'},
\     'contains': { 'signature': '[ mixed $...values] | bool', 'return_type': 'bool'},
\     'copy': { 'signature': 'void | Ds\Vector', 'return_type': 'Ds\Vector'},
\     'filter': { 'signature': '[ callable $callback] | Ds\Vector', 'return_type': 'Ds\Vector'},
\     'find': { 'signature': 'mixed $value | mixed', 'return_type': 'mixed'},
\     'first': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'get': { 'signature': 'int $index | mixed', 'return_type': 'mixed'},
\     'insert': { 'signature': 'int $index [, mixed $...values] | void', 'return_type': 'void'},
\     'isEmpty': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'join': { 'signature': '[ string $glue] | string', 'return_type': 'string'},
\     'last': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'map': { 'signature': 'callable $callback | Ds\Vector', 'return_type': 'Ds\Vector'},
\     'merge': { 'signature': 'mixed $values | Ds\Vector', 'return_type': 'Ds\Vector'},
\     'pop': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'push': { 'signature': '[ mixed $...values] | void', 'return_type': 'void'},
\     'reduce': { 'signature': 'callable $callback [, mixed $initial] | mixed', 'return_type': 'mixed'},
\     'remove': { 'signature': 'int $index | mixed', 'return_type': 'mixed'},
\     'reverse': { 'signature': 'void | void', 'return_type': 'void'},
\     'reversed': { 'signature': 'void | Ds\Vector', 'return_type': 'Ds\Vector'},
\     'rotate': { 'signature': 'int $rotations | void', 'return_type': 'void'},
\     'set': { 'signature': 'int $index, mixed $value | void', 'return_type': 'void'},
\     'shift': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'slice': { 'signature': 'int $index [, int $length] | Ds\Vector', 'return_type': 'Ds\Vector'},
\     'sort': { 'signature': '[ callable $comparator] | void', 'return_type': 'void'},
\     'sorted': { 'signature': '[ callable $comparator] | Ds\Vector', 'return_type': 'Ds\Vector'},
\     'sum': { 'signature': 'void | number', 'return_type': 'number'},
\     'toArray': { 'signature': 'void | array', 'return_type': 'array'},
\     'unshift': { 'signature': '[ mixed $values] | void', 'return_type': 'void'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['ev'] = {
\'ev': {
\   'name': 'Ev',
\   'constants': {
\     'FLAG_AUTO': '0',
\     'FLAG_NOENV': '16777216',
\     'FLAG_FORKCHECK': '33554432',
\     'FLAG_NOINOTIFY': '1048576',
\     'FLAG_SIGNALFD': '2097152',
\     'FLAG_NOSIGMASK': '4194304',
\     'RUN_NOWAIT': '1',
\     'RUN_ONCE': '2',
\     'BREAK_CANCEL': '0',
\     'BREAK_ONE': '1',
\     'BREAK_ALL': '2',
\     'MINPRI': '-2',
\     'MAXPRI': '2',
\     'READ': '1',
\     'WRITE': '2',
\     'TIMER': '256',
\     'PERIODIC': '512',
\     'SIGNAL': '1024',
\     'CHILD': '',
\     'STAT': '4096',
\     'IDLE': '8192',
\     'PREPARE': '16384',
\     'CHECK': '32768',
\     'EMBED': '65536',
\     'CUSTOM': '16777216',
\     'ERROR': '2147483648',
\     'BACKEND_SELECT': '1',
\     'BACKEND_POLL': '2',
\     'BACKEND_EPOLL': '4',
\     'BACKEND_KQUEUE': '8',
\     'BACKEND_DEVPOLL': '16',
\     'BACKEND_PORT': '32',
\     'BACKEND_ALL': '63',
\     'BACKEND_MASK': '65535',
\   },
\   'static_methods': {
\     'backend': { 'signature': 'void | int', 'return_type': 'int'},
\     'depth': { 'signature': 'void | int', 'return_type': 'int'},
\     'embeddableBackends': { 'signature': 'void | int', 'return_type': 'int'},
\     'feedSignal': { 'signature': 'int $signum | void', 'return_type': 'void'},
\     'feedSignalEvent': { 'signature': 'int $signum | void', 'return_type': 'void'},
\     'iteration': { 'signature': 'void | int', 'return_type': 'int'},
\     'now': { 'signature': 'void | float', 'return_type': 'float'},
\     'nowUpdate': { 'signature': 'void | void', 'return_type': 'void'},
\     'recommendedBackends': { 'signature': 'void | int', 'return_type': 'int'},
\     'resume': { 'signature': 'void | void', 'return_type': 'void'},
\     'run': { 'signature': '[ int $flags] | void', 'return_type': 'void'},
\     'sleep': { 'signature': 'float $seconds | void', 'return_type': 'void'},
\     'stop': { 'signature': '[ int $how] | void', 'return_type': 'void'},
\     'supportedBackends': { 'signature': 'void | int', 'return_type': 'int'},
\     'suspend': { 'signature': 'void | void', 'return_type': 'void'},
\     'time': { 'signature': 'void | float', 'return_type': 'float'},
\     'verify': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'evcheck': {
\   'name': 'EvCheck',
\   'properties': {
\     'is_active': { 'initializer': '', 'type': ''},
\     'data': { 'initializer': '', 'type': ''},
\     'is_pending': { 'initializer': '', 'type': ''},
\     'priority': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'clear': { 'signature': 'void | int', 'return_type': 'int'},
\     'feed': { 'signature': 'int $revents | void', 'return_type': 'void'},
\     'getLoop': { 'signature': 'void | EvLoop', 'return_type': 'EvLoop'},
\     'invoke': { 'signature': 'int $revents | void', 'return_type': 'void'},
\     'keepalive': { 'signature': '[ bool $value] | bool', 'return_type': 'bool'},
\     'setCallback': { 'signature': 'callable $callback | void', 'return_type': 'void'},
\     'start': { 'signature': 'void | void', 'return_type': 'void'},
\     'stop': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\   'static_methods': {
\     'createStopped': { 'signature': 'string $callback [, string $data [, string $priority]] | object', 'return_type': 'object'},
\   },
\},
\'evchild': {
\   'name': 'EvChild',
\   'properties': {
\     'pid': { 'initializer': '', 'type': ''},
\     'rpid': { 'initializer': '', 'type': ''},
\     'rstatus': { 'initializer': '', 'type': ''},
\     'is_active': { 'initializer': '', 'type': ''},
\     'data': { 'initializer': '', 'type': ''},
\     'is_pending': { 'initializer': '', 'type': ''},
\     'priority': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'set': { 'signature': 'int $pid, bool $trace | void', 'return_type': 'void'},
\     'clear': { 'signature': 'void | int', 'return_type': 'int'},
\     'feed': { 'signature': 'int $revents | void', 'return_type': 'void'},
\     'getLoop': { 'signature': 'void | EvLoop', 'return_type': 'EvLoop'},
\     'invoke': { 'signature': 'int $revents | void', 'return_type': 'void'},
\     'keepalive': { 'signature': '[ bool $value] | bool', 'return_type': 'bool'},
\     'setCallback': { 'signature': 'callable $callback | void', 'return_type': 'void'},
\     'start': { 'signature': 'void | void', 'return_type': 'void'},
\     'stop': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\   'static_methods': {
\     'createStopped': { 'signature': 'int $pid, bool $trace, callable $callback [, mixed $data [, int $priority]] | object', 'return_type': 'object'},
\   },
\},
\'evembed': {
\   'name': 'EvEmbed',
\   'properties': {
\     'embed': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'set': { 'signature': 'object $other | void', 'return_type': 'void'},
\     'sweep': { 'signature': 'void | void', 'return_type': 'void'},
\     'clear': { 'signature': 'void | int', 'return_type': 'int'},
\     'feed': { 'signature': 'int $revents | void', 'return_type': 'void'},
\     'getLoop': { 'signature': 'void | EvLoop', 'return_type': 'EvLoop'},
\     'invoke': { 'signature': 'int $revents | void', 'return_type': 'void'},
\     'keepalive': { 'signature': '[ bool $value] | bool', 'return_type': 'bool'},
\     'setCallback': { 'signature': 'callable $callback | void', 'return_type': 'void'},
\     'start': { 'signature': 'void | void', 'return_type': 'void'},
\     'stop': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\   'static_methods': {
\     'createStopped': { 'signature': 'object $other [, callable $callback [, mixed $data [, int $priority]]] | void', 'return_type': 'void'},
\   },
\},
\'evfork': {
\   'name': 'EvFork',
\   'properties': {
\     'is_active': { 'initializer': '', 'type': ''},
\     'data': { 'initializer': '', 'type': ''},
\     'is_pending': { 'initializer': '', 'type': ''},
\     'priority': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'clear': { 'signature': 'void | int', 'return_type': 'int'},
\     'feed': { 'signature': 'int $revents | void', 'return_type': 'void'},
\     'getLoop': { 'signature': 'void | EvLoop', 'return_type': 'EvLoop'},
\     'invoke': { 'signature': 'int $revents | void', 'return_type': 'void'},
\     'keepalive': { 'signature': '[ bool $value] | bool', 'return_type': 'bool'},
\     'setCallback': { 'signature': 'callable $callback | void', 'return_type': 'void'},
\     'start': { 'signature': 'void | void', 'return_type': 'void'},
\     'stop': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\   'static_methods': {
\     'createStopped': { 'signature': 'string $callback [, string $data [, string $priority]] | object', 'return_type': 'object'},
\   },
\},
\'evidle': {
\   'name': 'EvIdle',
\   'properties': {
\     'is_active': { 'initializer': '', 'type': ''},
\     'data': { 'initializer': '', 'type': ''},
\     'is_pending': { 'initializer': '', 'type': ''},
\     'priority': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'clear': { 'signature': 'void | int', 'return_type': 'int'},
\     'feed': { 'signature': 'int $revents | void', 'return_type': 'void'},
\     'getLoop': { 'signature': 'void | EvLoop', 'return_type': 'EvLoop'},
\     'invoke': { 'signature': 'int $revents | void', 'return_type': 'void'},
\     'keepalive': { 'signature': '[ bool $value] | bool', 'return_type': 'bool'},
\     'setCallback': { 'signature': 'callable $callback | void', 'return_type': 'void'},
\     'start': { 'signature': 'void | void', 'return_type': 'void'},
\     'stop': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\   'static_methods': {
\     'createStopped': { 'signature': 'string $callback [, mixed $data [, int $priority]] | object', 'return_type': 'object'},
\   },
\},
\'evio': {
\   'name': 'EvIo',
\   'properties': {
\     'fd': { 'initializer': '', 'type': ''},
\     'events': { 'initializer': '', 'type': ''},
\     'is_active': { 'initializer': '', 'type': ''},
\     'data': { 'initializer': '', 'type': ''},
\     'is_pending': { 'initializer': '', 'type': ''},
\     'priority': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'set': { 'signature': 'mixed $fd, int $events | void', 'return_type': 'void'},
\     'clear': { 'signature': 'void | int', 'return_type': 'int'},
\     'feed': { 'signature': 'int $revents | void', 'return_type': 'void'},
\     'getLoop': { 'signature': 'void | EvLoop', 'return_type': 'EvLoop'},
\     'invoke': { 'signature': 'int $revents | void', 'return_type': 'void'},
\     'keepalive': { 'signature': '[ bool $value] | bool', 'return_type': 'bool'},
\     'setCallback': { 'signature': 'callable $callback | void', 'return_type': 'void'},
\     'start': { 'signature': 'void | void', 'return_type': 'void'},
\     'stop': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\   'static_methods': {
\     'createStopped': { 'signature': 'mixed $fd, int $events, callable $callback [, mixed $data = NULL [, int $priority = 0]] | EvIo', 'return_type': 'EvIo'},
\   },
\},
\'evloop': {
\   'name': 'EvLoop',
\   'properties': {
\     'data': { 'initializer': '', 'type': ''},
\     'backend': { 'initializer': '', 'type': ''},
\     'is_default_loop': { 'initializer': '', 'type': ''},
\     'iteration': { 'initializer': '', 'type': ''},
\     'pending': { 'initializer': '', 'type': ''},
\     'io_interval': { 'initializer': '', 'type': ''},
\     'timeout_interval': { 'initializer': '', 'type': ''},
\     'depth': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     'backend': { 'signature': 'void | int', 'return_type': 'int'},
\     'check': { 'signature': 'string $callback [, string $data [, string $priority]] | EvCheck', 'return_type': 'EvCheck'},
\     'child': { 'signature': 'string $pid, string $trace, string $callback [, string $data [, string $priority]] | EvChild', 'return_type': 'EvChild'},
\     '__construct': { 'signature': '[ int $flags [, mixed $data = NULL [, float $io_interval = 0.0 [, float $timeout_interval = 0.0]]]]', 'return_type': ''},
\     'embed': { 'signature': 'string $other [, string $callback [, string $data [, string $priority]]] | EvEmbed', 'return_type': 'EvEmbed'},
\     'fork': { 'signature': 'callable $callback [, mixed $data = NULL [, int $priority = 0]] | EvFork', 'return_type': 'EvFork'},
\     'idle': { 'signature': 'callable $callback [, mixed $data = NULL [, int $priority = 0]] | EvIdle', 'return_type': 'EvIdle'},
\     'invokePending': { 'signature': 'void | void', 'return_type': 'void'},
\     'io': { 'signature': 'mixed $fd, int $events, callable $callback [, mixed $data = NULL [, int $priority = 0]] | EvIo', 'return_type': 'EvIo'},
\     'loopFork': { 'signature': 'void | void', 'return_type': 'void'},
\     'now': { 'signature': 'void | float', 'return_type': 'float'},
\     'nowUpdate': { 'signature': 'void | void', 'return_type': 'void'},
\     'periodic': { 'signature': 'float $offset, float $interval, callable $callback [, mixed $data = NULL [, int $priority = 0]] | EvPeriodic', 'return_type': 'EvPeriodic'},
\     'prepare': { 'signature': 'callable $callback [, mixed $data = NULL [, int $priority = 0]] | EvPrepare', 'return_type': 'EvPrepare'},
\     'resume': { 'signature': 'void | void', 'return_type': 'void'},
\     'run': { 'signature': '[ int $flags = 0] | void', 'return_type': 'void'},
\     'signal': { 'signature': 'int $signum, callable $callback [, mixed $data = NULL [, int $priority = 0]] | EvSignal', 'return_type': 'EvSignal'},
\     'stat': { 'signature': 'string $path, float $interval, callable $callback [, mixed $data = NULL [, int $priority = 0]] | EvStat', 'return_type': 'EvStat'},
\     'stop': { 'signature': '[ int $how] | void', 'return_type': 'void'},
\     'suspend': { 'signature': 'void | void', 'return_type': 'void'},
\     'timer': { 'signature': 'float $after, float $repeat, callable $callback [, mixed $data = NULL [, int $priority = 0]] | EvTimer', 'return_type': 'EvTimer'},
\     'verify': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\   'static_methods': {
\     'defaultLoop': { 'signature': '[ int $flags = Ev::FLAG_AUTO [, mixed $data = NULL [, float $io_interval = 0. [, float $timeout_interval = 0.]]]] | EvLoop', 'return_type': 'EvLoop'},
\   },
\},
\'evperiodic': {
\   'name': 'EvPeriodic',
\   'properties': {
\     'offset': { 'initializer': '', 'type': ''},
\     'interval': { 'initializer': '', 'type': ''},
\     'is_active': { 'initializer': '', 'type': ''},
\     'data': { 'initializer': '', 'type': ''},
\     'is_pending': { 'initializer': '', 'type': ''},
\     'priority': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     'again': { 'signature': 'void | void', 'return_type': 'void'},
\     'at': { 'signature': 'void | float', 'return_type': 'float'},
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'set': { 'signature': 'float $offset, float $interval | void', 'return_type': 'void'},
\     'clear': { 'signature': 'void | int', 'return_type': 'int'},
\     'feed': { 'signature': 'int $revents | void', 'return_type': 'void'},
\     'getLoop': { 'signature': 'void | EvLoop', 'return_type': 'EvLoop'},
\     'invoke': { 'signature': 'int $revents | void', 'return_type': 'void'},
\     'keepalive': { 'signature': '[ bool $value] | bool', 'return_type': 'bool'},
\     'setCallback': { 'signature': 'callable $callback | void', 'return_type': 'void'},
\     'start': { 'signature': 'void | void', 'return_type': 'void'},
\     'stop': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\   'static_methods': {
\     'createStopped': { 'signature': 'float $offset, float $interval, callable $reschedule_cb, callable $callback [, mixed $data = NULL [, int $priority = 0]] | EvPeriodic', 'return_type': 'EvPeriodic'},
\   },
\},
\'evprepare': {
\   'name': 'EvPrepare',
\   'properties': {
\     'is_active': { 'initializer': '', 'type': ''},
\     'data': { 'initializer': '', 'type': ''},
\     'is_pending': { 'initializer': '', 'type': ''},
\     'priority': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'clear': { 'signature': 'void | int', 'return_type': 'int'},
\     'feed': { 'signature': 'int $revents | void', 'return_type': 'void'},
\     'getLoop': { 'signature': 'void | EvLoop', 'return_type': 'EvLoop'},
\     'invoke': { 'signature': 'int $revents | void', 'return_type': 'void'},
\     'keepalive': { 'signature': '[ bool $value] | bool', 'return_type': 'bool'},
\     'setCallback': { 'signature': 'callable $callback | void', 'return_type': 'void'},
\     'start': { 'signature': 'void | void', 'return_type': 'void'},
\     'stop': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\   'static_methods': {
\     'createStopped': { 'signature': 'callable $callback [, mixed $data = NULL [, int $priority = 0]] | EvPrepare', 'return_type': 'EvPrepare'},
\   },
\},
\'evsignal': {
\   'name': 'EvSignal',
\   'properties': {
\     'signum': { 'initializer': '', 'type': ''},
\     'is_active': { 'initializer': '', 'type': ''},
\     'data': { 'initializer': '', 'type': ''},
\     'is_pending': { 'initializer': '', 'type': ''},
\     'priority': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'set': { 'signature': 'int $signum | void', 'return_type': 'void'},
\     'clear': { 'signature': 'void | int', 'return_type': 'int'},
\     'feed': { 'signature': 'int $revents | void', 'return_type': 'void'},
\     'getLoop': { 'signature': 'void | EvLoop', 'return_type': 'EvLoop'},
\     'invoke': { 'signature': 'int $revents | void', 'return_type': 'void'},
\     'keepalive': { 'signature': '[ bool $value] | bool', 'return_type': 'bool'},
\     'setCallback': { 'signature': 'callable $callback | void', 'return_type': 'void'},
\     'start': { 'signature': 'void | void', 'return_type': 'void'},
\     'stop': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\   'static_methods': {
\     'createStopped': { 'signature': 'int $signum, callable $callback [, mixed $data = NULL [, int $priority = 0]] | EvSignal', 'return_type': 'EvSignal'},
\   },
\},
\'evstat': {
\   'name': 'EvStat',
\   'properties': {
\     'path': { 'initializer': '', 'type': ''},
\     'interval': { 'initializer': '', 'type': ''},
\     'is_active': { 'initializer': '', 'type': ''},
\     'data': { 'initializer': '', 'type': ''},
\     'is_pending': { 'initializer': '', 'type': ''},
\     'priority': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     'attr': { 'signature': 'void | array', 'return_type': 'array'},
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'prev': { 'signature': 'void | void', 'return_type': 'void'},
\     'set': { 'signature': 'string $path, float $interval | void', 'return_type': 'void'},
\     'stat': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'clear': { 'signature': 'void | int', 'return_type': 'int'},
\     'feed': { 'signature': 'int $revents | void', 'return_type': 'void'},
\     'getLoop': { 'signature': 'void | EvLoop', 'return_type': 'EvLoop'},
\     'invoke': { 'signature': 'int $revents | void', 'return_type': 'void'},
\     'keepalive': { 'signature': '[ bool $value] | bool', 'return_type': 'bool'},
\     'setCallback': { 'signature': 'callable $callback | void', 'return_type': 'void'},
\     'start': { 'signature': 'void | void', 'return_type': 'void'},
\     'stop': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\   'static_methods': {
\     'createStopped': { 'signature': 'string $path, float $interval, callable $callback [, mixed $data = NULL [, int $priority = 0]] | void', 'return_type': 'void'},
\   },
\},
\'evtimer': {
\   'name': 'EvTimer',
\   'properties': {
\     'repeat': { 'initializer': '', 'type': ''},
\     'remaining': { 'initializer': '', 'type': ''},
\     'is_active': { 'initializer': '', 'type': ''},
\     'data': { 'initializer': '', 'type': ''},
\     'is_pending': { 'initializer': '', 'type': ''},
\     'priority': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     'again': { 'signature': 'void | void', 'return_type': 'void'},
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'set': { 'signature': 'float $after, float $repeat | void', 'return_type': 'void'},
\     'clear': { 'signature': 'void | int', 'return_type': 'int'},
\     'feed': { 'signature': 'int $revents | void', 'return_type': 'void'},
\     'getLoop': { 'signature': 'void | EvLoop', 'return_type': 'EvLoop'},
\     'invoke': { 'signature': 'int $revents | void', 'return_type': 'void'},
\     'keepalive': { 'signature': '[ bool $value] | bool', 'return_type': 'bool'},
\     'setCallback': { 'signature': 'callable $callback | void', 'return_type': 'void'},
\     'start': { 'signature': 'void | void', 'return_type': 'void'},
\     'stop': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\   'static_methods': {
\     'createStopped': { 'signature': 'float $after, float $repeat, callable $callback [, mixed $data = NULL [, int $priority = 0]] | EvTimer', 'return_type': 'EvTimer'},
\   },
\},
\'evwatcher': {
\   'name': 'EvWatcher',
\   'properties': {
\     'is_active': { 'initializer': '', 'type': ''},
\     'data': { 'initializer': '', 'type': ''},
\     'is_pending': { 'initializer': '', 'type': ''},
\     'priority': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     'clear': { 'signature': 'void | int', 'return_type': 'int'},
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'feed': { 'signature': 'int $revents | void', 'return_type': 'void'},
\     'getLoop': { 'signature': 'void | EvLoop', 'return_type': 'EvLoop'},
\     'invoke': { 'signature': 'int $revents | void', 'return_type': 'void'},
\     'keepalive': { 'signature': '[ bool $value] | bool', 'return_type': 'bool'},
\     'setCallback': { 'signature': 'callable $callback | void', 'return_type': 'void'},
\     'start': { 'signature': 'void | void', 'return_type': 'void'},
\     'stop': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['event'] = {
\'event': {
\   'name': 'Event',
\   'constants': {
\     'ET': '32',
\     'PERSIST': '16',
\     'READ': '2',
\     'WRITE': '4',
\     'SIGNAL': '8',
\     'TIMEOUT': '1',
\   },
\   'properties': {
\     'pending': { 'initializer': '', 'type': 'bool'},
\   },
\   'methods': {
\     'add': { 'signature': '[ float $timeout] | bool', 'return_type': 'bool'},
\     'addSignal': { 'signature': '[ float $timeout] | bool', 'return_type': 'bool'},
\     'addTimer': { 'signature': '[ float $timeout] | bool', 'return_type': 'bool'},
\     '__construct': { 'signature': 'EventBase $base, mixed $fd, int $what, callable $cb [, mixed $arg = NULL]', 'return_type': ''},
\     'del': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'delSignal': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'delTimer': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'free': { 'signature': 'void | void', 'return_type': 'void'},
\     'pending': { 'signature': 'int $flags | bool', 'return_type': 'bool'},
\     'set': { 'signature': 'EventBase $base, mixed $fd [, int $what [, callable $cb [, mixed $arg]]] | bool', 'return_type': 'bool'},
\     'setPriority': { 'signature': 'int $priority | bool', 'return_type': 'bool'},
\     'setTimer': { 'signature': 'EventBase $base, callable $cb [, mixed $arg] | bool', 'return_type': 'bool'},
\   },
\   'static_methods': {
\     'getSupportedMethods': { 'signature': 'void | array', 'return_type': 'array'},
\     'signal': { 'signature': 'EventBase $base, int $signum, callable $cb [, mixed $arg] | Event', 'return_type': 'Event'},
\     'timer': { 'signature': 'EventBase $base, callable $cb [, mixed $arg] | Event', 'return_type': 'Event'},
\   },
\},
\'eventbase': {
\   'name': 'EventBase',
\   'constants': {
\     'LOOP_ONCE': '1',
\     'LOOP_NONBLOCK': '2',
\     'NOLOCK': '1',
\     'STARTUP_IOCP': '4',
\     'NO_CACHE_TIME': '8',
\     'EPOLL_USE_CHANGELIST': '16',
\   },
\   'methods': {
\     '__construct': { 'signature': '[ EventConfig $cfg]', 'return_type': ''},
\     'dispatch': { 'signature': 'void | void', 'return_type': 'void'},
\     'exit': { 'signature': '[ float $timeout] | bool', 'return_type': 'bool'},
\     'free': { 'signature': 'void | void', 'return_type': 'void'},
\     'getFeatures': { 'signature': 'void | int', 'return_type': 'int'},
\     'getMethod': { 'signature': 'void | string', 'return_type': 'string'},
\     'getTimeOfDayCached': { 'signature': 'void | float', 'return_type': 'float'},
\     'gotExit': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'gotStop': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'loop': { 'signature': '[ int $flags] | bool', 'return_type': 'bool'},
\     'priorityInit': { 'signature': 'int $n_priorities | bool', 'return_type': 'bool'},
\     'reInit': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'stop': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'eventbuffer': {
\   'name': 'EventBuffer',
\   'constants': {
\     'EOL_ANY': '0',
\     'EOL_CRLF': '1',
\     'EOL_CRLF_STRICT': '2',
\     'EOL_LF': '3',
\     'PTR_SET': '0',
\     'PTR_ADD': '1',
\   },
\   'properties': {
\     'length': { 'initializer': '', 'type': 'int'},
\     'contiguous_space': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'add': { 'signature': 'string $data | bool', 'return_type': 'bool'},
\     'addBuffer': { 'signature': 'EventBuffer $buf | bool', 'return_type': 'bool'},
\     'appendFrom': { 'signature': 'EventBuffer $buf, int $len | int', 'return_type': 'int'},
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'copyout': { 'signature': 'string &$data, int $max_bytes | int', 'return_type': 'int'},
\     'drain': { 'signature': 'int $len | bool', 'return_type': 'bool'},
\     'enableLocking': { 'signature': 'void | void', 'return_type': 'void'},
\     'expand': { 'signature': 'int $len | bool', 'return_type': 'bool'},
\     'freeze': { 'signature': 'bool $at_front | bool', 'return_type': 'bool'},
\     'lock': { 'signature': 'void | void', 'return_type': 'void'},
\     'prepend': { 'signature': 'string $data | bool', 'return_type': 'bool'},
\     'prependBuffer': { 'signature': 'EventBuffer $buf | bool', 'return_type': 'bool'},
\     'pullup': { 'signature': 'int $size | string', 'return_type': 'string'},
\     'read': { 'signature': 'mixed $fd, int $howmuch | int', 'return_type': 'int'},
\     'readLine': { 'signature': 'int $eol_style | string', 'return_type': 'string'},
\     'search': { 'signature': 'string $what [, int $start = -1 [, int $end = -1]] | mixed', 'return_type': 'mixed'},
\     'searchEol': { 'signature': '[ int $start = -1 [, int $eol_style = EventBuffer::EOL_ANY]] | mixed', 'return_type': 'mixed'},
\     'substr': { 'signature': 'int $start [, int $length] | string', 'return_type': 'string'},
\     'unfreeze': { 'signature': 'bool $at_front | bool', 'return_type': 'bool'},
\     'unlock': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'write': { 'signature': 'mixed $fd [, int $howmuch] | int', 'return_type': 'int'},
\   },
\},
\'eventbufferevent': {
\   'name': 'EventBufferEvent',
\   'constants': {
\     'READING': '1',
\     'WRITING': '2',
\     'EOF': '16',
\     'ERROR': '32',
\     'TIMEOUT': '64',
\     'CONNECTED': '128',
\     'OPT_CLOSE_ON_FREE': '1',
\     'OPT_THREADSAFE': '2',
\     'OPT_DEFER_CALLBACKS': '4',
\     'OPT_UNLOCK_CALLBACKS': '8',
\     'SSL_OPEN': '0',
\     'SSL_CONNECTING': '1',
\     'SSL_ACCEPTING': '2',
\   },
\   'properties': {
\     'fd': { 'initializer': '', 'type': 'integer'},
\     'priority': { 'initializer': '', 'type': 'integer'},
\     'input': { 'initializer': '', 'type': 'EventBuffer'},
\     'output': { 'initializer': '', 'type': 'EventBuffer'},
\   },
\   'methods': {
\     'close': { 'signature': 'void | void', 'return_type': 'void'},
\     'connect': { 'signature': 'string $addr | bool', 'return_type': 'bool'},
\     'connectHost': { 'signature': 'EventDnsBase $dns_base, string $hostname, int $port [, int $family = EventUtil::AF_UNSPEC] | bool', 'return_type': 'bool'},
\     '__construct': { 'signature': 'EventBase $base [, mixed $socket = NULL [, int $options = 0 [, callable $readcb = NULL [, callable $writecb = NULL [, callable $eventcb = NULL]]]]]', 'return_type': ''},
\     'disable': { 'signature': 'int $events | bool', 'return_type': 'bool'},
\     'enable': { 'signature': 'int $events | bool', 'return_type': 'bool'},
\     'free': { 'signature': 'void | void', 'return_type': 'void'},
\     'getDnsErrorString': { 'signature': 'void | string', 'return_type': 'string'},
\     'getEnabled': { 'signature': 'void | int', 'return_type': 'int'},
\     'getInput': { 'signature': 'void | EventBuffer', 'return_type': 'EventBuffer'},
\     'getOutput': { 'signature': 'void | EventBuffer', 'return_type': 'EventBuffer'},
\     'read': { 'signature': 'int $size | string', 'return_type': 'string'},
\     'readBuffer': { 'signature': 'EventBuffer $buf | bool', 'return_type': 'bool'},
\     'setCallbacks': { 'signature': 'callable $readcb, callable $writecb, callable $eventcb [, string $arg] | void', 'return_type': 'void'},
\     'setPriority': { 'signature': 'int $priority | bool', 'return_type': 'bool'},
\     'setTimeouts': { 'signature': 'float $timeout_read, float $timeout_write | bool', 'return_type': 'bool'},
\     'setWatermark': { 'signature': 'int $events, int $lowmark, int $highmark | void', 'return_type': 'void'},
\     'sslError': { 'signature': 'void | string', 'return_type': 'string'},
\     'sslGetCipherInfo': { 'signature': 'void | string', 'return_type': 'string'},
\     'sslGetCipherName': { 'signature': 'void | string', 'return_type': 'string'},
\     'sslGetCipherVersion': { 'signature': 'void | string', 'return_type': 'string'},
\     'sslGetProtocol': { 'signature': 'void | string', 'return_type': 'string'},
\     'sslRenegotiate': { 'signature': 'void | void', 'return_type': 'void'},
\     'write': { 'signature': 'string $data | bool', 'return_type': 'bool'},
\     'writeBuffer': { 'signature': 'EventBuffer $buf | bool', 'return_type': 'bool'},
\   },
\   'static_methods': {
\     'createPair': { 'signature': 'EventBase $base [, int $options = 0] | array', 'return_type': 'array'},
\     'sslFilter': { 'signature': 'EventBase $base, EventBufferEvent $underlying, EventSslContext $ctx, int $state [, int $options = 0] | EventBufferEvent', 'return_type': 'EventBufferEvent'},
\     'sslSocket': { 'signature': 'EventBase $base, mixed $socket, EventSslContext $ctx, int $state [, int $options] | EventBufferEvent', 'return_type': 'EventBufferEvent'},
\   },
\},
\'eventconfig': {
\   'name': 'EventConfig',
\   'constants': {
\     'FEATURE_ET': '1',
\     'FEATURE_O1': '2',
\     'FEATURE_FDS': '4',
\   },
\   'methods': {
\     'avoidMethod': { 'signature': 'string $method | bool', 'return_type': 'bool'},
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'requireFeatures': { 'signature': 'int $feature | bool', 'return_type': 'bool'},
\     'setMaxDispatchInterval': { 'signature': 'int $max_interval, int $max_callbacks, int $min_priority | void', 'return_type': 'void'},
\   },
\},
\'eventdnsbase': {
\   'name': 'EventDnsBase',
\   'constants': {
\     'OPTION_SEARCH': '1',
\     'OPTION_NAMESERVERS': '2',
\     'OPTION_MISC': '4',
\     'OPTION_HOSTSFILE': '8',
\     'OPTIONS_ALL': '15',
\   },
\   'methods': {
\     'addNameserverIp': { 'signature': 'string $ip | bool', 'return_type': 'bool'},
\     'addSearch': { 'signature': 'string $domain | void', 'return_type': 'void'},
\     'clearSearch': { 'signature': 'void | void', 'return_type': 'void'},
\     '__construct': { 'signature': 'EventBase $base, bool $initialize', 'return_type': ''},
\     'countNameservers': { 'signature': 'void | int', 'return_type': 'int'},
\     'loadHosts': { 'signature': 'string $hosts | bool', 'return_type': 'bool'},
\     'parseResolvConf': { 'signature': 'int $flags, string $filename | bool', 'return_type': 'bool'},
\     'setOption': { 'signature': 'string $option, string $value | bool', 'return_type': 'bool'},
\     'setSearchNdots': { 'signature': 'int $ndots | bool', 'return_type': 'bool'},
\   },
\},
\'eventhttp': {
\   'name': 'EventHttp',
\   'methods': {
\     'accept': { 'signature': 'mixed $socket | bool', 'return_type': 'bool'},
\     'addServerAlias': { 'signature': 'string $alias | bool', 'return_type': 'bool'},
\     'bind': { 'signature': 'string $address, int $port | void', 'return_type': 'void'},
\     '__construct': { 'signature': 'EventBase $base [, EventSslContext $ctx = NULL]', 'return_type': ''},
\     'removeServerAlias': { 'signature': 'string $alias | bool', 'return_type': 'bool'},
\     'setAllowedMethods': { 'signature': 'int $methods | void', 'return_type': 'void'},
\     'setCallback': { 'signature': 'string $path, string $cb [, string $arg] | void', 'return_type': 'void'},
\     'setDefaultCallback': { 'signature': 'string $cb [, string $arg] | void', 'return_type': 'void'},
\     'setMaxBodySize': { 'signature': 'int $value | void', 'return_type': 'void'},
\     'setMaxHeadersSize': { 'signature': 'int $value | void', 'return_type': 'void'},
\     'setTimeout': { 'signature': 'int $value | void', 'return_type': 'void'},
\   },
\},
\'eventhttpconnection': {
\   'name': 'EventHttpConnection',
\   'methods': {
\     '__construct': { 'signature': 'EventBase $base, EventDnsBase $dns_base, string $address, int $port [, EventSslContext $ctx = NULL]', 'return_type': ''},
\     'getBase': { 'signature': 'void | EventBase', 'return_type': 'EventBase'},
\     'getPeer': { 'signature': 'string &$address, int &$port | void', 'return_type': 'void'},
\     'makeRequest': { 'signature': 'EventHttpRequest $req, int $type, string $uri | bool', 'return_type': 'bool'},
\     'setCloseCallback': { 'signature': 'callable $callback [, mixed $data] | void', 'return_type': 'void'},
\     'setLocalAddress': { 'signature': 'string $address | void', 'return_type': 'void'},
\     'setLocalPort': { 'signature': 'int $port | void', 'return_type': 'void'},
\     'setMaxBodySize': { 'signature': 'string $max_size | void', 'return_type': 'void'},
\     'setMaxHeadersSize': { 'signature': 'string $max_size | void', 'return_type': 'void'},
\     'setRetries': { 'signature': 'int $retries | void', 'return_type': 'void'},
\     'setTimeout': { 'signature': 'int $timeout | void', 'return_type': 'void'},
\   },
\},
\'eventhttprequest': {
\   'name': 'EventHttpRequest',
\   'constants': {
\     'CMD_GET': '1',
\     'CMD_POST': '2',
\     'CMD_HEAD': '4',
\     'CMD_PUT': '8',
\     'CMD_DELETE': '16',
\     'CMD_OPTIONS': '32',
\     'CMD_TRACE': '64',
\     'CMD_CONNECT': '128',
\     'CMD_PATCH': '256',
\     'INPUT_HEADER': '1',
\     'OUTPUT_HEADER': '2',
\   },
\   'methods': {
\     'addHeader': { 'signature': 'string $key, string $value, int $type | bool', 'return_type': 'bool'},
\     'cancel': { 'signature': 'void | void', 'return_type': 'void'},
\     'clearHeaders': { 'signature': 'void | void', 'return_type': 'void'},
\     'closeConnection': { 'signature': 'void | EventHttpConnection', 'return_type': 'EventHttpConnection'},
\     '__construct': { 'signature': 'callable $callback [, mixed $data = NULL]', 'return_type': ''},
\     'findHeader': { 'signature': 'string $key, string $type | void', 'return_type': 'void'},
\     'free': { 'signature': 'void | void', 'return_type': 'void'},
\     'getCommand': { 'signature': 'void | void', 'return_type': 'void'},
\     'getHost': { 'signature': 'void | string', 'return_type': 'string'},
\     'getInputBuffer': { 'signature': 'void | EventBuffer', 'return_type': 'EventBuffer'},
\     'getInputHeaders': { 'signature': 'void | array', 'return_type': 'array'},
\     'getOutputBuffer': { 'signature': 'void | EventBuffer', 'return_type': 'EventBuffer'},
\     'getOutputHeaders': { 'signature': 'void | void', 'return_type': 'void'},
\     'getResponseCode': { 'signature': 'void | int', 'return_type': 'int'},
\     'getUri': { 'signature': 'void | string', 'return_type': 'string'},
\     'removeHeader': { 'signature': 'string $key, string $type | void', 'return_type': 'void'},
\     'sendError': { 'signature': 'int $error [, string $reason = NULL] | void', 'return_type': 'void'},
\     'sendReply': { 'signature': 'int $code, string $reason [, EventBuffer $buf] | void', 'return_type': 'void'},
\     'sendReplyChunk': { 'signature': 'EventBuffer $buf | void', 'return_type': 'void'},
\     'sendReplyEnd': { 'signature': 'void | void', 'return_type': 'void'},
\     'sendReplyStart': { 'signature': 'int $code, string $reason | void', 'return_type': 'void'},
\   },
\},
\'eventlistener': {
\   'name': 'EventListener',
\   'constants': {
\     'OPT_LEAVE_SOCKETS_BLOCKING': '1',
\     'OPT_CLOSE_ON_FREE': '2',
\     'OPT_CLOSE_ON_EXEC': '4',
\     'OPT_REUSEABLE': '8',
\     'OPT_THREADSAFE': '16',
\   },
\   'properties': {
\     'fd': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     '__construct': { 'signature': 'EventBase $base, callable $cb, mixed $data, int $flags, int $backlog, mixed $target', 'return_type': ''},
\     'disable': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'enable': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getBase': { 'signature': 'void | void', 'return_type': 'void'},
\     'setCallback': { 'signature': 'callable $cb [, mixed $arg = NULL] | void', 'return_type': 'void'},
\     'setErrorCallback': { 'signature': 'string $cb | void', 'return_type': 'void'},
\   },
\   'static_methods': {
\     'getSocketName': { 'signature': 'string &$address [, mixed &$port] | bool', 'return_type': 'bool'},
\   },
\},
\'eventsslcontext': {
\   'name': 'EventSslContext',
\   'constants': {
\     'SSLv2_CLIENT_METHOD': '1',
\     'SSLv3_CLIENT_METHOD': '2',
\     'SSLv23_CLIENT_METHOD': '3',
\     'TLS_CLIENT_METHOD': '4',
\     'SSLv2_SERVER_METHOD': '5',
\     'SSLv3_SERVER_METHOD': '6',
\     'SSLv23_SERVER_METHOD': '7',
\     'TLS_SERVER_METHOD': '8',
\     'OPT_LOCAL_CERT': '1',
\     'OPT_LOCAL_PK': '2',
\     'OPT_PASSPHRASE': '3',
\     'OPT_CA_FILE': '4',
\     'OPT_CA_PATH': '5',
\     'OPT_ALLOW_SELF_SIGNED': '6',
\     'OPT_VERIFY_PEER': '7',
\     'OPT_VERIFY_DEPTH': '8',
\     'OPT_CIPHERS': '9',
\   },
\   'properties': {
\     'local_cert': { 'initializer': '', 'type': 'string'},
\     'local_pk': { 'initializer': '', 'type': 'string'},
\   },
\   'methods': {
\     '__construct': { 'signature': 'string $method, string $options', 'return_type': ''},
\   },
\},
\'eventutil': {
\   'name': 'EventUtil',
\   'constants': {
\     'AF_INET': '2',
\     'AF_INET6': '10',
\     'AF_UNSPEC': '0',
\     'LIBEVENT_VERSION_NUMBER': '33559808',
\     'SO_DEBUG': '1',
\     'SO_REUSEADDR': '2',
\     'SO_KEEPALIVE': '9',
\     'SO_DONTROUTE': '5',
\     'SO_LINGER': '13',
\     'SO_BROADCAST': '6',
\     'SO_OOBINLINE': '10',
\     'SO_SNDBUF': '7',
\     'SO_RCVBUF': '8',
\     'SO_SNDLOWAT': '19',
\     'SO_RCVLOWAT': '18',
\     'SO_SNDTIMEO': '21',
\     'SO_RCVTIMEO': '20',
\     'SO_TYPE': '3',
\     'SO_ERROR': '4',
\     'SOL_SOCKET': '1',
\     'SOL_TCP': '6',
\     'SOL_UDP': '17',
\     'IPPROTO_IP': '0',
\     'IPPROTO_IPV6': '41',
\   },
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\   },
\   'static_methods': {
\     'getLastSocketErrno': { 'signature': '[ mixed $socket = NULL] | int', 'return_type': 'int'},
\     'getLastSocketError': { 'signature': '[ mixed $socket] | string', 'return_type': 'string'},
\     'getSocketFd': { 'signature': 'mixed $socket | int', 'return_type': 'int'},
\     'getSocketName': { 'signature': 'mixed $socket, string &$address [, mixed &$port] | bool', 'return_type': 'bool'},
\     'setSocketOption': { 'signature': 'mixed $socket, int $level, int $optname, mixed $optval | bool', 'return_type': 'bool'},
\     'sslRandPoll': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['fann'] = {
\'fannconnection': {
\   'name': 'FANNConnection',
\   'properties': {
\     'from_neuron': { 'initializer': '', 'type': ''},
\     'to_neuron': { 'initializer': '', 'type': ''},
\     'weight': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     '__construct': { 'signature': 'int $from_neuron, int $to_neuron, float $weight', 'return_type': ''},
\     'getFromNeuron': { 'signature': 'void | int', 'return_type': 'int'},
\     'getToNeuron': { 'signature': 'void | int', 'return_type': 'int'},
\     'getWeight': { 'signature': 'void | void', 'return_type': 'void'},
\     'setWeight': { 'signature': 'float $weight | void', 'return_type': 'void'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['ffi'] = {
\'ffi\cdata': {
\   'name': 'FFI\CData',
\},
\'ffi\ctype': {
\   'name': 'FFI\CType',
\},
\'ffi\exception': {
\   'name': 'FFI\Exception',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'ffi\parserexception': {
\   'name': 'FFI\ParserException',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\},
\'ffi': {
\   'name': 'FFI',
\   'methods': {
\     'cast': { 'signature': 'mixed $type, FFI\CData &$ptr | FFI\CData', 'return_type': 'FFI\CData'},
\     'new': { 'signature': 'mixed $type [, bool $owned = TRUE [, bool $persistent = FALSE]] | FFI\CData', 'return_type': 'FFI\CData'},
\     'type': { 'signature': 'mixed $type | FFI\CType', 'return_type': 'FFI\CType'},
\   },
\   'static_methods': {
\     'addr': { 'signature': 'FFI\CData &$ptr | FFI\CData', 'return_type': 'FFI\CData'},
\     'alignof': { 'signature': 'mixed &$ptr | int', 'return_type': 'int'},
\     'arrayType': { 'signature': 'FFI\CType $type, array $dims | FFI\CType', 'return_type': 'FFI\CType'},
\     'cast': { 'signature': 'mixed $type, FFI\CData &$ptr | FFI\CData', 'return_type': 'FFI\CData'},
\     'cdef': { 'signature': '[ string $code = "" [, string $lib]] | FFI', 'return_type': 'FFI'},
\     'free': { 'signature': 'FFI\CData &$ptr | void', 'return_type': 'void'},
\     'isNull': { 'signature': 'FFI\CData &$ptr | bool', 'return_type': 'bool'},
\     'load': { 'signature': 'string $filename | FFI', 'return_type': 'FFI'},
\     'memcmp': { 'signature': 'mixed &$ptr1, mixed &$ptr2, int $size | int', 'return_type': 'int'},
\     'memcpy': { 'signature': 'FFI\CData &$dst, mixed &$src, int $size | void', 'return_type': 'void'},
\     'memset': { 'signature': 'FFI\CData &$ptr, int $ch, int $size | void', 'return_type': 'void'},
\     'new': { 'signature': 'mixed $type [, bool $owned = TRUE [, bool $persistent = FALSE]] | FFI\CData', 'return_type': 'FFI\CData'},
\     'scope': { 'signature': 'string $scope_name | FFI', 'return_type': 'FFI'},
\     'sizeof': { 'signature': 'mixed &$ptr | int', 'return_type': 'int'},
\     'string': { 'signature': 'FFI\CData &$ptr [, int $size] | string', 'return_type': 'string'},
\     'type': { 'signature': 'mixed $type | FFI\CType', 'return_type': 'FFI\CType'},
\     'typeof': { 'signature': 'FFI\CData &$ptr | FFI\CType', 'return_type': 'FFI\CType'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['fileinfo'] = {
\'finfo': {
\   'name': 'finfo',
\   'methods': {
\     '__construct': { 'signature': '[ int $options = FILEINFO_NONE [, string $magic_file = ""]]', 'return_type': ''},
\     'buffer': { 'signature': 'string $string [, int $options = FILEINFO_NONE [, resource $context]] | string', 'return_type': 'string'},
\     'file': { 'signature': 'string $file_name [, int $options = FILEINFO_NONE [, resource $context]] | string', 'return_type': 'string'},
\     'set_flags': { 'signature': 'int $options | bool', 'return_type': 'bool'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['gearman'] = {
\'gearmanclient': {
\   'name': 'GearmanClient',
\   'methods': {
\     'addOptions': { 'signature': 'int $options | bool', 'return_type': 'bool'},
\     'addServer': { 'signature': '[ string $host = 127.0.0.1 [, int $port = 4730]] | bool', 'return_type': 'bool'},
\     'addServers': { 'signature': '[ string $servers = 127.0.0.1:4730] | bool', 'return_type': 'bool'},
\     'addTask': { 'signature': 'string $function_name, string $workload [, mixed &$context [, string $unique]] | GearmanTask', 'return_type': 'GearmanTask'},
\     'addTaskBackground': { 'signature': 'string $function_name, string $workload [, mixed &$context [, string $unique]] | GearmanTask', 'return_type': 'GearmanTask'},
\     'addTaskHigh': { 'signature': 'string $function_name, string $workload [, mixed &$context [, string $unique]] | GearmanTask', 'return_type': 'GearmanTask'},
\     'addTaskHighBackground': { 'signature': 'string $function_name, string $workload [, mixed &$context [, string $unique]] | GearmanTask', 'return_type': 'GearmanTask'},
\     'addTaskLow': { 'signature': 'string $function_name, string $workload [, mixed &$context [, string $unique]] | GearmanTask', 'return_type': 'GearmanTask'},
\     'addTaskLowBackground': { 'signature': 'string $function_name, string $workload [, mixed &$context [, string $unique]] | GearmanTask', 'return_type': 'GearmanTask'},
\     'addTaskStatus': { 'signature': 'string $job_handle [, string &$context] | GearmanTask', 'return_type': 'GearmanTask'},
\     'clearCallbacks': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'clone': { 'signature': 'void | GearmanClient', 'return_type': 'GearmanClient'},
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'context': { 'signature': 'void | string', 'return_type': 'string'},
\     'data': { 'signature': 'void | string', 'return_type': 'string'},
\     'do': { 'signature': 'string $function_name, string $workload [, string $unique] | string', 'return_type': 'string'},
\     'doBackground': { 'signature': 'string $function_name, string $workload [, string $unique] | string', 'return_type': 'string'},
\     'doHigh': { 'signature': 'string $function_name, string $workload [, string $unique] | string', 'return_type': 'string'},
\     'doHighBackground': { 'signature': 'string $function_name, string $workload [, string $unique] | string', 'return_type': 'string'},
\     'doJobHandle': { 'signature': 'void | string', 'return_type': 'string'},
\     'doLow': { 'signature': 'string $function_name, string $workload [, string $unique] | string', 'return_type': 'string'},
\     'doLowBackground': { 'signature': 'string $function_name, string $workload [, string $unique] | string', 'return_type': 'string'},
\     'doNormal': { 'signature': 'string $function_name, string $workload [, string $unique] | string', 'return_type': 'string'},
\     'doStatus': { 'signature': 'void | array', 'return_type': 'array'},
\     'echo': { 'signature': 'string $workload | bool', 'return_type': 'bool'},
\     'error': { 'signature': 'void | string', 'return_type': 'string'},
\     'getErrno': { 'signature': 'void | int', 'return_type': 'int'},
\     'jobStatus': { 'signature': 'string $job_handle | array', 'return_type': 'array'},
\     'ping': { 'signature': 'string $workload | bool', 'return_type': 'bool'},
\     'removeOptions': { 'signature': 'int $options | bool', 'return_type': 'bool'},
\     'returnCode': { 'signature': 'void | int', 'return_type': 'int'},
\     'runTasks': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'setClientCallback': { 'signature': 'callable $callback | void', 'return_type': 'void'},
\     'setCompleteCallback': { 'signature': 'callable $callback | bool', 'return_type': 'bool'},
\     'setContext': { 'signature': 'string $context | bool', 'return_type': 'bool'},
\     'setCreatedCallback': { 'signature': 'string $callback | bool', 'return_type': 'bool'},
\     'setData': { 'signature': 'string $data | bool', 'return_type': 'bool'},
\     'setDataCallback': { 'signature': 'callable $callback | bool', 'return_type': 'bool'},
\     'setExceptionCallback': { 'signature': 'callable $callback | bool', 'return_type': 'bool'},
\     'setFailCallback': { 'signature': 'callable $callback | bool', 'return_type': 'bool'},
\     'setOptions': { 'signature': 'int $options | bool', 'return_type': 'bool'},
\     'setStatusCallback': { 'signature': 'callable $callback | bool', 'return_type': 'bool'},
\     'setTimeout': { 'signature': 'int $timeout | bool', 'return_type': 'bool'},
\     'setWarningCallback': { 'signature': 'callable $callback | bool', 'return_type': 'bool'},
\     'setWorkloadCallback': { 'signature': 'callable $callback | bool', 'return_type': 'bool'},
\     'timeout': { 'signature': 'void | int', 'return_type': 'int'},
\   },
\},
\'gearmanexception': {
\   'name': 'GearmanException',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'gearmanjob': {
\   'name': 'GearmanJob',
\   'methods': {
\     'complete': { 'signature': 'string $result | bool', 'return_type': 'bool'},
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'data': { 'signature': 'string $data | bool', 'return_type': 'bool'},
\     'exception': { 'signature': 'string $exception | bool', 'return_type': 'bool'},
\     'fail': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'functionName': { 'signature': 'void | string', 'return_type': 'string'},
\     'handle': { 'signature': 'void | string', 'return_type': 'string'},
\     'returnCode': { 'signature': 'void | int', 'return_type': 'int'},
\     'sendComplete': { 'signature': 'string $result | bool', 'return_type': 'bool'},
\     'sendData': { 'signature': 'string $data | bool', 'return_type': 'bool'},
\     'sendException': { 'signature': 'string $exception | bool', 'return_type': 'bool'},
\     'sendFail': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'sendStatus': { 'signature': 'int $numerator, int $denominator | bool', 'return_type': 'bool'},
\     'sendWarning': { 'signature': 'string $warning | bool', 'return_type': 'bool'},
\     'setReturn': { 'signature': 'int $gearman_return_t | bool', 'return_type': 'bool'},
\     'status': { 'signature': 'int $numerator, int $denominator | bool', 'return_type': 'bool'},
\     'unique': { 'signature': 'void | string', 'return_type': 'string'},
\     'warning': { 'signature': 'string $warning | bool', 'return_type': 'bool'},
\     'workload': { 'signature': 'void | string', 'return_type': 'string'},
\     'workloadSize': { 'signature': 'void | int', 'return_type': 'int'},
\   },
\},
\'gearmantask': {
\   'name': 'GearmanTask',
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'create': { 'signature': 'void | GearmanTask', 'return_type': 'GearmanTask'},
\     'data': { 'signature': 'void | string', 'return_type': 'string'},
\     'dataSize': { 'signature': 'void | int', 'return_type': 'int'},
\     'function': { 'signature': 'void | string', 'return_type': 'string'},
\     'functionName': { 'signature': 'void | string', 'return_type': 'string'},
\     'isKnown': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isRunning': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'jobHandle': { 'signature': 'void | string', 'return_type': 'string'},
\     'recvData': { 'signature': 'int $data_len | array', 'return_type': 'array'},
\     'returnCode': { 'signature': 'void | int', 'return_type': 'int'},
\     'sendData': { 'signature': 'string $data | int', 'return_type': 'int'},
\     'sendWorkload': { 'signature': 'string $data | int', 'return_type': 'int'},
\     'taskDenominator': { 'signature': 'void | int', 'return_type': 'int'},
\     'taskNumerator': { 'signature': 'void | int', 'return_type': 'int'},
\     'unique': { 'signature': 'void | string', 'return_type': 'string'},
\     'uuid': { 'signature': 'void | string', 'return_type': 'string'},
\   },
\},
\'gearmanworker': {
\   'name': 'GearmanWorker',
\   'methods': {
\     'addFunction': { 'signature': 'string $function_name, callable $function [, mixed &$context [, int $timeout]] | bool', 'return_type': 'bool'},
\     'addOptions': { 'signature': 'int $option | bool', 'return_type': 'bool'},
\     'addServer': { 'signature': '[ string $host = 127.0.0.1 [, int $port = 4730]] | bool', 'return_type': 'bool'},
\     'addServers': { 'signature': '[ string $servers = 127.0.0.1:4730] | bool', 'return_type': 'bool'},
\     'clone': { 'signature': 'void | void', 'return_type': 'void'},
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'echo': { 'signature': 'string $workload | bool', 'return_type': 'bool'},
\     'error': { 'signature': 'void | string', 'return_type': 'string'},
\     'getErrno': { 'signature': 'void | int', 'return_type': 'int'},
\     'options': { 'signature': 'void | int', 'return_type': 'int'},
\     'register': { 'signature': 'string $function_name [, int $timeout] | bool', 'return_type': 'bool'},
\     'removeOptions': { 'signature': 'int $option | bool', 'return_type': 'bool'},
\     'returnCode': { 'signature': 'void | int', 'return_type': 'int'},
\     'setId': { 'signature': 'string $id | bool', 'return_type': 'bool'},
\     'setOptions': { 'signature': 'int $option | bool', 'return_type': 'bool'},
\     'setTimeout': { 'signature': 'int $timeout | bool', 'return_type': 'bool'},
\     'timeout': { 'signature': 'void | int', 'return_type': 'int'},
\     'unregister': { 'signature': 'string $function_name | bool', 'return_type': 'bool'},
\     'unregisterAll': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'wait': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'work': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['gender'] = {
\'gender\gender': {
\   'name': 'Gender\Gender',
\   'constants': {
\     'IS_FEMALE': '70',
\     'IS_MOSTLY_FEMALE': '102',
\     'IS_MALE': '77',
\     'IS_MOSTLY_MALE': '109',
\     'IS_UNISEX_NAME': '63',
\     'IS_A_COUPLE': '67',
\     'NAME_NOT_FOUND': '32',
\     'ERROR_IN_NAME': '69',
\     'ANY_COUNTRY': '0',
\     'BRITAIN': '1',
\     'IRELAND': '2',
\     'USA': '3',
\     'SPAIN': '4',
\     'PORTUGAL': '5',
\     'ITALY': '6',
\     'MALTA': '7',
\     'FRANCE': '8',
\     'BELGIUM': '9',
\     'LUXEMBOURG': '10',
\     'NETHERLANDS': '11',
\     'GERMANY': '12',
\     'EAST_FRISIA': '13',
\     'AUSTRIA': '14',
\     'SWISS': '15',
\     'ICELAND': '16',
\     'DENMARK': '17',
\     'NORWAY': '18',
\     'SWEDEN': '19',
\     'FINLAND': '20',
\     'ESTONIA': '21',
\     'LATVIA': '22',
\     'LITHUANIA': '23',
\     'POLAND': '24',
\     'CZECH_REP': '25',
\     'SLOVAKIA': '26',
\     'HUNGARY': '27',
\     'ROMANIA': '28',
\     'BULGARIA': '29',
\     'BOSNIA': '30',
\     'CROATIA': '31',
\     'KOSOVO': '32',
\     'MACEDONIA': '33',
\     'MONTENEGRO': '34',
\     'SERBIA': '35',
\     'SLOVENIA': '36',
\     'ALBANIA': '37',
\     'GREECE': '38',
\     'RUSSIA': '39',
\     'BELARUS': '40',
\     'MOLDOVA': '41',
\     'UKRAINE': '42',
\     'ARMENIA': '43',
\     'AZERBAIJAN': '44',
\     'GEORGIA': '45',
\     'KAZAKH_UZBEK': '46',
\     'TURKEY': '47',
\     'ARABIA': '48',
\     'ISRAEL': '49',
\     'CHINA': '50',
\     'INDIA': '51',
\     'JAPAN': '52',
\     'KOREA': '53',
\   },
\   'methods': {
\     'connect': { 'signature': 'string $dsn | bool', 'return_type': 'bool'},
\     '__construct': { 'signature': '[ string $dsn]', 'return_type': ''},
\     'country': { 'signature': 'int $country | array', 'return_type': 'array'},
\     'get': { 'signature': 'string $name [, int $country] | int', 'return_type': 'int'},
\     'isNick': { 'signature': 'string $name0, string $name1 [, int $country] | array', 'return_type': 'array'},
\     'similarNames': { 'signature': 'string $name [, int $country] | array', 'return_type': 'array'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['gmagick'] = {
\'gmagick': {
\   'name': 'Gmagick',
\   'methods': {
\     'addimage': { 'signature': 'Gmagick $source | Gmagick', 'return_type': 'Gmagick'},
\     'addnoiseimage': { 'signature': 'int $noise_type | Gmagick', 'return_type': 'Gmagick'},
\     'annotateimage': { 'signature': 'GmagickDraw $GmagickDraw, float $x, float $y, float $angle, string $text | Gmagick', 'return_type': 'Gmagick'},
\     'blurimage': { 'signature': 'float $radius, float $sigma [, int $channel] | Gmagick', 'return_type': 'Gmagick'},
\     'borderimage': { 'signature': 'GmagickPixel $color, int $width, int $height | Gmagick', 'return_type': 'Gmagick'},
\     'charcoalimage': { 'signature': 'float $radius, float $sigma | Gmagick', 'return_type': 'Gmagick'},
\     'chopimage': { 'signature': 'int $width, int $height, int $x, int $y | Gmagick', 'return_type': 'Gmagick'},
\     'clear': { 'signature': 'void | Gmagick', 'return_type': 'Gmagick'},
\     'commentimage': { 'signature': 'string $comment | Gmagick', 'return_type': 'Gmagick'},
\     'compositeimage': { 'signature': 'Gmagick $source, int $COMPOSE, int $x, int $y | Gmagick', 'return_type': 'Gmagick'},
\     '__construct': { 'signature': '[ string $filename]', 'return_type': ''},
\     'cropimage': { 'signature': 'int $width, int $height, int $x, int $y | Gmagick', 'return_type': 'Gmagick'},
\     'cropthumbnailimage': { 'signature': 'int $width, int $height | Gmagick', 'return_type': 'Gmagick'},
\     'current': { 'signature': 'void | Gmagick', 'return_type': 'Gmagick'},
\     'cyclecolormapimage': { 'signature': 'int $displace | Gmagick', 'return_type': 'Gmagick'},
\     'deconstructimages': { 'signature': 'void | Gmagick', 'return_type': 'Gmagick'},
\     'despeckleimage': { 'signature': 'void | Gmagick', 'return_type': 'Gmagick'},
\     'destroy': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'drawimage': { 'signature': 'GmagickDraw $GmagickDraw | Gmagick', 'return_type': 'Gmagick'},
\     'edgeimage': { 'signature': 'float $radius | Gmagick', 'return_type': 'Gmagick'},
\     'embossimage': { 'signature': 'float $radius, float $sigma | Gmagick', 'return_type': 'Gmagick'},
\     'enhanceimage': { 'signature': 'void | Gmagick', 'return_type': 'Gmagick'},
\     'equalizeimage': { 'signature': 'void | Gmagick', 'return_type': 'Gmagick'},
\     'flipimage': { 'signature': 'void | Gmagick', 'return_type': 'Gmagick'},
\     'flopimage': { 'signature': 'void | Gmagick', 'return_type': 'Gmagick'},
\     'frameimage': { 'signature': 'GmagickPixel $color, int $width, int $height, int $inner_bevel, int $outer_bevel | Gmagick', 'return_type': 'Gmagick'},
\     'gammaimage': { 'signature': 'float $gamma | Gmagick', 'return_type': 'Gmagick'},
\     'getcopyright': { 'signature': 'void | string', 'return_type': 'string'},
\     'getfilename': { 'signature': 'void | string', 'return_type': 'string'},
\     'getimagebackgroundcolor': { 'signature': 'void | GmagickPixel', 'return_type': 'GmagickPixel'},
\     'getimageblueprimary': { 'signature': 'void | array', 'return_type': 'array'},
\     'getimagebordercolor': { 'signature': 'void | GmagickPixel', 'return_type': 'GmagickPixel'},
\     'getimagechanneldepth': { 'signature': 'int $channel_type | int', 'return_type': 'int'},
\     'getimagecolors': { 'signature': 'void | int', 'return_type': 'int'},
\     'getimagecolorspace': { 'signature': 'void | int', 'return_type': 'int'},
\     'getimagecompose': { 'signature': 'void | int', 'return_type': 'int'},
\     'getimagedelay': { 'signature': 'void | int', 'return_type': 'int'},
\     'getimagedepth': { 'signature': 'void | int', 'return_type': 'int'},
\     'getimagedispose': { 'signature': 'void | int', 'return_type': 'int'},
\     'getimageextrema': { 'signature': 'void | array', 'return_type': 'array'},
\     'getimagefilename': { 'signature': 'void | string', 'return_type': 'string'},
\     'getimageformat': { 'signature': 'void | string', 'return_type': 'string'},
\     'getimagegamma': { 'signature': 'void | float', 'return_type': 'float'},
\     'getimagegreenprimary': { 'signature': 'void | array', 'return_type': 'array'},
\     'getimageheight': { 'signature': 'void | int', 'return_type': 'int'},
\     'getimagehistogram': { 'signature': 'void | array', 'return_type': 'array'},
\     'getimageindex': { 'signature': 'void | int', 'return_type': 'int'},
\     'getimageinterlacescheme': { 'signature': 'void | int', 'return_type': 'int'},
\     'getimageiterations': { 'signature': 'void | int', 'return_type': 'int'},
\     'getimagematte': { 'signature': 'void | int', 'return_type': 'int'},
\     'getimagemattecolor': { 'signature': 'void | GmagickPixel', 'return_type': 'GmagickPixel'},
\     'getimageprofile': { 'signature': 'string $name | string', 'return_type': 'string'},
\     'getimageredprimary': { 'signature': 'void | array', 'return_type': 'array'},
\     'getimagerenderingintent': { 'signature': 'void | int', 'return_type': 'int'},
\     'getimageresolution': { 'signature': 'void | array', 'return_type': 'array'},
\     'getimagescene': { 'signature': 'void | int', 'return_type': 'int'},
\     'getimagesignature': { 'signature': 'void | string', 'return_type': 'string'},
\     'getimagetype': { 'signature': 'void | int', 'return_type': 'int'},
\     'getimageunits': { 'signature': 'void | int', 'return_type': 'int'},
\     'getimagewhitepoint': { 'signature': 'void | array', 'return_type': 'array'},
\     'getimagewidth': { 'signature': 'void | int', 'return_type': 'int'},
\     'getpackagename': { 'signature': 'void | string', 'return_type': 'string'},
\     'getquantumdepth': { 'signature': 'void | array', 'return_type': 'array'},
\     'getreleasedate': { 'signature': 'void | string', 'return_type': 'string'},
\     'getsamplingfactors': { 'signature': 'void | array', 'return_type': 'array'},
\     'getsize': { 'signature': 'void | array', 'return_type': 'array'},
\     'getversion': { 'signature': 'void | array', 'return_type': 'array'},
\     'hasnextimage': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'haspreviousimage': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'implodeimage': { 'signature': 'float $radius | mixed', 'return_type': 'mixed'},
\     'labelimage': { 'signature': 'string $label | mixed', 'return_type': 'mixed'},
\     'levelimage': { 'signature': 'float $blackPoint, float $gamma, float $whitePoint [, int $channel = Gmagick::CHANNEL_DEFAULT] | mixed', 'return_type': 'mixed'},
\     'magnifyimage': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'mapimage': { 'signature': 'gmagick $gmagick, bool $dither | Gmagick', 'return_type': 'Gmagick'},
\     'medianfilterimage': { 'signature': 'float $radius | void', 'return_type': 'void'},
\     'minifyimage': { 'signature': 'void | Gmagick', 'return_type': 'Gmagick'},
\     'modulateimage': { 'signature': 'float $brightness, float $saturation, float $hue | Gmagick', 'return_type': 'Gmagick'},
\     'motionblurimage': { 'signature': 'float $radius, float $sigma, float $angle | Gmagick', 'return_type': 'Gmagick'},
\     'newimage': { 'signature': 'int $width, int $height, string $background [, string $format] | Gmagick', 'return_type': 'Gmagick'},
\     'nextimage': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'normalizeimage': { 'signature': '[ int $channel] | Gmagick', 'return_type': 'Gmagick'},
\     'oilpaintimage': { 'signature': 'float $radius | Gmagick', 'return_type': 'Gmagick'},
\     'previousimage': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'profileimage': { 'signature': 'string $name, string $profile | Gmagick', 'return_type': 'Gmagick'},
\     'quantizeimage': { 'signature': 'int $numColors, int $colorspace, int $treeDepth, bool $dither, bool $measureError | Gmagick', 'return_type': 'Gmagick'},
\     'quantizeimages': { 'signature': 'int $numColors, int $colorspace, int $treeDepth, bool $dither, bool $measureError | Gmagick', 'return_type': 'Gmagick'},
\     'queryfontmetrics': { 'signature': 'GmagickDraw $draw, string $text | array', 'return_type': 'array'},
\     'queryfonts': { 'signature': '[ string $pattern = "*"] | array', 'return_type': 'array'},
\     'queryformats': { 'signature': '[ string $pattern = "*"] | array', 'return_type': 'array'},
\     'radialblurimage': { 'signature': 'float $angle [, int $channel = Gmagick::CHANNEL_DEFAULT] | Gmagick', 'return_type': 'Gmagick'},
\     'raiseimage': { 'signature': 'int $width, int $height, int $x, int $y, bool $raise | Gmagick', 'return_type': 'Gmagick'},
\     'read': { 'signature': 'string $filename | Gmagick', 'return_type': 'Gmagick'},
\     'readimage': { 'signature': 'string $filename | Gmagick', 'return_type': 'Gmagick'},
\     'readimageblob': { 'signature': 'string $imageContents [, string $filename] | Gmagick', 'return_type': 'Gmagick'},
\     'readimagefile': { 'signature': 'resource $fp [, string $filename] | Gmagick', 'return_type': 'Gmagick'},
\     'reducenoiseimage': { 'signature': 'float $radius | Gmagick', 'return_type': 'Gmagick'},
\     'removeimage': { 'signature': 'void | Gmagick', 'return_type': 'Gmagick'},
\     'removeimageprofile': { 'signature': 'string $name | string', 'return_type': 'string'},
\     'resampleimage': { 'signature': 'float $xResolution, float $yResolution, int $filter, float $blur | Gmagick', 'return_type': 'Gmagick'},
\     'resizeimage': { 'signature': 'int $width, int $height, int $filter, float $blur [, bool $fit = FALSE] | Gmagick', 'return_type': 'Gmagick'},
\     'rollimage': { 'signature': 'int $x, int $y | Gmagick', 'return_type': 'Gmagick'},
\     'rotateimage': { 'signature': 'mixed $color, float $degrees | Gmagick', 'return_type': 'Gmagick'},
\     'scaleimage': { 'signature': 'int $width, int $height [, bool $fit = FALSE] | Gmagick', 'return_type': 'Gmagick'},
\     'separateimagechannel': { 'signature': 'int $channel | Gmagick', 'return_type': 'Gmagick'},
\     'setCompressionQuality': { 'signature': '[ int $quality = 75] | Gmagick', 'return_type': 'Gmagick'},
\     'setfilename': { 'signature': 'string $filename | Gmagick', 'return_type': 'Gmagick'},
\     'setimagebackgroundcolor': { 'signature': 'GmagickPixel $color | Gmagick', 'return_type': 'Gmagick'},
\     'setimageblueprimary': { 'signature': 'float $x, float $y | Gmagick', 'return_type': 'Gmagick'},
\     'setimagebordercolor': { 'signature': 'GmagickPixel $color | Gmagick', 'return_type': 'Gmagick'},
\     'setimagechanneldepth': { 'signature': 'int $channel, int $depth | Gmagick', 'return_type': 'Gmagick'},
\     'setimagecolorspace': { 'signature': 'int $colorspace | Gmagick', 'return_type': 'Gmagick'},
\     'setimagecompose': { 'signature': 'int $composite | Gmagick', 'return_type': 'Gmagick'},
\     'setimagedelay': { 'signature': 'int $delay | Gmagick', 'return_type': 'Gmagick'},
\     'setimagedepth': { 'signature': 'int $depth | Gmagick', 'return_type': 'Gmagick'},
\     'setimagedispose': { 'signature': 'int $disposeType | Gmagick', 'return_type': 'Gmagick'},
\     'setimagefilename': { 'signature': 'string $filename | Gmagick', 'return_type': 'Gmagick'},
\     'setimageformat': { 'signature': 'string $imageFormat | Gmagick', 'return_type': 'Gmagick'},
\     'setimagegamma': { 'signature': 'float $gamma | Gmagick', 'return_type': 'Gmagick'},
\     'setimagegreenprimary': { 'signature': 'float $x, float $y | Gmagick', 'return_type': 'Gmagick'},
\     'setimageindex': { 'signature': 'int $index | Gmagick', 'return_type': 'Gmagick'},
\     'setimageinterlacescheme': { 'signature': 'int $interlace | Gmagick', 'return_type': 'Gmagick'},
\     'setimageiterations': { 'signature': 'int $iterations | Gmagick', 'return_type': 'Gmagick'},
\     'setimageprofile': { 'signature': 'string $name, string $profile | Gmagick', 'return_type': 'Gmagick'},
\     'setimageredprimary': { 'signature': 'float $x, float $y | Gmagick', 'return_type': 'Gmagick'},
\     'setimagerenderingintent': { 'signature': 'int $rendering_intent | Gmagick', 'return_type': 'Gmagick'},
\     'setimageresolution': { 'signature': 'float $xResolution, float $yResolution | Gmagick', 'return_type': 'Gmagick'},
\     'setimagescene': { 'signature': 'int $scene | Gmagick', 'return_type': 'Gmagick'},
\     'setimagetype': { 'signature': 'int $imgType | Gmagick', 'return_type': 'Gmagick'},
\     'setimageunits': { 'signature': 'int $resolution | Gmagick', 'return_type': 'Gmagick'},
\     'setimagewhitepoint': { 'signature': 'float $x, float $y | Gmagick', 'return_type': 'Gmagick'},
\     'setsamplingfactors': { 'signature': 'array $factors | Gmagick', 'return_type': 'Gmagick'},
\     'setsize': { 'signature': 'int $columns, int $rows | Gmagick', 'return_type': 'Gmagick'},
\     'shearimage': { 'signature': 'mixed $color, float $xShear, float $yShear | Gmagick', 'return_type': 'Gmagick'},
\     'solarizeimage': { 'signature': 'int $threshold | Gmagick', 'return_type': 'Gmagick'},
\     'spreadimage': { 'signature': 'float $radius | Gmagick', 'return_type': 'Gmagick'},
\     'stripimage': { 'signature': 'void | Gmagick', 'return_type': 'Gmagick'},
\     'swirlimage': { 'signature': 'float $degrees | Gmagick', 'return_type': 'Gmagick'},
\     'thumbnailimage': { 'signature': 'int $width, int $height [, bool $fit = FALSE] | Gmagick', 'return_type': 'Gmagick'},
\     'trimimage': { 'signature': 'float $fuzz | Gmagick', 'return_type': 'Gmagick'},
\     'writeimage': { 'signature': 'string $filename [, bool $all_frames = FALSE] | Gmagick', 'return_type': 'Gmagick'},
\   },
\},
\'gmagickdraw': {
\   'name': 'GmagickDraw',
\   'methods': {
\     'annotate': { 'signature': 'float $x, float $y, string $text | GmagickDraw', 'return_type': 'GmagickDraw'},
\     'arc': { 'signature': 'float $sx, float $sy, float $ex, float $ey, float $sd, float $ed | GmagickDraw', 'return_type': 'GmagickDraw'},
\     'bezier': { 'signature': 'array $coordinate_array | GmagickDraw', 'return_type': 'GmagickDraw'},
\     'ellipse': { 'signature': 'float $ox, float $oy, float $rx, float $ry, float $start, float $end | GmagickDraw', 'return_type': 'GmagickDraw'},
\     'getfillcolor': { 'signature': 'void | GmagickPixel', 'return_type': 'GmagickPixel'},
\     'getfillopacity': { 'signature': 'void | float', 'return_type': 'float'},
\     'getfont': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getfontsize': { 'signature': 'void | float', 'return_type': 'float'},
\     'getfontstyle': { 'signature': 'void | int', 'return_type': 'int'},
\     'getfontweight': { 'signature': 'void | int', 'return_type': 'int'},
\     'getstrokecolor': { 'signature': 'void | GmagickPixel', 'return_type': 'GmagickPixel'},
\     'getstrokeopacity': { 'signature': 'void | float', 'return_type': 'float'},
\     'getstrokewidth': { 'signature': 'void | float', 'return_type': 'float'},
\     'gettextdecoration': { 'signature': 'void | int', 'return_type': 'int'},
\     'gettextencoding': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'line': { 'signature': 'float $sx, float $sy, float $ex, float $ey | GmagickDraw', 'return_type': 'GmagickDraw'},
\     'point': { 'signature': 'float $x, float $y | GmagickDraw', 'return_type': 'GmagickDraw'},
\     'polygon': { 'signature': 'array $coordinates | GmagickDraw', 'return_type': 'GmagickDraw'},
\     'polyline': { 'signature': 'array $coordinate_array | GmagickDraw', 'return_type': 'GmagickDraw'},
\     'rectangle': { 'signature': 'float $x1, float $y1, float $x2, float $y2 | GmagickDraw', 'return_type': 'GmagickDraw'},
\     'rotate': { 'signature': 'float $degrees | GmagickDraw', 'return_type': 'GmagickDraw'},
\     'roundrectangle': { 'signature': 'float $x1, float $y1, float $x2, float $y2, float $rx, float $ry | GmagickDraw', 'return_type': 'GmagickDraw'},
\     'scale': { 'signature': 'float $x, float $y | GmagickDraw', 'return_type': 'GmagickDraw'},
\     'setfillcolor': { 'signature': 'mixed $color | GmagickDraw', 'return_type': 'GmagickDraw'},
\     'setfillopacity': { 'signature': 'float $fill_opacity | GmagickDraw', 'return_type': 'GmagickDraw'},
\     'setfont': { 'signature': 'string $font | GmagickDraw', 'return_type': 'GmagickDraw'},
\     'setfontsize': { 'signature': 'float $pointsize | GmagickDraw', 'return_type': 'GmagickDraw'},
\     'setfontstyle': { 'signature': 'int $style | GmagickDraw', 'return_type': 'GmagickDraw'},
\     'setfontweight': { 'signature': 'int $weight | GmagickDraw', 'return_type': 'GmagickDraw'},
\     'setstrokecolor': { 'signature': 'mixed $color | GmagickDraw', 'return_type': 'GmagickDraw'},
\     'setstrokeopacity': { 'signature': 'float $stroke_opacity | GmagickDraw', 'return_type': 'GmagickDraw'},
\     'setstrokewidth': { 'signature': 'float $width | GmagickDraw', 'return_type': 'GmagickDraw'},
\     'settextdecoration': { 'signature': 'int $decoration | GmagickDraw', 'return_type': 'GmagickDraw'},
\     'settextencoding': { 'signature': 'string $encoding | GmagickDraw', 'return_type': 'GmagickDraw'},
\   },
\},
\'gmagickpixel': {
\   'name': 'GmagickPixel',
\   'methods': {
\     '__construct': { 'signature': '[ string $color]', 'return_type': ''},
\     'getcolor': { 'signature': '[ bool $as_array = FALSE [, bool $normalize_array = FALSE]] | mixed', 'return_type': 'mixed'},
\     'getcolorcount': { 'signature': 'void | int', 'return_type': 'int'},
\     'getcolorvalue': { 'signature': 'int $color | float', 'return_type': 'float'},
\     'setcolor': { 'signature': 'string $color | GmagickPixel', 'return_type': 'GmagickPixel'},
\     'setcolorvalue': { 'signature': 'int $color, float $value | GmagickPixel', 'return_type': 'GmagickPixel'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['gmp'] = {
\'gmp': {
\   'name': 'GMP',
\},
\}
let g:phpcomplete_builtin['classes']['haru'] = {
\'haruannotation': {
\   'name': 'HaruAnnotation',
\   'methods': {
\     'setBorderStyle': { 'signature': 'float $width, int $dash_on, int $dash_off | bool', 'return_type': 'bool'},
\     'setHighlightMode': { 'signature': 'int $mode | bool', 'return_type': 'bool'},
\     'setIcon': { 'signature': 'int $icon | bool', 'return_type': 'bool'},
\     'setOpened': { 'signature': 'bool $opened | bool', 'return_type': 'bool'},
\   },
\},
\'harudestination': {
\   'name': 'HaruDestination',
\   'methods': {
\     'setFit': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'setFitB': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'setFitBH': { 'signature': 'float $top | bool', 'return_type': 'bool'},
\     'setFitBV': { 'signature': 'float $left | bool', 'return_type': 'bool'},
\     'setFitH': { 'signature': 'float $top | bool', 'return_type': 'bool'},
\     'setFitR': { 'signature': 'float $left, float $bottom, float $right, float $top | bool', 'return_type': 'bool'},
\     'setFitV': { 'signature': 'float $left | bool', 'return_type': 'bool'},
\     'setXYZ': { 'signature': 'float $left, float $top, float $zoom | bool', 'return_type': 'bool'},
\   },
\},
\'harudoc': {
\   'name': 'HaruDoc',
\   'methods': {
\     'addPage': { 'signature': 'void | object', 'return_type': 'object'},
\     'addPageLabel': { 'signature': 'int $first_page, int $style, int $first_num [, string $prefix = ""] | bool', 'return_type': 'bool'},
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'createOutline': { 'signature': 'string $title [, object $parent_outline [, object $encoder]] | object', 'return_type': 'object'},
\     'getCurrentEncoder': { 'signature': 'void | object', 'return_type': 'object'},
\     'getCurrentPage': { 'signature': 'void | object', 'return_type': 'object'},
\     'getEncoder': { 'signature': 'string $encoding | object', 'return_type': 'object'},
\     'getFont': { 'signature': 'string $fontname [, string $encoding] | object', 'return_type': 'object'},
\     'getInfoAttr': { 'signature': 'int $type | string', 'return_type': 'string'},
\     'getPageLayout': { 'signature': 'void | int', 'return_type': 'int'},
\     'getPageMode': { 'signature': 'void | int', 'return_type': 'int'},
\     'getStreamSize': { 'signature': 'void | int', 'return_type': 'int'},
\     'insertPage': { 'signature': 'object $page | object', 'return_type': 'object'},
\     'loadJPEG': { 'signature': 'string $filename | object', 'return_type': 'object'},
\     'loadPNG': { 'signature': 'string $filename [, bool $deferred = FALSE] | object', 'return_type': 'object'},
\     'loadRaw': { 'signature': 'string $filename, int $width, int $height, int $color_space | object', 'return_type': 'object'},
\     'loadTTC': { 'signature': 'string $fontfile, int $index [, bool $embed = FALSE] | string', 'return_type': 'string'},
\     'loadTTF': { 'signature': 'string $fontfile [, bool $embed = FALSE] | string', 'return_type': 'string'},
\     'loadType1': { 'signature': 'string $afmfile [, string $pfmfile] | string', 'return_type': 'string'},
\     'output': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'readFromStream': { 'signature': 'int $bytes | string', 'return_type': 'string'},
\     'resetError': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'resetStream': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'save': { 'signature': 'string $file | bool', 'return_type': 'bool'},
\     'saveToStream': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'setCompressionMode': { 'signature': 'int $mode | bool', 'return_type': 'bool'},
\     'setCurrentEncoder': { 'signature': 'string $encoding | bool', 'return_type': 'bool'},
\     'setEncryptionMode': { 'signature': 'int $mode [, int $key_len = 5] | bool', 'return_type': 'bool'},
\     'setInfoAttr': { 'signature': 'int $type, string $info | bool', 'return_type': 'bool'},
\     'setInfoDateAttr': { 'signature': 'int $type, int $year, int $month, int $day, int $hour, int $min, int $sec, string $ind, int $off_hour, int $off_min | bool', 'return_type': 'bool'},
\     'setOpenAction': { 'signature': 'object $destination | bool', 'return_type': 'bool'},
\     'setPageLayout': { 'signature': 'int $layout | bool', 'return_type': 'bool'},
\     'setPageMode': { 'signature': 'int $mode | bool', 'return_type': 'bool'},
\     'setPagesConfiguration': { 'signature': 'int $page_per_pages | bool', 'return_type': 'bool'},
\     'setPassword': { 'signature': 'string $owner_password, string $user_password | bool', 'return_type': 'bool'},
\     'setPermission': { 'signature': 'int $permission | bool', 'return_type': 'bool'},
\     'useCNSEncodings': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'useCNSFonts': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'useCNTEncodings': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'useCNTFonts': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'useJPEncodings': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'useJPFonts': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'useKREncodings': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'useKRFonts': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'haruencoder': {
\   'name': 'HaruEncoder',
\   'methods': {
\     'getByteType': { 'signature': 'string $text, int $index | int', 'return_type': 'int'},
\     'getType': { 'signature': 'void | int', 'return_type': 'int'},
\     'getUnicode': { 'signature': 'int $character | int', 'return_type': 'int'},
\     'getWritingMode': { 'signature': 'void | int', 'return_type': 'int'},
\   },
\},
\'haruexception': {
\   'name': 'HaruException',
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'harufont': {
\   'name': 'HaruFont',
\   'methods': {
\     'getAscent': { 'signature': 'void | int', 'return_type': 'int'},
\     'getCapHeight': { 'signature': 'void | int', 'return_type': 'int'},
\     'getDescent': { 'signature': 'void | int', 'return_type': 'int'},
\     'getEncodingName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getFontName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getTextWidth': { 'signature': 'string $text | array', 'return_type': 'array'},
\     'getUnicodeWidth': { 'signature': 'int $character | int', 'return_type': 'int'},
\     'getXHeight': { 'signature': 'void | int', 'return_type': 'int'},
\     'measureText': { 'signature': 'string $text, float $width, float $font_size, float $char_space, float $word_space [, bool $word_wrap = FALSE] | int', 'return_type': 'int'},
\   },
\},
\'haruimage': {
\   'name': 'HaruImage',
\   'methods': {
\     'getBitsPerComponent': { 'signature': 'void | int', 'return_type': 'int'},
\     'getColorSpace': { 'signature': 'void | string', 'return_type': 'string'},
\     'getHeight': { 'signature': 'void | int', 'return_type': 'int'},
\     'getSize': { 'signature': 'void | array', 'return_type': 'array'},
\     'getWidth': { 'signature': 'void | int', 'return_type': 'int'},
\     'setColorMask': { 'signature': 'int $rmin, int $rmax, int $gmin, int $gmax, int $bmin, int $bmax | bool', 'return_type': 'bool'},
\     'setMaskImage': { 'signature': 'object $mask_image | bool', 'return_type': 'bool'},
\   },
\},
\'haruoutline': {
\   'name': 'HaruOutline',
\   'methods': {
\     'setDestination': { 'signature': 'object $destination | bool', 'return_type': 'bool'},
\     'setOpened': { 'signature': 'bool $opened | bool', 'return_type': 'bool'},
\   },
\},
\'harupage': {
\   'name': 'HaruPage',
\   'methods': {
\     'arc': { 'signature': 'float $x, float $y, float $ray, float $ang1, float $ang2 | bool', 'return_type': 'bool'},
\     'beginText': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'circle': { 'signature': 'float $x, float $y, float $ray | bool', 'return_type': 'bool'},
\     'closePath': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'concat': { 'signature': 'float $a, float $b, float $c, float $d, float $x, float $y | bool', 'return_type': 'bool'},
\     'createDestination': { 'signature': 'void | object', 'return_type': 'object'},
\     'createLinkAnnotation': { 'signature': 'array $rectangle, object $destination | object', 'return_type': 'object'},
\     'createTextAnnotation': { 'signature': 'array $rectangle, string $text [, object $encoder] | object', 'return_type': 'object'},
\     'createURLAnnotation': { 'signature': 'array $rectangle, string $url | object', 'return_type': 'object'},
\     'curveTo2': { 'signature': 'float $x2, float $y2, float $x3, float $y3 | bool', 'return_type': 'bool'},
\     'curveTo3': { 'signature': 'float $x1, float $y1, float $x3, float $y3 | bool', 'return_type': 'bool'},
\     'curveTo': { 'signature': 'float $x1, float $y1, float $x2, float $y2, float $x3, float $y3 | bool', 'return_type': 'bool'},
\     'drawImage': { 'signature': 'object $image, float $x, float $y, float $width, float $height | bool', 'return_type': 'bool'},
\     'ellipse': { 'signature': 'float $x, float $y, float $xray, float $yray | bool', 'return_type': 'bool'},
\     'endPath': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'endText': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'eofill': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'eoFillStroke': { 'signature': '[ bool $close_path = FALSE] | bool', 'return_type': 'bool'},
\     'fill': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'fillStroke': { 'signature': '[ bool $close_path = FALSE] | bool', 'return_type': 'bool'},
\     'getCharSpace': { 'signature': 'void | float', 'return_type': 'float'},
\     'getCMYKFill': { 'signature': 'void | array', 'return_type': 'array'},
\     'getCMYKStroke': { 'signature': 'void | array', 'return_type': 'array'},
\     'getCurrentFont': { 'signature': 'void | object', 'return_type': 'object'},
\     'getCurrentFontSize': { 'signature': 'void | float', 'return_type': 'float'},
\     'getCurrentPos': { 'signature': 'void | array', 'return_type': 'array'},
\     'getCurrentTextPos': { 'signature': 'void | array', 'return_type': 'array'},
\     'getDash': { 'signature': 'void | array', 'return_type': 'array'},
\     'getFillingColorSpace': { 'signature': 'void | int', 'return_type': 'int'},
\     'getFlatness': { 'signature': 'void | float', 'return_type': 'float'},
\     'getGMode': { 'signature': 'void | int', 'return_type': 'int'},
\     'getGrayFill': { 'signature': 'void | float', 'return_type': 'float'},
\     'getGrayStroke': { 'signature': 'void | float', 'return_type': 'float'},
\     'getHeight': { 'signature': 'void | float', 'return_type': 'float'},
\     'getHorizontalScaling': { 'signature': 'void | float', 'return_type': 'float'},
\     'getLineCap': { 'signature': 'void | int', 'return_type': 'int'},
\     'getLineJoin': { 'signature': 'void | int', 'return_type': 'int'},
\     'getLineWidth': { 'signature': 'void | float', 'return_type': 'float'},
\     'getMiterLimit': { 'signature': 'void | float', 'return_type': 'float'},
\     'getRGBFill': { 'signature': 'void | array', 'return_type': 'array'},
\     'getRGBStroke': { 'signature': 'void | array', 'return_type': 'array'},
\     'getStrokingColorSpace': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTextLeading': { 'signature': 'void | float', 'return_type': 'float'},
\     'getTextMatrix': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTextRenderingMode': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTextRise': { 'signature': 'void | float', 'return_type': 'float'},
\     'getTextWidth': { 'signature': 'string $text | float', 'return_type': 'float'},
\     'getTransMatrix': { 'signature': 'void | array', 'return_type': 'array'},
\     'getWidth': { 'signature': 'void | float', 'return_type': 'float'},
\     'getWordSpace': { 'signature': 'void | float', 'return_type': 'float'},
\     'lineTo': { 'signature': 'float $x, float $y | bool', 'return_type': 'bool'},
\     'measureText': { 'signature': 'string $text, float $width [, bool $wordwrap = FALSE] | int', 'return_type': 'int'},
\     'moveTextPos': { 'signature': 'float $x, float $y [, bool $set_leading = FALSE] | bool', 'return_type': 'bool'},
\     'moveTo': { 'signature': 'float $x, float $y | bool', 'return_type': 'bool'},
\     'moveToNextLine': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'rectangle': { 'signature': 'float $x, float $y, float $width, float $height | bool', 'return_type': 'bool'},
\     'setCharSpace': { 'signature': 'float $char_space | bool', 'return_type': 'bool'},
\     'setCMYKFill': { 'signature': 'float $c, float $m, float $y, float $k | bool', 'return_type': 'bool'},
\     'setCMYKStroke': { 'signature': 'float $c, float $m, float $y, float $k | bool', 'return_type': 'bool'},
\     'setDash': { 'signature': 'array $pattern, int $phase | bool', 'return_type': 'bool'},
\     'setFlatness': { 'signature': 'float $flatness | bool', 'return_type': 'bool'},
\     'setFontAndSize': { 'signature': 'object $font, float $size | bool', 'return_type': 'bool'},
\     'setGrayFill': { 'signature': 'float $value | bool', 'return_type': 'bool'},
\     'setGrayStroke': { 'signature': 'float $value | bool', 'return_type': 'bool'},
\     'setHeight': { 'signature': 'float $height | bool', 'return_type': 'bool'},
\     'setHorizontalScaling': { 'signature': 'float $scaling | bool', 'return_type': 'bool'},
\     'setLineCap': { 'signature': 'int $cap | bool', 'return_type': 'bool'},
\     'setLineJoin': { 'signature': 'int $join | bool', 'return_type': 'bool'},
\     'setLineWidth': { 'signature': 'float $width | bool', 'return_type': 'bool'},
\     'setMiterLimit': { 'signature': 'float $limit | bool', 'return_type': 'bool'},
\     'setRGBFill': { 'signature': 'float $r, float $g, float $b | bool', 'return_type': 'bool'},
\     'setRGBStroke': { 'signature': 'float $r, float $g, float $b | bool', 'return_type': 'bool'},
\     'setRotate': { 'signature': 'int $angle | bool', 'return_type': 'bool'},
\     'setSize': { 'signature': 'int $size, int $direction | bool', 'return_type': 'bool'},
\     'setSlideShow': { 'signature': 'int $type, float $disp_time, float $trans_time | bool', 'return_type': 'bool'},
\     'setTextLeading': { 'signature': 'float $text_leading | bool', 'return_type': 'bool'},
\     'setTextMatrix': { 'signature': 'float $a, float $b, float $c, float $d, float $x, float $y | bool', 'return_type': 'bool'},
\     'setTextRenderingMode': { 'signature': 'int $mode | bool', 'return_type': 'bool'},
\     'setTextRise': { 'signature': 'float $rise | bool', 'return_type': 'bool'},
\     'setWidth': { 'signature': 'float $width | bool', 'return_type': 'bool'},
\     'setWordSpace': { 'signature': 'float $word_space | bool', 'return_type': 'bool'},
\     'showText': { 'signature': 'string $text | bool', 'return_type': 'bool'},
\     'showTextNextLine': { 'signature': 'string $text [, float $word_space = 0 [, float $char_space = 0]] | bool', 'return_type': 'bool'},
\     'stroke': { 'signature': '[ bool $close_path = FALSE] | bool', 'return_type': 'bool'},
\     'textOut': { 'signature': 'float $x, float $y, string $text | bool', 'return_type': 'bool'},
\     'textRect': { 'signature': 'float $left, float $top, float $right, float $bottom, string $text [, int $align = HaruPage::TALIGN_LEFT] | bool', 'return_type': 'bool'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['hash'] = {
\'hashcontext': {
\   'name': 'HashContext',
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['hrtime'] = {
\'hrtime\performancecounter': {
\   'name': 'HRTime\PerformanceCounter',
\   'static_methods': {
\     'getFrequency': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTicks': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTicksSince': { 'signature': 'int $start | int', 'return_type': 'int'},
\   },
\},
\'hrtime\stopwatch': {
\   'name': 'HRTime\StopWatch',
\   'methods': {
\     'getElapsedTicks': { 'signature': 'void | int', 'return_type': 'int'},
\     'getElapsedTime': { 'signature': '[ int $unit] | float', 'return_type': 'float'},
\     'getLastElapsedTicks': { 'signature': 'void | int', 'return_type': 'int'},
\     'getLastElapsedTime': { 'signature': '[ int $unit] | float', 'return_type': 'float'},
\     'isRunning': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'start': { 'signature': 'void | void', 'return_type': 'void'},
\     'stop': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\   'static_methods': {
\     'getFrequency': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTicks': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTicksSince': { 'signature': 'int $start | int', 'return_type': 'int'},
\   },
\},
\'hrtime\unit': {
\   'name': 'HRTime\Unit',
\   'constants': {
\     'SECOND': '0',
\     'MILLISECOND': '1',
\     'MICROSECOND': '2',
\     'NANOSECOND': '3',
\   },
\},
\}
let g:phpcomplete_builtin['classes']['imagemagick'] = {
\'imagick': {
\   'name': 'Imagick',
\   'methods': {
\     'adaptiveBlurImage': { 'signature': 'float $radius, float $sigma [, int $channel = Imagick::CHANNEL_DEFAULT] | bool', 'return_type': 'bool'},
\     'adaptiveResizeImage': { 'signature': 'int $columns, int $rows [, bool $bestfit = FALSE [, bool $legacy = FALSE]] | bool', 'return_type': 'bool'},
\     'adaptiveSharpenImage': { 'signature': 'float $radius, float $sigma [, int $channel = Imagick::CHANNEL_DEFAULT] | bool', 'return_type': 'bool'},
\     'adaptiveThresholdImage': { 'signature': 'int $width, int $height, int $offset | bool', 'return_type': 'bool'},
\     'addImage': { 'signature': 'Imagick $source | bool', 'return_type': 'bool'},
\     'addNoiseImage': { 'signature': 'int $noise_type [, int $channel = Imagick::CHANNEL_DEFAULT] | bool', 'return_type': 'bool'},
\     'affineTransformImage': { 'signature': 'ImagickDraw $matrix | bool', 'return_type': 'bool'},
\     'animateImages': { 'signature': 'string $x_server | bool', 'return_type': 'bool'},
\     'annotateImage': { 'signature': 'ImagickDraw $draw_settings, float $x, float $y, float $angle, string $text | bool', 'return_type': 'bool'},
\     'appendImages': { 'signature': 'bool $stack | Imagick', 'return_type': 'Imagick'},
\     'autoLevelImage': { 'signature': '[ int $channel = Imagick::CHANNEL_DEFAULT] | bool', 'return_type': 'bool'},
\     'averageImages': { 'signature': 'void | Imagick', 'return_type': 'Imagick'},
\     'blackThresholdImage': { 'signature': 'mixed $threshold | bool', 'return_type': 'bool'},
\     'blueShiftImage': { 'signature': '[ float $factor = 1.5] | bool', 'return_type': 'bool'},
\     'blurImage': { 'signature': 'float $radius, float $sigma [, int $channel] | bool', 'return_type': 'bool'},
\     'borderImage': { 'signature': 'mixed $bordercolor, int $width, int $height | bool', 'return_type': 'bool'},
\     'brightnessContrastImage': { 'signature': 'float $brightness, float $contrast [, int $channel = Imagick::CHANNEL_DEFAULT] | bool', 'return_type': 'bool'},
\     'charcoalImage': { 'signature': 'float $radius, float $sigma | bool', 'return_type': 'bool'},
\     'chopImage': { 'signature': 'int $width, int $height, int $x, int $y | bool', 'return_type': 'bool'},
\     'clampImage': { 'signature': '[ int $channel = Imagick::CHANNEL_DEFAULT] | bool', 'return_type': 'bool'},
\     'clear': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'clipImage': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'clipImagePath': { 'signature': 'string $pathname, string $inside | void', 'return_type': 'void'},
\     'clipPathImage': { 'signature': 'string $pathname, bool $inside | bool', 'return_type': 'bool'},
\     'clone': { 'signature': 'void | Imagick', 'return_type': 'Imagick'},
\     'clutImage': { 'signature': 'Imagick $lookup_table [, int $channel = Imagick::CHANNEL_DEFAULT] | bool', 'return_type': 'bool'},
\     'coalesceImages': { 'signature': 'void | Imagick', 'return_type': 'Imagick'},
\     'colorFloodfillImage': { 'signature': 'mixed $fill, float $fuzz, mixed $bordercolor, int $x, int $y | bool', 'return_type': 'bool'},
\     'colorizeImage': { 'signature': 'mixed $colorize, mixed $opacity [, bool $legacy = FALSE] | bool', 'return_type': 'bool'},
\     'colorMatrixImage': { 'signature': '[ array $color_matrix = Imagick::CHANNEL_DEFAULT] | bool', 'return_type': 'bool'},
\     'combineImages': { 'signature': 'int $channelType | Imagick', 'return_type': 'Imagick'},
\     'commentImage': { 'signature': 'string $comment | bool', 'return_type': 'bool'},
\     'compareImageChannels': { 'signature': 'Imagick $image, int $channelType, int $metricType | array', 'return_type': 'array'},
\     'compareImageLayers': { 'signature': 'int $method | Imagick', 'return_type': 'Imagick'},
\     'compareImages': { 'signature': 'Imagick $compare, int $metric | array', 'return_type': 'array'},
\     'compositeImage': { 'signature': 'Imagick $composite_object, int $composite, int $x, int $y [, int $channel = Imagick::CHANNEL_DEFAULT] | bool', 'return_type': 'bool'},
\     '__construct': { 'signature': '[ mixed $files]', 'return_type': ''},
\     'contrastImage': { 'signature': 'bool $sharpen | bool', 'return_type': 'bool'},
\     'contrastStretchImage': { 'signature': 'float $black_point, float $white_point [, int $channel = Imagick::CHANNEL_DEFAULT] | bool', 'return_type': 'bool'},
\     'convolveImage': { 'signature': 'array $kernel [, int $channel = Imagick::CHANNEL_DEFAULT] | bool', 'return_type': 'bool'},
\     'count': { 'signature': '[ int $mode = 0] | int', 'return_type': 'int'},
\     'cropImage': { 'signature': 'int $width, int $height, int $x, int $y | bool', 'return_type': 'bool'},
\     'cropThumbnailImage': { 'signature': 'int $width, int $height [, bool $legacy = FALSE] | bool', 'return_type': 'bool'},
\     'current': { 'signature': 'void | Imagick', 'return_type': 'Imagick'},
\     'cycleColormapImage': { 'signature': 'int $displace | bool', 'return_type': 'bool'},
\     'decipherImage': { 'signature': 'string $passphrase | bool', 'return_type': 'bool'},
\     'deconstructImages': { 'signature': 'void | Imagick', 'return_type': 'Imagick'},
\     'deleteImageArtifact': { 'signature': 'string $artifact | bool', 'return_type': 'bool'},
\     'deleteImageProperty': { 'signature': 'string $name | bool', 'return_type': 'bool'},
\     'deskewImage': { 'signature': 'float $threshold | bool', 'return_type': 'bool'},
\     'despeckleImage': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'destroy': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'displayImage': { 'signature': 'string $servername | bool', 'return_type': 'bool'},
\     'displayImages': { 'signature': 'string $servername | bool', 'return_type': 'bool'},
\     'distortImage': { 'signature': 'int $method, array $arguments, bool $bestfit | bool', 'return_type': 'bool'},
\     'drawImage': { 'signature': 'ImagickDraw $draw | bool', 'return_type': 'bool'},
\     'edgeImage': { 'signature': 'float $radius | bool', 'return_type': 'bool'},
\     'embossImage': { 'signature': 'float $radius, float $sigma | bool', 'return_type': 'bool'},
\     'encipherImage': { 'signature': 'string $passphrase | bool', 'return_type': 'bool'},
\     'enhanceImage': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'equalizeImage': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'evaluateImage': { 'signature': 'int $op, float $constant [, int $channel = Imagick::CHANNEL_DEFAULT] | bool', 'return_type': 'bool'},
\     'exportImagePixels': { 'signature': 'int $x, int $y, int $width, int $height, string $map, int $STORAGE | array', 'return_type': 'array'},
\     'extentImage': { 'signature': 'int $width, int $height, int $x, int $y | bool', 'return_type': 'bool'},
\     'filter': { 'signature': 'ImagickKernel $ImagickKernel [, int $channel = Imagick::CHANNEL_UNDEFINED] | bool', 'return_type': 'bool'},
\     'flattenImages': { 'signature': 'void | Imagick', 'return_type': 'Imagick'},
\     'flipImage': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'floodFillPaintImage': { 'signature': 'mixed $fill, float $fuzz, mixed $target, int $x, int $y, bool $invert [, int $channel = Imagick::CHANNEL_DEFAULT] | bool', 'return_type': 'bool'},
\     'flopImage': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'forwardFourierTransformimage': { 'signature': 'bool $magnitude | bool', 'return_type': 'bool'},
\     'frameImage': { 'signature': 'mixed $matte_color, int $width, int $height, int $inner_bevel, int $outer_bevel | bool', 'return_type': 'bool'},
\     'functionImage': { 'signature': 'int $function, array $arguments [, int $channel = Imagick::CHANNEL_DEFAULT] | bool', 'return_type': 'bool'},
\     'fxImage': { 'signature': 'string $expression [, int $channel = Imagick::CHANNEL_DEFAULT] | Imagick', 'return_type': 'Imagick'},
\     'gammaImage': { 'signature': 'float $gamma [, int $channel = Imagick::CHANNEL_DEFAULT] | bool', 'return_type': 'bool'},
\     'gaussianBlurImage': { 'signature': 'float $radius, float $sigma [, int $channel = Imagick::CHANNEL_DEFAULT] | bool', 'return_type': 'bool'},
\     'getColorspace': { 'signature': 'void | int', 'return_type': 'int'},
\     'getCompression': { 'signature': 'void | int', 'return_type': 'int'},
\     'getCompressionQuality': { 'signature': 'void | int', 'return_type': 'int'},
\     'getCopyright': { 'signature': 'void | string', 'return_type': 'string'},
\     'getFilename': { 'signature': 'void | string', 'return_type': 'string'},
\     'getFont': { 'signature': 'void | string', 'return_type': 'string'},
\     'getFormat': { 'signature': 'void | string', 'return_type': 'string'},
\     'getGravity': { 'signature': 'void | int', 'return_type': 'int'},
\     'getHomeURL': { 'signature': 'void | string', 'return_type': 'string'},
\     'getImage': { 'signature': 'void | Imagick', 'return_type': 'Imagick'},
\     'getImageAlphaChannel': { 'signature': 'void | int', 'return_type': 'int'},
\     'getImageArtifact': { 'signature': 'string $artifact | string', 'return_type': 'string'},
\     'getImageAttribute': { 'signature': 'string $key | string', 'return_type': 'string'},
\     'getImageBackgroundColor': { 'signature': 'void | ImagickPixel', 'return_type': 'ImagickPixel'},
\     'getImageBlob': { 'signature': 'void | string', 'return_type': 'string'},
\     'getImageBluePrimary': { 'signature': 'void | array', 'return_type': 'array'},
\     'getImageBorderColor': { 'signature': 'void | ImagickPixel', 'return_type': 'ImagickPixel'},
\     'getImageChannelDepth': { 'signature': 'int $channel | int', 'return_type': 'int'},
\     'getImageChannelDistortion': { 'signature': 'Imagick $reference, int $channel, int $metric | float', 'return_type': 'float'},
\     'getImageChannelDistortions': { 'signature': 'Imagick $reference, int $metric [, int $channel = Imagick::CHANNEL_DEFAULT] | float', 'return_type': 'float'},
\     'getImageChannelExtrema': { 'signature': 'int $channel | array', 'return_type': 'array'},
\     'getImageChannelKurtosis': { 'signature': '[ int $channel = Imagick::CHANNEL_DEFAULT] | array', 'return_type': 'array'},
\     'getImageChannelMean': { 'signature': 'int $channel | array', 'return_type': 'array'},
\     'getImageChannelRange': { 'signature': 'int $channel | array', 'return_type': 'array'},
\     'getImageChannelStatistics': { 'signature': 'void | array', 'return_type': 'array'},
\     'getImageClipMask': { 'signature': 'void | Imagick', 'return_type': 'Imagick'},
\     'getImageColormapColor': { 'signature': 'int $index | ImagickPixel', 'return_type': 'ImagickPixel'},
\     'getImageColors': { 'signature': 'void | int', 'return_type': 'int'},
\     'getImageColorspace': { 'signature': 'void | int', 'return_type': 'int'},
\     'getImageCompose': { 'signature': 'void | int', 'return_type': 'int'},
\     'getImageCompression': { 'signature': 'void | int', 'return_type': 'int'},
\     'getImageCompressionQuality': { 'signature': 'void | int', 'return_type': 'int'},
\     'getImageDelay': { 'signature': 'void | int', 'return_type': 'int'},
\     'getImageDepth': { 'signature': 'void | int', 'return_type': 'int'},
\     'getImageDispose': { 'signature': 'void | int', 'return_type': 'int'},
\     'getImageDistortion': { 'signature': 'MagickWand $reference, int $metric | float', 'return_type': 'float'},
\     'getImageExtrema': { 'signature': 'void | array', 'return_type': 'array'},
\     'getImageFilename': { 'signature': 'void | string', 'return_type': 'string'},
\     'getImageFormat': { 'signature': 'void | string', 'return_type': 'string'},
\     'getImageGamma': { 'signature': 'void | float', 'return_type': 'float'},
\     'getImageGeometry': { 'signature': 'void | array', 'return_type': 'array'},
\     'getImageGravity': { 'signature': 'void | int', 'return_type': 'int'},
\     'getImageGreenPrimary': { 'signature': 'void | array', 'return_type': 'array'},
\     'getImageHeight': { 'signature': 'void | int', 'return_type': 'int'},
\     'getImageHistogram': { 'signature': 'void | array', 'return_type': 'array'},
\     'getImageIndex': { 'signature': 'void | int', 'return_type': 'int'},
\     'getImageInterlaceScheme': { 'signature': 'void | int', 'return_type': 'int'},
\     'getImageInterpolateMethod': { 'signature': 'void | int', 'return_type': 'int'},
\     'getImageIterations': { 'signature': 'void | int', 'return_type': 'int'},
\     'getImageLength': { 'signature': 'void | int', 'return_type': 'int'},
\     'getImageMagickLicense': { 'signature': 'void | string', 'return_type': 'string'},
\     'getImageMatte': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getImageMatteColor': { 'signature': 'void | ImagickPixel', 'return_type': 'ImagickPixel'},
\     'getImageMimeType': { 'signature': 'void | string', 'return_type': 'string'},
\     'getImageOrientation': { 'signature': 'void | int', 'return_type': 'int'},
\     'getImagePage': { 'signature': 'void | array', 'return_type': 'array'},
\     'getImagePixelColor': { 'signature': 'int $x, int $y | ImagickPixel', 'return_type': 'ImagickPixel'},
\     'getImageProfile': { 'signature': 'string $name | string', 'return_type': 'string'},
\     'getImageProfiles': { 'signature': '[ string $pattern = "*" [, bool $include_values = TRUE]] | array', 'return_type': 'array'},
\     'getImageProperties': { 'signature': '[ string $pattern = "*" [, bool $include_values = TRUE]] | array', 'return_type': 'array'},
\     'getImageProperty': { 'signature': 'string $name | string', 'return_type': 'string'},
\     'getImageRedPrimary': { 'signature': 'void | array', 'return_type': 'array'},
\     'getImageRegion': { 'signature': 'int $width, int $height, int $x, int $y | Imagick', 'return_type': 'Imagick'},
\     'getImageRenderingIntent': { 'signature': 'void | int', 'return_type': 'int'},
\     'getImageResolution': { 'signature': 'void | array', 'return_type': 'array'},
\     'getImagesBlob': { 'signature': 'void | string', 'return_type': 'string'},
\     'getImageScene': { 'signature': 'void | int', 'return_type': 'int'},
\     'getImageSignature': { 'signature': 'void | string', 'return_type': 'string'},
\     'getImageSize': { 'signature': 'void | int', 'return_type': 'int'},
\     'getImageTicksPerSecond': { 'signature': 'void | int', 'return_type': 'int'},
\     'getImageTotalInkDensity': { 'signature': 'void | float', 'return_type': 'float'},
\     'getImageType': { 'signature': 'void | int', 'return_type': 'int'},
\     'getImageUnits': { 'signature': 'void | int', 'return_type': 'int'},
\     'getImageVirtualPixelMethod': { 'signature': 'void | int', 'return_type': 'int'},
\     'getImageWhitePoint': { 'signature': 'void | array', 'return_type': 'array'},
\     'getImageWidth': { 'signature': 'void | int', 'return_type': 'int'},
\     'getInterlaceScheme': { 'signature': 'void | int', 'return_type': 'int'},
\     'getIteratorIndex': { 'signature': 'void | int', 'return_type': 'int'},
\     'getNumberImages': { 'signature': 'void | int', 'return_type': 'int'},
\     'getOption': { 'signature': 'string $key | string', 'return_type': 'string'},
\     'getPackageName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPage': { 'signature': 'void | array', 'return_type': 'array'},
\     'getPixelIterator': { 'signature': 'void | ImagickPixelIterator', 'return_type': 'ImagickPixelIterator'},
\     'getPixelRegionIterator': { 'signature': 'int $x, int $y, int $columns, int $rows | ImagickPixelIterator', 'return_type': 'ImagickPixelIterator'},
\     'getPointSize': { 'signature': 'void | float', 'return_type': 'float'},
\     'getQuantumDepth': { 'signature': 'void | array', 'return_type': 'array'},
\     'getQuantumRange': { 'signature': 'void | array', 'return_type': 'array'},
\     'getReleaseDate': { 'signature': 'void | string', 'return_type': 'string'},
\     'getResource': { 'signature': 'int $type | int', 'return_type': 'int'},
\     'getResourceLimit': { 'signature': 'int $type | int', 'return_type': 'int'},
\     'getSamplingFactors': { 'signature': 'void | array', 'return_type': 'array'},
\     'getSize': { 'signature': 'void | array', 'return_type': 'array'},
\     'getSizeOffset': { 'signature': 'void | int', 'return_type': 'int'},
\     'getVersion': { 'signature': 'void | array', 'return_type': 'array'},
\     'haldClutImage': { 'signature': 'Imagick $clut [, int $channel = Imagick::CHANNEL_DEFAULT] | bool', 'return_type': 'bool'},
\     'hasNextImage': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'hasPreviousImage': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'identifyFormat': { 'signature': 'string $embedText | string', 'return_type': 'string'},
\     'identifyImage': { 'signature': '[ bool $appendRawOutput = FALSE] | array', 'return_type': 'array'},
\     'implodeImage': { 'signature': 'float $radius | bool', 'return_type': 'bool'},
\     'importImagePixels': { 'signature': 'int $x, int $y, int $width, int $height, string $map, int $storage, array $pixels | bool', 'return_type': 'bool'},
\     'inverseFourierTransformImage': { 'signature': 'Imagick $complement, bool $magnitude | bool', 'return_type': 'bool'},
\     'labelImage': { 'signature': 'string $label | bool', 'return_type': 'bool'},
\     'levelImage': { 'signature': 'float $blackPoint, float $gamma, float $whitePoint [, int $channel = Imagick::CHANNEL_DEFAULT] | bool', 'return_type': 'bool'},
\     'linearStretchImage': { 'signature': 'float $blackPoint, float $whitePoint | bool', 'return_type': 'bool'},
\     'liquidRescaleImage': { 'signature': 'int $width, int $height, float $delta_x, float $rigidity | bool', 'return_type': 'bool'},
\     'magnifyImage': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'mapImage': { 'signature': 'Imagick $map, bool $dither | bool', 'return_type': 'bool'},
\     'matteFloodfillImage': { 'signature': 'float $alpha, float $fuzz, mixed $bordercolor, int $x, int $y | bool', 'return_type': 'bool'},
\     'medianFilterImage': { 'signature': 'float $radius | bool', 'return_type': 'bool'},
\     'mergeImageLayers': { 'signature': 'int $layer_method | Imagick', 'return_type': 'Imagick'},
\     'minifyImage': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'modulateImage': { 'signature': 'float $brightness, float $saturation, float $hue | bool', 'return_type': 'bool'},
\     'montageImage': { 'signature': 'ImagickDraw $draw, string $tile_geometry, string $thumbnail_geometry, int $mode, string $frame | Imagick', 'return_type': 'Imagick'},
\     'morphImages': { 'signature': 'int $number_frames | Imagick', 'return_type': 'Imagick'},
\     'morphology': { 'signature': 'int $morphologyMethod, int $iterations, ImagickKernel $ImagickKernel [, int $channel = Imagick::CHANNEL_DEFAULT] | bool', 'return_type': 'bool'},
\     'mosaicImages': { 'signature': 'void | Imagick', 'return_type': 'Imagick'},
\     'motionBlurImage': { 'signature': 'float $radius, float $sigma, float $angle [, int $channel = Imagick::CHANNEL_DEFAULT] | bool', 'return_type': 'bool'},
\     'negateImage': { 'signature': 'bool $gray [, int $channel = Imagick::CHANNEL_DEFAULT] | bool', 'return_type': 'bool'},
\     'newImage': { 'signature': 'int $cols, int $rows, mixed $background [, string $format] | bool', 'return_type': 'bool'},
\     'newPseudoImage': { 'signature': 'int $columns, int $rows, string $pseudoString | bool', 'return_type': 'bool'},
\     'nextImage': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'normalizeImage': { 'signature': '[ int $channel = Imagick::CHANNEL_DEFAULT] | bool', 'return_type': 'bool'},
\     'oilPaintImage': { 'signature': 'float $radius | bool', 'return_type': 'bool'},
\     'opaquePaintImage': { 'signature': 'mixed $target, mixed $fill, float $fuzz, bool $invert [, int $channel = Imagick::CHANNEL_DEFAULT] | bool', 'return_type': 'bool'},
\     'optimizeImageLayers': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'orderedPosterizeImage': { 'signature': 'string $threshold_map [, int $channel = Imagick::CHANNEL_DEFAULT] | bool', 'return_type': 'bool'},
\     'paintFloodfillImage': { 'signature': 'mixed $fill, float $fuzz, mixed $bordercolor, int $x, int $y [, int $channel = Imagick::CHANNEL_DEFAULT] | bool', 'return_type': 'bool'},
\     'paintOpaqueImage': { 'signature': 'mixed $target, mixed $fill, float $fuzz [, int $channel = Imagick::CHANNEL_DEFAULT] | bool', 'return_type': 'bool'},
\     'paintTransparentImage': { 'signature': 'mixed $target, float $alpha, float $fuzz | bool', 'return_type': 'bool'},
\     'pingImage': { 'signature': 'string $filename | bool', 'return_type': 'bool'},
\     'pingImageBlob': { 'signature': 'string $image | bool', 'return_type': 'bool'},
\     'pingImageFile': { 'signature': 'resource $filehandle [, string $fileName] | bool', 'return_type': 'bool'},
\     'polaroidImage': { 'signature': 'ImagickDraw $properties, float $angle | bool', 'return_type': 'bool'},
\     'posterizeImage': { 'signature': 'int $levels, bool $dither | bool', 'return_type': 'bool'},
\     'previewImages': { 'signature': 'int $preview | bool', 'return_type': 'bool'},
\     'previousImage': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'profileImage': { 'signature': 'string $name, string $profile | bool', 'return_type': 'bool'},
\     'quantizeImage': { 'signature': 'int $numberColors, int $colorspace, int $treedepth, bool $dither, bool $measureError | bool', 'return_type': 'bool'},
\     'quantizeImages': { 'signature': 'int $numberColors, int $colorspace, int $treedepth, bool $dither, bool $measureError | bool', 'return_type': 'bool'},
\     'queryFontMetrics': { 'signature': 'ImagickDraw $properties, string $text [, bool $multiline] | array', 'return_type': 'array'},
\     'queryFonts': { 'signature': '[ string $pattern = "*"] | array', 'return_type': 'array'},
\     'queryFormats': { 'signature': '[ string $pattern = "*"] | array', 'return_type': 'array'},
\     'radialBlurImage': { 'signature': 'float $angle [, int $channel = Imagick::CHANNEL_DEFAULT] | bool', 'return_type': 'bool'},
\     'raiseImage': { 'signature': 'int $width, int $height, int $x, int $y, bool $raise | bool', 'return_type': 'bool'},
\     'randomThresholdImage': { 'signature': 'float $low, float $high [, int $channel = Imagick::CHANNEL_DEFAULT] | bool', 'return_type': 'bool'},
\     'readImage': { 'signature': 'string $filename | bool', 'return_type': 'bool'},
\     'readImageBlob': { 'signature': 'string $image [, string $filename] | bool', 'return_type': 'bool'},
\     'readImageFile': { 'signature': 'resource $filehandle [, string $fileName = NULL] | bool', 'return_type': 'bool'},
\     'readImages': { 'signature': 'array $filenames | bool', 'return_type': 'bool'},
\     'recolorImage': { 'signature': 'array $matrix | bool', 'return_type': 'bool'},
\     'reduceNoiseImage': { 'signature': 'float $radius | bool', 'return_type': 'bool'},
\     'remapImage': { 'signature': 'Imagick $replacement, int $DITHER | bool', 'return_type': 'bool'},
\     'removeImage': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'removeImageProfile': { 'signature': 'string $name | string', 'return_type': 'string'},
\     'render': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'resampleImage': { 'signature': 'float $x_resolution, float $y_resolution, int $filter, float $blur | bool', 'return_type': 'bool'},
\     'resetImagePage': { 'signature': 'string $page | bool', 'return_type': 'bool'},
\     'resizeImage': { 'signature': 'int $columns, int $rows, int $filter, float $blur [, bool $bestfit = FALSE [, bool $legacy = FALSE]] | bool', 'return_type': 'bool'},
\     'rollImage': { 'signature': 'int $x, int $y | bool', 'return_type': 'bool'},
\     'rotateImage': { 'signature': 'mixed $background, float $degrees | bool', 'return_type': 'bool'},
\     'rotationalBlurImage': { 'signature': 'float $angle [, int $channel = Imagick::CHANNEL_DEFAULT] | bool', 'return_type': 'bool'},
\     'roundCorners': { 'signature': 'float $x_rounding, float $y_rounding [, float $stroke_width = 10 [, float $displace = 5 [, float $size_correction = -6]]] | bool', 'return_type': 'bool'},
\     'sampleImage': { 'signature': 'int $columns, int $rows | bool', 'return_type': 'bool'},
\     'scaleImage': { 'signature': 'int $cols, int $rows [, bool $bestfit = FALSE [, bool $legacy = FALSE]] | bool', 'return_type': 'bool'},
\     'segmentImage': { 'signature': 'int $COLORSPACE, float $cluster_threshold, float $smooth_threshold [, bool $verbose = FALSE] | bool', 'return_type': 'bool'},
\     'selectiveBlurImage': { 'signature': 'float $radius, float $sigma, float $threshold [, int $channel = Imagick::CHANNEL_DEFAULT] | bool', 'return_type': 'bool'},
\     'separateImageChannel': { 'signature': 'int $channel | bool', 'return_type': 'bool'},
\     'sepiaToneImage': { 'signature': 'float $threshold | bool', 'return_type': 'bool'},
\     'setBackgroundColor': { 'signature': 'mixed $background | bool', 'return_type': 'bool'},
\     'setColorspace': { 'signature': 'int $COLORSPACE | bool', 'return_type': 'bool'},
\     'setCompression': { 'signature': 'int $compression | bool', 'return_type': 'bool'},
\     'setCompressionQuality': { 'signature': 'int $quality | bool', 'return_type': 'bool'},
\     'setFilename': { 'signature': 'string $filename | bool', 'return_type': 'bool'},
\     'setFirstIterator': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'setFont': { 'signature': 'string $font | bool', 'return_type': 'bool'},
\     'setFormat': { 'signature': 'string $format | bool', 'return_type': 'bool'},
\     'setGravity': { 'signature': 'int $gravity | bool', 'return_type': 'bool'},
\     'setImage': { 'signature': 'Imagick $replace | bool', 'return_type': 'bool'},
\     'setImageAlphaChannel': { 'signature': 'int $mode | bool', 'return_type': 'bool'},
\     'setImageArtifact': { 'signature': 'string $artifact, string $value | bool', 'return_type': 'bool'},
\     'setImageAttribute': { 'signature': 'string $key, string $value | bool', 'return_type': 'bool'},
\     'setImageBackgroundColor': { 'signature': 'mixed $background | bool', 'return_type': 'bool'},
\     'setImageBias': { 'signature': 'float $bias | bool', 'return_type': 'bool'},
\     'setImageBiasQuantum': { 'signature': 'string $bias | void', 'return_type': 'void'},
\     'setImageBluePrimary': { 'signature': 'float $x, float $y | bool', 'return_type': 'bool'},
\     'setImageBorderColor': { 'signature': 'mixed $border | bool', 'return_type': 'bool'},
\     'setImageChannelDepth': { 'signature': 'int $channel, int $depth | bool', 'return_type': 'bool'},
\     'setImageClipMask': { 'signature': 'Imagick $clip_mask | bool', 'return_type': 'bool'},
\     'setImageColormapColor': { 'signature': 'int $index, ImagickPixel $color | bool', 'return_type': 'bool'},
\     'setImageColorspace': { 'signature': 'int $colorspace | bool', 'return_type': 'bool'},
\     'setImageCompose': { 'signature': 'int $compose | bool', 'return_type': 'bool'},
\     'setImageCompression': { 'signature': 'int $compression | bool', 'return_type': 'bool'},
\     'setImageCompressionQuality': { 'signature': 'int $quality | bool', 'return_type': 'bool'},
\     'setImageDelay': { 'signature': 'int $delay | bool', 'return_type': 'bool'},
\     'setImageDepth': { 'signature': 'int $depth | bool', 'return_type': 'bool'},
\     'setImageDispose': { 'signature': 'int $dispose | bool', 'return_type': 'bool'},
\     'setImageExtent': { 'signature': 'int $columns, int $rows | bool', 'return_type': 'bool'},
\     'setImageFilename': { 'signature': 'string $filename | bool', 'return_type': 'bool'},
\     'setImageFormat': { 'signature': 'string $format | bool', 'return_type': 'bool'},
\     'setImageGamma': { 'signature': 'float $gamma | bool', 'return_type': 'bool'},
\     'setImageGravity': { 'signature': 'int $gravity | bool', 'return_type': 'bool'},
\     'setImageGreenPrimary': { 'signature': 'float $x, float $y | bool', 'return_type': 'bool'},
\     'setImageIndex': { 'signature': 'int $index | bool', 'return_type': 'bool'},
\     'setImageInterlaceScheme': { 'signature': 'int $interlace_scheme | bool', 'return_type': 'bool'},
\     'setImageInterpolateMethod': { 'signature': 'int $method | bool', 'return_type': 'bool'},
\     'setImageIterations': { 'signature': 'int $iterations | bool', 'return_type': 'bool'},
\     'setImageMatte': { 'signature': 'bool $matte | bool', 'return_type': 'bool'},
\     'setImageMatteColor': { 'signature': 'mixed $matte | bool', 'return_type': 'bool'},
\     'setImageOpacity': { 'signature': 'float $opacity | bool', 'return_type': 'bool'},
\     'setImageOrientation': { 'signature': 'int $orientation | bool', 'return_type': 'bool'},
\     'setImagePage': { 'signature': 'int $width, int $height, int $x, int $y | bool', 'return_type': 'bool'},
\     'setImageProfile': { 'signature': 'string $name, string $profile | bool', 'return_type': 'bool'},
\     'setImageProperty': { 'signature': 'string $name, string $value | bool', 'return_type': 'bool'},
\     'setImageRedPrimary': { 'signature': 'float $x, float $y | bool', 'return_type': 'bool'},
\     'setImageRenderingIntent': { 'signature': 'int $rendering_intent | bool', 'return_type': 'bool'},
\     'setImageResolution': { 'signature': 'float $x_resolution, float $y_resolution | bool', 'return_type': 'bool'},
\     'setImageScene': { 'signature': 'int $scene | bool', 'return_type': 'bool'},
\     'setImageTicksPerSecond': { 'signature': 'int $ticks_per_second | bool', 'return_type': 'bool'},
\     'setImageType': { 'signature': 'int $image_type | bool', 'return_type': 'bool'},
\     'setImageUnits': { 'signature': 'int $units | bool', 'return_type': 'bool'},
\     'setImageVirtualPixelMethod': { 'signature': 'int $method | bool', 'return_type': 'bool'},
\     'setImageWhitePoint': { 'signature': 'float $x, float $y | bool', 'return_type': 'bool'},
\     'setInterlaceScheme': { 'signature': 'int $interlace_scheme | bool', 'return_type': 'bool'},
\     'setIteratorIndex': { 'signature': 'int $index | bool', 'return_type': 'bool'},
\     'setLastIterator': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'setOption': { 'signature': 'string $key, string $value | bool', 'return_type': 'bool'},
\     'setPage': { 'signature': 'int $width, int $height, int $x, int $y | bool', 'return_type': 'bool'},
\     'setPointSize': { 'signature': 'float $point_size | bool', 'return_type': 'bool'},
\     'setProgressMonitor': { 'signature': 'callable $callback | bool', 'return_type': 'bool'},
\     'setResolution': { 'signature': 'float $x_resolution, float $y_resolution | bool', 'return_type': 'bool'},
\     'setResourceLimit': { 'signature': 'int $type, int $limit | bool', 'return_type': 'bool'},
\     'setSamplingFactors': { 'signature': 'array $factors | bool', 'return_type': 'bool'},
\     'setSize': { 'signature': 'int $columns, int $rows | bool', 'return_type': 'bool'},
\     'setSizeOffset': { 'signature': 'int $columns, int $rows, int $offset | bool', 'return_type': 'bool'},
\     'setType': { 'signature': 'int $image_type | bool', 'return_type': 'bool'},
\     'shadeImage': { 'signature': 'bool $gray, float $azimuth, float $elevation | bool', 'return_type': 'bool'},
\     'shadowImage': { 'signature': 'float $opacity, float $sigma, int $x, int $y | bool', 'return_type': 'bool'},
\     'sharpenImage': { 'signature': 'float $radius, float $sigma [, int $channel = Imagick::CHANNEL_DEFAULT] | bool', 'return_type': 'bool'},
\     'shaveImage': { 'signature': 'int $columns, int $rows | bool', 'return_type': 'bool'},
\     'shearImage': { 'signature': 'mixed $background, float $x_shear, float $y_shear | bool', 'return_type': 'bool'},
\     'sigmoidalContrastImage': { 'signature': 'bool $sharpen, float $alpha, float $beta [, int $channel = Imagick::CHANNEL_DEFAULT] | bool', 'return_type': 'bool'},
\     'sketchImage': { 'signature': 'float $radius, float $sigma, float $angle | bool', 'return_type': 'bool'},
\     'smushImages': { 'signature': 'bool $stack, int $offset | Imagick', 'return_type': 'Imagick'},
\     'solarizeImage': { 'signature': 'int $threshold | bool', 'return_type': 'bool'},
\     'sparseColorImage': { 'signature': 'int $SPARSE_METHOD, array $arguments [, int $channel = Imagick::CHANNEL_DEFAULT] | bool', 'return_type': 'bool'},
\     'spliceImage': { 'signature': 'int $width, int $height, int $x, int $y | bool', 'return_type': 'bool'},
\     'spreadImage': { 'signature': 'float $radius | bool', 'return_type': 'bool'},
\     'statisticImage': { 'signature': 'int $type, int $width, int $height [, int $channel = Imagick::CHANNEL_DEFAULT] | bool', 'return_type': 'bool'},
\     'steganoImage': { 'signature': 'Imagick $watermark_wand, int $offset | Imagick', 'return_type': 'Imagick'},
\     'stereoImage': { 'signature': 'Imagick $offset_wand | bool', 'return_type': 'bool'},
\     'stripImage': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'subImageMatch': { 'signature': 'Imagick $Imagick [, array &$offset [, float &$similarity]] | Imagick', 'return_type': 'Imagick'},
\     'swirlImage': { 'signature': 'float $degrees | bool', 'return_type': 'bool'},
\     'textureImage': { 'signature': 'Imagick $texture_wand | Imagick', 'return_type': 'Imagick'},
\     'thresholdImage': { 'signature': 'float $threshold [, int $channel = Imagick::CHANNEL_DEFAULT] | bool', 'return_type': 'bool'},
\     'thumbnailImage': { 'signature': 'int $columns, int $rows [, bool $bestfit = FALSE [, bool $fill = FALSE [, bool $legacy = FALSE]]] | bool', 'return_type': 'bool'},
\     'tintImage': { 'signature': 'mixed $tint, mixed $opacity [, bool $legacy = FALSE] | bool', 'return_type': 'bool'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     'transformImage': { 'signature': 'string $crop, string $geometry | Imagick', 'return_type': 'Imagick'},
\     'transformImageColorspace': { 'signature': 'int $colorspace | bool', 'return_type': 'bool'},
\     'transparentPaintImage': { 'signature': 'mixed $target, float $alpha, float $fuzz, bool $invert | bool', 'return_type': 'bool'},
\     'transposeImage': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'transverseImage': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'trimImage': { 'signature': 'float $fuzz | bool', 'return_type': 'bool'},
\     'uniqueImageColors': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'unsharpMaskImage': { 'signature': 'float $radius, float $sigma, float $amount, float $threshold [, int $channel = Imagick::CHANNEL_DEFAULT] | bool', 'return_type': 'bool'},
\     'valid': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'vignetteImage': { 'signature': 'float $blackPoint, float $whitePoint, int $x, int $y | bool', 'return_type': 'bool'},
\     'waveImage': { 'signature': 'float $amplitude, float $length | bool', 'return_type': 'bool'},
\     'whiteThresholdImage': { 'signature': 'mixed $threshold | bool', 'return_type': 'bool'},
\     'writeImage': { 'signature': '[ string $filename = NULL] | bool', 'return_type': 'bool'},
\     'writeImageFile': { 'signature': 'resource $filehandle [, string $format] | bool', 'return_type': 'bool'},
\     'writeImages': { 'signature': 'string $filename, bool $adjoin | bool', 'return_type': 'bool'},
\     'writeImagesFile': { 'signature': 'resource $filehandle [, string $format] | bool', 'return_type': 'bool'},
\   },
\   'static_methods': {
\     'getQuantum': { 'signature': 'void | int', 'return_type': 'int'},
\     'getRegistry': { 'signature': 'string $key | string', 'return_type': 'string'},
\     'listRegistry': { 'signature': 'void | array', 'return_type': 'array'},
\     'setRegistry': { 'signature': 'string $key, string $value | bool', 'return_type': 'bool'},
\   },
\},
\'imagickdraw': {
\   'name': 'ImagickDraw',
\   'methods': {
\     'affine': { 'signature': 'array $affine | bool', 'return_type': 'bool'},
\     'annotation': { 'signature': 'float $x, float $y, string $text | bool', 'return_type': 'bool'},
\     'arc': { 'signature': 'float $sx, float $sy, float $ex, float $ey, float $sd, float $ed | bool', 'return_type': 'bool'},
\     'bezier': { 'signature': 'array $coordinates | bool', 'return_type': 'bool'},
\     'circle': { 'signature': 'float $ox, float $oy, float $px, float $py | bool', 'return_type': 'bool'},
\     'clear': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'clone': { 'signature': 'void | ImagickDraw', 'return_type': 'ImagickDraw'},
\     'color': { 'signature': 'float $x, float $y, int $paintMethod | bool', 'return_type': 'bool'},
\     'comment': { 'signature': 'string $comment | bool', 'return_type': 'bool'},
\     'composite': { 'signature': 'int $compose, float $x, float $y, float $width, float $height, Imagick $compositeWand | bool', 'return_type': 'bool'},
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'destroy': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'ellipse': { 'signature': 'float $ox, float $oy, float $rx, float $ry, float $start, float $end | bool', 'return_type': 'bool'},
\     'getClipPath': { 'signature': 'void | string', 'return_type': 'string'},
\     'getClipRule': { 'signature': 'void | int', 'return_type': 'int'},
\     'getClipUnits': { 'signature': 'void | int', 'return_type': 'int'},
\     'getFillColor': { 'signature': 'void | ImagickPixel', 'return_type': 'ImagickPixel'},
\     'getFillOpacity': { 'signature': 'void | float', 'return_type': 'float'},
\     'getFillRule': { 'signature': 'void | int', 'return_type': 'int'},
\     'getFont': { 'signature': 'void | string', 'return_type': 'string'},
\     'getFontFamily': { 'signature': 'void | string', 'return_type': 'string'},
\     'getFontSize': { 'signature': 'void | float', 'return_type': 'float'},
\     'getFontStretch': { 'signature': 'void | int', 'return_type': 'int'},
\     'getFontStyle': { 'signature': 'void | int', 'return_type': 'int'},
\     'getFontWeight': { 'signature': 'void | int', 'return_type': 'int'},
\     'getGravity': { 'signature': 'void | int', 'return_type': 'int'},
\     'getStrokeAntialias': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getStrokeColor': { 'signature': 'void | ImagickPixel', 'return_type': 'ImagickPixel'},
\     'getStrokeDashArray': { 'signature': 'void | array', 'return_type': 'array'},
\     'getStrokeDashOffset': { 'signature': 'void | float', 'return_type': 'float'},
\     'getStrokeLineCap': { 'signature': 'void | int', 'return_type': 'int'},
\     'getStrokeLineJoin': { 'signature': 'void | int', 'return_type': 'int'},
\     'getStrokeMiterLimit': { 'signature': 'void | int', 'return_type': 'int'},
\     'getStrokeOpacity': { 'signature': 'void | float', 'return_type': 'float'},
\     'getStrokeWidth': { 'signature': 'void | float', 'return_type': 'float'},
\     'getTextAlignment': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTextAntialias': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getTextDecoration': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTextEncoding': { 'signature': 'void | string', 'return_type': 'string'},
\     'getTextInterlineSpacing': { 'signature': 'void | float', 'return_type': 'float'},
\     'getTextInterwordSpacing': { 'signature': 'void | float', 'return_type': 'float'},
\     'getTextKerning': { 'signature': 'void | float', 'return_type': 'float'},
\     'getTextUnderColor': { 'signature': 'void | ImagickPixel', 'return_type': 'ImagickPixel'},
\     'getVectorGraphics': { 'signature': 'void | string', 'return_type': 'string'},
\     'line': { 'signature': 'float $sx, float $sy, float $ex, float $ey | bool', 'return_type': 'bool'},
\     'matte': { 'signature': 'float $x, float $y, int $paintMethod | bool', 'return_type': 'bool'},
\     'pathClose': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'pathCurveToAbsolute': { 'signature': 'float $x1, float $y1, float $x2, float $y2, float $x, float $y | bool', 'return_type': 'bool'},
\     'pathCurveToQuadraticBezierAbsolute': { 'signature': 'float $x1, float $y1, float $x, float $y | bool', 'return_type': 'bool'},
\     'pathCurveToQuadraticBezierRelative': { 'signature': 'float $x1, float $y1, float $x, float $y | bool', 'return_type': 'bool'},
\     'pathCurveToQuadraticBezierSmoothAbsolute': { 'signature': 'float $x, float $y | bool', 'return_type': 'bool'},
\     'pathCurveToQuadraticBezierSmoothRelative': { 'signature': 'float $x, float $y | bool', 'return_type': 'bool'},
\     'pathCurveToRelative': { 'signature': 'float $x1, float $y1, float $x2, float $y2, float $x, float $y | bool', 'return_type': 'bool'},
\     'pathCurveToSmoothAbsolute': { 'signature': 'float $x2, float $y2, float $x, float $y | bool', 'return_type': 'bool'},
\     'pathCurveToSmoothRelative': { 'signature': 'float $x2, float $y2, float $x, float $y | bool', 'return_type': 'bool'},
\     'pathEllipticArcAbsolute': { 'signature': 'float $rx, float $ry, float $x_axis_rotation, bool $large_arc_flag, bool $sweep_flag, float $x, float $y | bool', 'return_type': 'bool'},
\     'pathEllipticArcRelative': { 'signature': 'float $rx, float $ry, float $x_axis_rotation, bool $large_arc_flag, bool $sweep_flag, float $x, float $y | bool', 'return_type': 'bool'},
\     'pathFinish': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'pathLineToAbsolute': { 'signature': 'float $x, float $y | bool', 'return_type': 'bool'},
\     'pathLineToHorizontalAbsolute': { 'signature': 'float $x | bool', 'return_type': 'bool'},
\     'pathLineToHorizontalRelative': { 'signature': 'float $x | bool', 'return_type': 'bool'},
\     'pathLineToRelative': { 'signature': 'float $x, float $y | bool', 'return_type': 'bool'},
\     'pathLineToVerticalAbsolute': { 'signature': 'float $y | bool', 'return_type': 'bool'},
\     'pathLineToVerticalRelative': { 'signature': 'float $y | bool', 'return_type': 'bool'},
\     'pathMoveToAbsolute': { 'signature': 'float $x, float $y | bool', 'return_type': 'bool'},
\     'pathMoveToRelative': { 'signature': 'float $x, float $y | bool', 'return_type': 'bool'},
\     'pathStart': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'point': { 'signature': 'float $x, float $y | bool', 'return_type': 'bool'},
\     'polygon': { 'signature': 'array $coordinates | bool', 'return_type': 'bool'},
\     'polyline': { 'signature': 'array $coordinates | bool', 'return_type': 'bool'},
\     'pop': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'popClipPath': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'popDefs': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'popPattern': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'push': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'pushClipPath': { 'signature': 'string $clip_mask_id | bool', 'return_type': 'bool'},
\     'pushDefs': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'pushPattern': { 'signature': 'string $pattern_id, float $x, float $y, float $width, float $height | bool', 'return_type': 'bool'},
\     'rectangle': { 'signature': 'float $x1, float $y1, float $x2, float $y2 | bool', 'return_type': 'bool'},
\     'render': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'resetVectorGraphics': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'rotate': { 'signature': 'float $degrees | bool', 'return_type': 'bool'},
\     'roundRectangle': { 'signature': 'float $x1, float $y1, float $x2, float $y2, float $rx, float $ry | bool', 'return_type': 'bool'},
\     'scale': { 'signature': 'float $x, float $y | bool', 'return_type': 'bool'},
\     'setClipPath': { 'signature': 'string $clip_mask | bool', 'return_type': 'bool'},
\     'setClipRule': { 'signature': 'int $fill_rule | bool', 'return_type': 'bool'},
\     'setClipUnits': { 'signature': 'int $clip_units | bool', 'return_type': 'bool'},
\     'setFillAlpha': { 'signature': 'float $opacity | bool', 'return_type': 'bool'},
\     'setFillColor': { 'signature': 'ImagickPixel $fill_pixel | bool', 'return_type': 'bool'},
\     'setFillOpacity': { 'signature': 'float $fillOpacity | bool', 'return_type': 'bool'},
\     'setFillPatternURL': { 'signature': 'string $fill_url | bool', 'return_type': 'bool'},
\     'setFillRule': { 'signature': 'int $fill_rule | bool', 'return_type': 'bool'},
\     'setFont': { 'signature': 'string $font_name | bool', 'return_type': 'bool'},
\     'setFontFamily': { 'signature': 'string $font_family | bool', 'return_type': 'bool'},
\     'setFontSize': { 'signature': 'float $pointsize | bool', 'return_type': 'bool'},
\     'setFontStretch': { 'signature': 'int $fontStretch | bool', 'return_type': 'bool'},
\     'setFontStyle': { 'signature': 'int $style | bool', 'return_type': 'bool'},
\     'setFontWeight': { 'signature': 'int $font_weight | bool', 'return_type': 'bool'},
\     'setGravity': { 'signature': 'int $gravity | bool', 'return_type': 'bool'},
\     'setResolution': { 'signature': 'float $x_resolution, float $y_resolution | bool', 'return_type': 'bool'},
\     'setStrokeAlpha': { 'signature': 'float $opacity | bool', 'return_type': 'bool'},
\     'setStrokeAntialias': { 'signature': 'bool $stroke_antialias | bool', 'return_type': 'bool'},
\     'setStrokeColor': { 'signature': 'ImagickPixel $stroke_pixel | bool', 'return_type': 'bool'},
\     'setStrokeDashArray': { 'signature': 'array $dashArray | bool', 'return_type': 'bool'},
\     'setStrokeDashOffset': { 'signature': 'float $dash_offset | bool', 'return_type': 'bool'},
\     'setStrokeLineCap': { 'signature': 'int $linecap | bool', 'return_type': 'bool'},
\     'setStrokeLineJoin': { 'signature': 'int $linejoin | bool', 'return_type': 'bool'},
\     'setStrokeMiterLimit': { 'signature': 'int $miterlimit | bool', 'return_type': 'bool'},
\     'setStrokeOpacity': { 'signature': 'float $stroke_opacity | bool', 'return_type': 'bool'},
\     'setStrokePatternURL': { 'signature': 'string $stroke_url | bool', 'return_type': 'bool'},
\     'setStrokeWidth': { 'signature': 'float $stroke_width | bool', 'return_type': 'bool'},
\     'setTextAlignment': { 'signature': 'int $alignment | bool', 'return_type': 'bool'},
\     'setTextAntialias': { 'signature': 'bool $antiAlias | bool', 'return_type': 'bool'},
\     'setTextDecoration': { 'signature': 'int $decoration | bool', 'return_type': 'bool'},
\     'setTextEncoding': { 'signature': 'string $encoding | bool', 'return_type': 'bool'},
\     'setTextInterlineSpacing': { 'signature': 'float $spacing | bool', 'return_type': 'bool'},
\     'setTextInterwordSpacing': { 'signature': 'float $spacing | bool', 'return_type': 'bool'},
\     'setTextKerning': { 'signature': 'float $kerning | bool', 'return_type': 'bool'},
\     'setTextUnderColor': { 'signature': 'ImagickPixel $under_color | bool', 'return_type': 'bool'},
\     'setVectorGraphics': { 'signature': 'string $xml | bool', 'return_type': 'bool'},
\     'setViewbox': { 'signature': 'int $x1, int $y1, int $x2, int $y2 | bool', 'return_type': 'bool'},
\     'skewX': { 'signature': 'float $degrees | bool', 'return_type': 'bool'},
\     'skewY': { 'signature': 'float $degrees | bool', 'return_type': 'bool'},
\     'translate': { 'signature': 'float $x, float $y | bool', 'return_type': 'bool'},
\   },
\},
\'imagickkernel': {
\   'name': 'ImagickKernel',
\   'methods': {
\     'addKernel': { 'signature': 'ImagickKernel $ImagickKernel | void', 'return_type': 'void'},
\     'addUnityKernel': { 'signature': 'float $scale | void', 'return_type': 'void'},
\     'getMatrix': { 'signature': 'void | array', 'return_type': 'array'},
\     'scale': { 'signature': 'float $scale [, int $normalizeFlag] | void', 'return_type': 'void'},
\     'separate': { 'signature': 'void | array', 'return_type': 'array'},
\   },
\   'static_methods': {
\     'fromBuiltin': { 'signature': 'int $kernelType, string $kernelString | ImagickKernel', 'return_type': 'ImagickKernel'},
\     'fromMatrix': { 'signature': 'array $matrix [, array $origin] | ImagickKernel', 'return_type': 'ImagickKernel'},
\   },
\},
\'imagickpixel': {
\   'name': 'ImagickPixel',
\   'methods': {
\     'clear': { 'signature': 'void | bool', 'return_type': 'bool'},
\     '__construct': { 'signature': '[ string $color]', 'return_type': ''},
\     'destroy': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getColor': { 'signature': '[ int $normalized = 0] | array', 'return_type': 'array'},
\     'getColorAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     'getColorCount': { 'signature': 'void | int', 'return_type': 'int'},
\     'getColorQuantum': { 'signature': 'void | array', 'return_type': 'array'},
\     'getColorValue': { 'signature': 'int $color | float', 'return_type': 'float'},
\     'getColorValueQuantum': { 'signature': 'int $color | number', 'return_type': 'number'},
\     'getHSL': { 'signature': 'void | array', 'return_type': 'array'},
\     'getIndex': { 'signature': 'void | int', 'return_type': 'int'},
\     'isPixelSimilar': { 'signature': 'ImagickPixel $color, float $fuzz | bool', 'return_type': 'bool'},
\     'isPixelSimilarQuantum': { 'signature': 'string $color [, string $fuzz] | bool', 'return_type': 'bool'},
\     'isSimilar': { 'signature': 'ImagickPixel $color, float $fuzz | bool', 'return_type': 'bool'},
\     'setColor': { 'signature': 'string $color | bool', 'return_type': 'bool'},
\     'setcolorcount': { 'signature': 'int $colorCount | bool', 'return_type': 'bool'},
\     'setColorValue': { 'signature': 'int $color, float $value | bool', 'return_type': 'bool'},
\     'setColorValueQuantum': { 'signature': 'int $color, number $value | bool', 'return_type': 'bool'},
\     'setHSL': { 'signature': 'float $hue, float $saturation, float $luminosity | bool', 'return_type': 'bool'},
\     'setIndex': { 'signature': 'int $index | bool', 'return_type': 'bool'},
\   },
\},
\'imagickpixeliterator': {
\   'name': 'ImagickPixelIterator',
\   'methods': {
\     'clear': { 'signature': 'void | bool', 'return_type': 'bool'},
\     '__construct': { 'signature': 'Imagick $wand', 'return_type': ''},
\     'destroy': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getCurrentIteratorRow': { 'signature': 'void | array', 'return_type': 'array'},
\     'getIteratorRow': { 'signature': 'void | int', 'return_type': 'int'},
\     'getNextIteratorRow': { 'signature': 'void | array', 'return_type': 'array'},
\     'getPreviousIteratorRow': { 'signature': 'void | array', 'return_type': 'array'},
\     'newPixelIterator': { 'signature': 'Imagick $wand | bool', 'return_type': 'bool'},
\     'newPixelRegionIterator': { 'signature': 'Imagick $wand, int $x, int $y, int $columns, int $rows | bool', 'return_type': 'bool'},
\     'resetIterator': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'setIteratorFirstRow': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'setIteratorLastRow': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'setIteratorRow': { 'signature': 'int $row | bool', 'return_type': 'bool'},
\     'syncIterator': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['json'] = {
\'jsonexception': {
\   'name': 'JsonException',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['judy'] = {
\'judy': {
\   'name': 'Judy',
\   'constants': {
\     'BITSET': '1',
\     'INT_TO_INT': '2',
\     'INT_TO_MIXED': '3',
\     'STRING_TO_INT': '4',
\     'STRING_TO_MIXED': '5',
\   },
\   'methods': {
\     'byCount': { 'signature': 'int $nth_index | int', 'return_type': 'int'},
\     '__construct': { 'signature': 'int $judy_type', 'return_type': ''},
\     'count': { 'signature': '[ int $index_start = 0 [, int $index_end = -1]] | int', 'return_type': 'int'},
\     '__destruct': { 'signature': 'void | void', 'return_type': 'void'},
\     'first': { 'signature': '[ mixed $index] | mixed', 'return_type': 'mixed'},
\     'firstEmpty': { 'signature': '[ mixed $index = 0] | int', 'return_type': 'int'},
\     'free': { 'signature': 'void | int', 'return_type': 'int'},
\     'getType': { 'signature': 'void | int', 'return_type': 'int'},
\     'last': { 'signature': '[ string $index] | void', 'return_type': 'void'},
\     'lastEmpty': { 'signature': '[ int $index = -1] | int', 'return_type': 'int'},
\     'memoryUsage': { 'signature': 'void | int', 'return_type': 'int'},
\     'next': { 'signature': 'mixed $index | mixed', 'return_type': 'mixed'},
\     'nextEmpty': { 'signature': 'int $index | int', 'return_type': 'int'},
\     'offsetExists': { 'signature': 'mixed $offset | bool', 'return_type': 'bool'},
\     'offsetGet': { 'signature': 'mixed $offset | mixed', 'return_type': 'mixed'},
\     'offsetSet': { 'signature': 'mixed $offset, mixed $value | bool', 'return_type': 'bool'},
\     'offsetUnset': { 'signature': 'mixed $offset | bool', 'return_type': 'bool'},
\     'prev': { 'signature': 'mixed $index | mixed', 'return_type': 'mixed'},
\     'prevEmpty': { 'signature': 'mixed $index | int', 'return_type': 'int'},
\     'size': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['ktaglib'] = {
\'ktaglib_id3v2_frame': {
\   'name': 'KTaglib_ID3v2_Frame',
\   'methods': {
\     'getDescription': { 'signature': 'void | string', 'return_type': 'string'},
\     'getMimeType': { 'signature': 'string $type | string', 'return_type': 'string'},
\     'getType': { 'signature': 'void | int', 'return_type': 'int'},
\     'savePicture': { 'signature': 'string $filename | bool', 'return_type': 'bool'},
\     'setPicture': { 'signature': 'string $filename | void', 'return_type': 'void'},
\     'setType': { 'signature': 'int $type | void', 'return_type': 'void'},
\     'getSize': { 'signature': 'void | int', 'return_type': 'int'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     'getAlbum': { 'signature': 'void | string', 'return_type': 'string'},
\     'getArtist': { 'signature': 'void | string', 'return_type': 'string'},
\     'getComment': { 'signature': 'void | string', 'return_type': 'string'},
\     'getGenre': { 'signature': 'void | string', 'return_type': 'string'},
\     'getTitle': { 'signature': 'void | string', 'return_type': 'string'},
\     'getTrack': { 'signature': 'void | int', 'return_type': 'int'},
\     'getYear': { 'signature': 'void | int', 'return_type': 'int'},
\     'isEmpty': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'ktaglib_tag': {
\   'name': 'KTaglib_Tag',
\   'methods': {
\     'getSize': { 'signature': 'void | int', 'return_type': 'int'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     'getAlbum': { 'signature': 'void | string', 'return_type': 'string'},
\     'getArtist': { 'signature': 'void | string', 'return_type': 'string'},
\     'getComment': { 'signature': 'void | string', 'return_type': 'string'},
\     'getGenre': { 'signature': 'void | string', 'return_type': 'string'},
\     'getTitle': { 'signature': 'void | string', 'return_type': 'string'},
\     'getTrack': { 'signature': 'void | int', 'return_type': 'int'},
\     'getYear': { 'signature': 'void | int', 'return_type': 'int'},
\     'isEmpty': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'ktaglib_mpeg_audioproperties': {
\   'name': 'KTaglib_MPEG_AudioProperties',
\   'methods': {
\     'getBitrate': { 'signature': 'void | int', 'return_type': 'int'},
\     'getChannels': { 'signature': 'void | int', 'return_type': 'int'},
\     'getLayer': { 'signature': 'void | int', 'return_type': 'int'},
\     'getLength': { 'signature': 'void | int', 'return_type': 'int'},
\     'getSampleBitrate': { 'signature': 'void | int', 'return_type': 'int'},
\     'getVersion': { 'signature': 'void | int', 'return_type': 'int'},
\     'isCopyrighted': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isOriginal': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isProtectionEnabled': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'ktaglib_mpeg_file': {
\   'name': 'KTaglib_MPEG_File',
\   'methods': {
\     'getAudioProperties': { 'signature': 'void | KTaglib_MPEG_File', 'return_type': 'KTaglib_MPEG_File'},
\     'getID3v1Tag': { 'signature': '[ bool $create = FALSE] | KTaglib_ID3v1_Tag', 'return_type': 'KTaglib_ID3v1_Tag'},
\     'getID3v2Tag': { 'signature': '[ bool $create = FALSE] | KTaglib_ID3v2_Tag', 'return_type': 'KTaglib_ID3v2_Tag'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['lapack'] = {
\'lapack': {
\   'name': 'Lapack',
\   'static_methods': {
\     'eigenValues': { 'signature': 'array $a [, array $left [, array $right]] | array', 'return_type': 'array'},
\     'identity': { 'signature': 'int $n | array', 'return_type': 'array'},
\     'leastSquaresByFactorisation': { 'signature': 'array $a, array $b | array', 'return_type': 'array'},
\     'leastSquaresBySVD': { 'signature': 'array $a, array $b | array', 'return_type': 'array'},
\     'pseudoInverse': { 'signature': 'array $a | array', 'return_type': 'array'},
\     'singularValues': { 'signature': 'array $a | array', 'return_type': 'array'},
\     'solveLinearEquation': { 'signature': 'array $a, array $b | array', 'return_type': 'array'},
\   },
\},
\'lapackexception': {
\   'name': 'lapackexception',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['libxml'] = {
\'libxmlerror': {
\   'name': 'libXMLError',
\   'properties': {
\     'level': { 'initializer': '', 'type': 'int'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'column': { 'initializer': '', 'type': 'int'},
\     'message': { 'initializer': '', 'type': 'string'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['lua'] = {
\'lua': {
\   'name': 'Lua',
\   'constants': {
\     'LUA_VERSION': 'Lua 5.1.4',
\   },
\   'methods': {
\     'assign': { 'signature': 'string $name, string $value | mixed', 'return_type': 'mixed'},
\     'call': { 'signature': 'callable $lua_func [, array $args [, int $use_self = 0]] | mixed', 'return_type': 'mixed'},
\     '__call': { 'signature': 'callable $lua_func [, array $args [, int $use_self = 0]] | mixed', 'return_type': 'mixed'},
\     '__construct': { 'signature': '[ string $lua_script_file = NULL]', 'return_type': ''},
\     'eval': { 'signature': 'string $statements | mixed', 'return_type': 'mixed'},
\     'getVersion': { 'signature': 'void | string', 'return_type': 'string'},
\     'include': { 'signature': 'string $file | mixed', 'return_type': 'mixed'},
\     'registerCallback': { 'signature': 'string $name, callable $function | mixed', 'return_type': 'mixed'},
\   },
\},
\'luaclosure': {
\   'name': 'LuaClosure',
\   'methods': {
\     '__invoke': { 'signature': '[ mixed $...] | void', 'return_type': 'void'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['luasandbox'] = {
\'luasandbox': {
\   'name': 'LuaSandbox',
\   'constants': {
\     'SAMPLES': '0',
\     'SECONDS': '1',
\     'PERCENT': '2',
\   },
\   'methods': {
\     'callFunction': { 'signature': 'string $name [, mixed $...] | array|bool', 'return_type': 'array|bool'},
\     'disableProfiler': { 'signature': 'void | void', 'return_type': 'void'},
\     'enableProfiler': { 'signature': '[ float $period = 0.02] | bool', 'return_type': 'bool'},
\     'getCPUUsage': { 'signature': 'void | float', 'return_type': 'float'},
\     'getMemoryUsage': { 'signature': 'void | int', 'return_type': 'int'},
\     'getPeakMemoryUsage': { 'signature': 'void | int', 'return_type': 'int'},
\     'getProfilerFunctionReport': { 'signature': '[ int $units = LuaSandbox::SECONDS] | array', 'return_type': 'array'},
\     'loadBinary': { 'signature': 'string $code [, string $chunkName = ''''] | LuaSandboxFunction', 'return_type': 'LuaSandboxFunction'},
\     'loadString': { 'signature': 'string $code [, string $chunkName = ''''] | LuaSandboxFunction', 'return_type': 'LuaSandboxFunction'},
\     'pauseUsageTimer': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'registerLibrary': { 'signature': 'string $libname, array $functions | void', 'return_type': 'void'},
\     'setCPULimit': { 'signature': 'float|bool $limit | void', 'return_type': 'void'},
\     'setMemoryLimit': { 'signature': 'int $limit | void', 'return_type': 'void'},
\     'unpauseUsageTimer': { 'signature': 'void | void', 'return_type': 'void'},
\     'wrapPhpFunction': { 'signature': 'callable $function | LuaSandboxFunction', 'return_type': 'LuaSandboxFunction'},
\   },
\   'static_methods': {
\     'getVersionInfo': { 'signature': 'void | array', 'return_type': 'array'},
\   },
\},
\'luasandboxerror': {
\   'name': 'LuaSandboxError',
\   'constants': {
\     'RUN': '2',
\     'SYNTAX': '3',
\     'MEM': '4',
\     'ERR': '5',
\   },
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'luasandboxerrorerror': {
\   'name': 'LuaSandboxErrorError',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'luasandboxfatalerror': {
\   'name': 'LuaSandboxFatalError',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'luasandboxfunction': {
\   'name': 'LuaSandboxFunction',
\   'methods': {
\     'call': { 'signature': '[ string $...] | array|bool', 'return_type': 'array|bool'},
\     'dump': { 'signature': 'void | string', 'return_type': 'string'},
\   },
\},
\'luasandboxmemoryerror': {
\   'name': 'LuaSandboxMemoryError',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'luasandboxruntimeerror': {
\   'name': 'LuaSandboxRuntimeError',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'luasandboxsyntaxerror': {
\   'name': 'LuaSandboxSyntaxError',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'luasandboxtimeouterror': {
\   'name': 'LuaSandboxTimeoutError',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['memcache'] = {
\'memcache': {
\   'name': 'Memcache',
\   'methods': {
\     'add': { 'signature': 'string $key, mixed $var [, int $flag [, int $expire]] | bool', 'return_type': 'bool'},
\     'addServer': { 'signature': 'string $host [, int $port = 11211 [, bool $persistent [, int $weight [, int $timeout [, int $retry_interval [, bool $status [, callable $failure_callback [, int $timeoutms]]]]]]]] | bool', 'return_type': 'bool'},
\     'close': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'connect': { 'signature': 'string $host [, int $port [, int $timeout]] | bool', 'return_type': 'bool'},
\     'decrement': { 'signature': 'string $key [, int $value = 1] | int', 'return_type': 'int'},
\     'delete': { 'signature': 'string $key [, int $timeout = 0] | bool', 'return_type': 'bool'},
\     'flush': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'get': { 'signature': 'string $key [, int &$flags] | string', 'return_type': 'string'},
\     'getExtendedStats': { 'signature': '[ string $type [, int $slabid [, int $limit = 100]]] | array', 'return_type': 'array'},
\     'getServerStatus': { 'signature': 'string $host [, int $port = 11211] | int', 'return_type': 'int'},
\     'getStats': { 'signature': '[ string $type [, int $slabid [, int $limit = 100]]] | array', 'return_type': 'array'},
\     'getVersion': { 'signature': 'void | string', 'return_type': 'string'},
\     'increment': { 'signature': 'string $key [, int $value = 1] | int', 'return_type': 'int'},
\     'pconnect': { 'signature': 'string $host [, int $port [, int $timeout]] | mixed', 'return_type': 'mixed'},
\     'replace': { 'signature': 'string $key, mixed $var [, int $flag [, int $expire]] | bool', 'return_type': 'bool'},
\     'set': { 'signature': 'string $key, mixed $var [, int $flag [, int $expire]] | bool', 'return_type': 'bool'},
\     'setCompressThreshold': { 'signature': 'int $threshold [, float $min_savings] | bool', 'return_type': 'bool'},
\     'setServerParams': { 'signature': 'string $host [, int $port = 11211 [, int $timeout [, int $retry_interval = FALSE [, bool $status [, callable $failure_callback]]]]] | bool', 'return_type': 'bool'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['memcached'] = {
\'memcached': {
\   'name': 'Memcached',
\   'methods': {
\     '__construct': { 'signature': '[ string $persistent_id]', 'return_type': ''},
\     'add': { 'signature': 'string $key, mixed $value [, int $expiration] | bool', 'return_type': 'bool'},
\     'addByKey': { 'signature': 'string $server_key, string $key, mixed $value [, int $expiration] | bool', 'return_type': 'bool'},
\     'addServer': { 'signature': 'string $host, int $port [, int $weight = 0] | bool', 'return_type': 'bool'},
\     'addServers': { 'signature': 'array $servers | bool', 'return_type': 'bool'},
\     'append': { 'signature': 'string $key, string $value | bool', 'return_type': 'bool'},
\     'appendByKey': { 'signature': 'string $server_key, string $key, string $value | bool', 'return_type': 'bool'},
\     'cas': { 'signature': 'float $cas_token, string $key, mixed $value [, int $expiration] | bool', 'return_type': 'bool'},
\     'casByKey': { 'signature': 'float $cas_token, string $server_key, string $key, mixed $value [, int $expiration] | bool', 'return_type': 'bool'},
\     'decrement': { 'signature': 'string $key [, int $offset = 1 [, int $initial_value = 0 [, int $expiry = 0]]] | int', 'return_type': 'int'},
\     'decrementByKey': { 'signature': 'string $server_key, string $key [, int $offset = 1 [, int $initial_value = 0 [, int $expiry = 0]]] | int', 'return_type': 'int'},
\     'delete': { 'signature': 'string $key [, int $time = 0] | bool', 'return_type': 'bool'},
\     'deleteByKey': { 'signature': 'string $server_key, string $key [, int $time = 0] | bool', 'return_type': 'bool'},
\     'deleteMulti': { 'signature': 'array $keys [, int $time = 0] | array', 'return_type': 'array'},
\     'deleteMultiByKey': { 'signature': 'string $server_key, array $keys [, int $time = 0] | bool', 'return_type': 'bool'},
\     'fetch': { 'signature': 'void | array', 'return_type': 'array'},
\     'fetchAll': { 'signature': 'void | array', 'return_type': 'array'},
\     'flush': { 'signature': '[ int $delay = 0] | bool', 'return_type': 'bool'},
\     'get': { 'signature': 'string $key [, callable $cache_cb [, int $$flags]] | mixed', 'return_type': 'mixed'},
\     'getAllKeys': { 'signature': 'void | array', 'return_type': 'array'},
\     'getByKey': { 'signature': 'string $server_key, string $key [, callable $cache_cb [, int $flags]] | mixed', 'return_type': 'mixed'},
\     'getDelayed': { 'signature': 'array $keys [, bool $with_cas [, callable $value_cb]] | bool', 'return_type': 'bool'},
\     'getDelayedByKey': { 'signature': 'string $server_key, array $keys [, bool $with_cas [, callable $value_cb]] | bool', 'return_type': 'bool'},
\     'getMulti': { 'signature': 'array $keys [, int $flags] | mixed', 'return_type': 'mixed'},
\     'getMultiByKey': { 'signature': 'string $server_key, array $keys [, int $flags] | array', 'return_type': 'array'},
\     'getOption': { 'signature': 'int $option | mixed', 'return_type': 'mixed'},
\     'getResultCode': { 'signature': 'void | int', 'return_type': 'int'},
\     'getResultMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getServerByKey': { 'signature': 'string $server_key | array', 'return_type': 'array'},
\     'getServerList': { 'signature': 'void | array', 'return_type': 'array'},
\     'getStats': { 'signature': 'void | array', 'return_type': 'array'},
\     'getVersion': { 'signature': 'void | array', 'return_type': 'array'},
\     'increment': { 'signature': 'string $key [, int $offset = 1 [, int $initial_value = 0 [, int $expiry = 0]]] | int', 'return_type': 'int'},
\     'incrementByKey': { 'signature': 'string $server_key, string $key [, int $offset = 1 [, int $initial_value = 0 [, int $expiry = 0]]] | int', 'return_type': 'int'},
\     'isPersistent': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isPristine': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'prepend': { 'signature': 'string $key, string $value | bool', 'return_type': 'bool'},
\     'prependByKey': { 'signature': 'string $server_key, string $key, string $value | bool', 'return_type': 'bool'},
\     'quit': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'replace': { 'signature': 'string $key, mixed $value [, int $expiration] | bool', 'return_type': 'bool'},
\     'replaceByKey': { 'signature': 'string $server_key, string $key, mixed $value [, int $expiration] | bool', 'return_type': 'bool'},
\     'resetServerList': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'set': { 'signature': 'string $key, mixed $value [, int $expiration] | bool', 'return_type': 'bool'},
\     'setByKey': { 'signature': 'string $server_key, string $key, mixed $value [, int $expiration] | bool', 'return_type': 'bool'},
\     'setMulti': { 'signature': 'array $items [, int $expiration] | bool', 'return_type': 'bool'},
\     'setMultiByKey': { 'signature': 'string $server_key, array $items [, int $expiration] | bool', 'return_type': 'bool'},
\     'setOption': { 'signature': 'int $option, mixed $value | bool', 'return_type': 'bool'},
\     'setOptions': { 'signature': 'array $options | bool', 'return_type': 'bool'},
\     'setSaslAuthData': { 'signature': 'string $username, string $password | void', 'return_type': 'void'},
\     'touch': { 'signature': 'string $key, int $expiration | bool', 'return_type': 'bool'},
\     'touchByKey': { 'signature': 'string $server_key, string $key, int $expiration | bool', 'return_type': 'bool'},
\   },
\},
\'memcachedexception': {
\   'name': 'MemcachedException',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['mongo'] = {
\'mongo': {
\   'name': 'Mongo',
\   'methods': {
\     'connectUtil': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getSlave': { 'signature': 'void | string', 'return_type': 'string'},
\     'getSlaveOkay': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'poolDebug': { 'signature': 'void | array', 'return_type': 'array'},
\     'setSlaveOkay': { 'signature': '[ bool $ok = TRUE] | bool', 'return_type': 'bool'},
\     'switchSlave': { 'signature': 'void | string', 'return_type': 'string'},
\     'close': { 'signature': '[ boolean|string $connection] | bool', 'return_type': 'bool'},
\     'connect': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'dropDB': { 'signature': 'mixed $db | array', 'return_type': 'array'},
\     '__get': { 'signature': 'string $dbname | MongoDB', 'return_type': 'MongoDB'},
\     'getHosts': { 'signature': 'void | array', 'return_type': 'array'},
\     'getReadPreference': { 'signature': 'void | array', 'return_type': 'array'},
\     'getWriteConcern': { 'signature': 'void | array', 'return_type': 'array'},
\     'killCursor': { 'signature': 'string $server_hash, int|MongoInt64 $id | bool', 'return_type': 'bool'},
\     'listDBs': { 'signature': 'void | array', 'return_type': 'array'},
\     'selectCollection': { 'signature': 'string $db, string $collection | MongoCollection', 'return_type': 'MongoCollection'},
\     'selectDB': { 'signature': 'string $name | MongoDB', 'return_type': 'MongoDB'},
\     'setReadPreference': { 'signature': 'string $read_preference [, array $tags] | bool', 'return_type': 'bool'},
\     'setWriteConcern': { 'signature': 'mixed $w [, int $wtimeout] | bool', 'return_type': 'bool'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\   },
\   'static_methods': {
\     'getPoolSize': { 'signature': 'void | int', 'return_type': 'int'},
\     'setPoolSize': { 'signature': 'int $size | bool', 'return_type': 'bool'},
\     'getConnections': { 'signature': 'void | array', 'return_type': 'array'},
\   },
\},
\'mongobindata': {
\   'name': 'MongoBinData',
\   'constants': {
\     'GENERIC': '0',
\     'FUNC': '1',
\     'BYTE_ARRAY': '2',
\     'UUID': '3',
\     'UUID_RFC4122': '4',
\     'MD5': '5',
\     'CUSTOM': '128',
\   },
\   'properties': {
\     'bin': { 'initializer': '', 'type': 'string'},
\     'type': { 'initializer': '2', 'type': 'int'},
\   },
\   'methods': {
\     '__construct': { 'signature': 'string $data [, int $type = 0]', 'return_type': ''},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\   },
\},
\'mongoclient': {
\   'name': 'MongoClient',
\   'constants': {
\     'VERSION': '',
\     'DEFAULT_HOST': '"localhost"',
\     'DEFAULT_PORT': '27017',
\     'RP_PRIMARY': '"primary"',
\     'RP_PRIMARY_PREFERRED': '"primaryPreferred"',
\     'RP_SECONDARY': '"secondary"',
\     'RP_SECONDARY_PREFERRED': '"secondaryPreferred"',
\     'RP_NEAREST': '"nearest"',
\   },
\   'properties': {
\     'connected': { 'initializer': 'FALSE', 'type': 'boolean'},
\     'status': { 'initializer': 'NULL', 'type': 'string'},
\     'server': { 'initializer': 'NULL', 'type': 'string'},
\     'persistent': { 'initializer': 'NULL', 'type': 'boolean'},
\   },
\   'methods': {
\     '__construct': { 'signature': '[ string $server = "mongodb://localhost:27017" [, array $options = array("connect" => TRUE) [, array $driver_options]]]', 'return_type': ''},
\     'close': { 'signature': '[ boolean|string $connection] | bool', 'return_type': 'bool'},
\     'connect': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'dropDB': { 'signature': 'mixed $db | array', 'return_type': 'array'},
\     '__get': { 'signature': 'string $dbname | MongoDB', 'return_type': 'MongoDB'},
\     'getHosts': { 'signature': 'void | array', 'return_type': 'array'},
\     'getReadPreference': { 'signature': 'void | array', 'return_type': 'array'},
\     'getWriteConcern': { 'signature': 'void | array', 'return_type': 'array'},
\     'killCursor': { 'signature': 'string $server_hash, int|MongoInt64 $id | bool', 'return_type': 'bool'},
\     'listDBs': { 'signature': 'void | array', 'return_type': 'array'},
\     'selectCollection': { 'signature': 'string $db, string $collection | MongoCollection', 'return_type': 'MongoCollection'},
\     'selectDB': { 'signature': 'string $name | MongoDB', 'return_type': 'MongoDB'},
\     'setReadPreference': { 'signature': 'string $read_preference [, array $tags] | bool', 'return_type': 'bool'},
\     'setWriteConcern': { 'signature': 'mixed $w [, int $wtimeout] | bool', 'return_type': 'bool'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\   },
\   'static_methods': {
\     'getConnections': { 'signature': 'void | array', 'return_type': 'array'},
\   },
\},
\'mongocode': {
\   'name': 'MongoCode',
\   'methods': {
\     '__construct': { 'signature': 'string $code [, array $scope = array()]', 'return_type': ''},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\   },
\},
\'mongocollection': {
\   'name': 'MongoCollection',
\   'constants': {
\     'ASCENDING': '1',
\     'DESCENDING': '-1',
\   },
\   'properties': {
\     'db': { 'initializer': 'NULL', 'type': 'MongoDB'},
\     'w': { 'initializer': '', 'type': 'integer'},
\     'wtimeout': { 'initializer': '', 'type': 'integer'},
\   },
\   'methods': {
\     'aggregate': { 'signature': 'array $pipeline [, array $options] | array', 'return_type': 'array'},
\     'aggregateCursor': { 'signature': 'array $command [, array $options] | MongoCommandCursor', 'return_type': 'MongoCommandCursor'},
\     'batchInsert': { 'signature': 'array $a [, array $options = array()] | mixed', 'return_type': 'mixed'},
\     '__construct': { 'signature': 'MongoDB $db, string $name', 'return_type': ''},
\     'count': { 'signature': '[ array $query = array() [, array $options = array()]] | int', 'return_type': 'int'},
\     'createDBRef': { 'signature': 'mixed $document_or_id | array', 'return_type': 'array'},
\     'createIndex': { 'signature': 'array $keys [, array $options = array()] | bool', 'return_type': 'bool'},
\     'deleteIndex': { 'signature': 'string|array $keys | array', 'return_type': 'array'},
\     'deleteIndexes': { 'signature': 'void | array', 'return_type': 'array'},
\     'distinct': { 'signature': 'string $key [, array $query] | array', 'return_type': 'array'},
\     'drop': { 'signature': 'void | array', 'return_type': 'array'},
\     'ensureIndex': { 'signature': 'string|array $key|keys [, array $options = array()] | bool', 'return_type': 'bool'},
\     'find': { 'signature': '[ array $query = array() [, array $fields = array()]] | MongoCursor', 'return_type': 'MongoCursor'},
\     'findAndModify': { 'signature': 'array $query [, array $update [, array $fields [, array $options]]] | array', 'return_type': 'array'},
\     'findOne': { 'signature': '[ array $query = array() [, array $fields = array() [, array $options = array()]]] | array', 'return_type': 'array'},
\     '__get': { 'signature': 'string $name | MongoCollection', 'return_type': 'MongoCollection'},
\     'getDBRef': { 'signature': 'array $ref | array', 'return_type': 'array'},
\     'getIndexInfo': { 'signature': 'void | array', 'return_type': 'array'},
\     'getName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getReadPreference': { 'signature': 'void | array', 'return_type': 'array'},
\     'getSlaveOkay': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getWriteConcern': { 'signature': 'void | array', 'return_type': 'array'},
\     'group': { 'signature': 'mixed $keys, array $initial, MongoCode $reduce [, array $options = array()] | array', 'return_type': 'array'},
\     'insert': { 'signature': 'array|object $document [, array $options = array()] | bool|array', 'return_type': 'bool|array'},
\     'parallelCollectionScan': { 'signature': 'int $num_cursors | array[MongoCommandCursor]', 'return_type': 'array[MongoCommandCursor]'},
\     'remove': { 'signature': '[ array $criteria = array() [, array $options = array()]] | bool|array', 'return_type': 'bool|array'},
\     'save': { 'signature': 'array|object $document [, array $options = array()] | mixed', 'return_type': 'mixed'},
\     'setReadPreference': { 'signature': 'string $read_preference [, array $tags] | bool', 'return_type': 'bool'},
\     'setSlaveOkay': { 'signature': '[ bool $ok = TRUE] | bool', 'return_type': 'bool'},
\     'setWriteConcern': { 'signature': 'mixed $w [, int $wtimeout] | bool', 'return_type': 'bool'},
\     'toIndexString': { 'signature': 'mixed $keys | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     'update': { 'signature': 'array $criteria, array $new_object [, array $options = array()] | bool|array', 'return_type': 'bool|array'},
\     'validate': { 'signature': '[ bool $scan_data = FALSE] | array', 'return_type': 'array'},
\   },
\},
\'mongocommandcursor': {
\   'name': 'MongoCommandCursor',
\   'methods': {
\     'batchSize': { 'signature': 'int $batchSize | MongoCommandCursor', 'return_type': 'MongoCommandCursor'},
\     '__construct': { 'signature': 'MongoClient $connection, string $ns [, array $command = array()]', 'return_type': ''},
\     'current': { 'signature': 'void | array', 'return_type': 'array'},
\     'dead': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getReadPreference': { 'signature': 'void | array', 'return_type': 'array'},
\     'info': { 'signature': 'void | array', 'return_type': 'array'},
\     'key': { 'signature': 'void | int', 'return_type': 'int'},
\     'next': { 'signature': 'void | void', 'return_type': 'void'},
\     'rewind': { 'signature': 'void | array', 'return_type': 'array'},
\     'setReadPreference': { 'signature': 'string $read_preference [, array $tags] | MongoCommandCursor', 'return_type': 'MongoCommandCursor'},
\     'timeout': { 'signature': 'int $ms | MongoCommandCursor', 'return_type': 'MongoCommandCursor'},
\     'valid': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\   'static_methods': {
\     'createFromDocument': { 'signature': 'MongoClient $connection, string $hash, array $document | MongoCommandCursor', 'return_type': 'MongoCommandCursor'},
\   },
\},
\'mongoconnectionexception': {
\   'name': 'MongoConnectionException',
\},
\'mongocursor': {
\   'name': 'MongoCursor',
\   'static_properties': {
\     '$slaveOkay': { 'initializer': 'FALSE', 'type': 'boolean'},
\     '$timeout': { 'initializer': '30000', 'type': 'integer'},
\   },
\   'methods': {
\     'addOption': { 'signature': 'string $key, mixed $value | MongoCursor', 'return_type': 'MongoCursor'},
\     'awaitData': { 'signature': '[ bool $wait = TRUE] | MongoCursor', 'return_type': 'MongoCursor'},
\     'batchSize': { 'signature': 'int $batchSize | MongoCursor', 'return_type': 'MongoCursor'},
\     '__construct': { 'signature': 'MongoClient $connection, string $ns [, array $query = array() [, array $fields = array()]]', 'return_type': ''},
\     'count': { 'signature': '[ bool $foundOnly = FALSE] | int', 'return_type': 'int'},
\     'current': { 'signature': 'void | array', 'return_type': 'array'},
\     'dead': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'doQuery': { 'signature': 'void | void', 'return_type': 'void'},
\     'explain': { 'signature': 'void | array', 'return_type': 'array'},
\     'fields': { 'signature': 'array $f | MongoCursor', 'return_type': 'MongoCursor'},
\     'getNext': { 'signature': 'void | array', 'return_type': 'array'},
\     'getReadPreference': { 'signature': 'void | array', 'return_type': 'array'},
\     'hasNext': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'hint': { 'signature': 'mixed $index | MongoCursor', 'return_type': 'MongoCursor'},
\     'immortal': { 'signature': '[ bool $liveForever = TRUE] | MongoCursor', 'return_type': 'MongoCursor'},
\     'info': { 'signature': 'void | array', 'return_type': 'array'},
\     'key': { 'signature': 'void | string|int', 'return_type': 'string|int'},
\     'limit': { 'signature': 'int $num | MongoCursor', 'return_type': 'MongoCursor'},
\     'maxTimeMS': { 'signature': 'int $ms | MongoCursor', 'return_type': 'MongoCursor'},
\     'next': { 'signature': 'void | array', 'return_type': 'array'},
\     'partial': { 'signature': '[ bool $okay = TRUE] | MongoCursor', 'return_type': 'MongoCursor'},
\     'reset': { 'signature': 'void | void', 'return_type': 'void'},
\     'rewind': { 'signature': 'void | void', 'return_type': 'void'},
\     'setFlag': { 'signature': 'int $flag [, bool $set = TRUE] | MongoCursor', 'return_type': 'MongoCursor'},
\     'setReadPreference': { 'signature': 'string $read_preference [, array $tags] | MongoCursor', 'return_type': 'MongoCursor'},
\     'skip': { 'signature': 'int $num | MongoCursor', 'return_type': 'MongoCursor'},
\     'slaveOkay': { 'signature': '[ bool $okay = TRUE] | MongoCursor', 'return_type': 'MongoCursor'},
\     'snapshot': { 'signature': 'void | MongoCursor', 'return_type': 'MongoCursor'},
\     'sort': { 'signature': 'array $fields | MongoCursor', 'return_type': 'MongoCursor'},
\     'tailable': { 'signature': '[ bool $tail = TRUE] | MongoCursor', 'return_type': 'MongoCursor'},
\     'timeout': { 'signature': 'int $ms | MongoCursor', 'return_type': 'MongoCursor'},
\     'valid': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'mongocursorexception': {
\   'name': 'MongoCursorException',
\},
\'mongocursortimeoutexception': {
\   'name': 'MongoCursorTimeoutException',
\},
\'mongodate': {
\   'name': 'MongoDate',
\   'properties': {
\     'sec': { 'initializer': '', 'type': 'int'},
\     'usec': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     '__construct': { 'signature': '[ int $sec = time() [, int $usec = 0]]', 'return_type': ''},
\     'toDateTime': { 'signature': 'void | DateTime', 'return_type': 'DateTime'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\   },
\},
\'mongodb': {
\   'name': 'MongoDB',
\   'constants': {
\     'PROFILING_OFF': '0',
\     'PROFILING_SLOW': '1',
\     'PROFILING_ON': '2',
\   },
\   'properties': {
\     'w': { 'initializer': '1', 'type': 'integer'},
\     'wtimeout': { 'initializer': '10000', 'type': 'integer'},
\   },
\   'methods': {
\     'authenticate': { 'signature': 'string $username, string $password | array', 'return_type': 'array'},
\     'command': { 'signature': 'array $command [, array $options = array() [, string &$hash]] | array', 'return_type': 'array'},
\     '__construct': { 'signature': 'MongoClient $conn, string $name', 'return_type': ''},
\     'createCollection': { 'signature': 'string $name [, array $options] | MongoCollection', 'return_type': 'MongoCollection'},
\     'createDBRef': { 'signature': 'string $collection, mixed $document_or_id | array', 'return_type': 'array'},
\     'drop': { 'signature': 'void | array', 'return_type': 'array'},
\     'dropCollection': { 'signature': 'mixed $coll | array', 'return_type': 'array'},
\     'execute': { 'signature': 'mixed $code [, array $args = array()] | array', 'return_type': 'array'},
\     'forceError': { 'signature': 'void | bool', 'return_type': 'bool'},
\     '__get': { 'signature': 'string $name | MongoCollection', 'return_type': 'MongoCollection'},
\     'getCollectionInfo': { 'signature': '[ array $options = array()] | array', 'return_type': 'array'},
\     'getCollectionNames': { 'signature': '[ array $options = array()] | array', 'return_type': 'array'},
\     'getDBRef': { 'signature': 'array $ref | array', 'return_type': 'array'},
\     'getGridFS': { 'signature': '[ string $prefix = "fs"] | MongoGridFS', 'return_type': 'MongoGridFS'},
\     'getProfilingLevel': { 'signature': 'void | int', 'return_type': 'int'},
\     'getReadPreference': { 'signature': 'void | array', 'return_type': 'array'},
\     'getSlaveOkay': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getWriteConcern': { 'signature': 'void | array', 'return_type': 'array'},
\     'lastError': { 'signature': 'void | array', 'return_type': 'array'},
\     'listCollections': { 'signature': '[ array $options = array()] | array', 'return_type': 'array'},
\     'prevError': { 'signature': 'void | array', 'return_type': 'array'},
\     'repair': { 'signature': '[ bool $preserve_cloned_files = FALSE [, bool $backup_original_files = FALSE]] | array', 'return_type': 'array'},
\     'resetError': { 'signature': 'void | array', 'return_type': 'array'},
\     'selectCollection': { 'signature': 'string $name | MongoCollection', 'return_type': 'MongoCollection'},
\     'setProfilingLevel': { 'signature': 'int $level | int', 'return_type': 'int'},
\     'setReadPreference': { 'signature': 'string $read_preference [, array $tags] | bool', 'return_type': 'bool'},
\     'setSlaveOkay': { 'signature': '[ bool $ok = TRUE] | bool', 'return_type': 'bool'},
\     'setWriteConcern': { 'signature': 'mixed $w [, int $wtimeout] | bool', 'return_type': 'bool'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\   },
\},
\'mongodbref': {
\   'name': 'MongoDBRef',
\   'static_methods': {
\     'create': { 'signature': 'string $collection, mixed $id [, string $database] | array', 'return_type': 'array'},
\     'get': { 'signature': 'MongoDB $db, array $ref | array', 'return_type': 'array'},
\     'isRef': { 'signature': 'mixed $ref | bool', 'return_type': 'bool'},
\   },
\},
\'mongodeletebatch': {
\   'name': 'MongoDeleteBatch',
\   'methods': {
\     '__construct': { 'signature': 'MongoCollection $collection [, array $write_options]', 'return_type': ''},
\     'add': { 'signature': 'array $item | bool', 'return_type': 'bool'},
\     'execute': { 'signature': 'array $write_options | array', 'return_type': 'array'},
\   },
\},
\'mongoduplicatekeyexception': {
\   'name': 'MongoDuplicateKeyException',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getDocument': { 'signature': 'void | array', 'return_type': 'array'},
\   },
\},
\'mongoexception': {
\   'name': 'MongoException',
\},
\'mongoexecutiontimeoutexception': {
\   'name': 'MongoExecutionTimeoutException',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\},
\'mongogridfsexception': {
\   'name': 'MongoGridFSException',
\},
\'mongogridfsfile': {
\   'name': 'MongoGridFSFile',
\   'properties': {
\     'file': { 'initializer': 'NULL', 'type': 'array'},
\     'gridfs': { 'initializer': 'NULL', 'type': 'MongoGridFS'},
\   },
\   'methods': {
\     '__construct': { 'signature': 'MongoGridFS $gridfs, array $file', 'return_type': ''},
\     'getBytes': { 'signature': 'void | string', 'return_type': 'string'},
\     'getFilename': { 'signature': 'void | string', 'return_type': 'string'},
\     'getResource': { 'signature': 'void | resource', 'return_type': 'resource'},
\     'getSize': { 'signature': 'void | int', 'return_type': 'int'},
\     'write': { 'signature': '[ string $filename = NULL] | int', 'return_type': 'int'},
\   },
\},
\'mongoid': {
\   'name': 'MongoId',
\   'properties': {
\     'id': { 'initializer': 'NULL', 'type': 'string'},
\   },
\   'methods': {
\     '__construct': { 'signature': '[ string|MongoId $id = NULL]', 'return_type': ''},
\     'getInc': { 'signature': 'void | int', 'return_type': 'int'},
\     'getPID': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTimestamp': { 'signature': 'void | int', 'return_type': 'int'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\   },
\   'static_methods': {
\     'getHostname': { 'signature': 'void | string', 'return_type': 'string'},
\     'isValid': { 'signature': 'mixed $value | bool', 'return_type': 'bool'},
\     '__set_state': { 'signature': 'array $props | MongoId', 'return_type': 'MongoId'},
\   },
\},
\'mongoinsertbatch': {
\   'name': 'MongoInsertBatch',
\   'methods': {
\     '__construct': { 'signature': 'MongoCollection $collection [, array $write_options]', 'return_type': ''},
\     'add': { 'signature': 'array $item | bool', 'return_type': 'bool'},
\     'execute': { 'signature': 'array $write_options | array', 'return_type': 'array'},
\   },
\},
\'mongoint32': {
\   'name': 'MongoInt32',
\   'properties': {
\     'value': { 'initializer': '', 'type': 'string'},
\   },
\   'methods': {
\     '__construct': { 'signature': 'string $value', 'return_type': ''},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\   },
\},
\'mongoint64': {
\   'name': 'MongoInt64',
\   'properties': {
\     'value': { 'initializer': '', 'type': 'string'},
\   },
\   'methods': {
\     '__construct': { 'signature': 'string $value', 'return_type': ''},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\   },
\},
\'mongolog': {
\   'name': 'MongoLog',
\   'constants': {
\     'NONE': '0',
\     'ALL': '31',
\     'WARNING': '1',
\     'INFO': '2',
\     'FINE': '4',
\     'RS': '1',
\     'POOL': '1',
\     'CON': '2',
\     'IO': '4',
\     'SERVER': '8',
\     'PARSE': '16',
\   },
\   'static_properties': {
\     '$callback': { 'initializer': '', 'type': 'int'},
\     '$level': { 'initializer': '', 'type': 'int'},
\     '$module': { 'initializer': '', 'type': 'int'},
\   },
\   'static_methods': {
\     'getCallback': { 'signature': 'void | callable', 'return_type': 'callable'},
\     'getLevel': { 'signature': 'void | int', 'return_type': 'int'},
\     'getModule': { 'signature': 'void | int', 'return_type': 'int'},
\     'setCallback': { 'signature': 'callable $log_function | void', 'return_type': 'void'},
\     'setLevel': { 'signature': 'int $level | void', 'return_type': 'void'},
\     'setModule': { 'signature': 'int $module | void', 'return_type': 'void'},
\   },
\},
\'mongomaxkey': {
\   'name': 'MongoMaxKey',
\},
\'mongominkey': {
\   'name': 'MongoMinKey',
\},
\'mongopool': {
\   'name': 'MongoPool',
\   'methods': {
\     'info': { 'signature': 'void | array', 'return_type': 'array'},
\   },
\   'static_methods': {
\     'getSize': { 'signature': 'void | int', 'return_type': 'int'},
\     'setSize': { 'signature': 'int $size | bool', 'return_type': 'bool'},
\   },
\},
\'mongoprotocolexception': {
\   'name': 'MongoProtocolException',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\},
\'mongoregex': {
\   'name': 'MongoRegex',
\   'properties': {
\     'regex': { 'initializer': '', 'type': 'string'},
\     'flags': { 'initializer': '', 'type': 'string'},
\   },
\   'methods': {
\     '__construct': { 'signature': 'string $regex', 'return_type': ''},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\   },
\},
\'mongoresultexception': {
\   'name': 'MongoResultException',
\   'properties': {
\     'document': { 'initializer': '', 'type': ''},
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getDocument': { 'signature': 'void | array', 'return_type': 'array'},
\   },
\},
\'mongotimestamp': {
\   'name': 'MongoTimestamp',
\   'properties': {
\     'sec': { 'initializer': '0', 'type': 'int'},
\     'inc': { 'initializer': '0', 'type': 'int'},
\   },
\   'methods': {
\     '__construct': { 'signature': '[ int $sec = time() [, int $inc]]', 'return_type': ''},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\   },
\},
\'mongoupdatebatch': {
\   'name': 'MongoUpdateBatch',
\   'methods': {
\     '__construct': { 'signature': 'MongoCollection $collection [, array $write_options]', 'return_type': ''},
\     'add': { 'signature': 'array $item | bool', 'return_type': 'bool'},
\     'execute': { 'signature': 'array $write_options | array', 'return_type': 'array'},
\   },
\},
\'mongowritebatch': {
\   'name': 'MongoWriteBatch',
\   'constants': {
\     'COMMAND_INSERT': '1',
\     'COMMAND_UPDATE': '2',
\     'COMMAND_DELETE': '3',
\   },
\   'methods': {
\     '__construct': { 'signature': 'MongoCollection $collection [, string $batch_type [, array $write_options]]', 'return_type': ''},
\     'add': { 'signature': 'array $item | bool', 'return_type': 'bool'},
\     'execute': { 'signature': 'array $write_options | array', 'return_type': 'array'},
\   },
\},
\'mongowriteconcernexception': {
\   'name': 'MongoWriteConcernException',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getDocument': { 'signature': 'void | array', 'return_type': 'array'},
\     'getHost': { 'signature': 'void | string', 'return_type': 'string'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['vendor_specific_database_extensions'] = {
\'mongodb\bson\binary': {
\   'name': 'MongoDB\BSON\Binary',
\   'constants': {
\     'TYPE_GENERIC': '0',
\     'TYPE_FUNCTION': '1',
\     'TYPE_OLD_BINARY': '2',
\     'TYPE_OLD_UUID': '3',
\     'TYPE_UUID': '4',
\     'TYPE_MD5': '5',
\     'TYPE_USER_DEFINED': '128',
\   },
\   'methods': {
\     '__construct': { 'signature': 'string $data, int $type', 'return_type': ''},
\     'getData': { 'signature': 'void | string', 'return_type': 'string'},
\     'getType': { 'signature': 'void | int', 'return_type': 'int'},
\     'jsonSerialize': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'serialize': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     'unserialize': { 'signature': 'string $serialized | void', 'return_type': 'void'},
\   },
\},
\'mongodb\bson\dbpointer': {
\   'name': 'MongoDB\BSON\DBPointer',
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'jsonSerialize': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'serialize': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     'unserialize': { 'signature': 'string $serialized | void', 'return_type': 'void'},
\   },
\},
\'mongodb\bson\decimal128': {
\   'name': 'MongoDB\BSON\Decimal128',
\   'methods': {
\     '__construct': { 'signature': '[ string $value]', 'return_type': ''},
\     'jsonSerialize': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'serialize': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     'unserialize': { 'signature': 'string $serialized | void', 'return_type': 'void'},
\   },
\},
\'mongodb\bson\int64': {
\   'name': 'MongoDB\BSON\Int64',
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'jsonSerialize': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'serialize': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     'unserialize': { 'signature': 'string $serialized | void', 'return_type': 'void'},
\   },
\},
\'mongodb\bson\javascript': {
\   'name': 'MongoDB\BSON\Javascript',
\   'methods': {
\     '__construct': { 'signature': 'string $code [, array|object $scope]', 'return_type': ''},
\     'getCode': { 'signature': 'void | string', 'return_type': 'string'},
\     'getScope': { 'signature': 'void | object|null', 'return_type': 'object|null'},
\     'jsonSerialize': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'serialize': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     'unserialize': { 'signature': 'string $serialized | void', 'return_type': 'void'},
\   },
\},
\'mongodb\bson\maxkey': {
\   'name': 'MongoDB\BSON\MaxKey',
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'jsonSerialize': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'serialize': { 'signature': 'void | string', 'return_type': 'string'},
\     'unserialize': { 'signature': 'string $serialized | void', 'return_type': 'void'},
\   },
\},
\'mongodb\bson\minkey': {
\   'name': 'MongoDB\BSON\MinKey',
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'jsonSerialize': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'serialize': { 'signature': 'void | string', 'return_type': 'string'},
\     'unserialize': { 'signature': 'string $serialized | void', 'return_type': 'void'},
\   },
\},
\'mongodb\bson\objectid': {
\   'name': 'MongoDB\BSON\ObjectId',
\   'methods': {
\     '__construct': { 'signature': '[ string $id]', 'return_type': ''},
\     'getTimestamp': { 'signature': 'void | int', 'return_type': 'int'},
\     'jsonSerialize': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'serialize': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     'unserialize': { 'signature': 'string $serialized | void', 'return_type': 'void'},
\   },
\},
\'mongodb\bson\regex': {
\   'name': 'MongoDB\BSON\Regex',
\   'methods': {
\     '__construct': { 'signature': 'string $pattern [, string $flags = ""]', 'return_type': ''},
\     'getFlags': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPattern': { 'signature': 'void | string', 'return_type': 'string'},
\     'jsonSerialize': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'serialize': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     'unserialize': { 'signature': 'string $serialized | void', 'return_type': 'void'},
\   },
\},
\'mongodb\bson\symbol': {
\   'name': 'MongoDB\BSON\Symbol',
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'jsonSerialize': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'serialize': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     'unserialize': { 'signature': 'string $serialized | void', 'return_type': 'void'},
\   },
\},
\'mongodb\bson\timestamp': {
\   'name': 'MongoDB\BSON\Timestamp',
\   'methods': {
\     '__construct': { 'signature': 'int $increment, int $timestamp', 'return_type': ''},
\     'getIncrement': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTimestamp': { 'signature': 'void | int', 'return_type': 'int'},
\     'jsonSerialize': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'serialize': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     'unserialize': { 'signature': 'string $serialized | void', 'return_type': 'void'},
\   },
\},
\'mongodb\bson\undefined': {
\   'name': 'MongoDB\BSON\Undefined',
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'jsonSerialize': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'serialize': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     'unserialize': { 'signature': 'string $serialized | void', 'return_type': 'void'},
\   },
\},
\'mongodb\bson\utcdatetime': {
\   'name': 'MongoDB\BSON\UTCDateTime',
\   'methods': {
\     '__construct': { 'signature': '[ integer|float|string|DateTimeInterface $milliseconds = NULL]', 'return_type': ''},
\     'jsonSerialize': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'serialize': { 'signature': 'void | string', 'return_type': 'string'},
\     'toDateTime': { 'signature': 'void | DateTime', 'return_type': 'DateTime'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     'unserialize': { 'signature': 'string $serialized | void', 'return_type': 'void'},
\   },
\},
\'mongodb\driver\bulkwrite': {
\   'name': 'MongoDB\Driver\BulkWrite',
\   'methods': {
\     '__construct': { 'signature': '[ array $options]', 'return_type': ''},
\     'count': { 'signature': 'void | int', 'return_type': 'int'},
\     'delete': { 'signature': 'array|object $filter [, array $deleteOptions] | void', 'return_type': 'void'},
\     'insert': { 'signature': 'array|object $document | mixed', 'return_type': 'mixed'},
\     'update': { 'signature': 'array|object $filter, array|object $newObj [, array $updateOptions] | void', 'return_type': 'void'},
\   },
\},
\'mongodb\driver\command': {
\   'name': 'MongoDB\Driver\Command',
\   'methods': {
\     '__construct': { 'signature': 'array|object $document [, array $commandOptions]', 'return_type': ''},
\   },
\},
\'mongodb\driver\cursor': {
\   'name': 'MongoDB\Driver\Cursor',
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'getId': { 'signature': 'void | MongoDB\Driver\CursorId', 'return_type': 'MongoDB\Driver\CursorId'},
\     'getServer': { 'signature': 'void | MongoDB\Driver\Server', 'return_type': 'MongoDB\Driver\Server'},
\     'isDead': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'setTypeMap': { 'signature': 'array $typemap | void', 'return_type': 'void'},
\     'toArray': { 'signature': 'void | array', 'return_type': 'array'},
\   },
\},
\'mongodb\driver\cursorid': {
\   'name': 'MongoDB\Driver\CursorId',
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\   },
\},
\'mongodb\driver\exception\authenticationexception': {
\   'name': 'MongoDB\Driver\Exception\AuthenticationException',
\   'properties': {
\     'errorLabels': { 'initializer': '', 'type': 'bool'},
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'hasErrorLabel': { 'signature': 'string $errorLabel | bool', 'return_type': 'bool'},
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'mongodb\driver\exception\bulkwriteexception': {
\   'name': 'MongoDB\Driver\Exception\BulkWriteException',
\   'properties': {
\     'writeResult': { 'initializer': '', 'type': 'MongoDB\Driver\WriteResult'},
\     'errorLabels': { 'initializer': '', 'type': 'bool'},
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getWriteResult': { 'signature': 'void | MongoDB\Driver\WriteResult', 'return_type': 'MongoDB\Driver\WriteResult'},
\     'hasErrorLabel': { 'signature': 'string $errorLabel | bool', 'return_type': 'bool'},
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'mongodb\driver\exception\commandexception': {
\   'name': 'MongoDB\Driver\Exception\CommandException',
\   'properties': {
\     'resultDocument': { 'initializer': '', 'type': 'object'},
\     'errorLabels': { 'initializer': '', 'type': 'bool'},
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getResultDocument': { 'signature': 'void | object', 'return_type': 'object'},
\     'hasErrorLabel': { 'signature': 'string $errorLabel | bool', 'return_type': 'bool'},
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'mongodb\driver\exception\connectionexception': {
\   'name': 'MongoDB\Driver\Exception\ConnectionException',
\   'properties': {
\     'errorLabels': { 'initializer': '', 'type': 'bool'},
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'hasErrorLabel': { 'signature': 'string $errorLabel | bool', 'return_type': 'bool'},
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'mongodb\driver\exception\connectiontimeoutexception': {
\   'name': 'MongoDB\Driver\Exception\ConnectionTimeoutException',
\   'properties': {
\     'errorLabels': { 'initializer': '', 'type': 'bool'},
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'hasErrorLabel': { 'signature': 'string $errorLabel | bool', 'return_type': 'bool'},
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'mongodb\driver\exception\executiontimeoutexception': {
\   'name': 'MongoDB\Driver\Exception\ExecutionTimeoutException',
\   'properties': {
\     'errorLabels': { 'initializer': '', 'type': 'bool'},
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'hasErrorLabel': { 'signature': 'string $errorLabel | bool', 'return_type': 'bool'},
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'mongodb\driver\exception\invalidargumentexception': {
\   'name': 'MongoDB\Driver\Exception\InvalidArgumentException',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'mongodb\driver\exception\logicexception': {
\   'name': 'MongoDB\Driver\Exception\LogicException',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'mongodb\driver\exception\runtimeexception': {
\   'name': 'MongoDB\Driver\Exception\RuntimeException',
\   'properties': {
\     'errorLabels': { 'initializer': '', 'type': 'bool'},
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'hasErrorLabel': { 'signature': 'string $errorLabel | bool', 'return_type': 'bool'},
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'mongodb\driver\exception\serverexception': {
\   'name': 'MongoDB\Driver\Exception\ServerException',
\   'properties': {
\     'errorLabels': { 'initializer': '', 'type': 'bool'},
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'hasErrorLabel': { 'signature': 'string $errorLabel | bool', 'return_type': 'bool'},
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'mongodb\driver\exception\sslconnectionexception': {
\   'name': 'MongoDB\Driver\Exception\SSLConnectionException',
\   'properties': {
\     'errorLabels': { 'initializer': '', 'type': 'bool'},
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'hasErrorLabel': { 'signature': 'string $errorLabel | bool', 'return_type': 'bool'},
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'mongodb\driver\exception\unexpectedvalueexception': {
\   'name': 'MongoDB\Driver\Exception\UnexpectedValueException',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'mongodb\driver\exception\writeexception': {
\   'name': 'MongoDB\Driver\Exception\WriteException',
\   'properties': {
\     'writeResult': { 'initializer': '', 'type': 'MongoDB\Driver\WriteResult'},
\     'errorLabels': { 'initializer': '', 'type': 'bool'},
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getWriteResult': { 'signature': 'void | MongoDB\Driver\WriteResult', 'return_type': 'MongoDB\Driver\WriteResult'},
\     'hasErrorLabel': { 'signature': 'string $errorLabel | bool', 'return_type': 'bool'},
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'mongodb\driver\manager': {
\   'name': 'MongoDB\Driver\Manager',
\   'methods': {
\     '__construct': { 'signature': '[ string $uri = "mongodb://127.0.0.1/" [, array $uriOptions = array() [, array $driverOptions = array()]]]', 'return_type': ''},
\     'executeBulkWrite': { 'signature': 'string $namespace, MongoDB\Driver\BulkWrite $bulk [, array $options = array()] | MongoDB\Driver\WriteResult', 'return_type': 'MongoDB\Driver\WriteResult'},
\     'executeCommand': { 'signature': 'string $db, MongoDB\Driver\Command $command [, array $options = array()] | MongoDB\Driver\Cursor', 'return_type': 'MongoDB\Driver\Cursor'},
\     'executeQuery': { 'signature': 'string $namespace, MongoDB\Driver\Query $query [, array $options = array()] | MongoDB\Driver\Cursor', 'return_type': 'MongoDB\Driver\Cursor'},
\     'executeReadCommand': { 'signature': 'string $db, MongoDB\Driver\Command $command [, array $options = array()] | MongoDB\Driver\Cursor', 'return_type': 'MongoDB\Driver\Cursor'},
\     'executeReadWriteCommand': { 'signature': 'string $db, MongoDB\Driver\Command $command [, array $options = array()] | MongoDB\Driver\Cursor', 'return_type': 'MongoDB\Driver\Cursor'},
\     'executeWriteCommand': { 'signature': 'string $db, MongoDB\Driver\Command $command [, array $options = array()] | MongoDB\Driver\Cursor', 'return_type': 'MongoDB\Driver\Cursor'},
\     'getReadConcern': { 'signature': 'void | MongoDB\Driver\ReadConcern', 'return_type': 'MongoDB\Driver\ReadConcern'},
\     'getReadPreference': { 'signature': 'void | MongoDB\Driver\ReadPreference', 'return_type': 'MongoDB\Driver\ReadPreference'},
\     'getServers': { 'signature': 'void | array', 'return_type': 'array'},
\     'getWriteConcern': { 'signature': 'void | MongoDB\Driver\WriteConcern', 'return_type': 'MongoDB\Driver\WriteConcern'},
\     'selectServer': { 'signature': 'MongoDB\Driver\ReadPreference $readPreference | MongoDB\Driver\Server', 'return_type': 'MongoDB\Driver\Server'},
\     'startSession': { 'signature': '[ array $options] | MongoDB\Driver\Session', 'return_type': 'MongoDB\Driver\Session'},
\   },
\},
\'mongodb\driver\monitoring\commandfailedevent': {
\   'name': 'MongoDB\Driver\Monitoring\CommandFailedEvent',
\   'methods': {
\     'getCommandName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getDurationMicros': { 'signature': 'void | int', 'return_type': 'int'},
\     'getError': { 'signature': 'void | Exception', 'return_type': 'Exception'},
\     'getOperationId': { 'signature': 'void | string', 'return_type': 'string'},
\     'getReply': { 'signature': 'void | object', 'return_type': 'object'},
\     'getRequestId': { 'signature': 'void | string', 'return_type': 'string'},
\     'getServer': { 'signature': 'void | MongoDB\Driver\Server', 'return_type': 'MongoDB\Driver\Server'},
\   },
\},
\'mongodb\driver\monitoring\commandstartedevent': {
\   'name': 'MongoDB\Driver\Monitoring\CommandStartedEvent',
\   'methods': {
\     'getCommand': { 'signature': 'void | object', 'return_type': 'object'},
\     'getCommandName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getDatabaseName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getOperationId': { 'signature': 'void | string', 'return_type': 'string'},
\     'getRequestId': { 'signature': 'void | string', 'return_type': 'string'},
\     'getServer': { 'signature': 'void | MongoDB\Driver\Server', 'return_type': 'MongoDB\Driver\Server'},
\   },
\},
\'mongodb\driver\monitoring\commandsucceededevent': {
\   'name': 'MongoDB\Driver\Monitoring\CommandSucceededEvent',
\   'methods': {
\     'getCommandName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getDurationMicros': { 'signature': 'void | int', 'return_type': 'int'},
\     'getOperationId': { 'signature': 'void | string', 'return_type': 'string'},
\     'getReply': { 'signature': 'void | object', 'return_type': 'object'},
\     'getRequestId': { 'signature': 'void | string', 'return_type': 'string'},
\     'getServer': { 'signature': 'void | MongoDB\Driver\Server', 'return_type': 'MongoDB\Driver\Server'},
\   },
\},
\'mongodb\driver\query': {
\   'name': 'MongoDB\Driver\Query',
\   'methods': {
\     '__construct': { 'signature': 'array|object $filter [, array $queryOptions]', 'return_type': ''},
\   },
\},
\'mongodb\driver\readconcern': {
\   'name': 'MongoDB\Driver\ReadConcern',
\   'constants': {
\     'AVAILABLE': '"available"',
\     'LINEARIZABLE': '"linearizable"',
\     'LOCAL': '"local"',
\     'MAJORITY': '"majority"',
\   },
\   'methods': {
\     'bsonSerialize': { 'signature': 'void | object', 'return_type': 'object'},
\     '__construct': { 'signature': '[ string $level]', 'return_type': ''},
\     'getLevel': { 'signature': 'void | string|null', 'return_type': 'string|null'},
\     'isDefault': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'mongodb\driver\readpreference': {
\   'name': 'MongoDB\Driver\ReadPreference',
\   'constants': {
\     'RP_PRIMARY': '1',
\     'RP_PRIMARY_PREFERRED': '5',
\     'RP_SECONDARY': '2',
\     'RP_SECONDARY_PREFERRED': '6',
\     'RP_NEAREST': '10',
\     'NO_MAX_STALENESS': '-1',
\     'SMALLEST_MAX_STALENESS_SECONDS': '90',
\   },
\   'methods': {
\     'bsonSerialize': { 'signature': 'void | object', 'return_type': 'object'},
\     '__construct': { 'signature': 'string|integer $mode [, array $tagSets = NULL [, array $options = array()]]', 'return_type': ''},
\     'getMaxStalenessSeconds': { 'signature': 'void | int', 'return_type': 'int'},
\     'getMode': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTagSets': { 'signature': 'void | array', 'return_type': 'array'},
\   },
\},
\'mongodb\driver\server': {
\   'name': 'MongoDB\Driver\Server',
\   'constants': {
\     'TYPE_UNKNOWN': '0',
\     'TYPE_STANDALONE': '1',
\     'TYPE_MONGOS': '2',
\     'TYPE_POSSIBLE_PRIMARY': '3',
\     'TYPE_RS_PRIMARY': '4',
\     'TYPE_RS_SECONDARY': '5',
\     'TYPE_RS_ARBITER': '6',
\     'TYPE_RS_OTHER': '7',
\     'TYPE_RS_GHOST': '8',
\   },
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'executeBulkWrite': { 'signature': 'string $namespace, MongoDB\Driver\BulkWrite $bulk [, array $options = array()] | MongoDB\Driver\WriteResult', 'return_type': 'MongoDB\Driver\WriteResult'},
\     'executeCommand': { 'signature': 'string $db, MongoDB\Driver\Command $command [, array $options = array()] | MongoDB\Driver\Cursor', 'return_type': 'MongoDB\Driver\Cursor'},
\     'executeQuery': { 'signature': 'string $namespace, MongoDB\Driver\Query $query [, array $options = array()] | MongoDB\Driver\Cursor', 'return_type': 'MongoDB\Driver\Cursor'},
\     'executeReadCommand': { 'signature': 'string $db, MongoDB\Driver\Command $command [, array $options = array()] | MongoDB\Driver\Cursor', 'return_type': 'MongoDB\Driver\Cursor'},
\     'executeReadWriteCommand': { 'signature': 'string $db, MongoDB\Driver\Command $command [, array $options = array()] | MongoDB\Driver\Cursor', 'return_type': 'MongoDB\Driver\Cursor'},
\     'executeWriteCommand': { 'signature': 'string $db, MongoDB\Driver\Command $command [, array $options = array()] | MongoDB\Driver\Cursor', 'return_type': 'MongoDB\Driver\Cursor'},
\     'getHost': { 'signature': 'void | string', 'return_type': 'string'},
\     'getInfo': { 'signature': 'void | array', 'return_type': 'array'},
\     'getLatency': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPort': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTags': { 'signature': 'void | array', 'return_type': 'array'},
\     'getType': { 'signature': 'void | int', 'return_type': 'int'},
\     'isArbiter': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isHidden': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isPassive': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isPrimary': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isSecondary': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'mongodb\driver\session': {
\   'name': 'MongoDB\Driver\Session',
\   'methods': {
\     'abortTransaction': { 'signature': 'void | void', 'return_type': 'void'},
\     'advanceClusterTime': { 'signature': 'array|object $clusterTime | void', 'return_type': 'void'},
\     'advanceOperationTime': { 'signature': 'MongoDB\BSON\TimestampInterface $operationTime | void', 'return_type': 'void'},
\     'commitTransaction': { 'signature': 'void | void', 'return_type': 'void'},
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'endSession': { 'signature': 'void | void', 'return_type': 'void'},
\     'getClusterTime': { 'signature': 'void | object|null', 'return_type': 'object|null'},
\     'getLogicalSessionId': { 'signature': 'void | object', 'return_type': 'object'},
\     'getOperationTime': { 'signature': 'void | MongoDB\BSON\Timestamp|null', 'return_type': 'MongoDB\BSON\Timestamp|null'},
\     'getServer': { 'signature': 'void | MongoDB\Driver\Server|null', 'return_type': 'MongoDB\Driver\Server|null'},
\     'isInTransaction': { 'signature': 'void | boolean', 'return_type': 'boolean'},
\     'startTransaction': { 'signature': '[ array $options] | void', 'return_type': 'void'},
\   },
\},
\'mongodb\driver\writeconcern': {
\   'name': 'MongoDB\Driver\WriteConcern',
\   'constants': {
\     'MAJORITY': '"majority"',
\   },
\   'methods': {
\     'bsonSerialize': { 'signature': 'void | object', 'return_type': 'object'},
\     '__construct': { 'signature': 'string|integer $w [, int $wtimeout [, bool $journal]]', 'return_type': ''},
\     'getJournal': { 'signature': 'void | boolean|null', 'return_type': 'boolean|null'},
\     'getW': { 'signature': 'void | string|integer|null', 'return_type': 'string|integer|null'},
\     'getWtimeout': { 'signature': 'void | int', 'return_type': 'int'},
\     'isDefault': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'mongodb\driver\writeconcernerror': {
\   'name': 'MongoDB\Driver\WriteConcernError',
\   'methods': {
\     'getCode': { 'signature': 'void | int', 'return_type': 'int'},
\     'getInfo': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\   },
\},
\'mongodb\driver\writeerror': {
\   'name': 'MongoDB\Driver\WriteError',
\   'methods': {
\     'getCode': { 'signature': 'void | int', 'return_type': 'int'},
\     'getIndex': { 'signature': 'void | int', 'return_type': 'int'},
\     'getInfo': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\   },
\},
\'mongodb\driver\writeresult': {
\   'name': 'MongoDB\Driver\WriteResult',
\   'methods': {
\     'getDeletedCount': { 'signature': 'void | integer|null', 'return_type': 'integer|null'},
\     'getInsertedCount': { 'signature': 'void | integer|null', 'return_type': 'integer|null'},
\     'getMatchedCount': { 'signature': 'void | integer|null', 'return_type': 'integer|null'},
\     'getModifiedCount': { 'signature': 'void | integer|null', 'return_type': 'integer|null'},
\     'getServer': { 'signature': 'void | MongoDB\Driver\Server', 'return_type': 'MongoDB\Driver\Server'},
\     'getUpsertedCount': { 'signature': 'void | integer|null', 'return_type': 'integer|null'},
\     'getUpsertedIds': { 'signature': 'void | array', 'return_type': 'array'},
\     'getWriteConcernError': { 'signature': 'void | MongoDB\Driver\WriteConcernError|null', 'return_type': 'MongoDB\Driver\WriteConcernError|null'},
\     'getWriteErrors': { 'signature': 'void | array', 'return_type': 'array'},
\     'isAcknowledged': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'mysql_xdevapi\client': {
\   'name': 'mysql_xdevapi\Client',
\   'methods': {
\     'close': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getSession': { 'signature': 'void | mysql_xdevapi\Session', 'return_type': 'mysql_xdevapi\Session'},
\   },
\},
\'mysql_xdevapi\collection': {
\   'name': 'mysql_xdevapi\Collection',
\   'properties': {
\     'name': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     'add': { 'signature': 'mixed $document | mysql_xdevapi\CollectionAdd', 'return_type': 'mysql_xdevapi\CollectionAdd'},
\     'addOrReplaceOne': { 'signature': 'string $id, string $doc | mysql_xdevapi\Result', 'return_type': 'mysql_xdevapi\Result'},
\     'count': { 'signature': 'void | integer', 'return_type': 'integer'},
\     'createIndex': { 'signature': 'string $index_name, string $index_desc_json | void', 'return_type': 'void'},
\     'dropIndex': { 'signature': 'string $index_name | bool', 'return_type': 'bool'},
\     'existsInDatabase': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'find': { 'signature': '[ string $search_condition] | mysql_xdevapi\CollectionFind', 'return_type': 'mysql_xdevapi\CollectionFind'},
\     'getName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getOne': { 'signature': 'string $id | Document', 'return_type': 'Document'},
\     'getSchema': { 'signature': 'void | Schema Object', 'return_type': 'Schema Object'},
\     'getSession': { 'signature': 'void | Session', 'return_type': 'Session'},
\     'modify': { 'signature': 'string $search_condition | mysql_xdevapi\CollectionModify', 'return_type': 'mysql_xdevapi\CollectionModify'},
\     'remove': { 'signature': 'string $search_condition | mysql_xdevapi\CollectionRemove', 'return_type': 'mysql_xdevapi\CollectionRemove'},
\     'removeOne': { 'signature': 'string $id | mysql_xdevapi\Result', 'return_type': 'mysql_xdevapi\Result'},
\     'replaceOne': { 'signature': 'string $id, string $doc | mysql_xdevapi\Result', 'return_type': 'mysql_xdevapi\Result'},
\   },
\},
\'mysql_xdevapi\collectionadd': {
\   'name': 'mysql_xdevapi\CollectionAdd',
\   'methods': {
\     'execute': { 'signature': 'void | mysql_xdevapi\Result', 'return_type': 'mysql_xdevapi\Result'},
\   },
\},
\'mysql_xdevapi\collectionfind': {
\   'name': 'mysql_xdevapi\CollectionFind',
\   'methods': {
\     'bind': { 'signature': 'array $placeholder_values | mysql_xdevapi\CollectionFind', 'return_type': 'mysql_xdevapi\CollectionFind'},
\     'execute': { 'signature': 'void | mysql_xdevapi\DocResult', 'return_type': 'mysql_xdevapi\DocResult'},
\     'fields': { 'signature': 'string $projection | mysql_xdevapi\CollectionFind', 'return_type': 'mysql_xdevapi\CollectionFind'},
\     'groupBy': { 'signature': 'string $sort_expr | mysql_xdevapi\CollectionFind', 'return_type': 'mysql_xdevapi\CollectionFind'},
\     'having': { 'signature': 'string $sort_expr | mysql_xdevapi\CollectionFind', 'return_type': 'mysql_xdevapi\CollectionFind'},
\     'limit': { 'signature': 'integer $rows | mysql_xdevapi\CollectionFind', 'return_type': 'mysql_xdevapi\CollectionFind'},
\     'lockExclusive': { 'signature': '[ integer $lock_waiting_option] | mysql_xdevapi\CollectionFind', 'return_type': 'mysql_xdevapi\CollectionFind'},
\     'lockShared': { 'signature': '[ integer $lock_waiting_option] | mysql_xdevapi\CollectionFind', 'return_type': 'mysql_xdevapi\CollectionFind'},
\     'offset': { 'signature': 'integer $position | mysql_xdevapi\CollectionFind', 'return_type': 'mysql_xdevapi\CollectionFind'},
\     'sort': { 'signature': 'string $sort_expr | mysql_xdevapi\CollectionFind', 'return_type': 'mysql_xdevapi\CollectionFind'},
\   },
\},
\'mysql_xdevapi\collectionmodify': {
\   'name': 'mysql_xdevapi\CollectionModify',
\   'methods': {
\     'arrayAppend': { 'signature': 'string $collection_field, string $expression_or_literal | mysql_xdevapi\CollectionModify', 'return_type': 'mysql_xdevapi\CollectionModify'},
\     'arrayInsert': { 'signature': 'string $collection_field, string $expression_or_literal | mysql_xdevapi\CollectionModify', 'return_type': 'mysql_xdevapi\CollectionModify'},
\     'bind': { 'signature': 'array $placeholder_values | mysql_xdevapi\CollectionModify', 'return_type': 'mysql_xdevapi\CollectionModify'},
\     'execute': { 'signature': 'void | mysql_xdevapi\Result', 'return_type': 'mysql_xdevapi\Result'},
\     'limit': { 'signature': 'integer $rows | mysql_xdevapi\CollectionModify', 'return_type': 'mysql_xdevapi\CollectionModify'},
\     'patch': { 'signature': 'string $document | mysql_xdevapi\CollectionModify', 'return_type': 'mysql_xdevapi\CollectionModify'},
\     'replace': { 'signature': 'string $collection_field, string $expression_or_literal | mysql_xdevapi\CollectionModify', 'return_type': 'mysql_xdevapi\CollectionModify'},
\     'set': { 'signature': 'string $collection_field, string $expression_or_literal | mysql_xdevapi\CollectionModify', 'return_type': 'mysql_xdevapi\CollectionModify'},
\     'skip': { 'signature': 'integer $position | mysql_xdevapi\CollectionModify', 'return_type': 'mysql_xdevapi\CollectionModify'},
\     'sort': { 'signature': 'string $sort_expr | mysql_xdevapi\CollectionModify', 'return_type': 'mysql_xdevapi\CollectionModify'},
\     'unset': { 'signature': 'array $fields | mysql_xdevapi\CollectionModify', 'return_type': 'mysql_xdevapi\CollectionModify'},
\   },
\},
\'mysql_xdevapi\collectionremove': {
\   'name': 'mysql_xdevapi\CollectionRemove',
\   'methods': {
\     'bind': { 'signature': 'array $placeholder_values | mysql_xdevapi\CollectionRemove', 'return_type': 'mysql_xdevapi\CollectionRemove'},
\     'execute': { 'signature': 'void | mysql_xdevapi\Result', 'return_type': 'mysql_xdevapi\Result'},
\     'limit': { 'signature': 'integer $rows | mysql_xdevapi\CollectionRemove', 'return_type': 'mysql_xdevapi\CollectionRemove'},
\     'sort': { 'signature': 'string $sort_expr | mysql_xdevapi\CollectionRemove', 'return_type': 'mysql_xdevapi\CollectionRemove'},
\   },
\},
\'mysql_xdevapi\columnresult': {
\   'name': 'mysql_xdevapi\ColumnResult',
\   'methods': {
\     'getCharacterSetName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getCollationName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getColumnLabel': { 'signature': 'void | string', 'return_type': 'string'},
\     'getColumnName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getFractionalDigits': { 'signature': 'void | integer', 'return_type': 'integer'},
\     'getLength': { 'signature': 'void | integer', 'return_type': 'integer'},
\     'getSchemaName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getTableLabel': { 'signature': 'void | string', 'return_type': 'string'},
\     'getTableName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getType': { 'signature': 'void | integer', 'return_type': 'integer'},
\     'isNumberSigned': { 'signature': 'void | integer', 'return_type': 'integer'},
\     'isPadded': { 'signature': 'void | integer', 'return_type': 'integer'},
\   },
\},
\'mysql_xdevapi\docresult': {
\   'name': 'mysql_xdevapi\DocResult',
\   'methods': {
\     'fetchAll': { 'signature': 'void | array', 'return_type': 'array'},
\     'fetchOne': { 'signature': 'void | array', 'return_type': 'array'},
\     'getWarnings': { 'signature': 'void | Array', 'return_type': 'Array'},
\     'getWarningsCount': { 'signature': 'void | integer', 'return_type': 'integer'},
\   },
\},
\'mysql_xdevapi\exception': {
\   'name': 'mysql_xdevapi\Exception',
\},
\'mysql_xdevapi\executionstatus': {
\   'name': 'mysql_xdevapi\ExecutionStatus',
\   'properties': {
\     'affectedItems': { 'initializer': '', 'type': ''},
\     'matchedItems': { 'initializer': '', 'type': ''},
\     'foundItems': { 'initializer': '', 'type': ''},
\     'lastInsertId': { 'initializer': '', 'type': ''},
\     'lastDocumentId': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\   },
\},
\'mysql_xdevapi\expression': {
\   'name': 'mysql_xdevapi\Expression',
\   'properties': {
\     'name': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     '__construct': { 'signature': 'string $expression', 'return_type': ''},
\   },
\},
\'mysql_xdevapi\result': {
\   'name': 'mysql_xdevapi\Result',
\   'methods': {
\     'getAutoIncrementValue': { 'signature': 'void | int', 'return_type': 'int'},
\     'getGeneratedIds': { 'signature': 'void | array', 'return_type': 'array'},
\     'getWarnings': { 'signature': 'void | array', 'return_type': 'array'},
\     'getWarningsCount': { 'signature': 'void | integer', 'return_type': 'integer'},
\   },
\},
\'mysql_xdevapi\rowresult': {
\   'name': 'mysql_xdevapi\RowResult',
\   'methods': {
\     'fetchAll': { 'signature': 'void | array', 'return_type': 'array'},
\     'fetchOne': { 'signature': 'void | array', 'return_type': 'array'},
\     'getColumnsCount': { 'signature': 'void | integer', 'return_type': 'integer'},
\     'getColumnNames': { 'signature': 'void | array', 'return_type': 'array'},
\     'getColumns': { 'signature': 'void | array', 'return_type': 'array'},
\     'getWarnings': { 'signature': 'void | array', 'return_type': 'array'},
\     'getWarningsCount': { 'signature': 'void | integer', 'return_type': 'integer'},
\   },
\},
\'mysql_xdevapi\schema': {
\   'name': 'mysql_xdevapi\Schema',
\   'properties': {
\     'name': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     'createCollection': { 'signature': 'string $name | mysql_xdevapi\Collection', 'return_type': 'mysql_xdevapi\Collection'},
\     'dropCollection': { 'signature': 'string $collection_name | bool', 'return_type': 'bool'},
\     'existsInDatabase': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getCollection': { 'signature': 'string $name | mysql_xdevapi\Collection', 'return_type': 'mysql_xdevapi\Collection'},
\     'getCollectionAsTable': { 'signature': 'string $name | mysql_xdevapi\Table', 'return_type': 'mysql_xdevapi\Table'},
\     'getCollections': { 'signature': 'void | array', 'return_type': 'array'},
\     'getName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getSession': { 'signature': 'void | mysql_xdevapi\Session', 'return_type': 'mysql_xdevapi\Session'},
\     'getTable': { 'signature': 'string $name | mysql_xdevapi\Table', 'return_type': 'mysql_xdevapi\Table'},
\     'getTables': { 'signature': 'void | array', 'return_type': 'array'},
\   },
\},
\'mysql_xdevapi\session': {
\   'name': 'mysql_xdevapi\Session',
\   'methods': {
\     'close': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'commit': { 'signature': 'void | Object', 'return_type': 'Object'},
\     'createSchema': { 'signature': 'string $schema_name | mysql_xdevapi\Schema', 'return_type': 'mysql_xdevapi\Schema'},
\     'dropSchema': { 'signature': 'string $schema_name | bool', 'return_type': 'bool'},
\     'generateUUID': { 'signature': 'void | string', 'return_type': 'string'},
\     'getDefaultSchema': { 'signature': 'void | string', 'return_type': 'string'},
\     'getSchema': { 'signature': 'string $schema_name | mysql_xdevapi\Schema', 'return_type': 'mysql_xdevapi\Schema'},
\     'getSchemas': { 'signature': 'void | array', 'return_type': 'array'},
\     'getServerVersion': { 'signature': 'void | integer', 'return_type': 'integer'},
\     'listClients': { 'signature': 'void | array', 'return_type': 'array'},
\     'quoteName': { 'signature': 'string $name | string', 'return_type': 'string'},
\     'releaseSavepoint': { 'signature': 'string $name | void', 'return_type': 'void'},
\     'rollback': { 'signature': 'void | void', 'return_type': 'void'},
\     'rollbackTo': { 'signature': 'string $name | void', 'return_type': 'void'},
\     'setSavepoint': { 'signature': '[ string $name] | string', 'return_type': 'string'},
\     'sql': { 'signature': 'string $query | mysql_xdevapi\SqlStatement', 'return_type': 'mysql_xdevapi\SqlStatement'},
\     'startTransaction': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'mysql_xdevapi\sqlstatement': {
\   'name': 'mysql_xdevapi\SqlStatement',
\   'constants': {
\     'EXECUTE_ASYNC': '1',
\     'BUFFERED': '2',
\   },
\   'properties': {
\     'statement': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     'bind': { 'signature': 'string $param | mysql_xdevapi\SqlStatement', 'return_type': 'mysql_xdevapi\SqlStatement'},
\     'execute': { 'signature': 'void | mysql_xdevapi\Result', 'return_type': 'mysql_xdevapi\Result'},
\     'getNextResult': { 'signature': 'void | mysql_xdevapi\Result', 'return_type': 'mysql_xdevapi\Result'},
\     'getResult': { 'signature': 'void | mysql_xdevapi\Result', 'return_type': 'mysql_xdevapi\Result'},
\     'hasMoreResults': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'mysql_xdevapi\sqlstatementresult': {
\   'name': 'mysql_xdevapi\SqlStatementResult',
\   'methods': {
\     'fetchAll': { 'signature': 'void | array', 'return_type': 'array'},
\     'fetchOne': { 'signature': 'void | array', 'return_type': 'array'},
\     'getAffectedItemsCount': { 'signature': 'void | integer', 'return_type': 'integer'},
\     'getColumnsCount': { 'signature': 'void | integer', 'return_type': 'integer'},
\     'getColumnNames': { 'signature': 'void | array', 'return_type': 'array'},
\     'getColumns': { 'signature': 'void | Array', 'return_type': 'Array'},
\     'getGeneratedIds': { 'signature': 'void | array', 'return_type': 'array'},
\     'getLastInsertId': { 'signature': 'void | String', 'return_type': 'String'},
\     'getWarnings': { 'signature': 'void | array', 'return_type': 'array'},
\     'getWarningCounts': { 'signature': 'void | integer', 'return_type': 'integer'},
\     'hasData': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'nextResult': { 'signature': 'void | mysql_xdevapi\Result', 'return_type': 'mysql_xdevapi\Result'},
\   },
\},
\'mysql_xdevapi\statement': {
\   'name': 'mysql_xdevapi\Statement',
\   'constants': {
\     'EXECUTE_ASYNC': '1',
\     'BUFFERED': '2',
\   },
\   'methods': {
\     'getNextResult': { 'signature': 'void | mysql_xdevapi\Result', 'return_type': 'mysql_xdevapi\Result'},
\     'getResult': { 'signature': 'void | mysql_xdevapi\Result', 'return_type': 'mysql_xdevapi\Result'},
\     'hasMoreResults': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'mysql_xdevapi\table': {
\   'name': 'mysql_xdevapi\Table',
\   'properties': {
\     'name': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     'count': { 'signature': 'void | integer', 'return_type': 'integer'},
\     'delete': { 'signature': 'void | mysql_xdevapi\TableDelete', 'return_type': 'mysql_xdevapi\TableDelete'},
\     'existsInDatabase': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getSchema': { 'signature': 'void | mysql_xdevapi\Schema', 'return_type': 'mysql_xdevapi\Schema'},
\     'getSession': { 'signature': 'void | mysql_xdevapi\Session', 'return_type': 'mysql_xdevapi\Session'},
\     'insert': { 'signature': 'mixed $columns [, mixed $...] | mysql_xdevapi\TableInsert', 'return_type': 'mysql_xdevapi\TableInsert'},
\     'isView': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'select': { 'signature': 'mixed $columns [, mixed $...] | mysql_xdevapi\TableSelect', 'return_type': 'mysql_xdevapi\TableSelect'},
\     'update': { 'signature': 'void | mysql_xdevapi\TableUpdate', 'return_type': 'mysql_xdevapi\TableUpdate'},
\   },
\},
\'mysql_xdevapi\tabledelete': {
\   'name': 'mysql_xdevapi\TableDelete',
\   'methods': {
\     'bind': { 'signature': 'array $placeholder_values | mysql_xdevapi\TableDelete', 'return_type': 'mysql_xdevapi\TableDelete'},
\     'execute': { 'signature': 'void | mysql_xdevapi\Result', 'return_type': 'mysql_xdevapi\Result'},
\     'limit': { 'signature': 'integer $rows | mysql_xdevapi\TableDelete', 'return_type': 'mysql_xdevapi\TableDelete'},
\     'orderby': { 'signature': 'string $orderby_expr | mysql_xdevapi\TableDelete', 'return_type': 'mysql_xdevapi\TableDelete'},
\     'where': { 'signature': 'string $where_expr | mysql_xdevapi\TableDelete', 'return_type': 'mysql_xdevapi\TableDelete'},
\   },
\},
\'mysql_xdevapi\tableinsert': {
\   'name': 'mysql_xdevapi\TableInsert',
\   'methods': {
\     'execute': { 'signature': 'void | mysql_xdevapi\Result', 'return_type': 'mysql_xdevapi\Result'},
\     'values': { 'signature': 'array $row_values | mysql_xdevapi\TableInsert', 'return_type': 'mysql_xdevapi\TableInsert'},
\   },
\},
\'mysql_xdevapi\tableselect': {
\   'name': 'mysql_xdevapi\TableSelect',
\   'methods': {
\     'bind': { 'signature': 'array $placeholder_values | mysql_xdevapi\TableSelect', 'return_type': 'mysql_xdevapi\TableSelect'},
\     'execute': { 'signature': 'void | mysql_xdevapi\RowResult', 'return_type': 'mysql_xdevapi\RowResult'},
\     'groupBy': { 'signature': 'mixed $sort_expr | mysql_xdevapi\TableSelect', 'return_type': 'mysql_xdevapi\TableSelect'},
\     'having': { 'signature': 'string $sort_expr | mysql_xdevapi\TableSelect', 'return_type': 'mysql_xdevapi\TableSelect'},
\     'limit': { 'signature': 'integer $rows | mysql_xdevapi\TableSelect', 'return_type': 'mysql_xdevapi\TableSelect'},
\     'lockExclusive': { 'signature': '[ integer $lock_waiting_option] | mysql_xdevapi\TableSelect', 'return_type': 'mysql_xdevapi\TableSelect'},
\     'lockShared': { 'signature': '[ integer $lock_waiting_option] | mysql_xdevapi\TableSelect', 'return_type': 'mysql_xdevapi\TableSelect'},
\     'offset': { 'signature': 'integer $position | mysql_xdevapi\TableSelect', 'return_type': 'mysql_xdevapi\TableSelect'},
\     'orderby': { 'signature': 'mixed $sort_expr [, mixed $...] | mysql_xdevapi\TableSelect', 'return_type': 'mysql_xdevapi\TableSelect'},
\     'where': { 'signature': 'string $where_expr | mysql_xdevapi\TableSelect', 'return_type': 'mysql_xdevapi\TableSelect'},
\   },
\},
\'mysql_xdevapi\tableupdate': {
\   'name': 'mysql_xdevapi\TableUpdate',
\   'methods': {
\     'bind': { 'signature': 'array $placeholder_values | mysql_xdevapi\TableUpdate', 'return_type': 'mysql_xdevapi\TableUpdate'},
\     'execute': { 'signature': 'void | mysql_xdevapi\TableUpdate', 'return_type': 'mysql_xdevapi\TableUpdate'},
\     'limit': { 'signature': 'integer $rows | mysql_xdevapi\TableUpdate', 'return_type': 'mysql_xdevapi\TableUpdate'},
\     'orderby': { 'signature': 'mixed $orderby_expr [, mixed $...] | mysql_xdevapi\TableUpdate', 'return_type': 'mysql_xdevapi\TableUpdate'},
\     'set': { 'signature': 'string $table_field, string $expression_or_literal | mysql_xdevapi\TableUpdate', 'return_type': 'mysql_xdevapi\TableUpdate'},
\     'where': { 'signature': 'string $where_expr | mysql_xdevapi\TableUpdate', 'return_type': 'mysql_xdevapi\TableUpdate'},
\   },
\},
\'mysql_xdevapi\warning': {
\   'name': 'mysql_xdevapi\Warning',
\   'properties': {
\     'message': { 'initializer': '', 'type': ''},
\     'level': { 'initializer': '', 'type': ''},
\     'code': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\   },
\},
\'mysql_xdevapi\xsession': {
\   'name': 'mysql_xdevapi\XSession',
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['mysqli'] = {
\'mysqli_driver': {
\   'name': 'mysqli_driver',
\   'properties': {
\     'client_info': { 'initializer': '', 'type': 'string'},
\     'client_version': { 'initializer': '', 'type': 'string'},
\     'driver_version': { 'initializer': '', 'type': 'string'},
\     'embedded': { 'initializer': '', 'type': 'string'},
\     'reconnect': { 'initializer': '', 'type': 'bool'},
\     'report_mode': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'embedded_server_end': { 'signature': 'void | void', 'return_type': 'void'},
\     'embedded_server_start': { 'signature': 'int $start, array $arguments, array $groups | bool', 'return_type': 'bool'},
\   },
\},
\'mysqli_result': {
\   'name': 'mysqli_result',
\   'properties': {
\     'current_field': { 'initializer': '', 'type': 'int'},
\     'field_count': { 'initializer': '', 'type': 'int'},
\     'lengths': { 'initializer': '', 'type': 'array'},
\     'num_rows': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'data_seek': { 'signature': 'int $offset | bool', 'return_type': 'bool'},
\     'fetch_all': { 'signature': '[ int $resulttype = MYSQLI_NUM] | mixed', 'return_type': 'mixed'},
\     'fetch_array': { 'signature': '[ int $resulttype = MYSQLI_BOTH] | mixed', 'return_type': 'mixed'},
\     'fetch_assoc': { 'signature': 'void | array', 'return_type': 'array'},
\     'fetch_field_direct': { 'signature': 'int $fieldnr | object', 'return_type': 'object'},
\     'fetch_field': { 'signature': 'void | object', 'return_type': 'object'},
\     'fetch_fields': { 'signature': 'void | array', 'return_type': 'array'},
\     'fetch_object': { 'signature': '[ string $class_name = "stdClass" [, array $params]] | object', 'return_type': 'object'},
\     'fetch_row': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'field_seek': { 'signature': 'int $fieldnr | bool', 'return_type': 'bool'},
\     'free': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'mysqli_sql_exception': {
\   'name': 'mysqli_sql_exception',
\   'properties': {
\     'sqlstate': { 'initializer': '', 'type': 'string'},
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\},
\'mysqli_stmt': {
\   'name': 'mysqli_stmt',
\   'properties': {
\     'affected_rows': { 'initializer': '', 'type': 'int'},
\     'errno': { 'initializer': '', 'type': 'int'},
\     'error_list': { 'initializer': '', 'type': 'array'},
\     'error': { 'initializer': '', 'type': 'string'},
\     'field_count': { 'initializer': '', 'type': 'int'},
\     'insert_id': { 'initializer': '', 'type': 'int'},
\     'num_rows': { 'initializer': '', 'type': 'int'},
\     'param_count': { 'initializer': '', 'type': 'int'},
\     'sqlstate': { 'initializer': '', 'type': 'string'},
\   },
\   'methods': {
\     '__construct': { 'signature': 'mysqli $link [, string $query]', 'return_type': ''},
\     'attr_get': { 'signature': 'int $attr | int', 'return_type': 'int'},
\     'attr_set': { 'signature': 'int $attr, int $mode | bool', 'return_type': 'bool'},
\     'bind_param': { 'signature': 'string $types, mixed &$var1 [, mixed &$...] | bool', 'return_type': 'bool'},
\     'bind_result': { 'signature': 'mixed &$var1 [, mixed &$...] | bool', 'return_type': 'bool'},
\     'close': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'data_seek': { 'signature': 'int $offset | void', 'return_type': 'void'},
\     'execute': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'fetch': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'free_result': { 'signature': 'void | void', 'return_type': 'void'},
\     'get_result': { 'signature': 'void | mysqli_result', 'return_type': 'mysqli_result'},
\     'get_warnings': { 'signature': 'void | object', 'return_type': 'object'},
\     'num_rows': { 'signature': 'void | int', 'return_type': 'int'},
\     'prepare': { 'signature': 'string $query | mixed', 'return_type': 'mixed'},
\     'reset': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'result_metadata': { 'signature': 'void | mysqli_result', 'return_type': 'mysqli_result'},
\     'send_long_data': { 'signature': 'int $param_nr, string $data | bool', 'return_type': 'bool'},
\     'store_result': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'mysqli_warning': {
\   'name': 'mysqli_warning',
\   'properties': {
\     'message': { 'initializer': '', 'type': ''},
\     'sqlstate': { 'initializer': '', 'type': ''},
\     'errno': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'next': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'mysqli': {
\   'name': 'mysqli',
\   'properties': {
\     'affected_rows': { 'initializer': '', 'type': 'int'},
\     'connect_errno': { 'initializer': '', 'type': 'int'},
\     'connect_error': { 'initializer': '', 'type': 'string'},
\     'errno': { 'initializer': '', 'type': 'int'},
\     'error_list': { 'initializer': '', 'type': 'array'},
\     'error': { 'initializer': '', 'type': 'string'},
\     'field_count': { 'initializer': '', 'type': 'int'},
\     'client_info': { 'initializer': '', 'type': 'string'},
\     'client_version': { 'initializer': '', 'type': 'int'},
\     'host_info': { 'initializer': '', 'type': 'string'},
\     'protocol_version': { 'initializer': '', 'type': 'string'},
\     'server_info': { 'initializer': '', 'type': 'string'},
\     'server_version': { 'initializer': '', 'type': 'int'},
\     'info': { 'initializer': '', 'type': 'string'},
\     'insert_id': { 'initializer': '', 'type': 'mixed'},
\     'sqlstate': { 'initializer': '', 'type': 'string'},
\     'thread_id': { 'initializer': '', 'type': 'int'},
\     'warning_count': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     '__construct': { 'signature': '[ string $host = ini_get("mysqli.default_host") [, string $username = ini_get("mysqli.default_user") [, string $passwd = ini_get("mysqli.default_pw") [, string $dbname = "" [, int $port = ini_get("mysqli.default_port") [, string $socket = ini_get("mysqli.default_socket")]]]]]]', 'return_type': ''},
\     'autocommit': { 'signature': 'bool $mode | bool', 'return_type': 'bool'},
\     'change_user': { 'signature': 'string $user, string $password, string $database | bool', 'return_type': 'bool'},
\     'character_set_name': { 'signature': 'void | string', 'return_type': 'string'},
\     'close': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'commit': { 'signature': '[ int $flags = 0 [, string $name]] | bool', 'return_type': 'bool'},
\     'connect': { 'signature': '[ string $host = ini_get("mysqli.default_host") [, string $username = ini_get("mysqli.default_user") [, string $passwd = ini_get("mysqli.default_pw") [, string $dbname = "" [, int $port = ini_get("mysqli.default_port") [, string $socket = ini_get("mysqli.default_socket")]]]]]] | void', 'return_type': 'void'},
\     'debug': { 'signature': 'string $message | bool', 'return_type': 'bool'},
\     'dump_debug_info': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'get_charset': { 'signature': 'void | object', 'return_type': 'object'},
\     'get_client_info': { 'signature': 'void | string', 'return_type': 'string'},
\     'get_connection_stats': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'get_server_info': { 'signature': 'void | string', 'return_type': 'string'},
\     'get_warnings': { 'signature': 'void | mysqli_warning', 'return_type': 'mysqli_warning'},
\     'init': { 'signature': 'void | mysqli', 'return_type': 'mysqli'},
\     'kill': { 'signature': 'int $processid | bool', 'return_type': 'bool'},
\     'more_results': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'multi_query': { 'signature': 'string $query | bool', 'return_type': 'bool'},
\     'next_result': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'options': { 'signature': 'int $option, mixed $value | bool', 'return_type': 'bool'},
\     'ping': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'prepare': { 'signature': 'string $query | mysqli_stmt', 'return_type': 'mysqli_stmt'},
\     'query': { 'signature': 'string $query [, int $resultmode = MYSQLI_STORE_RESULT] | mixed', 'return_type': 'mixed'},
\     'real_connect': { 'signature': '[ string $host [, string $username [, string $passwd [, string $dbname [, int $port [, string $socket [, int $flags]]]]]]] | bool', 'return_type': 'bool'},
\     'escape_string': { 'signature': 'string $escapestr | string', 'return_type': 'string'},
\     'real_escape_string': { 'signature': 'string $escapestr | string', 'return_type': 'string'},
\     'real_query': { 'signature': 'string $query | bool', 'return_type': 'bool'},
\     'reap_async_query': { 'signature': 'void | mysqli_result', 'return_type': 'mysqli_result'},
\     'refresh': { 'signature': 'int $options | bool', 'return_type': 'bool'},
\     'rollback': { 'signature': '[ int $flags = 0 [, string $name]] | bool', 'return_type': 'bool'},
\     'rpl_query_type': { 'signature': 'string $query | int', 'return_type': 'int'},
\     'select_db': { 'signature': 'string $dbname | bool', 'return_type': 'bool'},
\     'send_query': { 'signature': 'string $query | bool', 'return_type': 'bool'},
\     'set_charset': { 'signature': 'string $charset | bool', 'return_type': 'bool'},
\     'set_local_infile_handler': { 'signature': 'mysqli $link, callable $read_func | bool', 'return_type': 'bool'},
\     'ssl_set': { 'signature': 'string $key, string $cert, string $ca, string $capath, string $cipher | bool', 'return_type': 'bool'},
\     'stat': { 'signature': 'void | string', 'return_type': 'string'},
\     'stmt_init': { 'signature': 'void | mysqli_stmt', 'return_type': 'mysqli_stmt'},
\     'store_result': { 'signature': '[ int $option] | mysqli_result', 'return_type': 'mysqli_result'},
\     'use_result': { 'signature': 'void | mysqli_result', 'return_type': 'mysqli_result'},
\   },
\   'static_methods': {
\     'poll': { 'signature': 'array &$read, array &$error, array &$reject, int $sec [, int $usec = 0] | int', 'return_type': 'int'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['mysqlnd_uh'] = {
\'mysqlnduhconnection': {
\   'name': 'MysqlndUhConnection',
\   'methods': {
\     'changeUser': { 'signature': 'mysqlnd_connection $connection, string $user, string $password, string $database, bool $silent, int $passwd_len | bool', 'return_type': 'bool'},
\     'charsetName': { 'signature': 'mysqlnd_connection $connection | string', 'return_type': 'string'},
\     'close': { 'signature': 'mysqlnd_connection $connection, int $close_type | bool', 'return_type': 'bool'},
\     'connect': { 'signature': 'mysqlnd_connection $connection, string $host, string $use", string $password, string $database, int $port, string $socket, int $mysql_flags | bool', 'return_type': 'bool'},
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'endPSession': { 'signature': 'mysqlnd_connection $connection | bool', 'return_type': 'bool'},
\     'escapeString': { 'signature': 'mysqlnd_connection $connection, string $escape_string | string', 'return_type': 'string'},
\     'getAffectedRows': { 'signature': 'mysqlnd_connection $connection | int', 'return_type': 'int'},
\     'getErrorNumber': { 'signature': 'mysqlnd_connection $connection | int', 'return_type': 'int'},
\     'getErrorString': { 'signature': 'mysqlnd_connection $connection | string', 'return_type': 'string'},
\     'getFieldCount': { 'signature': 'mysqlnd_connection $connection | int', 'return_type': 'int'},
\     'getHostInformation': { 'signature': 'mysqlnd_connection $connection | string', 'return_type': 'string'},
\     'getLastInsertId': { 'signature': 'mysqlnd_connection $connection | int', 'return_type': 'int'},
\     'getLastMessage': { 'signature': 'mysqlnd_connection $connection | void', 'return_type': 'void'},
\     'getProtocolInformation': { 'signature': 'mysqlnd_connection $connection | string', 'return_type': 'string'},
\     'getServerInformation': { 'signature': 'mysqlnd_connection $connection | string', 'return_type': 'string'},
\     'getServerStatistics': { 'signature': 'mysqlnd_connection $connection | string', 'return_type': 'string'},
\     'getServerVersion': { 'signature': 'mysqlnd_connection $connection | int', 'return_type': 'int'},
\     'getSqlstate': { 'signature': 'mysqlnd_connection $connection | string', 'return_type': 'string'},
\     'getStatistics': { 'signature': 'mysqlnd_connection $connection | array', 'return_type': 'array'},
\     'getThreadId': { 'signature': 'mysqlnd_connection $connection | int', 'return_type': 'int'},
\     'getWarningCount': { 'signature': 'mysqlnd_connection $connection | int', 'return_type': 'int'},
\     'init': { 'signature': 'mysqlnd_connection $connection | bool', 'return_type': 'bool'},
\     'killConnection': { 'signature': 'mysqlnd_connection $connection, int $pid | bool', 'return_type': 'bool'},
\     'listFields': { 'signature': 'mysqlnd_connection $connection, string $table, string $achtung_wild | array', 'return_type': 'array'},
\     'listMethod': { 'signature': 'mysqlnd_connection $connection, string $query, string $achtung_wild, string $par1 | void', 'return_type': 'void'},
\     'moreResults': { 'signature': 'mysqlnd_connection $connection | bool', 'return_type': 'bool'},
\     'nextResult': { 'signature': 'mysqlnd_connection $connection | bool', 'return_type': 'bool'},
\     'ping': { 'signature': 'mysqlnd_connection $connection | bool', 'return_type': 'bool'},
\     'query': { 'signature': 'mysqlnd_connection $connection, string $query | bool', 'return_type': 'bool'},
\     'queryReadResultsetHeader': { 'signature': 'mysqlnd_connection $connection, mysqlnd_statement $mysqlnd_stmt | bool', 'return_type': 'bool'},
\     'reapQuery': { 'signature': 'mysqlnd_connection $connection | bool', 'return_type': 'bool'},
\     'refreshServer': { 'signature': 'mysqlnd_connection $connection, int $options | bool', 'return_type': 'bool'},
\     'restartPSession': { 'signature': 'mysqlnd_connection $connection | bool', 'return_type': 'bool'},
\     'selectDb': { 'signature': 'mysqlnd_connection $connection, string $database | bool', 'return_type': 'bool'},
\     'sendClose': { 'signature': 'mysqlnd_connection $connection | bool', 'return_type': 'bool'},
\     'sendQuery': { 'signature': 'mysqlnd_connection $connection, string $query | bool', 'return_type': 'bool'},
\     'serverDumpDebugInformation': { 'signature': 'mysqlnd_connection $connection | bool', 'return_type': 'bool'},
\     'setAutocommit': { 'signature': 'mysqlnd_connection $connection, int $mode | bool', 'return_type': 'bool'},
\     'setCharset': { 'signature': 'mysqlnd_connection $connection, string $charset | bool', 'return_type': 'bool'},
\     'setClientOption': { 'signature': 'mysqlnd_connection $connection, int $option, int $value | bool', 'return_type': 'bool'},
\     'setServerOption': { 'signature': 'mysqlnd_connection $connection, int $option | void', 'return_type': 'void'},
\     'shutdownServer': { 'signature': 'string $MYSQLND_UH_RES_MYSQLND_NAME, string $level | void', 'return_type': 'void'},
\     'simpleCommand': { 'signature': 'mysqlnd_connection $connection, int $command, string $arg, int $ok_packet, bool $silent, bool $ignore_upsert_status | bool', 'return_type': 'bool'},
\     'simpleCommandHandleResponse': { 'signature': 'mysqlnd_connection $connection, int $ok_packet, bool $silent, int $command, bool $ignore_upsert_status | bool', 'return_type': 'bool'},
\     'sslSet': { 'signature': 'mysqlnd_connection $connection, string $key, string $cert, string $ca, string $capath, string $cipher | bool', 'return_type': 'bool'},
\     'stmtInit': { 'signature': 'mysqlnd_connection $connection | resource', 'return_type': 'resource'},
\     'storeResult': { 'signature': 'mysqlnd_connection $connection | resource', 'return_type': 'resource'},
\     'txCommit': { 'signature': 'mysqlnd_connection $connection | bool', 'return_type': 'bool'},
\     'txRollback': { 'signature': 'mysqlnd_connection $connection | bool', 'return_type': 'bool'},
\     'useResult': { 'signature': 'mysqlnd_connection $connection | resource', 'return_type': 'resource'},
\   },
\},
\'mysqlnduhpreparedstatement': {
\   'name': 'MysqlndUhPreparedStatement',
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'execute': { 'signature': 'mysqlnd_prepared_statement $statement | bool', 'return_type': 'bool'},
\     'prepare': { 'signature': 'mysqlnd_prepared_statement $statement, string $query | bool', 'return_type': 'bool'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['oauth'] = {
\'oauth': {
\   'name': 'OAuth',
\   'properties': {
\     'debug': { 'initializer': '', 'type': ''},
\     'sslChecks': { 'initializer': '', 'type': ''},
\     'debugInfo': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     '__construct': { 'signature': 'string $consumer_key, string $consumer_secret [, string $signature_method = OAUTH_SIG_METHOD_HMACSHA1 [, int $auth_type = 0]]', 'return_type': ''},
\     '__destruct': { 'signature': 'void | void', 'return_type': 'void'},
\     'disableDebug': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'disableRedirects': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'disableSSLChecks': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'enableDebug': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'enableRedirects': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'enableSSLChecks': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'fetch': { 'signature': 'string $protected_resource_url [, array $extra_parameters [, string $http_method [, array $http_headers]]] | mixed', 'return_type': 'mixed'},
\     'generateSignature': { 'signature': 'string $http_method, string $url [, mixed $extra_parameters] | string', 'return_type': 'string'},
\     'getAccessToken': { 'signature': 'string $access_token_url [, string $auth_session_handle [, string $verifier_token [, string $http_method]]] | array', 'return_type': 'array'},
\     'getCAPath': { 'signature': 'void | array', 'return_type': 'array'},
\     'getLastResponse': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLastResponseHeaders': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLastResponseInfo': { 'signature': 'void | array', 'return_type': 'array'},
\     'getRequestHeader': { 'signature': 'string $http_method, string $url [, mixed $extra_parameters] | string', 'return_type': 'string'},
\     'getRequestToken': { 'signature': 'string $request_token_url [, string $callback_url [, string $http_method]] | array', 'return_type': 'array'},
\     'setAuthType': { 'signature': 'int $auth_type | bool', 'return_type': 'bool'},
\     'setCAPath': { 'signature': '[ string $ca_path [, string $ca_info]] | mixed', 'return_type': 'mixed'},
\     'setNonce': { 'signature': 'string $nonce | mixed', 'return_type': 'mixed'},
\     'setRequestEngine': { 'signature': 'int $reqengine | void', 'return_type': 'void'},
\     'setRSACertificate': { 'signature': 'string $cert | mixed', 'return_type': 'mixed'},
\     'setSSLChecks': { 'signature': 'int $sslcheck | bool', 'return_type': 'bool'},
\     'setTimestamp': { 'signature': 'string $timestamp | mixed', 'return_type': 'mixed'},
\     'setToken': { 'signature': 'string $token, string $token_secret | bool', 'return_type': 'bool'},
\     'setVersion': { 'signature': 'string $version | bool', 'return_type': 'bool'},
\   },
\},
\'oauthexception': {
\   'name': 'OAuthException',
\   'properties': {
\     'lastResponse': { 'initializer': '', 'type': ''},
\     'debugInfo': { 'initializer': '', 'type': ''},
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'oauthprovider': {
\   'name': 'OAuthProvider',
\   'methods': {
\     'addRequiredParameter': { 'signature': 'string $req_params | bool', 'return_type': 'bool'},
\     'callconsumerHandler': { 'signature': 'void | void', 'return_type': 'void'},
\     'callTimestampNonceHandler': { 'signature': 'void | void', 'return_type': 'void'},
\     'calltokenHandler': { 'signature': 'void | void', 'return_type': 'void'},
\     'checkOAuthRequest': { 'signature': '[ string $uri [, string $method]] | void', 'return_type': 'void'},
\     '__construct': { 'signature': '[ array $params_array]', 'return_type': ''},
\     'consumerHandler': { 'signature': 'callable $callback_function | void', 'return_type': 'void'},
\     'is2LeggedEndpoint': { 'signature': 'mixed $params_array | void', 'return_type': 'void'},
\     'isRequestTokenEndpoint': { 'signature': 'bool $will_issue_request_token | void', 'return_type': 'void'},
\     'removeRequiredParameter': { 'signature': 'string $req_params | bool', 'return_type': 'bool'},
\     'setParam': { 'signature': 'string $param_key [, mixed $param_val] | bool', 'return_type': 'bool'},
\     'setRequestTokenPath': { 'signature': 'string $path | bool', 'return_type': 'bool'},
\     'timestampNonceHandler': { 'signature': 'callable $callback_function | void', 'return_type': 'void'},
\     'tokenHandler': { 'signature': 'callable $callback_function | void', 'return_type': 'void'},
\   },
\   'static_methods': {
\     'generateToken': { 'signature': 'int $size [, bool $strong = FALSE] | string', 'return_type': 'string'},
\     'reportProblem': { 'signature': 'string $oauthexception [, bool $send_headers = TRUE] | string', 'return_type': 'string'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['parallel'] = {
\'parallel\channel': {
\   'name': 'parallel\Channel',
\   'constants': {
\     'Infinite': '',
\   },
\   'methods': {
\     '__construct': { 'signature': 'int $capacity', 'return_type': ''},
\     'make': { 'signature': 'string $name, int $capacity | Channel', 'return_type': 'Channel'},
\     'open': { 'signature': 'string $name | Channel', 'return_type': 'Channel'},
\     'recv': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'send': { 'signature': 'mixed $value | void', 'return_type': 'void'},
\     'close': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'parallel\events\event\type': {
\   'name': 'parallel\Events\Event\Type',
\   'constants': {
\     'Read': '',
\     'Write': '',
\     'Close': '',
\     'Cancel': '',
\     'Kill': '',
\     'Error': '',
\   },
\},
\'parallel\events\event': {
\   'name': 'parallel\Events\Event',
\   'properties': {
\     'type': { 'initializer': '', 'type': 'int'},
\     'source': { 'initializer': '', 'type': 'string'},
\     'object': { 'initializer': '', 'type': 'object'},
\     'value': { 'initializer': '', 'type': ''},
\   },
\},
\'parallel\events\input': {
\   'name': 'parallel\Events\Input',
\   'methods': {
\     'add': { 'signature': 'string $target, mixed $value | void', 'return_type': 'void'},
\     'remove': { 'signature': 'string $target | void', 'return_type': 'void'},
\     'clear': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'parallel\events': {
\   'name': 'parallel\Events',
\   'methods': {
\     'setInput': { 'signature': 'Input $input | void', 'return_type': 'void'},
\     'addChannel': { 'signature': 'parallel\Channel $channel | void', 'return_type': 'void'},
\     'addFuture': { 'signature': 'string $name, parallel\Future $future | void', 'return_type': 'void'},
\     'remove': { 'signature': 'string $target | void', 'return_type': 'void'},
\     'setBlocking': { 'signature': 'bool $blocking | void', 'return_type': 'void'},
\     'setTimeout': { 'signature': 'int $timeout | void', 'return_type': 'void'},
\     'poll': { 'signature': 'void | ?Event', 'return_type': '?Event'},
\   },
\},
\'parallel\future': {
\   'name': 'parallel\Future',
\   'methods': {
\     'value': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'cancelled': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'done': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'cancel': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'parallel\runtime': {
\   'name': 'parallel\Runtime',
\   'methods': {
\     '__construct': { 'signature': 'string $bootstrap', 'return_type': ''},
\     'run': { 'signature': 'Closure $task, array $argv | ?Future', 'return_type': '?Future'},
\     'close': { 'signature': 'void | void', 'return_type': 'void'},
\     'kill': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'parallel\sync': {
\   'name': 'parallel\Sync',
\   'methods': {
\     '__construct': { 'signature': 'scalar $value', 'return_type': ''},
\     'get': { 'signature': 'void | scalar', 'return_type': 'scalar'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['parle'] = {
\'parle\errorinfo': {
\   'name': 'Parle\ErrorInfo',
\   'properties': {
\     'id': { 'initializer': '', 'type': 'integer'},
\     'position': { 'initializer': '', 'type': 'integer'},
\     'token': { 'initializer': '', 'type': 'mixed'},
\   },
\},
\'parle\lexer': {
\   'name': 'Parle\Lexer',
\   'constants': {
\     'ICASE': '1',
\     'DOT_NOT_LF': '2',
\     'DOT_NOT_CRLF': '4',
\     'SKIP_WS': '8',
\     'MATCH_ZERO_LEN': '16',
\   },
\   'properties': {
\     'bol': { 'initializer': 'FALSE', 'type': 'boolean'},
\     'flags': { 'initializer': '0', 'type': 'integer'},
\     'state': { 'initializer': '0', 'type': 'integer'},
\     'marker': { 'initializer': '0', 'type': 'integer'},
\     'cursor': { 'initializer': '0', 'type': 'integer'},
\   },
\   'methods': {
\     'advance': { 'signature': 'void | void', 'return_type': 'void'},
\     'build': { 'signature': 'void | void', 'return_type': 'void'},
\     'callout': { 'signature': 'int $id, callable $callback | void', 'return_type': 'void'},
\     'consume': { 'signature': 'string $data | void', 'return_type': 'void'},
\     'dump': { 'signature': 'void | void', 'return_type': 'void'},
\     'getToken': { 'signature': 'void | Parle\Token', 'return_type': 'Parle\Token'},
\     'insertMacro': { 'signature': 'string $name, string $regex | void', 'return_type': 'void'},
\     'push': { 'signature': 'string $regex, int $id | void', 'return_type': 'void'},
\     'reset': { 'signature': 'int $pos | void', 'return_type': 'void'},
\   },
\},
\'parle\lexerexception': {
\   'name': 'Parle\LexerException',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'parle\parser': {
\   'name': 'Parle\Parser',
\   'constants': {
\     'ACTION_ERROR': '0',
\     'ACTION_SHIFT': '1',
\     'ACTION_REDUCE': '2',
\     'ACTION_GOTO': '3',
\     'ACTION_ACCEPT': '4',
\     'ERROR_SYNTAX': '0',
\     'ERROR_NON_ASSOCIATIVE': '1',
\     'ERROR_UNKNOWN_TOKEN': '2',
\   },
\   'properties': {
\     'action': { 'initializer': '0', 'type': 'integer'},
\     'reduceId': { 'initializer': '0', 'type': 'integer'},
\   },
\   'methods': {
\     'advance': { 'signature': 'void | void', 'return_type': 'void'},
\     'build': { 'signature': 'void | void', 'return_type': 'void'},
\     'consume': { 'signature': 'string $data, Parle\Lexer $lexer | void', 'return_type': 'void'},
\     'dump': { 'signature': 'void | void', 'return_type': 'void'},
\     'errorInfo': { 'signature': 'void | Parle\ErrorInfo', 'return_type': 'Parle\ErrorInfo'},
\     'left': { 'signature': 'string $tok | void', 'return_type': 'void'},
\     'nonassoc': { 'signature': 'string $tok | void', 'return_type': 'void'},
\     'precedence': { 'signature': 'string $tok | void', 'return_type': 'void'},
\     'push': { 'signature': 'string $name, string $rule | int', 'return_type': 'int'},
\     'reset': { 'signature': '[ int $tokenId] | void', 'return_type': 'void'},
\     'right': { 'signature': 'string $tok | void', 'return_type': 'void'},
\     'sigil': { 'signature': 'int $idx | string', 'return_type': 'string'},
\     'token': { 'signature': 'string $tok | void', 'return_type': 'void'},
\     'tokenId': { 'signature': 'string $tok | int', 'return_type': 'int'},
\     'trace': { 'signature': 'void | string', 'return_type': 'string'},
\     'validate': { 'signature': 'string $data, Parle\Lexer $lexer | bool', 'return_type': 'bool'},
\   },
\},
\'parle\parserexception': {
\   'name': 'Parle\ParserException',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'parle\rlexer': {
\   'name': 'Parle\RLexer',
\   'constants': {
\     'ICASE': '1',
\     'DOT_NOT_LF': '2',
\     'DOT_NOT_CRLF': '4',
\     'SKIP_WS': '8',
\     'MATCH_ZERO_LEN': '16',
\   },
\   'properties': {
\     'bol': { 'initializer': 'FALSE', 'type': 'boolean'},
\     'flags': { 'initializer': '0', 'type': 'integer'},
\     'state': { 'initializer': '0', 'type': 'integer'},
\     'marker': { 'initializer': '0', 'type': 'integer'},
\     'cursor': { 'initializer': '0', 'type': 'integer'},
\   },
\   'methods': {
\     'advance': { 'signature': 'void | void', 'return_type': 'void'},
\     'build': { 'signature': 'void | void', 'return_type': 'void'},
\     'callout': { 'signature': 'int $id, callable $callback | void', 'return_type': 'void'},
\     'consume': { 'signature': 'string $data | void', 'return_type': 'void'},
\     'dump': { 'signature': 'void | void', 'return_type': 'void'},
\     'getToken': { 'signature': 'void | Parle\Token', 'return_type': 'Parle\Token'},
\     'insertMacro': { 'signature': 'string $name, string $regex | void', 'return_type': 'void'},
\     'push': { 'signature': 'string $state, string $regex, string $newState | void', 'return_type': 'void'},
\     'pushState': { 'signature': 'string $state | int', 'return_type': 'int'},
\     'reset': { 'signature': 'int $pos | void', 'return_type': 'void'},
\   },
\},
\'parle\rparser': {
\   'name': 'Parle\RParser',
\   'constants': {
\     'ACTION_ERROR': '0',
\     'ACTION_SHIFT': '1',
\     'ACTION_REDUCE': '2',
\     'ACTION_GOTO': '3',
\     'ACTION_ACCEPT': '4',
\     'ERROR_SYNTAX': '0',
\     'ERROR_NON_ASSOCIATIVE': '1',
\     'ERROR_UNKNOWN_TOKEN': '2',
\   },
\   'properties': {
\     'action': { 'initializer': '0', 'type': 'integer'},
\     'reduceId': { 'initializer': '0', 'type': 'integer'},
\   },
\   'methods': {
\     'advance': { 'signature': 'void | void', 'return_type': 'void'},
\     'build': { 'signature': 'void | void', 'return_type': 'void'},
\     'consume': { 'signature': 'string $data, Parle\RLexer $rlexer | void', 'return_type': 'void'},
\     'dump': { 'signature': 'void | void', 'return_type': 'void'},
\     'errorInfo': { 'signature': 'void | Parle\ErrorInfo', 'return_type': 'Parle\ErrorInfo'},
\     'left': { 'signature': 'string $tok | void', 'return_type': 'void'},
\     'nonassoc': { 'signature': 'string $tok | void', 'return_type': 'void'},
\     'precedence': { 'signature': 'string $tok | void', 'return_type': 'void'},
\     'push': { 'signature': 'string $name, string $rule | int', 'return_type': 'int'},
\     'reset': { 'signature': '[ int $tokenId] | void', 'return_type': 'void'},
\     'right': { 'signature': 'string $tok | void', 'return_type': 'void'},
\     'sigil': { 'signature': '[ int $idx] | string', 'return_type': 'string'},
\     'token': { 'signature': 'string $tok | void', 'return_type': 'void'},
\     'tokenId': { 'signature': 'string $tok | int', 'return_type': 'int'},
\     'trace': { 'signature': 'void | string', 'return_type': 'string'},
\     'validate': { 'signature': 'string $data, Parle\RLexer $lexer | bool', 'return_type': 'bool'},
\   },
\},
\'parle\stack': {
\   'name': 'Parle\Stack',
\   'properties': {
\     'empty': { 'initializer': 'TRUE', 'type': 'boolean'},
\     'size': { 'initializer': '0', 'type': 'integer'},
\     'top': { 'initializer': '', 'type': 'mixed'},
\   },
\   'methods': {
\     'pop': { 'signature': 'void | void', 'return_type': 'void'},
\     'push': { 'signature': 'mixed $item | void', 'return_type': 'void'},
\   },
\},
\'parle\token': {
\   'name': 'Parle\Token',
\   'constants': {
\     'EOI': '0',
\     'UNKNOWN': '-1',
\     'SKIP': '-2',
\   },
\   'properties': {
\     'id': { 'initializer': '', 'type': 'integer'},
\     'value': { 'initializer': '', 'type': 'string'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['pdo'] = {
\'pdo': {
\   'name': 'PDO',
\   'constants': {
\     'FETCH_ORI_ABS': '',
\     'ATTR_PERSISTENT': '',
\     'CLASS_CONSTANT': '',
\     'ATTR_DEFAULT_FETCH_MODE': '',
\     'FETCH_PROPS_LATE': '',
\     'FETCH_KEY_PAIR': '',
\     'FB_ATTR_DATE_FORMAT': '',
\     'FB_ATTR_TIME_FORMAT': '',
\     'FB_ATTR_TIMESTAMP_FORMAT': '',
\     'MYSQL_ATTR_READ_DEFAULT_FILE': '',
\     'MYSQL_ATTR_READ_DEFAULT_GROUP': '',
\     'PARAM_STR_NATL': '',
\     'PARAM_STR_CHAR': '',
\     'ATTR_DEFAULT_STR_PARAM': '',
\     'PARAM_STR': '',
\     'ATTR_EMULATE_PREPARES': '',
\     'DBLIB_ATTR_SKIP_EMPTY_ROWSETS': '',
\     'DBLIB_ATTR_TDS_VERSION': '',
\     'SQLITE_ATTR_OPEN_FLAGS': '',
\     'SQLITE_READONLY': '',
\     'ATTR_AUTOCOMMIT': '',
\     'ATTR_DRIVER_NAME': '',
\     'FOURD_ATTR_CHARSET': '',
\     'FOURD_ATTR_PREFERRED_IMAGE_TYPES': '',
\     'PARAM_LOB': '',
\     'ATTR_ERRMODE': '',
\     'ERRMODE_EXCEPTION': '',
\     'PARAM_BOOL': '',
\     'PARAM_NULL': '',
\     'PARAM_INT': '',
\     'PARAM_STMT': '',
\     'PARAM_INPUT_OUTPUT': '',
\     'FETCH_LAZY': '',
\     'FETCH_ASSOC': '',
\     'FETCH_NAMED': '',
\     'FETCH_NUM': '',
\     'FETCH_BOTH': '',
\     'FETCH_OBJ': '',
\     'FETCH_BOUND': '',
\     'FETCH_COLUMN': '',
\     'FETCH_CLASS': '',
\     'FETCH_INTO': '',
\     'FETCH_FUNC': '',
\     'FETCH_GROUP': '',
\     'FETCH_UNIQUE': '',
\     'FETCH_CLASSTYPE': '',
\     'FETCH_SERIALIZE': '',
\     'ATTR_PREFETCH': '',
\     'ATTR_TIMEOUT': '',
\     'ATTR_SERVER_VERSION': '',
\     'ATTR_CLIENT_VERSION': '',
\     'ATTR_SERVER_INFO': '',
\     'ATTR_CONNECTION_STATUS': '',
\     'ATTR_CASE': '',
\     'ATTR_CURSOR_NAME': '',
\     'ATTR_CURSOR': '',
\     'CURSOR_FWDONLY': '',
\     'CURSOR_SCROLL': '',
\     'ATTR_ORACLE_NULLS': '',
\     'ATTR_STATEMENT_CLASS': '',
\     'ATTR_FETCH_CATALOG_NAMES': '',
\     'ATTR_FETCH_TABLE_NAMES': '',
\     'ATTR_STRINGIFY_FETCHES': '',
\     'ATTR_MAX_COLUMN_LEN': '',
\     'ERRMODE_SILENT': '',
\     'ERRMODE_WARNING': '',
\     'CASE_NATURAL': '',
\     'CASE_LOWER': '',
\     'CASE_UPPER': '',
\     'NULL_NATURAL': '',
\     'NULL_EMPTY_STRING': '',
\     'NULL_TO_STRING': '',
\     'FETCH_ORI_NEXT': '',
\     'FETCH_ORI_PRIOR': '',
\     'FETCH_ORI_FIRST': '',
\     'FETCH_ORI_LAST': '',
\     'FETCH_ORI_REL': '',
\     'ERR_NONE': '',
\     'PARAM_EVT_ALLOC': '',
\     'PARAM_EVT_FREE': '',
\     'PARAM_EVT_EXEC_PRE': '',
\     'PARAM_EVT_EXEC_POST': '',
\     'PARAM_EVT_FETCH_PRE': '',
\     'PARAM_EVT_FETCH_POST': '',
\     'PARAM_EVT_NORMALIZE': '',
\     'SQLITE_DETERMINISTIC': '',
\     'FETCH_USE_DEFAULT': '',
\     'MYSQL_ATTR_INIT_COMMAND': '',
\     'MYSQL_ATTR_USE_BUFFERED_QUERY': '',
\     'MYSQL_ATTR_LOCAL_INFILE': '',
\     'MYSQL_ATTR_MAX_BUFFER_SIZE': '',
\     'MYSQL_ATTR_DIRECT_QUERY': '',
\     'MYSQL_ATTR_FOUND_ROWS': '',
\     'MYSQL_ATTR_IGNORE_SPACE': '',
\     'MYSQL_ATTR_COMPRESS': '',
\     'MYSQL_ATTR_SSL_CA': '',
\     'MYSQL_ATTR_SSL_CAPATH': '',
\     'MYSQL_ATTR_SSL_CERT': '',
\     'MYSQL_ATTR_SSL_CIPHER': '',
\     'MYSQL_ATTR_SSL_KEY': '',
\     'MYSQL_ATTR_SSL_VERIFY_SERVER_CERT': '',
\     'MYSQL_ATTR_MULTI_STATEMENTS': '',
\     'OCI_ATTR_ACTION': '',
\     'OCI_ATTR_CLIENT_INFO': '',
\     'OCI_ATTR_CLIENT_IDENTIFIER': '',
\     'OCI_ATTR_MODULE': '',
\     'SQLSRV_TXN_READ_UNCOMMITTED': '',
\     'SQLSRV_TXN_READ_COMMITTED': '',
\     'SQLSRV_TXN_REPEATABLE_READ': '',
\     'SQLSRV_TXN_SNAPSHOT': '',
\     'SQLSRV_TXN_SERIALIZABLE': '',
\     'SQLSRV_ENCODING_BINARY': '',
\     'SQLSRV_ENCODING_SYSTEM': '',
\     'SQLSRV_ENCODING_UTF8': '',
\     'SQLSRV_ENCODING_DEFAULT': '',
\     'SQLSRV_ATTR_QUERY_TIMEOUT': '',
\     'SQLSRV_ATTR_DIRECT_QUERY': '',
\   },
\   'methods': {
\     '__construct': { 'signature': 'string $dsn [, string $username [, string $passwd [, array $options]]]', 'return_type': ''},
\     'beginTransaction': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'commit': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'errorCode': { 'signature': 'void | string', 'return_type': 'string'},
\     'errorInfo': { 'signature': 'void | array', 'return_type': 'array'},
\     'exec': { 'signature': 'string $statement | int', 'return_type': 'int'},
\     'getAttribute': { 'signature': 'int $attribute | mixed', 'return_type': 'mixed'},
\     'inTransaction': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'lastInsertId': { 'signature': '[ string $name = NULL] | string', 'return_type': 'string'},
\     'prepare': { 'signature': 'string $statement [, array $driver_options = array()] | PDOStatement', 'return_type': 'PDOStatement'},
\     'query': { 'signature': 'string $statement | PDOStatement', 'return_type': 'PDOStatement'},
\     'quote': { 'signature': 'string $string [, int $parameter_type = PDO::PARAM_STR] | string', 'return_type': 'string'},
\     'rollBack': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'setAttribute': { 'signature': 'int $attribute, mixed $value | bool', 'return_type': 'bool'},
\   },
\   'static_methods': {
\     'getAvailableDrivers': { 'signature': 'void | array', 'return_type': 'array'},
\   },
\},
\'pdoexception': {
\   'name': 'PDOException',
\   'properties': {
\     'errorInfo': { 'initializer': '', 'type': 'array'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'message': { 'initializer': '', 'type': 'string'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'pdostatement': {
\   'name': 'PDOStatement',
\   'properties': {
\     'queryString': { 'initializer': '', 'type': 'string'},
\   },
\   'methods': {
\     'bindColumn': { 'signature': 'mixed $column, mixed &$param [, int $type [, int $maxlen [, mixed $driverdata]]] | bool', 'return_type': 'bool'},
\     'bindParam': { 'signature': 'mixed $parameter, mixed &$variable [, int $data_type = PDO::PARAM_STR [, int $length [, mixed $driver_options]]] | bool', 'return_type': 'bool'},
\     'bindValue': { 'signature': 'mixed $parameter, mixed $value [, int $data_type = PDO::PARAM_STR] | bool', 'return_type': 'bool'},
\     'closeCursor': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'columnCount': { 'signature': 'void | int', 'return_type': 'int'},
\     'debugDumpParams': { 'signature': 'void | void', 'return_type': 'void'},
\     'errorCode': { 'signature': 'void | string', 'return_type': 'string'},
\     'errorInfo': { 'signature': 'void | array', 'return_type': 'array'},
\     'execute': { 'signature': '[ array $input_parameters] | bool', 'return_type': 'bool'},
\     'fetch': { 'signature': '[ int $fetch_style [, int $cursor_orientation = PDO::FETCH_ORI_NEXT [, int $cursor_offset = 0]]] | mixed', 'return_type': 'mixed'},
\     'fetchAll': { 'signature': '[ int $fetch_style [, mixed $fetch_argument [, array $ctor_args = array()]]] | array', 'return_type': 'array'},
\     'fetchColumn': { 'signature': '[ int $column_number = 0] | mixed', 'return_type': 'mixed'},
\     'fetchObject': { 'signature': '[ string $class_name = "stdClass" [, array $ctor_args]] | mixed', 'return_type': 'mixed'},
\     'getAttribute': { 'signature': 'int $attribute | mixed', 'return_type': 'mixed'},
\     'getColumnMeta': { 'signature': 'int $column | array', 'return_type': 'array'},
\     'nextRowset': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'rowCount': { 'signature': 'void | int', 'return_type': 'int'},
\     'setAttribute': { 'signature': 'int $attribute, mixed $value | bool', 'return_type': 'bool'},
\     'setFetchMode': { 'signature': 'int $mode | bool', 'return_type': 'bool'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['phar'] = {
\'phar': {
\   'name': 'Phar',
\   'constants': {
\     'FilesystemIterator::CURRENT_AS_PATHNAME': '32',
\     'FilesystemIterator::CURRENT_AS_FILEINFO': '0',
\     'FilesystemIterator::CURRENT_AS_SELF': '16',
\     'FilesystemIterator::CURRENT_MODE_MASK': '240',
\     'FilesystemIterator::KEY_AS_PATHNAME': '0',
\     'FilesystemIterator::KEY_AS_FILENAME': '256',
\     'FilesystemIterator::FOLLOW_SYMLINKS': '512',
\     'FilesystemIterator::KEY_MODE_MASK': '3840',
\     'FilesystemIterator::NEW_CURRENT_AND_KEY': '256',
\     'FilesystemIterator::SKIP_DOTS': '4096',
\     'FilesystemIterator::UNIX_PATHS': '8192',
\   },
\   'methods': {
\     'addEmptyDir': { 'signature': 'string $dirname | void', 'return_type': 'void'},
\     'addFile': { 'signature': 'string $file [, string $localname] | void', 'return_type': 'void'},
\     'addFromString': { 'signature': 'string $localname, string $contents | void', 'return_type': 'void'},
\     'buildFromDirectory': { 'signature': 'string $base_dir [, string $regex] | array', 'return_type': 'array'},
\     'buildFromIterator': { 'signature': 'Iterator $iter [, string $base_directory] | array', 'return_type': 'array'},
\     'compress': { 'signature': 'int $compression [, string $extension] | object', 'return_type': 'object'},
\     'compressAllFilesBZIP2': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'compressAllFilesGZ': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'compressFiles': { 'signature': 'int $compression | void', 'return_type': 'void'},
\     '__construct': { 'signature': 'string $fname [, int $flags [, string $alias]]', 'return_type': ''},
\     'convertToData': { 'signature': '[ int $format = 9021976 [, int $compression = 9021976 [, string $extension]]] | PharData', 'return_type': 'PharData'},
\     'convertToExecutable': { 'signature': '[ int $format = 9021976 [, int $compression = 9021976 [, string $extension]]] | Phar', 'return_type': 'Phar'},
\     'copy': { 'signature': 'string $oldfile, string $newfile | bool', 'return_type': 'bool'},
\     'count': { 'signature': 'void | int', 'return_type': 'int'},
\     'decompress': { 'signature': '[ string $extension] | object', 'return_type': 'object'},
\     'decompressFiles': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'delMetadata': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'delete': { 'signature': 'string $entry | bool', 'return_type': 'bool'},
\     'extractTo': { 'signature': 'string $pathto [, string|array $files [, bool $overwrite = FALSE]] | bool', 'return_type': 'bool'},
\     'getAlias': { 'signature': 'void | string', 'return_type': 'string'},
\     'getMetadata': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getModified': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getPath': { 'signature': 'void | string', 'return_type': 'string'},
\     'getSignature': { 'signature': 'void | array', 'return_type': 'array'},
\     'getStub': { 'signature': 'void | string', 'return_type': 'string'},
\     'getVersion': { 'signature': 'void | string', 'return_type': 'string'},
\     'hasMetadata': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isBuffering': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isCompressed': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'isFileFormat': { 'signature': 'int $format | bool', 'return_type': 'bool'},
\     'isWritable': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'offsetExists': { 'signature': 'string $offset | bool', 'return_type': 'bool'},
\     'offsetGet': { 'signature': 'string $offset | int', 'return_type': 'int'},
\     'offsetSet': { 'signature': 'string $offset, string $value | void', 'return_type': 'void'},
\     'offsetUnset': { 'signature': 'string $offset | bool', 'return_type': 'bool'},
\     'setAlias': { 'signature': 'string $alias | bool', 'return_type': 'bool'},
\     'setDefaultStub': { 'signature': '[ string $index [, string $webindex]] | bool', 'return_type': 'bool'},
\     'setMetadata': { 'signature': 'mixed $metadata | void', 'return_type': 'void'},
\     'setSignatureAlgorithm': { 'signature': 'int $sigtype [, string $privatekey] | void', 'return_type': 'void'},
\     'setStub': { 'signature': 'string $stub [, int $len = -1] | bool', 'return_type': 'bool'},
\     'startBuffering': { 'signature': 'void | void', 'return_type': 'void'},
\     'stopBuffering': { 'signature': 'void | void', 'return_type': 'void'},
\     'uncompressAllFiles': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\   'static_methods': {
\     'apiVersion': { 'signature': 'void | string', 'return_type': 'string'},
\     'canCompress': { 'signature': '[ int $type = 0] | bool', 'return_type': 'bool'},
\     'canWrite': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'createDefaultStub': { 'signature': '[ string $indexfile [, string $webindexfile]] | string', 'return_type': 'string'},
\     'getSupportedCompression': { 'signature': 'void | array', 'return_type': 'array'},
\     'getSupportedSignatures': { 'signature': 'void | array', 'return_type': 'array'},
\     'interceptFileFuncs': { 'signature': 'void | void', 'return_type': 'void'},
\     'isValidPharFilename': { 'signature': 'string $filename [, bool $executable = TRUE] | bool', 'return_type': 'bool'},
\     'loadPhar': { 'signature': 'string $filename [, string $alias] | bool', 'return_type': 'bool'},
\     'mapPhar': { 'signature': '[ string $alias [, int $dataoffset = 0]] | bool', 'return_type': 'bool'},
\     'mount': { 'signature': 'string $pharpath, string $externalpath | void', 'return_type': 'void'},
\     'mungServer': { 'signature': 'array $munglist | void', 'return_type': 'void'},
\     'running': { 'signature': '[ bool $retphar = TRUE] | string', 'return_type': 'string'},
\     'unlinkArchive': { 'signature': 'string $archive | bool', 'return_type': 'bool'},
\     'webPhar': { 'signature': '[ string $alias [, string $index = "index.php" [, string $f404 [, array $mimetypes [, callable $rewrites]]]]] | void', 'return_type': 'void'},
\   },
\},
\'phardata': {
\   'name': 'PharData',
\   'constants': {
\     'FilesystemIterator::CURRENT_AS_PATHNAME': '32',
\     'FilesystemIterator::CURRENT_AS_FILEINFO': '0',
\     'FilesystemIterator::CURRENT_AS_SELF': '16',
\     'FilesystemIterator::CURRENT_MODE_MASK': '240',
\     'FilesystemIterator::KEY_AS_PATHNAME': '0',
\     'FilesystemIterator::KEY_AS_FILENAME': '256',
\     'FilesystemIterator::FOLLOW_SYMLINKS': '512',
\     'FilesystemIterator::KEY_MODE_MASK': '3840',
\     'FilesystemIterator::NEW_CURRENT_AND_KEY': '256',
\     'FilesystemIterator::SKIP_DOTS': '4096',
\     'FilesystemIterator::UNIX_PATHS': '8192',
\   },
\   'methods': {
\     'addEmptyDir': { 'signature': 'string $dirname | void', 'return_type': 'void'},
\     'addFile': { 'signature': 'string $file [, string $localname] | void', 'return_type': 'void'},
\     'addFromString': { 'signature': 'string $localname, string $contents | void', 'return_type': 'void'},
\     'buildFromDirectory': { 'signature': 'string $base_dir [, string $regex] | array', 'return_type': 'array'},
\     'buildFromIterator': { 'signature': 'Iterator $iter [, string $base_directory] | array', 'return_type': 'array'},
\     'compress': { 'signature': 'int $compression [, string $extension] | object', 'return_type': 'object'},
\     'compressFiles': { 'signature': 'int $compression | void', 'return_type': 'void'},
\     '__construct': { 'signature': 'string $fname [, int $flags [, string $alias]]', 'return_type': ''},
\     'convertToData': { 'signature': '[ int $format = 9021976 [, int $compression = 9021976 [, string $extension]]] | PharData', 'return_type': 'PharData'},
\     'convertToExecutable': { 'signature': '[ int $format = 9021976 [, int $compression = 9021976 [, string $extension]]] | Phar', 'return_type': 'Phar'},
\     'copy': { 'signature': 'string $oldfile, string $newfile | bool', 'return_type': 'bool'},
\     'decompress': { 'signature': '[ string $extension] | object', 'return_type': 'object'},
\     'decompressFiles': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'delMetadata': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'delete': { 'signature': 'string $entry | bool', 'return_type': 'bool'},
\     'extractTo': { 'signature': 'string $pathto [, string|array $files [, bool $overwrite = FALSE]] | bool', 'return_type': 'bool'},
\     'isWritable': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'offsetSet': { 'signature': 'string $offset, string $value | void', 'return_type': 'void'},
\     'offsetUnset': { 'signature': 'string $offset | bool', 'return_type': 'bool'},
\     'setAlias': { 'signature': 'string $alias | bool', 'return_type': 'bool'},
\     'setDefaultStub': { 'signature': '[ string $index [, string $webindex]] | bool', 'return_type': 'bool'},
\     'setMetadata': { 'signature': 'mixed $metadata | void', 'return_type': 'void'},
\     'setSignatureAlgorithm': { 'signature': 'int $sigtype [, string $privatekey] | void', 'return_type': 'void'},
\     'setStub': { 'signature': 'string $stub [, int $len = -1] | bool', 'return_type': 'bool'},
\     'compressAllFilesBZIP2': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'compressAllFilesGZ': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'count': { 'signature': 'void | int', 'return_type': 'int'},
\     'getAlias': { 'signature': 'void | string', 'return_type': 'string'},
\     'getMetadata': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getModified': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getPath': { 'signature': 'void | string', 'return_type': 'string'},
\     'getSignature': { 'signature': 'void | array', 'return_type': 'array'},
\     'getStub': { 'signature': 'void | string', 'return_type': 'string'},
\     'getVersion': { 'signature': 'void | string', 'return_type': 'string'},
\     'hasMetadata': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isBuffering': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isCompressed': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'isFileFormat': { 'signature': 'int $format | bool', 'return_type': 'bool'},
\     'offsetExists': { 'signature': 'string $offset | bool', 'return_type': 'bool'},
\     'offsetGet': { 'signature': 'string $offset | int', 'return_type': 'int'},
\     'startBuffering': { 'signature': 'void | void', 'return_type': 'void'},
\     'stopBuffering': { 'signature': 'void | void', 'return_type': 'void'},
\     'uncompressAllFiles': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\   'static_methods': {
\     'apiVersion': { 'signature': 'void | string', 'return_type': 'string'},
\     'canCompress': { 'signature': '[ int $type = 0] | bool', 'return_type': 'bool'},
\     'canWrite': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'createDefaultStub': { 'signature': '[ string $indexfile [, string $webindexfile]] | string', 'return_type': 'string'},
\     'getSupportedCompression': { 'signature': 'void | array', 'return_type': 'array'},
\     'getSupportedSignatures': { 'signature': 'void | array', 'return_type': 'array'},
\     'interceptFileFuncs': { 'signature': 'void | void', 'return_type': 'void'},
\     'isValidPharFilename': { 'signature': 'string $filename [, bool $executable = TRUE] | bool', 'return_type': 'bool'},
\     'loadPhar': { 'signature': 'string $filename [, string $alias] | bool', 'return_type': 'bool'},
\     'mapPhar': { 'signature': '[ string $alias [, int $dataoffset = 0]] | bool', 'return_type': 'bool'},
\     'mount': { 'signature': 'string $pharpath, string $externalpath | void', 'return_type': 'void'},
\     'mungServer': { 'signature': 'array $munglist | void', 'return_type': 'void'},
\     'running': { 'signature': '[ bool $retphar = TRUE] | string', 'return_type': 'string'},
\     'unlinkArchive': { 'signature': 'string $archive | bool', 'return_type': 'bool'},
\     'webPhar': { 'signature': '[ string $alias [, string $index = "index.php" [, string $f404 [, array $mimetypes [, callable $rewrites]]]]] | void', 'return_type': 'void'},
\   },
\},
\'pharexception': {
\   'name': 'PharException',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'pharfileinfo': {
\   'name': 'PharFileInfo',
\   'methods': {
\     'chmod': { 'signature': 'int $permissions | void', 'return_type': 'void'},
\     'compress': { 'signature': 'int $compression | bool', 'return_type': 'bool'},
\     '__construct': { 'signature': 'string $entry', 'return_type': ''},
\     'decompress': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'delMetadata': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getCRC32': { 'signature': 'void | int', 'return_type': 'int'},
\     'getCompressedSize': { 'signature': 'void | int', 'return_type': 'int'},
\     'getContent': { 'signature': 'void | string', 'return_type': 'string'},
\     'getMetadata': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getPharFlags': { 'signature': 'void | int', 'return_type': 'int'},
\     'hasMetadata': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isCRCChecked': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isCompressed': { 'signature': '[ int $compression_type = 9021976] | bool', 'return_type': 'bool'},
\     'isCompressedBZIP2': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isCompressedGZ': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'setCompressedBZIP2': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'setCompressedGZ': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'setMetadata': { 'signature': 'mixed $metadata | void', 'return_type': 'void'},
\     'setUncompressed': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['phdfs'] = {
\'phdfs': {
\   'name': 'phdfs',
\   'static_properties': {
\     '$host': { 'initializer': '', 'type': ''},
\     '$port': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     'connect': { 'signature': 'void | bool', 'return_type': 'bool'},
\     '__construct': { 'signature': 'string $ip, string $port', 'return_type': ''},
\     'copy': { 'signature': 'string $source_file, string $destination_file | bool', 'return_type': 'bool'},
\     'create_directory': { 'signature': 'string $path | bool', 'return_type': 'bool'},
\     'delete': { 'signature': 'string $path | bool', 'return_type': 'bool'},
\     '__destruct': { 'signature': 'void | void', 'return_type': 'void'},
\     'disconnect': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'exists': { 'signature': 'string $path | bool', 'return_type': 'bool'},
\     'file_info': { 'signature': 'string $path | array', 'return_type': 'array'},
\     'list_directory': { 'signature': 'string $path [, int $level = 0] | array', 'return_type': 'array'},
\     'read': { 'signature': 'string $path [, int $length = 0] | string', 'return_type': 'string'},
\     'rename': { 'signature': 'string $old_path, string $new_path | bool', 'return_type': 'bool'},
\     'tell': { 'signature': 'string $path [, int $read_length = 1024] | int', 'return_type': 'int'},
\     'write': { 'signature': 'string $path, string $buffer [, int $mode = 0] | bool', 'return_type': 'bool'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['streams'] = {
\'php_user_filter': {
\   'name': 'php_user_filter',
\   'properties': {
\     'filtername': { 'initializer': '', 'type': ''},
\     'params': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     'filter': { 'signature': 'resource $in, resource $out, int &$consumed, bool $closing | int', 'return_type': 'int'},
\     'onClose': { 'signature': 'void | void', 'return_type': 'void'},
\     'onCreate': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['pht'] = {
\'pht\atomicinteger': {
\   'name': 'pht\AtomicInteger',
\   'methods': {
\     '__construct': { 'signature': '[ int $value = 0] | AtomicInteger', 'return_type': 'AtomicInteger'},
\     'dec': { 'signature': 'void | void', 'return_type': 'void'},
\     'get': { 'signature': 'void | int', 'return_type': 'int'},
\     'inc': { 'signature': 'void | void', 'return_type': 'void'},
\     'lock': { 'signature': 'void | void', 'return_type': 'void'},
\     'set': { 'signature': 'int $value | void', 'return_type': 'void'},
\     'unlock': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'pht\hashtable': {
\   'name': 'pht\HashTable',
\   'methods': {
\     'lock': { 'signature': 'void | void', 'return_type': 'void'},
\     'size': { 'signature': 'void | int', 'return_type': 'int'},
\     'unlock': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'pht\queue': {
\   'name': 'pht\Queue',
\   'methods': {
\     'front': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'lock': { 'signature': 'void | void', 'return_type': 'void'},
\     'pop': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'push': { 'signature': 'mixed $value | void', 'return_type': 'void'},
\     'size': { 'signature': 'void | int', 'return_type': 'int'},
\     'unlock': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'pht\thread': {
\   'name': 'pht\Thread',
\   'methods': {
\     'addClassTask': { 'signature': 'string $className [, mixed $...ctorArgs] | void', 'return_type': 'void'},
\     'addFileTask': { 'signature': 'string $fileName [, mixed $...globals] | void', 'return_type': 'void'},
\     'addFunctionTask': { 'signature': 'callable $func [, mixed $...funcArgs] | void', 'return_type': 'void'},
\     'join': { 'signature': 'void | void', 'return_type': 'void'},
\     'start': { 'signature': 'void | void', 'return_type': 'void'},
\     'taskCount': { 'signature': 'void | int', 'return_type': 'int'},
\   },
\},
\'pht\vector': {
\   'name': 'pht\Vector',
\   'methods': {
\     '__construct': { 'signature': '[ int $size = 0 [, mixed $value = 0]] | Vector', 'return_type': 'Vector'},
\     'deleteAt': { 'signature': 'int $offset | void', 'return_type': 'void'},
\     'insertAt': { 'signature': 'mixed $value, int $offset | void', 'return_type': 'void'},
\     'lock': { 'signature': 'void | void', 'return_type': 'void'},
\     'pop': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'push': { 'signature': 'mixed $value | void', 'return_type': 'void'},
\     'resize': { 'signature': 'int $size [, mixed $value = 0] | void', 'return_type': 'void'},
\     'shift': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'size': { 'signature': 'void | int', 'return_type': 'int'},
\     'unlock': { 'signature': 'void | void', 'return_type': 'void'},
\     'unshift': { 'signature': 'mixed $value | void', 'return_type': 'void'},
\     'updateAt': { 'signature': 'mixed $value, int $offset | void', 'return_type': 'void'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['quickhash'] = {
\'quickhashinthash': {
\   'name': 'QuickHashIntHash',
\   'constants': {
\     'CHECK_FOR_DUPES': '1',
\     'DO_NOT_USE_ZEND_ALLOC': '2',
\     'HASHER_NO_HASH': '256',
\     'HASHER_JENKINS1': '512',
\     'HASHER_JENKINS2': '1024',
\   },
\   'methods': {
\     'add': { 'signature': 'int $key [, int $value] | bool', 'return_type': 'bool'},
\     '__construct': { 'signature': 'int $size [, int $options]', 'return_type': ''},
\     'delete': { 'signature': 'int $key | bool', 'return_type': 'bool'},
\     'exists': { 'signature': 'int $key | bool', 'return_type': 'bool'},
\     'get': { 'signature': 'int $key | int', 'return_type': 'int'},
\     'getSize': { 'signature': 'void | int', 'return_type': 'int'},
\     'saveToFile': { 'signature': 'string $filename | void', 'return_type': 'void'},
\     'saveToString': { 'signature': 'void | string', 'return_type': 'string'},
\     'set': { 'signature': 'int $key, int $value | bool', 'return_type': 'bool'},
\     'update': { 'signature': 'int $key, int $value | bool', 'return_type': 'bool'},
\   },
\   'static_methods': {
\     'loadFromFile': { 'signature': 'string $filename [, int $options] | QuickHashIntHash', 'return_type': 'QuickHashIntHash'},
\     'loadFromString': { 'signature': 'string $contents [, int $options] | QuickHashIntHash', 'return_type': 'QuickHashIntHash'},
\   },
\},
\'quickhashintset': {
\   'name': 'QuickHashIntSet',
\   'constants': {
\     'CHECK_FOR_DUPES': '1',
\     'DO_NOT_USE_ZEND_ALLOC': '2',
\     'HASHER_NO_HASH': '256',
\     'HASHER_JENKINS1': '512',
\     'HASHER_JENKINS2': '1024',
\   },
\   'methods': {
\     'add': { 'signature': 'int $key | bool', 'return_type': 'bool'},
\     '__construct': { 'signature': 'int $size [, int $options]', 'return_type': ''},
\     'delete': { 'signature': 'int $key | bool', 'return_type': 'bool'},
\     'exists': { 'signature': 'int $key | bool', 'return_type': 'bool'},
\     'getSize': { 'signature': 'void | int', 'return_type': 'int'},
\     'saveToFile': { 'signature': 'string $filename | void', 'return_type': 'void'},
\     'saveToString': { 'signature': 'void | string', 'return_type': 'string'},
\   },
\   'static_methods': {
\     'loadFromFile': { 'signature': 'string $filename [, int $size [, int $options]] | QuickHashIntSet', 'return_type': 'QuickHashIntSet'},
\     'loadFromString': { 'signature': 'string $contents [, int $size [, int $options]] | QuickHashIntSet', 'return_type': 'QuickHashIntSet'},
\   },
\},
\'quickhashintstringhash': {
\   'name': 'QuickHashIntStringHash',
\   'constants': {
\     'CHECK_FOR_DUPES': '1',
\     'DO_NOT_USE_ZEND_ALLOC': '2',
\     'HASHER_NO_HASH': '256',
\     'HASHER_JENKINS1': '512',
\     'HASHER_JENKINS2': '1024',
\   },
\   'methods': {
\     'add': { 'signature': 'int $key, string $value | bool', 'return_type': 'bool'},
\     '__construct': { 'signature': 'int $size [, int $options = 0]', 'return_type': ''},
\     'delete': { 'signature': 'int $key | bool', 'return_type': 'bool'},
\     'exists': { 'signature': 'int $key | bool', 'return_type': 'bool'},
\     'get': { 'signature': 'int $key | mixed', 'return_type': 'mixed'},
\     'getSize': { 'signature': 'void | int', 'return_type': 'int'},
\     'saveToFile': { 'signature': 'string $filename | void', 'return_type': 'void'},
\     'saveToString': { 'signature': 'void | string', 'return_type': 'string'},
\     'set': { 'signature': 'int $key, string $value | int', 'return_type': 'int'},
\     'update': { 'signature': 'int $key, string $value | bool', 'return_type': 'bool'},
\   },
\   'static_methods': {
\     'loadFromFile': { 'signature': 'string $filename [, int $size = 0 [, int $options = 0]] | QuickHashIntStringHash', 'return_type': 'QuickHashIntStringHash'},
\     'loadFromString': { 'signature': 'string $contents [, int $size = 0 [, int $options = 0]] | QuickHashIntStringHash', 'return_type': 'QuickHashIntStringHash'},
\   },
\},
\'quickhashstringinthash': {
\   'name': 'QuickHashStringIntHash',
\   'constants': {
\     'CHECK_FOR_DUPES': '1',
\     'DO_NOT_USE_ZEND_ALLOC': '2',
\   },
\   'methods': {
\     'add': { 'signature': 'string $key, int $value | bool', 'return_type': 'bool'},
\     '__construct': { 'signature': 'int $size [, int $options = 0]', 'return_type': ''},
\     'delete': { 'signature': 'string $key | bool', 'return_type': 'bool'},
\     'exists': { 'signature': 'string $key | bool', 'return_type': 'bool'},
\     'get': { 'signature': 'string $key | mixed', 'return_type': 'mixed'},
\     'getSize': { 'signature': 'void | int', 'return_type': 'int'},
\     'saveToFile': { 'signature': 'string $filename | void', 'return_type': 'void'},
\     'saveToString': { 'signature': 'void | string', 'return_type': 'string'},
\     'set': { 'signature': 'string $key, int $value | int', 'return_type': 'int'},
\     'update': { 'signature': 'string $key, int $value | bool', 'return_type': 'bool'},
\   },
\   'static_methods': {
\     'loadFromFile': { 'signature': 'string $filename [, int $size = 0 [, int $options = 0]] | QuickHashStringIntHash', 'return_type': 'QuickHashStringIntHash'},
\     'loadFromString': { 'signature': 'string $contents [, int $size = 0 [, int $options = 0]] | QuickHashStringIntHash', 'return_type': 'QuickHashStringIntHash'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['rar'] = {
\'rararchive': {
\   'name': 'RarArchive',
\   'methods': {
\     'close': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getComment': { 'signature': 'void | string', 'return_type': 'string'},
\     'getEntries': { 'signature': 'void | array', 'return_type': 'array'},
\     'getEntry': { 'signature': 'string $entryname | RarEntry', 'return_type': 'RarEntry'},
\     'isBroken': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isSolid': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'setAllowBroken': { 'signature': 'bool $allow_broken | bool', 'return_type': 'bool'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\   },
\   'static_methods': {
\     'open': { 'signature': 'string $filename [, string $password = NULL [, callable $volume_callback = NULL]] | RarArchive', 'return_type': 'RarArchive'},
\   },
\},
\'rarentry': {
\   'name': 'RarEntry',
\   'constants': {
\     'HOST_MSDOS': '0',
\     'HOST_OS2': '1',
\     'HOST_WIN32': '2',
\     'HOST_UNIX': '3',
\     'HOST_MACOS': '4',
\     'HOST_BEOS': '5',
\     'ATTRIBUTE_WIN_READONLY': '1',
\     'ATTRIBUTE_WIN_HIDDEN': '2',
\     'ATTRIBUTE_WIN_SYSTEM': '4',
\     'ATTRIBUTE_WIN_DIRECTORY': '16',
\     'ATTRIBUTE_WIN_ARCHIVE': '32',
\     'ATTRIBUTE_WIN_DEVICE': '64',
\     'ATTRIBUTE_WIN_NORMAL': '128',
\     'ATTRIBUTE_WIN_TEMPORARY': '256',
\     'ATTRIBUTE_WIN_SPARSE_FILE': '512',
\     'ATTRIBUTE_WIN_REPARSE_POINT': '1024',
\     'ATTRIBUTE_WIN_COMPRESSED': '2048',
\     'ATTRIBUTE_WIN_OFFLINE': '4096',
\     'ATTRIBUTE_WIN_NOT_CONTENT_INDEXED': '8192',
\     'ATTRIBUTE_WIN_ENCRYPTED': '16384',
\     'ATTRIBUTE_WIN_VIRTUAL': '65536',
\     'ATTRIBUTE_UNIX_WORLD_EXECUTE': '1',
\     'ATTRIBUTE_UNIX_WORLD_WRITE': '2',
\     'ATTRIBUTE_UNIX_WORLD_READ': '4',
\     'ATTRIBUTE_UNIX_GROUP_EXECUTE': '8',
\     'ATTRIBUTE_UNIX_GROUP_WRITE': '16',
\     'ATTRIBUTE_UNIX_GROUP_READ': '32',
\     'ATTRIBUTE_UNIX_OWNER_EXECUTE': '64',
\     'ATTRIBUTE_UNIX_OWNER_WRITE': '128',
\     'ATTRIBUTE_UNIX_OWNER_READ': '256',
\     'ATTRIBUTE_UNIX_STICKY': '512',
\     'ATTRIBUTE_UNIX_SETGID': '1024',
\     'ATTRIBUTE_UNIX_SETUID': '2048',
\     'ATTRIBUTE_UNIX_FINAL_QUARTET': '61440',
\     'ATTRIBUTE_UNIX_FIFO': '4096',
\     'ATTRIBUTE_UNIX_CHAR_DEV': '8192',
\     'ATTRIBUTE_UNIX_DIRECTORY': '16384',
\     'ATTRIBUTE_UNIX_BLOCK_DEV': '24576',
\     'ATTRIBUTE_UNIX_REGULAR_FILE': '32768',
\     'ATTRIBUTE_UNIX_SYM_LINK': '40960',
\     'ATTRIBUTE_UNIX_SOCKET': '49152',
\   },
\   'methods': {
\     'extract': { 'signature': 'string $dir [, string $filepath = "" [, string $password = NULL [, bool $extended_data = FALSE]]] | bool', 'return_type': 'bool'},
\     'getAttr': { 'signature': 'void | int', 'return_type': 'int'},
\     'getCrc': { 'signature': 'void | string', 'return_type': 'string'},
\     'getFileTime': { 'signature': 'void | string', 'return_type': 'string'},
\     'getHostOs': { 'signature': 'void | int', 'return_type': 'int'},
\     'getMethod': { 'signature': 'void | int', 'return_type': 'int'},
\     'getName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPackedSize': { 'signature': 'void | int', 'return_type': 'int'},
\     'getStream': { 'signature': '[ string $password] | resource', 'return_type': 'resource'},
\     'getUnpackedSize': { 'signature': 'void | int', 'return_type': 'int'},
\     'getVersion': { 'signature': 'void | int', 'return_type': 'int'},
\     'isDirectory': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isEncrypted': { 'signature': 'void | bool', 'return_type': 'bool'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\   },
\},
\'rarexception': {
\   'name': 'RarException',
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\   'static_methods': {
\     'isUsingExceptions': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'setUsingExceptions': { 'signature': 'bool $using_exceptions | void', 'return_type': 'void'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['reflection'] = {
\'reflection': {
\   'name': 'Reflection',
\   'static_methods': {
\     'export': { 'signature': 'Reflector $reflector [, bool $return = FALSE] | string', 'return_type': 'string'},
\     'getModifierNames': { 'signature': 'int $modifiers | array', 'return_type': 'array'},
\   },
\},
\'reflectionclass': {
\   'name': 'ReflectionClass',
\   'constants': {
\     'IS_IMPLICIT_ABSTRACT': '16',
\     'IS_EXPLICIT_ABSTRACT': '32',
\     'IS_FINAL': '64',
\   },
\   'properties': {
\     'name': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     '__construct': { 'signature': 'mixed $argument', 'return_type': ''},
\     'getConstant': { 'signature': 'string $name | mixed', 'return_type': 'mixed'},
\     'getConstants': { 'signature': 'void | array', 'return_type': 'array'},
\     'getConstructor': { 'signature': 'void | ReflectionMethod', 'return_type': 'ReflectionMethod'},
\     'getDefaultProperties': { 'signature': 'void | array', 'return_type': 'array'},
\     'getDocComment': { 'signature': 'void | string', 'return_type': 'string'},
\     'getEndLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getExtension': { 'signature': 'void | ReflectionExtension', 'return_type': 'ReflectionExtension'},
\     'getExtensionName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getFileName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getInterfaceNames': { 'signature': 'void | array', 'return_type': 'array'},
\     'getInterfaces': { 'signature': 'void | array', 'return_type': 'array'},
\     'getMethod': { 'signature': 'string $name | ReflectionMethod', 'return_type': 'ReflectionMethod'},
\     'getMethods': { 'signature': '[ int $filter] | array', 'return_type': 'array'},
\     'getModifiers': { 'signature': 'void | int', 'return_type': 'int'},
\     'getName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getNamespaceName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getParentClass': { 'signature': 'void | ReflectionClass', 'return_type': 'ReflectionClass'},
\     'getProperties': { 'signature': '[ int $filter] | array', 'return_type': 'array'},
\     'getProperty': { 'signature': 'string $name | ReflectionProperty', 'return_type': 'ReflectionProperty'},
\     'getReflectionConstant': { 'signature': 'string $name | ReflectionClassConstant', 'return_type': 'ReflectionClassConstant'},
\     'getReflectionConstants': { 'signature': 'void | array', 'return_type': 'array'},
\     'getShortName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getStartLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getStaticProperties': { 'signature': 'void | array', 'return_type': 'array'},
\     'getStaticPropertyValue': { 'signature': 'string $name [, mixed &$def_value] | mixed', 'return_type': 'mixed'},
\     'getTraitAliases': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraitNames': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraits': { 'signature': 'void | array', 'return_type': 'array'},
\     'hasConstant': { 'signature': 'string $name | bool', 'return_type': 'bool'},
\     'hasMethod': { 'signature': 'string $name | bool', 'return_type': 'bool'},
\     'hasProperty': { 'signature': 'string $name | bool', 'return_type': 'bool'},
\     'implementsInterface': { 'signature': 'string $interface | bool', 'return_type': 'bool'},
\     'inNamespace': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isAbstract': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isAnonymous': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isCloneable': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isFinal': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isInstance': { 'signature': 'object $object | bool', 'return_type': 'bool'},
\     'isInstantiable': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isInterface': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isInternal': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isIterable': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isSubclassOf': { 'signature': 'mixed $class | bool', 'return_type': 'bool'},
\     'isTrait': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isUserDefined': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'newInstance': { 'signature': '[ mixed $...] | object', 'return_type': 'object'},
\     'newInstanceArgs': { 'signature': '[ array $args] | object', 'return_type': 'object'},
\     'newInstanceWithoutConstructor': { 'signature': 'void | object', 'return_type': 'object'},
\     'setStaticPropertyValue': { 'signature': 'string $name, mixed $value | void', 'return_type': 'void'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\   },
\   'static_methods': {
\     'export': { 'signature': 'mixed $argument [, bool $return = FALSE] | string', 'return_type': 'string'},
\   },
\},
\'reflectionclassconstant': {
\   'name': 'ReflectionClassConstant',
\   'properties': {
\     'name': { 'initializer': '', 'type': ''},
\     'class': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     '__construct': { 'signature': 'mixed $class, string $name', 'return_type': ''},
\     'getDeclaringClass': { 'signature': 'void | ReflectionClass', 'return_type': 'ReflectionClass'},
\     'getDocComment': { 'signature': 'void | string', 'return_type': 'string'},
\     'getModifiers': { 'signature': 'void | int', 'return_type': 'int'},
\     'getName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getValue': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'isPrivate': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isProtected': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isPublic': { 'signature': 'void | bool', 'return_type': 'bool'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\   },
\   'static_methods': {
\     'export': { 'signature': 'mixed $class, string $name [, bool $return] | string', 'return_type': 'string'},
\   },
\},
\'reflectionexception': {
\   'name': 'ReflectionException',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'reflectionextension': {
\   'name': 'ReflectionExtension',
\   'properties': {
\     'name': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\     '__construct': { 'signature': 'string $name', 'return_type': ''},
\     'getClasses': { 'signature': 'void | array', 'return_type': 'array'},
\     'getClassNames': { 'signature': 'void | array', 'return_type': 'array'},
\     'getConstants': { 'signature': 'void | array', 'return_type': 'array'},
\     'getDependencies': { 'signature': 'void | array', 'return_type': 'array'},
\     'getFunctions': { 'signature': 'void | array', 'return_type': 'array'},
\     'getINIEntries': { 'signature': 'void | array', 'return_type': 'array'},
\     'getName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getVersion': { 'signature': 'void | string', 'return_type': 'string'},
\     'info': { 'signature': 'void | void', 'return_type': 'void'},
\     'isPersistent': { 'signature': 'void | void', 'return_type': 'void'},
\     'isTemporary': { 'signature': 'void | void', 'return_type': 'void'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\   },
\   'static_methods': {
\     'export': { 'signature': 'string $name [, string $return = FALSE] | string', 'return_type': 'string'},
\   },
\},
\'reflectionfunction': {
\   'name': 'ReflectionFunction',
\   'constants': {
\     'IS_DEPRECATED': '262144',
\   },
\   'properties': {
\     'name': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     '__construct': { 'signature': 'mixed $name', 'return_type': ''},
\     'getClosure': { 'signature': 'void | Closure', 'return_type': 'Closure'},
\     'invoke': { 'signature': '[ mixed $...] | mixed', 'return_type': 'mixed'},
\     'invokeArgs': { 'signature': 'array $args | mixed', 'return_type': 'mixed'},
\     'isDisabled': { 'signature': 'void | bool', 'return_type': 'bool'},
\     '__toString': { 'signature': 'void | void', 'return_type': 'void'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\     'getClosureScopeClass': { 'signature': 'void | ReflectionClass', 'return_type': 'ReflectionClass'},
\     'getClosureThis': { 'signature': 'void | object', 'return_type': 'object'},
\     'getDocComment': { 'signature': 'void | string', 'return_type': 'string'},
\     'getEndLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getExtension': { 'signature': 'void | ReflectionExtension', 'return_type': 'ReflectionExtension'},
\     'getExtensionName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getFileName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getNamespaceName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getNumberOfParameters': { 'signature': 'void | int', 'return_type': 'int'},
\     'getNumberOfRequiredParameters': { 'signature': 'void | int', 'return_type': 'int'},
\     'getParameters': { 'signature': 'void | array', 'return_type': 'array'},
\     'getReturnType': { 'signature': 'void | ReflectionType', 'return_type': 'ReflectionType'},
\     'getShortName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getStartLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getStaticVariables': { 'signature': 'void | array', 'return_type': 'array'},
\     'hasReturnType': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'inNamespace': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isClosure': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isDeprecated': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isGenerator': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isInternal': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isUserDefined': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isVariadic': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'returnsReference': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\   'static_methods': {
\     'export': { 'signature': 'string $name [, string $return] | string', 'return_type': 'string'},
\   },
\},
\'reflectionfunctionabstract': {
\   'name': 'ReflectionFunctionAbstract',
\   'properties': {
\     'name': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\     'getClosureScopeClass': { 'signature': 'void | ReflectionClass', 'return_type': 'ReflectionClass'},
\     'getClosureThis': { 'signature': 'void | object', 'return_type': 'object'},
\     'getDocComment': { 'signature': 'void | string', 'return_type': 'string'},
\     'getEndLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getExtension': { 'signature': 'void | ReflectionExtension', 'return_type': 'ReflectionExtension'},
\     'getExtensionName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getFileName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getNamespaceName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getNumberOfParameters': { 'signature': 'void | int', 'return_type': 'int'},
\     'getNumberOfRequiredParameters': { 'signature': 'void | int', 'return_type': 'int'},
\     'getParameters': { 'signature': 'void | array', 'return_type': 'array'},
\     'getReturnType': { 'signature': 'void | ReflectionType', 'return_type': 'ReflectionType'},
\     'getShortName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getStartLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getStaticVariables': { 'signature': 'void | array', 'return_type': 'array'},
\     'hasReturnType': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'inNamespace': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isClosure': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isDeprecated': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isGenerator': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isInternal': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isUserDefined': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isVariadic': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'returnsReference': { 'signature': 'void | bool', 'return_type': 'bool'},
\     '__toString': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'reflectiongenerator': {
\   'name': 'ReflectionGenerator',
\   'methods': {
\     '__construct': { 'signature': 'Generator $generator', 'return_type': ''},
\     'getExecutingFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getExecutingGenerator': { 'signature': 'void | Generator', 'return_type': 'Generator'},
\     'getExecutingLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getFunction': { 'signature': 'void | ReflectionFunctionAbstract', 'return_type': 'ReflectionFunctionAbstract'},
\     'getThis': { 'signature': 'void | object', 'return_type': 'object'},
\     'getTrace': { 'signature': '[ int $options = DEBUG_BACKTRACE_PROVIDE_OBJECT] | array', 'return_type': 'array'},
\   },
\},
\'reflectionmethod': {
\   'name': 'ReflectionMethod',
\   'constants': {
\     'IS_STATIC': '1',
\     'IS_PUBLIC': '256',
\     'IS_PROTECTED': '512',
\     'IS_PRIVATE': '1024',
\     'IS_ABSTRACT': '2',
\     'IS_FINAL': '4',
\   },
\   'properties': {
\     'name': { 'initializer': '', 'type': ''},
\     'class': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     '__construct': { 'signature': 'mixed $class, string $name', 'return_type': ''},
\     'getClosure': { 'signature': 'object $object | Closure', 'return_type': 'Closure'},
\     'getDeclaringClass': { 'signature': 'void | ReflectionClass', 'return_type': 'ReflectionClass'},
\     'getModifiers': { 'signature': 'void | int', 'return_type': 'int'},
\     'getPrototype': { 'signature': 'void | ReflectionMethod', 'return_type': 'ReflectionMethod'},
\     'invoke': { 'signature': 'object $object [, mixed $...] | mixed', 'return_type': 'mixed'},
\     'invokeArgs': { 'signature': 'object $object, array $args | mixed', 'return_type': 'mixed'},
\     'isAbstract': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isConstructor': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isDestructor': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isFinal': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isPrivate': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isProtected': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isPublic': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isStatic': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'setAccessible': { 'signature': 'bool $accessible | void', 'return_type': 'void'},
\     '__toString': { 'signature': 'void | void', 'return_type': 'void'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\     'getClosureScopeClass': { 'signature': 'void | ReflectionClass', 'return_type': 'ReflectionClass'},
\     'getClosureThis': { 'signature': 'void | object', 'return_type': 'object'},
\     'getDocComment': { 'signature': 'void | string', 'return_type': 'string'},
\     'getEndLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getExtension': { 'signature': 'void | ReflectionExtension', 'return_type': 'ReflectionExtension'},
\     'getExtensionName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getFileName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getNamespaceName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getNumberOfParameters': { 'signature': 'void | int', 'return_type': 'int'},
\     'getNumberOfRequiredParameters': { 'signature': 'void | int', 'return_type': 'int'},
\     'getParameters': { 'signature': 'void | array', 'return_type': 'array'},
\     'getReturnType': { 'signature': 'void | ReflectionType', 'return_type': 'ReflectionType'},
\     'getShortName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getStartLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getStaticVariables': { 'signature': 'void | array', 'return_type': 'array'},
\     'hasReturnType': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'inNamespace': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isClosure': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isDeprecated': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isGenerator': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isInternal': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isUserDefined': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isVariadic': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'returnsReference': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\   'static_methods': {
\     'export': { 'signature': 'string $class, string $name [, bool $return = FALSE] | string', 'return_type': 'string'},
\   },
\},
\'reflectionnamedtype': {
\   'name': 'ReflectionNamedType',
\   'methods': {
\     'getName': { 'signature': 'void | string', 'return_type': 'string'},
\     'allowsNull': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isBuiltin': { 'signature': 'void | bool', 'return_type': 'bool'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\   },
\},
\'reflectionobject': {
\   'name': 'ReflectionObject',
\   'constants': {
\     'ReflectionClass::IS_IMPLICIT_ABSTRACT': '16',
\     'ReflectionClass::IS_EXPLICIT_ABSTRACT': '32',
\     'ReflectionClass::IS_FINAL': '64',
\   },
\   'properties': {
\     'name': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     '__construct': { 'signature': 'mixed $argument', 'return_type': ''},
\     'getConstant': { 'signature': 'string $name | mixed', 'return_type': 'mixed'},
\     'getConstants': { 'signature': 'void | array', 'return_type': 'array'},
\     'getConstructor': { 'signature': 'void | ReflectionMethod', 'return_type': 'ReflectionMethod'},
\     'getDefaultProperties': { 'signature': 'void | array', 'return_type': 'array'},
\     'getDocComment': { 'signature': 'void | string', 'return_type': 'string'},
\     'getEndLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getExtension': { 'signature': 'void | ReflectionExtension', 'return_type': 'ReflectionExtension'},
\     'getExtensionName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getFileName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getInterfaceNames': { 'signature': 'void | array', 'return_type': 'array'},
\     'getInterfaces': { 'signature': 'void | array', 'return_type': 'array'},
\     'getMethod': { 'signature': 'string $name | ReflectionMethod', 'return_type': 'ReflectionMethod'},
\     'getMethods': { 'signature': '[ int $filter] | array', 'return_type': 'array'},
\     'getModifiers': { 'signature': 'void | int', 'return_type': 'int'},
\     'getName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getNamespaceName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getParentClass': { 'signature': 'void | ReflectionClass', 'return_type': 'ReflectionClass'},
\     'getProperties': { 'signature': '[ int $filter] | array', 'return_type': 'array'},
\     'getProperty': { 'signature': 'string $name | ReflectionProperty', 'return_type': 'ReflectionProperty'},
\     'getReflectionConstant': { 'signature': 'string $name | ReflectionClassConstant', 'return_type': 'ReflectionClassConstant'},
\     'getReflectionConstants': { 'signature': 'void | array', 'return_type': 'array'},
\     'getShortName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getStartLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getStaticProperties': { 'signature': 'void | array', 'return_type': 'array'},
\     'getStaticPropertyValue': { 'signature': 'string $name [, mixed &$def_value] | mixed', 'return_type': 'mixed'},
\     'getTraitAliases': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraitNames': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraits': { 'signature': 'void | array', 'return_type': 'array'},
\     'hasConstant': { 'signature': 'string $name | bool', 'return_type': 'bool'},
\     'hasMethod': { 'signature': 'string $name | bool', 'return_type': 'bool'},
\     'hasProperty': { 'signature': 'string $name | bool', 'return_type': 'bool'},
\     'implementsInterface': { 'signature': 'string $interface | bool', 'return_type': 'bool'},
\     'inNamespace': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isAbstract': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isAnonymous': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isCloneable': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isFinal': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isInstance': { 'signature': 'object $object | bool', 'return_type': 'bool'},
\     'isInstantiable': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isInterface': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isInternal': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isIterable': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isSubclassOf': { 'signature': 'mixed $class | bool', 'return_type': 'bool'},
\     'isTrait': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isUserDefined': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'newInstance': { 'signature': '[ mixed $...] | object', 'return_type': 'object'},
\     'newInstanceArgs': { 'signature': '[ array $args] | object', 'return_type': 'object'},
\     'newInstanceWithoutConstructor': { 'signature': 'void | object', 'return_type': 'object'},
\     'setStaticPropertyValue': { 'signature': 'string $name, mixed $value | void', 'return_type': 'void'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\   },
\   'static_methods': {
\     'export': { 'signature': 'mixed $argument [, bool $return = FALSE] | string', 'return_type': 'string'},
\   },
\},
\'reflectionparameter': {
\   'name': 'ReflectionParameter',
\   'properties': {
\     'name': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     'allowsNull': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'canBePassedByValue': { 'signature': 'void | bool', 'return_type': 'bool'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\     '__construct': { 'signature': 'string $function, string $parameter', 'return_type': ''},
\     'getClass': { 'signature': 'void | ReflectionClass', 'return_type': 'ReflectionClass'},
\     'getDeclaringClass': { 'signature': 'void | ReflectionClass', 'return_type': 'ReflectionClass'},
\     'getDeclaringFunction': { 'signature': 'void | ReflectionFunctionAbstract', 'return_type': 'ReflectionFunctionAbstract'},
\     'getDefaultValue': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getDefaultValueConstantName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPosition': { 'signature': 'void | int', 'return_type': 'int'},
\     'getType': { 'signature': 'void | ReflectionType', 'return_type': 'ReflectionType'},
\     'hasType': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isArray': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isCallable': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isDefaultValueAvailable': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isDefaultValueConstant': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isOptional': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isPassedByReference': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isVariadic': { 'signature': 'void | bool', 'return_type': 'bool'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\   },
\   'static_methods': {
\     'export': { 'signature': 'string $function, string $parameter [, bool $return] | string', 'return_type': 'string'},
\   },
\},
\'reflectionproperty': {
\   'name': 'ReflectionProperty',
\   'constants': {
\     'IS_STATIC': '1',
\     'IS_PUBLIC': '256',
\     'IS_PROTECTED': '512',
\     'IS_PRIVATE': '1024',
\   },
\   'properties': {
\     'name': { 'initializer': '', 'type': ''},
\     'class': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\     '__construct': { 'signature': 'mixed $class, string $name', 'return_type': ''},
\     'getDeclaringClass': { 'signature': 'void | ReflectionClass', 'return_type': 'ReflectionClass'},
\     'getDocComment': { 'signature': 'void | string', 'return_type': 'string'},
\     'getModifiers': { 'signature': 'void | int', 'return_type': 'int'},
\     'getName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getValue': { 'signature': '[ object $object] | mixed', 'return_type': 'mixed'},
\     'isDefault': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isPrivate': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isProtected': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isPublic': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isStatic': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'setAccessible': { 'signature': 'bool $accessible | void', 'return_type': 'void'},
\     'setValue': { 'signature': 'object $object, mixed $value | void', 'return_type': 'void'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\   },
\   'static_methods': {
\     'export': { 'signature': 'mixed $class, string $name [, bool $return] | string', 'return_type': 'string'},
\   },
\},
\'reflectiontype': {
\   'name': 'ReflectionType',
\   'methods': {
\     'allowsNull': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isBuiltin': { 'signature': 'void | bool', 'return_type': 'bool'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\   },
\},
\'reflectionzendextension': {
\   'name': 'ReflectionZendExtension',
\   'properties': {
\     'name': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\     '__construct': { 'signature': 'string $name', 'return_type': ''},
\     'getAuthor': { 'signature': 'void | string', 'return_type': 'string'},
\     'getCopyright': { 'signature': 'void | string', 'return_type': 'string'},
\     'getName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getURL': { 'signature': 'void | string', 'return_type': 'string'},
\     'getVersion': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\   },
\   'static_methods': {
\     'export': { 'signature': 'string $name [, bool $return] | string', 'return_type': 'string'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['rrd'] = {
\'rrdcreator': {
\   'name': 'RRDCreator',
\   'methods': {
\     'addArchive': { 'signature': 'string $description | void', 'return_type': 'void'},
\     'addDataSource': { 'signature': 'string $description | void', 'return_type': 'void'},
\     '__construct': { 'signature': 'string $path [, string $startTime [, int $step = 0]]', 'return_type': ''},
\     'save': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'rrdgraph': {
\   'name': 'RRDGraph',
\   'methods': {
\     '__construct': { 'signature': 'string $path', 'return_type': ''},
\     'save': { 'signature': 'void | array', 'return_type': 'array'},
\     'saveVerbose': { 'signature': 'void | array', 'return_type': 'array'},
\     'setOptions': { 'signature': 'array $options | void', 'return_type': 'void'},
\   },
\},
\'rrdupdater': {
\   'name': 'RRDUpdater',
\   'methods': {
\     '__construct': { 'signature': 'string $path', 'return_type': ''},
\     'update': { 'signature': 'array $values [, string $time = time()] | bool', 'return_type': 'bool'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['seaslog'] = {
\'seaslog': {
\   'name': 'SeasLog',
\   'methods': {
\     '__destruct': { 'signature': 'void', 'return_type': ''},
\   },
\   'static_methods': {
\     'alert': { 'signature': 'string $message [, array $content [, string $logger]] | bool', 'return_type': 'bool'},
\     'analyzerCount': { 'signature': 'string $level [, string $log_path [, string $key_word]] | mixed', 'return_type': 'mixed'},
\     'analyzerDetail': { 'signature': 'string $level [, string $log_path [, string $key_word [, int $start [, int $limit [, int $order]]]]] | mixed', 'return_type': 'mixed'},
\     'closeLoggerStream': { 'signature': 'int $model, string $logger | bool', 'return_type': 'bool'},
\     'critical': { 'signature': 'string $message [, array $content [, string $logger]] | bool', 'return_type': 'bool'},
\     'debug': { 'signature': 'string $message [, array $content [, string $logger]] | bool', 'return_type': 'bool'},
\     'emergency': { 'signature': 'string $message [, array $content [, string $logger]] | bool', 'return_type': 'bool'},
\     'error': { 'signature': 'string $message [, array $content [, string $logger]] | bool', 'return_type': 'bool'},
\     'flushBuffer': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getBasePath': { 'signature': 'void | string', 'return_type': 'string'},
\     'getBuffer': { 'signature': 'void | array', 'return_type': 'array'},
\     'getBufferEnabled': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getDatetimeFormat': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLastLogger': { 'signature': 'void | string', 'return_type': 'string'},
\     'getRequestID': { 'signature': 'void | string', 'return_type': 'string'},
\     'getRequestVariable': { 'signature': 'int $key | bool', 'return_type': 'bool'},
\     'info': { 'signature': 'string $message [, array $content [, string $logger]] | bool', 'return_type': 'bool'},
\     'log': { 'signature': 'string $level [, string $message [, array $content [, string $logger]]] | bool', 'return_type': 'bool'},
\     'notice': { 'signature': 'string $message [, array $content [, string $logger]] | bool', 'return_type': 'bool'},
\     'setBasePath': { 'signature': 'string $base_path | bool', 'return_type': 'bool'},
\     'setDatetimeFormat': { 'signature': 'string $format | bool', 'return_type': 'bool'},
\     'setLogger': { 'signature': 'string $logger | bool', 'return_type': 'bool'},
\     'setRequestID': { 'signature': 'string $request_id | bool', 'return_type': 'bool'},
\     'setRequestVariable': { 'signature': 'int $key, string $value | bool', 'return_type': 'bool'},
\     'warning': { 'signature': 'string $message [, array $content [, string $logger]] | bool', 'return_type': 'bool'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['sessions'] = {
\'sessionhandler': {
\   'name': 'SessionHandler',
\   'methods': {
\     'close': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'create_sid': { 'signature': 'void | string', 'return_type': 'string'},
\     'destroy': { 'signature': 'string $session_id | bool', 'return_type': 'bool'},
\     'gc': { 'signature': 'int $maxlifetime | int', 'return_type': 'int'},
\     'open': { 'signature': 'string $save_path, string $session_name | bool', 'return_type': 'bool'},
\     'read': { 'signature': 'string $session_id | string', 'return_type': 'string'},
\     'write': { 'signature': 'string $session_id, string $session_data | bool', 'return_type': 'bool'},
\   },
\},
\'sessionhandlerinterface': {
\   'name': 'SessionHandlerInterface',
\   'methods': {
\     'close': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'destroy': { 'signature': 'string $session_id | bool', 'return_type': 'bool'},
\     'gc': { 'signature': 'int $maxlifetime | int', 'return_type': 'int'},
\     'open': { 'signature': 'string $save_path, string $session_name | bool', 'return_type': 'bool'},
\     'read': { 'signature': 'string $session_id | string', 'return_type': 'string'},
\     'write': { 'signature': 'string $session_id, string $session_data | bool', 'return_type': 'bool'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['simplexml'] = {
\'simplexmlelement': {
\   'name': 'SimpleXMLElement',
\   'methods': {
\     '__construct': { 'signature': 'string $data [, int $options = 0 [, bool $data_is_url = FALSE [, string $ns = "" [, bool $is_prefix = FALSE]]]]', 'return_type': ''},
\     'addAttribute': { 'signature': 'string $name [, string $value [, string $namespace]] | void', 'return_type': 'void'},
\     'addChild': { 'signature': 'string $name [, string $value [, string $namespace]] | SimpleXMLElement', 'return_type': 'SimpleXMLElement'},
\     'asXML': { 'signature': '[ string $filename] | mixed', 'return_type': 'mixed'},
\     'attributes': { 'signature': '[ string $ns = NULL [, bool $is_prefix = FALSE]] | SimpleXMLElement', 'return_type': 'SimpleXMLElement'},
\     'children': { 'signature': '[ string $ns [, bool $is_prefix = FALSE]] | SimpleXMLElement', 'return_type': 'SimpleXMLElement'},
\     'count': { 'signature': 'void | int', 'return_type': 'int'},
\     'getDocNamespaces': { 'signature': '[ bool $recursive = FALSE [, bool $from_root = TRUE]] | array', 'return_type': 'array'},
\     'getName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getNamespaces': { 'signature': '[ bool $recursive = FALSE] | array', 'return_type': 'array'},
\     'registerXPathNamespace': { 'signature': 'string $prefix, string $ns | bool', 'return_type': 'bool'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     'xpath': { 'signature': 'string $path | array', 'return_type': 'array'},
\   },
\},
\'simplexmliterator': {
\   'name': 'SimpleXMLIterator',
\   'methods': {
\     'current': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getChildren': { 'signature': 'void | SimpleXMLIterator', 'return_type': 'SimpleXMLIterator'},
\     'hasChildren': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'key': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'next': { 'signature': 'void | void', 'return_type': 'void'},
\     'rewind': { 'signature': 'void | void', 'return_type': 'void'},
\     'valid': { 'signature': 'void | bool', 'return_type': 'bool'},
\     '__construct': { 'signature': 'string $data [, int $options = 0 [, bool $data_is_url = FALSE [, string $ns = "" [, bool $is_prefix = FALSE]]]]', 'return_type': ''},
\     'addAttribute': { 'signature': 'string $name [, string $value [, string $namespace]] | void', 'return_type': 'void'},
\     'addChild': { 'signature': 'string $name [, string $value [, string $namespace]] | SimpleXMLElement', 'return_type': 'SimpleXMLElement'},
\     'asXML': { 'signature': '[ string $filename] | mixed', 'return_type': 'mixed'},
\     'attributes': { 'signature': '[ string $ns = NULL [, bool $is_prefix = FALSE]] | SimpleXMLElement', 'return_type': 'SimpleXMLElement'},
\     'children': { 'signature': '[ string $ns [, bool $is_prefix = FALSE]] | SimpleXMLElement', 'return_type': 'SimpleXMLElement'},
\     'count': { 'signature': 'void | int', 'return_type': 'int'},
\     'getDocNamespaces': { 'signature': '[ bool $recursive = FALSE [, bool $from_root = TRUE]] | array', 'return_type': 'array'},
\     'getName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getNamespaces': { 'signature': '[ bool $recursive = FALSE] | array', 'return_type': 'array'},
\     'registerXPathNamespace': { 'signature': 'string $prefix, string $ns | bool', 'return_type': 'bool'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     'xpath': { 'signature': 'string $path | array', 'return_type': 'array'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['snmp'] = {
\'snmp': {
\   'name': 'SNMP',
\   'constants': {
\     'ERRNO_NOERROR': '',
\     'ERRNO_GENERIC': '',
\     'ERRNO_TIMEOUT': '',
\     'ERRNO_ERROR_IN_REPLY': '',
\     'ERRNO_OID_NOT_INCREASING': '',
\     'ERRNO_OID_PARSING_ERROR': '',
\     'ERRNO_MULTIPLE_SET_QUERIES': '',
\     'ERRNO_ANY': '',
\     'VERSION_1': '',
\     'VERSION_2C': '',
\     'VERSION_2c': '1',
\     'VERSION_3': '',
\   },
\   'properties': {
\     'max_oids': { 'initializer': '', 'type': 'int'},
\     'valueretrieval': { 'initializer': '', 'type': 'int'},
\     'quick_print': { 'initializer': '', 'type': 'bool'},
\     'enum_print': { 'initializer': '', 'type': 'bool'},
\     'oid_output_format': { 'initializer': '', 'type': 'int'},
\     'oid_increasing_check': { 'initializer': '', 'type': 'bool'},
\     'exceptions_enabled': { 'initializer': '', 'type': 'int'},
\     'info': { 'initializer': '', 'type': 'array'},
\   },
\   'methods': {
\     '__construct': { 'signature': 'int $version, string $hostname, string $community [, int $timeout = 1000000 [, int $retries = 5]]', 'return_type': ''},
\     'close': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'get': { 'signature': 'mixed $object_id [, bool $preserve_keys = FALSE] | mixed', 'return_type': 'mixed'},
\     'getErrno': { 'signature': 'void | int', 'return_type': 'int'},
\     'getError': { 'signature': 'void | string', 'return_type': 'string'},
\     'getnext': { 'signature': 'mixed $object_id | mixed', 'return_type': 'mixed'},
\     'set': { 'signature': 'mixed $object_id, mixed $type, mixed $value | bool', 'return_type': 'bool'},
\     'walk': { 'signature': 'string $object_id [, bool $suffix_as_key = FALSE [, int $max_repetitions [, int $non_repeaters]]] | array', 'return_type': 'array'},
\   },
\},
\'snmpexception': {
\   'name': 'SNMPException',
\   'properties': {
\     'code': { 'initializer': '', 'type': 'int'},
\     'message': { 'initializer': '', 'type': 'string'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['soap'] = {
\'soapclient': {
\   'name': 'SoapClient',
\   'methods': {
\     '__call': { 'signature': 'string $function_name, array $arguments | mixed', 'return_type': 'mixed'},
\     '__construct': { 'signature': 'mixed $wsdl [, array $options]', 'return_type': ''},
\     '__doRequest': { 'signature': 'string $request, string $location, string $action, int $version [, int $one_way = 0] | string', 'return_type': 'string'},
\     '__getCookies': { 'signature': 'void | array', 'return_type': 'array'},
\     '__getFunctions': { 'signature': 'void | array', 'return_type': 'array'},
\     '__getLastRequest': { 'signature': 'void | string', 'return_type': 'string'},
\     '__getLastRequestHeaders': { 'signature': 'void | string', 'return_type': 'string'},
\     '__getLastResponse': { 'signature': 'void | string', 'return_type': 'string'},
\     '__getLastResponseHeaders': { 'signature': 'void | string', 'return_type': 'string'},
\     '__getTypes': { 'signature': 'void | array', 'return_type': 'array'},
\     '__setCookie': { 'signature': 'string $name [, string $value] | void', 'return_type': 'void'},
\     '__setLocation': { 'signature': '[ string $new_location] | string', 'return_type': 'string'},
\     '__setSoapHeaders': { 'signature': '[ mixed $soapheaders] | bool', 'return_type': 'bool'},
\     '__soapCall': { 'signature': 'string $function_name, array $arguments [, array $options [, mixed $input_headers [, array &$output_headers]]] | mixed', 'return_type': 'mixed'},
\     'SoapClient': { 'signature': 'mixed $wsdl [, array $options]', 'return_type': ''},
\   },
\},
\'soapfault': {
\   'name': 'SoapFault',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     '__construct': { 'signature': 'string $faultcode, string $faultstring [, string $faultactor [, string $detail [, string $faultname [, string $headerfault]]]]', 'return_type': ''},
\     'SoapFault': { 'signature': 'string $faultcode, string $faultstring [, string $faultactor [, string $detail [, string $faultname [, string $headerfault]]]]', 'return_type': ''},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'soapheader': {
\   'name': 'SoapHeader',
\   'methods': {
\     '__construct': { 'signature': 'string $namespace, string $name [, mixed $data [, bool $mustunderstand [, string $actor]]]', 'return_type': ''},
\     'SoapHeader': { 'signature': 'string $namespace, string $name [, mixed $data [, bool $mustunderstand = FALSE [, string $actor]]]', 'return_type': ''},
\   },
\},
\'soapparam': {
\   'name': 'SoapParam',
\   'methods': {
\     '__construct': { 'signature': 'mixed $data, string $name', 'return_type': ''},
\     'SoapParam': { 'signature': 'mixed $data, string $name', 'return_type': ''},
\   },
\},
\'soapserver': {
\   'name': 'SoapServer',
\   'methods': {
\     'addFunction': { 'signature': 'mixed $functions | void', 'return_type': 'void'},
\     'addSoapHeader': { 'signature': 'SoapHeader $object | void', 'return_type': 'void'},
\     '__construct': { 'signature': 'mixed $wsdl [, array $options]', 'return_type': ''},
\     'fault': { 'signature': 'string $code, string $string [, string $actor [, string $details [, string $name]]] | void', 'return_type': 'void'},
\     'getFunctions': { 'signature': 'void | array', 'return_type': 'array'},
\     'handle': { 'signature': '[ string $soap_request] | void', 'return_type': 'void'},
\     'setClass': { 'signature': 'string $class_name [, mixed $...] | void', 'return_type': 'void'},
\     'setObject': { 'signature': 'object $object | void', 'return_type': 'void'},
\     'setPersistence': { 'signature': 'int $mode | void', 'return_type': 'void'},
\     'SoapServer': { 'signature': 'mixed $wsdl [, array $options]', 'return_type': ''},
\   },
\},
\'soapvar': {
\   'name': 'SoapVar',
\   'methods': {
\     '__construct': { 'signature': 'mixed $data, string $encoding [, string $type_name [, string $type_namespace [, string $node_name [, string $node_namespace]]]]', 'return_type': ''},
\     'SoapVar': { 'signature': 'mixed $data, string $encoding [, string $type_name [, string $type_namespace [, string $node_name [, string $node_namespace]]]]', 'return_type': ''},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['solr'] = {
\'solrclient': {
\   'name': 'SolrClient',
\   'constants': {
\     'SEARCH_SERVLET_TYPE': '1',
\     'UPDATE_SERVLET_TYPE': '2',
\     'THREADS_SERVLET_TYPE': '4',
\     'PING_SERVLET_TYPE': '8',
\     'TERMS_SERVLET_TYPE': '16',
\     'SYSTEM_SERVLET_TYPE': '32',
\     'DEFAULT_SEARCH_SERVLET': 'select',
\     'DEFAULT_UPDATE_SERVLET': 'update',
\     'DEFAULT_THREADS_SERVLET': 'admin/threads',
\     'DEFAULT_PING_SERVLET': 'admin/ping',
\     'DEFAULT_TERMS_SERVLET': 'terms',
\     'DEFAULT_SYSTEM_SERVLET': 'admin/system',
\   },
\   'methods': {
\     'addDocument': { 'signature': 'SolrInputDocument $doc [, bool $overwrite = TRUE [, int $commitWithin = 0]] | SolrUpdateResponse', 'return_type': 'SolrUpdateResponse'},
\     'addDocuments': { 'signature': 'array $docs [, bool $overwrite = TRUE [, int $commitWithin = 0]] | void', 'return_type': 'void'},
\     'commit': { 'signature': '[ bool $softCommit = FALSE [, bool $waitSearcher = TRUE [, bool $expungeDeletes = FALSE]]] | SolrUpdateResponse', 'return_type': 'SolrUpdateResponse'},
\     '__construct': { 'signature': 'array $clientOptions', 'return_type': ''},
\     'deleteById': { 'signature': 'string $id | SolrUpdateResponse', 'return_type': 'SolrUpdateResponse'},
\     'deleteByIds': { 'signature': 'array $ids | SolrUpdateResponse', 'return_type': 'SolrUpdateResponse'},
\     'deleteByQueries': { 'signature': 'array $queries | SolrUpdateResponse', 'return_type': 'SolrUpdateResponse'},
\     'deleteByQuery': { 'signature': 'string $query | SolrUpdateResponse', 'return_type': 'SolrUpdateResponse'},
\     '__destruct': { 'signature': 'void | void', 'return_type': 'void'},
\     'getById': { 'signature': 'string $id | SolrQueryResponse', 'return_type': 'SolrQueryResponse'},
\     'getByIds': { 'signature': 'array $ids | SolrQueryResponse', 'return_type': 'SolrQueryResponse'},
\     'getDebug': { 'signature': 'void | string', 'return_type': 'string'},
\     'getOptions': { 'signature': 'void | array', 'return_type': 'array'},
\     'optimize': { 'signature': '[ int $maxSegments = 1 [, bool $softCommit = TRUE [, bool $waitSearcher = TRUE]]] | SolrUpdateResponse', 'return_type': 'SolrUpdateResponse'},
\     'ping': { 'signature': 'void | SolrPingResponse', 'return_type': 'SolrPingResponse'},
\     'query': { 'signature': 'SolrParams $query | SolrQueryResponse', 'return_type': 'SolrQueryResponse'},
\     'request': { 'signature': 'string $raw_request | SolrUpdateResponse', 'return_type': 'SolrUpdateResponse'},
\     'rollback': { 'signature': 'void | SolrUpdateResponse', 'return_type': 'SolrUpdateResponse'},
\     'setResponseWriter': { 'signature': 'string $responseWriter | void', 'return_type': 'void'},
\     'setServlet': { 'signature': 'int $type, string $value | bool', 'return_type': 'bool'},
\     'system': { 'signature': 'void | void', 'return_type': 'void'},
\     'threads': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'solrclientexception': {
\   'name': 'SolrClientException',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\     'sourceline': { 'initializer': '', 'type': 'integer'},
\     'sourcefile': { 'initializer': '', 'type': 'string'},
\     'zif_name': { 'initializer': '', 'type': 'string'},
\   },
\   'methods': {
\     'getInternalInfo': { 'signature': 'void | array', 'return_type': 'array'},
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'solrcollapsefunction': {
\   'name': 'SolrCollapseFunction',
\   'constants': {
\     'NULLPOLICY_IGNORE': 'ignore',
\     'NULLPOLICY_EXPAND': 'expand',
\     'NULLPOLICY_COLLAPSE': 'collapse',
\   },
\   'methods': {
\     '__construct': { 'signature': '[ string $field]', 'return_type': ''},
\     'getField': { 'signature': 'void | string', 'return_type': 'string'},
\     'getHint': { 'signature': 'void | string', 'return_type': 'string'},
\     'getMax': { 'signature': 'void | string', 'return_type': 'string'},
\     'getMin': { 'signature': 'void | string', 'return_type': 'string'},
\     'getNullPolicy': { 'signature': 'void | string', 'return_type': 'string'},
\     'getSize': { 'signature': 'void | int', 'return_type': 'int'},
\     'setField': { 'signature': 'string $fieldName | SolrCollapseFunction', 'return_type': 'SolrCollapseFunction'},
\     'setHint': { 'signature': 'string $hint | SolrCollapseFunction', 'return_type': 'SolrCollapseFunction'},
\     'setMax': { 'signature': 'string $max | SolrCollapseFunction', 'return_type': 'SolrCollapseFunction'},
\     'setMin': { 'signature': 'string $min | SolrCollapseFunction', 'return_type': 'SolrCollapseFunction'},
\     'setNullPolicy': { 'signature': 'string $nullPolicy | SolrCollapseFunction', 'return_type': 'SolrCollapseFunction'},
\     'setSize': { 'signature': 'int $size | SolrCollapseFunction', 'return_type': 'SolrCollapseFunction'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\   },
\},
\'solrdismaxquery': {
\   'name': 'SolrDisMaxQuery',
\   'constants': {
\     'SolrQuery::ORDER_ASC': '0',
\     'SolrQuery::ORDER_DESC': '1',
\     'SolrQuery::FACET_SORT_INDEX': '0',
\     'SolrQuery::FACET_SORT_COUNT': '1',
\     'SolrQuery::TERMS_SORT_INDEX': '0',
\     'SolrQuery::TERMS_SORT_COUNT': '1',
\   },
\   'methods': {
\     'addBigramPhraseField': { 'signature': 'string $field, string $boost [, string $slop] | SolrDisMaxQuery', 'return_type': 'SolrDisMaxQuery'},
\     'addBoostQuery': { 'signature': 'string $field, string $value [, string $boost] | SolrDisMaxQuery', 'return_type': 'SolrDisMaxQuery'},
\     'addPhraseField': { 'signature': 'string $field, string $boost [, string $slop] | SolrDisMaxQuery', 'return_type': 'SolrDisMaxQuery'},
\     'addQueryField': { 'signature': 'string $field [, string $boost] | SolrDisMaxQuery', 'return_type': 'SolrDisMaxQuery'},
\     'addTrigramPhraseField': { 'signature': 'string $field, string $boost [, string $slop] | SolrDisMaxQuery', 'return_type': 'SolrDisMaxQuery'},
\     'addUserField': { 'signature': 'string $field | SolrDisMaxQuery', 'return_type': 'SolrDisMaxQuery'},
\     '__construct': { 'signature': '[ string $q]', 'return_type': ''},
\     'removeBigramPhraseField': { 'signature': 'string $field | SolrDisMaxQuery', 'return_type': 'SolrDisMaxQuery'},
\     'removeBoostQuery': { 'signature': 'string $field | SolrDisMaxQuery', 'return_type': 'SolrDisMaxQuery'},
\     'removePhraseField': { 'signature': 'string $field | SolrDisMaxQuery', 'return_type': 'SolrDisMaxQuery'},
\     'removeQueryField': { 'signature': 'string $field | SolrDisMaxQuery', 'return_type': 'SolrDisMaxQuery'},
\     'removeTrigramPhraseField': { 'signature': 'string $field | SolrDisMaxQuery', 'return_type': 'SolrDisMaxQuery'},
\     'removeUserField': { 'signature': 'string $field | SolrDisMaxQuery', 'return_type': 'SolrDisMaxQuery'},
\     'setBigramPhraseFields': { 'signature': 'string $fields | SolrDisMaxQuery', 'return_type': 'SolrDisMaxQuery'},
\     'setBigramPhraseSlop': { 'signature': 'string $slop | SolrDisMaxQuery', 'return_type': 'SolrDisMaxQuery'},
\     'setBoostFunction': { 'signature': 'string $function | SolrDisMaxQuery', 'return_type': 'SolrDisMaxQuery'},
\     'setBoostQuery': { 'signature': 'string $q | SolrDisMaxQuery', 'return_type': 'SolrDisMaxQuery'},
\     'setMinimumMatch': { 'signature': 'string $value | SolrDisMaxQuery', 'return_type': 'SolrDisMaxQuery'},
\     'setPhraseFields': { 'signature': 'string $fields | SolrDisMaxQuery', 'return_type': 'SolrDisMaxQuery'},
\     'setPhraseSlop': { 'signature': 'string $slop | SolrDisMaxQuery', 'return_type': 'SolrDisMaxQuery'},
\     'setQueryAlt': { 'signature': 'string $q | SolrDisMaxQuery', 'return_type': 'SolrDisMaxQuery'},
\     'setQueryPhraseSlop': { 'signature': 'string $slop | SolrDisMaxQuery', 'return_type': 'SolrDisMaxQuery'},
\     'setTieBreaker': { 'signature': 'string $tieBreaker | SolrDisMaxQuery', 'return_type': 'SolrDisMaxQuery'},
\     'setTrigramPhraseFields': { 'signature': 'string $fields | SolrDisMaxQuery', 'return_type': 'SolrDisMaxQuery'},
\     'setTrigramPhraseSlop': { 'signature': 'string $slop | SolrDisMaxQuery', 'return_type': 'SolrDisMaxQuery'},
\     'setUserFields': { 'signature': 'string $fields | SolrDisMaxQuery', 'return_type': 'SolrDisMaxQuery'},
\     'useDisMaxQueryParser': { 'signature': 'void | SolrDisMaxQuery', 'return_type': 'SolrDisMaxQuery'},
\     'useEDisMaxQueryParser': { 'signature': 'void | SolrDisMaxQuery', 'return_type': 'SolrDisMaxQuery'},
\     'addExpandFilterQuery': { 'signature': 'string $fq | SolrQuery', 'return_type': 'SolrQuery'},
\     'addExpandSortField': { 'signature': 'string $field [, string $order] | SolrQuery', 'return_type': 'SolrQuery'},
\     'addFacetDateField': { 'signature': 'string $dateField | SolrQuery', 'return_type': 'SolrQuery'},
\     'addFacetDateOther': { 'signature': 'string $value [, string $field_override] | SolrQuery', 'return_type': 'SolrQuery'},
\     'addFacetField': { 'signature': 'string $field | SolrQuery', 'return_type': 'SolrQuery'},
\     'addFacetQuery': { 'signature': 'string $facetQuery | SolrQuery', 'return_type': 'SolrQuery'},
\     'addField': { 'signature': 'string $field | SolrQuery', 'return_type': 'SolrQuery'},
\     'addFilterQuery': { 'signature': 'string $fq | SolrQuery', 'return_type': 'SolrQuery'},
\     'addGroupField': { 'signature': 'string $value | SolrQuery', 'return_type': 'SolrQuery'},
\     'addGroupFunction': { 'signature': 'string $value | SolrQuery', 'return_type': 'SolrQuery'},
\     'addGroupQuery': { 'signature': 'string $value | SolrQuery', 'return_type': 'SolrQuery'},
\     'addGroupSortField': { 'signature': 'string $field [, int $order] | SolrQuery', 'return_type': 'SolrQuery'},
\     'addHighlightField': { 'signature': 'string $field | SolrQuery', 'return_type': 'SolrQuery'},
\     'addMltField': { 'signature': 'string $field | SolrQuery', 'return_type': 'SolrQuery'},
\     'addMltQueryField': { 'signature': 'string $field, float $boost | SolrQuery', 'return_type': 'SolrQuery'},
\     'addSortField': { 'signature': 'string $field [, int $order = SolrQuery::ORDER_DESC] | SolrQuery', 'return_type': 'SolrQuery'},
\     'addStatsFacet': { 'signature': 'string $field | SolrQuery', 'return_type': 'SolrQuery'},
\     'addStatsField': { 'signature': 'string $field | SolrQuery', 'return_type': 'SolrQuery'},
\     'collapse': { 'signature': 'SolrCollapseFunction $collapseFunction | SolrQuery', 'return_type': 'SolrQuery'},
\     '__destruct': { 'signature': 'void | void', 'return_type': 'void'},
\     'getExpand': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getExpandFilterQueries': { 'signature': 'void | array', 'return_type': 'array'},
\     'getExpandQuery': { 'signature': 'void | array', 'return_type': 'array'},
\     'getExpandRows': { 'signature': 'void | int', 'return_type': 'int'},
\     'getExpandSortFields': { 'signature': 'void | array', 'return_type': 'array'},
\     'getFacet': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getFacetDateEnd': { 'signature': '[ string $field_override] | string', 'return_type': 'string'},
\     'getFacetDateFields': { 'signature': 'void | array', 'return_type': 'array'},
\     'getFacetDateGap': { 'signature': '[ string $field_override] | string', 'return_type': 'string'},
\     'getFacetDateHardEnd': { 'signature': '[ string $field_override] | string', 'return_type': 'string'},
\     'getFacetDateOther': { 'signature': '[ string $field_override] | array', 'return_type': 'array'},
\     'getFacetDateStart': { 'signature': '[ string $field_override] | string', 'return_type': 'string'},
\     'getFacetFields': { 'signature': 'void | array', 'return_type': 'array'},
\     'getFacetLimit': { 'signature': '[ string $field_override] | int', 'return_type': 'int'},
\     'getFacetMethod': { 'signature': '[ string $field_override] | string', 'return_type': 'string'},
\     'getFacetMinCount': { 'signature': '[ string $field_override] | int', 'return_type': 'int'},
\     'getFacetMissing': { 'signature': '[ string $field_override] | bool', 'return_type': 'bool'},
\     'getFacetOffset': { 'signature': '[ string $field_override] | int', 'return_type': 'int'},
\     'getFacetPrefix': { 'signature': '[ string $field_override] | string', 'return_type': 'string'},
\     'getFacetQueries': { 'signature': 'void | array', 'return_type': 'array'},
\     'getFacetSort': { 'signature': '[ string $field_override] | int', 'return_type': 'int'},
\     'getFields': { 'signature': 'void | array', 'return_type': 'array'},
\     'getFilterQueries': { 'signature': 'void | array', 'return_type': 'array'},
\     'getGroup': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getGroupCachePercent': { 'signature': 'void | int', 'return_type': 'int'},
\     'getGroupFacet': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getGroupFields': { 'signature': 'void | array', 'return_type': 'array'},
\     'getGroupFormat': { 'signature': 'void | string', 'return_type': 'string'},
\     'getGroupFunctions': { 'signature': 'void | array', 'return_type': 'array'},
\     'getGroupLimit': { 'signature': 'void | int', 'return_type': 'int'},
\     'getGroupMain': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getGroupNGroups': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getGroupOffset': { 'signature': 'void | int', 'return_type': 'int'},
\     'getGroupQueries': { 'signature': 'void | array', 'return_type': 'array'},
\     'getGroupSortFields': { 'signature': 'void | array', 'return_type': 'array'},
\     'getGroupTruncate': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getHighlight': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getHighlightAlternateField': { 'signature': '[ string $field_override] | string', 'return_type': 'string'},
\     'getHighlightFields': { 'signature': 'void | array', 'return_type': 'array'},
\     'getHighlightFormatter': { 'signature': '[ string $field_override] | string', 'return_type': 'string'},
\     'getHighlightFragmenter': { 'signature': '[ string $field_override] | string', 'return_type': 'string'},
\     'getHighlightFragsize': { 'signature': '[ string $field_override] | int', 'return_type': 'int'},
\     'getHighlightHighlightMultiTerm': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getHighlightMaxAlternateFieldLength': { 'signature': '[ string $field_override] | int', 'return_type': 'int'},
\     'getHighlightMaxAnalyzedChars': { 'signature': 'void | int', 'return_type': 'int'},
\     'getHighlightMergeContiguous': { 'signature': '[ string $field_override] | bool', 'return_type': 'bool'},
\     'getHighlightRegexMaxAnalyzedChars': { 'signature': 'void | int', 'return_type': 'int'},
\     'getHighlightRegexPattern': { 'signature': 'void | string', 'return_type': 'string'},
\     'getHighlightRegexSlop': { 'signature': 'void | float', 'return_type': 'float'},
\     'getHighlightRequireFieldMatch': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getHighlightSimplePost': { 'signature': '[ string $field_override] | string', 'return_type': 'string'},
\     'getHighlightSimplePre': { 'signature': '[ string $field_override] | string', 'return_type': 'string'},
\     'getHighlightSnippets': { 'signature': '[ string $field_override] | int', 'return_type': 'int'},
\     'getHighlightUsePhraseHighlighter': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getMlt': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getMltBoost': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getMltCount': { 'signature': 'void | int', 'return_type': 'int'},
\     'getMltFields': { 'signature': 'void | array', 'return_type': 'array'},
\     'getMltMaxNumQueryTerms': { 'signature': 'void | int', 'return_type': 'int'},
\     'getMltMaxNumTokens': { 'signature': 'void | int', 'return_type': 'int'},
\     'getMltMaxWordLength': { 'signature': 'void | int', 'return_type': 'int'},
\     'getMltMinDocFrequency': { 'signature': 'void | int', 'return_type': 'int'},
\     'getMltMinTermFrequency': { 'signature': 'void | int', 'return_type': 'int'},
\     'getMltMinWordLength': { 'signature': 'void | int', 'return_type': 'int'},
\     'getMltQueryFields': { 'signature': 'void | array', 'return_type': 'array'},
\     'getQuery': { 'signature': 'void | string', 'return_type': 'string'},
\     'getRows': { 'signature': 'void | int', 'return_type': 'int'},
\     'getSortFields': { 'signature': 'void | array', 'return_type': 'array'},
\     'getStart': { 'signature': 'void | int', 'return_type': 'int'},
\     'getStats': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getStatsFacets': { 'signature': 'void | array', 'return_type': 'array'},
\     'getStatsFields': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTerms': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getTermsField': { 'signature': 'void | string', 'return_type': 'string'},
\     'getTermsIncludeLowerBound': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getTermsIncludeUpperBound': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getTermsLimit': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTermsLowerBound': { 'signature': 'void | string', 'return_type': 'string'},
\     'getTermsMaxCount': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTermsMinCount': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTermsPrefix': { 'signature': 'void | string', 'return_type': 'string'},
\     'getTermsReturnRaw': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getTermsSort': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTermsUpperBound': { 'signature': 'void | string', 'return_type': 'string'},
\     'getTimeAllowed': { 'signature': 'void | int', 'return_type': 'int'},
\     'removeExpandFilterQuery': { 'signature': 'string $fq | SolrQuery', 'return_type': 'SolrQuery'},
\     'removeExpandSortField': { 'signature': 'string $field | SolrQuery', 'return_type': 'SolrQuery'},
\     'removeFacetDateField': { 'signature': 'string $field | SolrQuery', 'return_type': 'SolrQuery'},
\     'removeFacetDateOther': { 'signature': 'string $value [, string $field_override] | SolrQuery', 'return_type': 'SolrQuery'},
\     'removeFacetField': { 'signature': 'string $field | SolrQuery', 'return_type': 'SolrQuery'},
\     'removeFacetQuery': { 'signature': 'string $value | SolrQuery', 'return_type': 'SolrQuery'},
\     'removeField': { 'signature': 'string $field | SolrQuery', 'return_type': 'SolrQuery'},
\     'removeFilterQuery': { 'signature': 'string $fq | SolrQuery', 'return_type': 'SolrQuery'},
\     'removeHighlightField': { 'signature': 'string $field | SolrQuery', 'return_type': 'SolrQuery'},
\     'removeMltField': { 'signature': 'string $field | SolrQuery', 'return_type': 'SolrQuery'},
\     'removeMltQueryField': { 'signature': 'string $queryField | SolrQuery', 'return_type': 'SolrQuery'},
\     'removeSortField': { 'signature': 'string $field | SolrQuery', 'return_type': 'SolrQuery'},
\     'removeStatsFacet': { 'signature': 'string $value | SolrQuery', 'return_type': 'SolrQuery'},
\     'removeStatsField': { 'signature': 'string $field | SolrQuery', 'return_type': 'SolrQuery'},
\     'setEchoHandler': { 'signature': 'bool $flag | SolrQuery', 'return_type': 'SolrQuery'},
\     'setEchoParams': { 'signature': 'string $type | SolrQuery', 'return_type': 'SolrQuery'},
\     'setExpand': { 'signature': 'bool $value | SolrQuery', 'return_type': 'SolrQuery'},
\     'setExpandQuery': { 'signature': 'string $q | SolrQuery', 'return_type': 'SolrQuery'},
\     'setExpandRows': { 'signature': 'int $value | SolrQuery', 'return_type': 'SolrQuery'},
\     'setExplainOther': { 'signature': 'string $query | SolrQuery', 'return_type': 'SolrQuery'},
\     'setFacet': { 'signature': 'bool $flag | SolrQuery', 'return_type': 'SolrQuery'},
\     'setFacetDateEnd': { 'signature': 'string $value [, string $field_override] | SolrQuery', 'return_type': 'SolrQuery'},
\     'setFacetDateGap': { 'signature': 'string $value [, string $field_override] | SolrQuery', 'return_type': 'SolrQuery'},
\     'setFacetDateHardEnd': { 'signature': 'bool $value [, string $field_override] | SolrQuery', 'return_type': 'SolrQuery'},
\     'setFacetDateStart': { 'signature': 'string $value [, string $field_override] | SolrQuery', 'return_type': 'SolrQuery'},
\     'setFacetEnumCacheMinDefaultFrequency': { 'signature': 'int $frequency [, string $field_override] | SolrQuery', 'return_type': 'SolrQuery'},
\     'setFacetLimit': { 'signature': 'int $limit [, string $field_override] | SolrQuery', 'return_type': 'SolrQuery'},
\     'setFacetMethod': { 'signature': 'string $method [, string $field_override] | SolrQuery', 'return_type': 'SolrQuery'},
\     'setFacetMinCount': { 'signature': 'int $mincount [, string $field_override] | SolrQuery', 'return_type': 'SolrQuery'},
\     'setFacetMissing': { 'signature': 'bool $flag [, string $field_override] | SolrQuery', 'return_type': 'SolrQuery'},
\     'setFacetOffset': { 'signature': 'int $offset [, string $field_override] | SolrQuery', 'return_type': 'SolrQuery'},
\     'setFacetPrefix': { 'signature': 'string $prefix [, string $field_override] | SolrQuery', 'return_type': 'SolrQuery'},
\     'setFacetSort': { 'signature': 'int $facetSort [, string $field_override] | SolrQuery', 'return_type': 'SolrQuery'},
\     'setGroup': { 'signature': 'bool $value | SolrQuery', 'return_type': 'SolrQuery'},
\     'setGroupCachePercent': { 'signature': 'int $percent | SolrQuery', 'return_type': 'SolrQuery'},
\     'setGroupFacet': { 'signature': 'bool $value | SolrQuery', 'return_type': 'SolrQuery'},
\     'setGroupFormat': { 'signature': 'string $value | SolrQuery', 'return_type': 'SolrQuery'},
\     'setGroupLimit': { 'signature': 'int $value | SolrQuery', 'return_type': 'SolrQuery'},
\     'setGroupMain': { 'signature': 'string $value | SolrQuery', 'return_type': 'SolrQuery'},
\     'setGroupNGroups': { 'signature': 'bool $value | SolrQuery', 'return_type': 'SolrQuery'},
\     'setGroupOffset': { 'signature': 'int $value | SolrQuery', 'return_type': 'SolrQuery'},
\     'setGroupTruncate': { 'signature': 'bool $value | SolrQuery', 'return_type': 'SolrQuery'},
\     'setHighlight': { 'signature': 'bool $flag | SolrQuery', 'return_type': 'SolrQuery'},
\     'setHighlightAlternateField': { 'signature': 'string $field [, string $field_override] | SolrQuery', 'return_type': 'SolrQuery'},
\     'setHighlightFormatter': { 'signature': 'string $formatter [, string $field_override] | SolrQuery', 'return_type': 'SolrQuery'},
\     'setHighlightFragmenter': { 'signature': 'string $fragmenter [, string $field_override] | SolrQuery', 'return_type': 'SolrQuery'},
\     'setHighlightFragsize': { 'signature': 'int $size [, string $field_override] | SolrQuery', 'return_type': 'SolrQuery'},
\     'setHighlightHighlightMultiTerm': { 'signature': 'bool $flag | SolrQuery', 'return_type': 'SolrQuery'},
\     'setHighlightMaxAlternateFieldLength': { 'signature': 'int $fieldLength [, string $field_override] | SolrQuery', 'return_type': 'SolrQuery'},
\     'setHighlightMaxAnalyzedChars': { 'signature': 'int $value | SolrQuery', 'return_type': 'SolrQuery'},
\     'setHighlightMergeContiguous': { 'signature': 'bool $flag [, string $field_override] | SolrQuery', 'return_type': 'SolrQuery'},
\     'setHighlightRegexMaxAnalyzedChars': { 'signature': 'int $maxAnalyzedChars | SolrQuery', 'return_type': 'SolrQuery'},
\     'setHighlightRegexPattern': { 'signature': 'string $value | SolrQuery', 'return_type': 'SolrQuery'},
\     'setHighlightRegexSlop': { 'signature': 'float $factor | SolrQuery', 'return_type': 'SolrQuery'},
\     'setHighlightRequireFieldMatch': { 'signature': 'bool $flag | SolrQuery', 'return_type': 'SolrQuery'},
\     'setHighlightSimplePost': { 'signature': 'string $simplePost [, string $field_override] | SolrQuery', 'return_type': 'SolrQuery'},
\     'setHighlightSimplePre': { 'signature': 'string $simplePre [, string $field_override] | SolrQuery', 'return_type': 'SolrQuery'},
\     'setHighlightSnippets': { 'signature': 'int $value [, string $field_override] | SolrQuery', 'return_type': 'SolrQuery'},
\     'setHighlightUsePhraseHighlighter': { 'signature': 'bool $flag | SolrQuery', 'return_type': 'SolrQuery'},
\     'setMlt': { 'signature': 'bool $flag | SolrQuery', 'return_type': 'SolrQuery'},
\     'setMltBoost': { 'signature': 'bool $flag | SolrQuery', 'return_type': 'SolrQuery'},
\     'setMltCount': { 'signature': 'int $count | SolrQuery', 'return_type': 'SolrQuery'},
\     'setMltMaxNumQueryTerms': { 'signature': 'int $value | SolrQuery', 'return_type': 'SolrQuery'},
\     'setMltMaxNumTokens': { 'signature': 'int $value | SolrQuery', 'return_type': 'SolrQuery'},
\     'setMltMaxWordLength': { 'signature': 'int $maxWordLength | SolrQuery', 'return_type': 'SolrQuery'},
\     'setMltMinDocFrequency': { 'signature': 'int $minDocFrequency | SolrQuery', 'return_type': 'SolrQuery'},
\     'setMltMinTermFrequency': { 'signature': 'int $minTermFrequency | SolrQuery', 'return_type': 'SolrQuery'},
\     'setMltMinWordLength': { 'signature': 'int $minWordLength | SolrQuery', 'return_type': 'SolrQuery'},
\     'setOmitHeader': { 'signature': 'bool $flag | SolrQuery', 'return_type': 'SolrQuery'},
\     'setQuery': { 'signature': 'string $query | SolrQuery', 'return_type': 'SolrQuery'},
\     'setRows': { 'signature': 'int $rows | SolrQuery', 'return_type': 'SolrQuery'},
\     'setShowDebugInfo': { 'signature': 'bool $flag | SolrQuery', 'return_type': 'SolrQuery'},
\     'setStart': { 'signature': 'int $start | SolrQuery', 'return_type': 'SolrQuery'},
\     'setStats': { 'signature': 'bool $flag | SolrQuery', 'return_type': 'SolrQuery'},
\     'setTerms': { 'signature': 'bool $flag | SolrQuery', 'return_type': 'SolrQuery'},
\     'setTermsField': { 'signature': 'string $fieldname | SolrQuery', 'return_type': 'SolrQuery'},
\     'setTermsIncludeLowerBound': { 'signature': 'bool $flag | SolrQuery', 'return_type': 'SolrQuery'},
\     'setTermsIncludeUpperBound': { 'signature': 'bool $flag | SolrQuery', 'return_type': 'SolrQuery'},
\     'setTermsLimit': { 'signature': 'int $limit | SolrQuery', 'return_type': 'SolrQuery'},
\     'setTermsLowerBound': { 'signature': 'string $lowerBound | SolrQuery', 'return_type': 'SolrQuery'},
\     'setTermsMaxCount': { 'signature': 'int $frequency | SolrQuery', 'return_type': 'SolrQuery'},
\     'setTermsMinCount': { 'signature': 'int $frequency | SolrQuery', 'return_type': 'SolrQuery'},
\     'setTermsPrefix': { 'signature': 'string $prefix | SolrQuery', 'return_type': 'SolrQuery'},
\     'setTermsReturnRaw': { 'signature': 'bool $flag | SolrQuery', 'return_type': 'SolrQuery'},
\     'setTermsSort': { 'signature': 'int $sortType | SolrQuery', 'return_type': 'SolrQuery'},
\     'setTermsUpperBound': { 'signature': 'string $upperBound | SolrQuery', 'return_type': 'SolrQuery'},
\     'setTimeAllowed': { 'signature': 'int $timeAllowed | SolrQuery', 'return_type': 'SolrQuery'},
\   },
\},
\'solrdocument': {
\   'name': 'SolrDocument',
\   'constants': {
\     'SORT_DEFAULT': '1',
\     'SORT_ASC': '1',
\     'SORT_DESC': '2',
\     'SORT_FIELD_NAME': '1',
\     'SORT_FIELD_VALUE_COUNT': '2',
\     'SORT_FIELD_BOOST_VALUE': '4',
\   },
\   'methods': {
\     'addField': { 'signature': 'string $fieldName, string $fieldValue | bool', 'return_type': 'bool'},
\     'clear': { 'signature': 'void | bool', 'return_type': 'bool'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'current': { 'signature': 'void | SolrDocumentField', 'return_type': 'SolrDocumentField'},
\     'deleteField': { 'signature': 'string $fieldName | bool', 'return_type': 'bool'},
\     '__destruct': { 'signature': 'void | void', 'return_type': 'void'},
\     'fieldExists': { 'signature': 'string $fieldName | bool', 'return_type': 'bool'},
\     '__get': { 'signature': 'string $fieldName | SolrDocumentField', 'return_type': 'SolrDocumentField'},
\     'getChildDocuments': { 'signature': 'void | array', 'return_type': 'array'},
\     'getChildDocumentsCount': { 'signature': 'void | int', 'return_type': 'int'},
\     'getField': { 'signature': 'string $fieldName | SolrDocumentField', 'return_type': 'SolrDocumentField'},
\     'getFieldCount': { 'signature': 'void | int', 'return_type': 'int'},
\     'getFieldNames': { 'signature': 'void | array', 'return_type': 'array'},
\     'getInputDocument': { 'signature': 'void | SolrInputDocument', 'return_type': 'SolrInputDocument'},
\     'hasChildDocuments': { 'signature': 'void | bool', 'return_type': 'bool'},
\     '__isset': { 'signature': 'string $fieldName | bool', 'return_type': 'bool'},
\     'key': { 'signature': 'void | string', 'return_type': 'string'},
\     'merge': { 'signature': 'SolrDocument $sourceDoc [, bool $overwrite = TRUE] | bool', 'return_type': 'bool'},
\     'next': { 'signature': 'void | void', 'return_type': 'void'},
\     'offsetExists': { 'signature': 'string $fieldName | bool', 'return_type': 'bool'},
\     'offsetGet': { 'signature': 'string $fieldName | SolrDocumentField', 'return_type': 'SolrDocumentField'},
\     'offsetSet': { 'signature': 'string $fieldName, string $fieldValue | void', 'return_type': 'void'},
\     'offsetUnset': { 'signature': 'string $fieldName | void', 'return_type': 'void'},
\     'reset': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'rewind': { 'signature': 'void | void', 'return_type': 'void'},
\     'serialize': { 'signature': 'void | string', 'return_type': 'string'},
\     '__set': { 'signature': 'string $fieldName, string $fieldValue | bool', 'return_type': 'bool'},
\     'sort': { 'signature': 'int $sortOrderBy [, int $sortDirection = SolrDocument::SORT_ASC] | bool', 'return_type': 'bool'},
\     'toArray': { 'signature': 'void | array', 'return_type': 'array'},
\     'unserialize': { 'signature': 'string $serialized | void', 'return_type': 'void'},
\     '__unset': { 'signature': 'string $fieldName | bool', 'return_type': 'bool'},
\     'valid': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'solrdocumentfield': {
\   'name': 'SolrDocumentField',
\   'properties': {
\     'name': { 'initializer': '', 'type': 'string'},
\     'boost': { 'initializer': '', 'type': 'float'},
\     'values': { 'initializer': '', 'type': 'array'},
\   },
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     '__destruct': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'solrexception': {
\   'name': 'SolrException',
\   'properties': {
\     'sourceline': { 'initializer': '', 'type': 'integer'},
\     'sourcefile': { 'initializer': '', 'type': 'string'},
\     'zif_name': { 'initializer': '', 'type': 'string'},
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getInternalInfo': { 'signature': 'void | array', 'return_type': 'array'},
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'solrgenericresponse': {
\   'name': 'SolrGenericResponse',
\   'constants': {
\     'PARSE_SOLR_OBJ': '0',
\     'PARSE_SOLR_DOC': '1',
\     'SolrResponse::PARSE_SOLR_OBJ': '0',
\     'SolrResponse::PARSE_SOLR_DOC': '1',
\   },
\   'properties': {
\     'http_status': { 'initializer': '', 'type': 'integer'},
\     'parser_mode': { 'initializer': '', 'type': 'integer'},
\     'success': { 'initializer': '', 'type': 'bool'},
\     'http_status_message': { 'initializer': '', 'type': 'string'},
\     'http_request_url': { 'initializer': '', 'type': 'string'},
\     'http_raw_request_headers': { 'initializer': '', 'type': 'string'},
\     'http_raw_request': { 'initializer': '', 'type': 'string'},
\     'http_raw_response_headers': { 'initializer': '', 'type': 'string'},
\     'http_raw_response': { 'initializer': '', 'type': 'string'},
\     'http_digested_response': { 'initializer': '', 'type': 'string'},
\   },
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     '__destruct': { 'signature': 'void | void', 'return_type': 'void'},
\     'getDigestedResponse': { 'signature': 'void | string', 'return_type': 'string'},
\     'getHttpStatus': { 'signature': 'void | int', 'return_type': 'int'},
\     'getHttpStatusMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getRawRequest': { 'signature': 'void | string', 'return_type': 'string'},
\     'getRawRequestHeaders': { 'signature': 'void | string', 'return_type': 'string'},
\     'getRawResponse': { 'signature': 'void | string', 'return_type': 'string'},
\     'getRawResponseHeaders': { 'signature': 'void | string', 'return_type': 'string'},
\     'getRequestUrl': { 'signature': 'void | string', 'return_type': 'string'},
\     'getResponse': { 'signature': 'void | SolrObject', 'return_type': 'SolrObject'},
\     'setParseMode': { 'signature': '[ int $parser_mode = 0] | bool', 'return_type': 'bool'},
\     'success': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'solrillegalargumentexception': {
\   'name': 'SolrIllegalArgumentException',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\     'sourceline': { 'initializer': '', 'type': 'integer'},
\     'sourcefile': { 'initializer': '', 'type': 'string'},
\     'zif_name': { 'initializer': '', 'type': 'string'},
\   },
\   'methods': {
\     'getInternalInfo': { 'signature': 'void | array', 'return_type': 'array'},
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'solrillegaloperationexception': {
\   'name': 'SolrIllegalOperationException',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\     'sourceline': { 'initializer': '', 'type': 'integer'},
\     'sourcefile': { 'initializer': '', 'type': 'string'},
\     'zif_name': { 'initializer': '', 'type': 'string'},
\   },
\   'methods': {
\     'getInternalInfo': { 'signature': 'void | array', 'return_type': 'array'},
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'solrinputdocument': {
\   'name': 'SolrInputDocument',
\   'constants': {
\     'SORT_DEFAULT': '1',
\     'SORT_ASC': '1',
\     'SORT_DESC': '2',
\     'SORT_FIELD_NAME': '1',
\     'SORT_FIELD_VALUE_COUNT': '2',
\     'SORT_FIELD_BOOST_VALUE': '4',
\   },
\   'methods': {
\     'addChildDocument': { 'signature': 'SolrInputDocument $child | void', 'return_type': 'void'},
\     'addChildDocuments': { 'signature': 'array &$docs | void', 'return_type': 'void'},
\     'addField': { 'signature': 'string $fieldName, string $fieldValue [, float $fieldBoostValue = 0.0] | bool', 'return_type': 'bool'},
\     'clear': { 'signature': 'void | bool', 'return_type': 'bool'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'deleteField': { 'signature': 'string $fieldName | bool', 'return_type': 'bool'},
\     '__destruct': { 'signature': 'void | void', 'return_type': 'void'},
\     'fieldExists': { 'signature': 'string $fieldName | bool', 'return_type': 'bool'},
\     'getBoost': { 'signature': 'void | float', 'return_type': 'float'},
\     'getChildDocuments': { 'signature': 'void | array', 'return_type': 'array'},
\     'getChildDocumentsCount': { 'signature': 'void | int', 'return_type': 'int'},
\     'getField': { 'signature': 'string $fieldName | SolrDocumentField', 'return_type': 'SolrDocumentField'},
\     'getFieldBoost': { 'signature': 'string $fieldName | float', 'return_type': 'float'},
\     'getFieldCount': { 'signature': 'void | int', 'return_type': 'int'},
\     'getFieldNames': { 'signature': 'void | array', 'return_type': 'array'},
\     'hasChildDocuments': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'merge': { 'signature': 'SolrInputDocument $sourceDoc [, bool $overwrite = TRUE] | bool', 'return_type': 'bool'},
\     'reset': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'setBoost': { 'signature': 'float $documentBoostValue | bool', 'return_type': 'bool'},
\     'setFieldBoost': { 'signature': 'string $fieldName, float $fieldBoostValue | bool', 'return_type': 'bool'},
\     'sort': { 'signature': 'int $sortOrderBy [, int $sortDirection = SolrInputDocument::SORT_ASC] | bool', 'return_type': 'bool'},
\     'toArray': { 'signature': 'void | array', 'return_type': 'array'},
\   },
\},
\'solrmissingmandatoryparameterexception': {
\   'name': 'SolrMissingMandatoryParameterException',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\     'sourceline': { 'initializer': '', 'type': 'integer'},
\     'sourcefile': { 'initializer': '', 'type': 'string'},
\     'zif_name': { 'initializer': '', 'type': 'string'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\     'getInternalInfo': { 'signature': 'void | array', 'return_type': 'array'},
\   },
\},
\'solrmodifiableparams': {
\   'name': 'SolrModifiableParams',
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     '__destruct': { 'signature': 'void | void', 'return_type': 'void'},
\     'add': { 'signature': 'string $name, string $value | SolrParams', 'return_type': 'SolrParams'},
\     'addParam': { 'signature': 'string $name, string $value | SolrParams', 'return_type': 'SolrParams'},
\     'get': { 'signature': 'string $param_name | mixed', 'return_type': 'mixed'},
\     'getParam': { 'signature': '[ string $param_name] | mixed', 'return_type': 'mixed'},
\     'getParams': { 'signature': 'void | array', 'return_type': 'array'},
\     'getPreparedParams': { 'signature': 'void | array', 'return_type': 'array'},
\     'serialize': { 'signature': 'void | string', 'return_type': 'string'},
\     'set': { 'signature': 'string $name, string $value | void', 'return_type': 'void'},
\     'setParam': { 'signature': 'string $name, string $value | SolrParams', 'return_type': 'SolrParams'},
\     'toString': { 'signature': '[ bool $url_encode = FALSE] | string', 'return_type': 'string'},
\     'unserialize': { 'signature': 'string $serialized | void', 'return_type': 'void'},
\   },
\},
\'solrobject': {
\   'name': 'SolrObject',
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     '__destruct': { 'signature': 'void | void', 'return_type': 'void'},
\     'getPropertyNames': { 'signature': 'void | array', 'return_type': 'array'},
\     'offsetExists': { 'signature': 'string $property_name | bool', 'return_type': 'bool'},
\     'offsetGet': { 'signature': 'string $property_name | mixed', 'return_type': 'mixed'},
\     'offsetSet': { 'signature': 'string $property_name, string $property_value | void', 'return_type': 'void'},
\     'offsetUnset': { 'signature': 'string $property_name | void', 'return_type': 'void'},
\   },
\},
\'solrparams': {
\   'name': 'SolrParams',
\   'methods': {
\     'add': { 'signature': 'string $name, string $value | SolrParams', 'return_type': 'SolrParams'},
\     'addParam': { 'signature': 'string $name, string $value | SolrParams', 'return_type': 'SolrParams'},
\     'get': { 'signature': 'string $param_name | mixed', 'return_type': 'mixed'},
\     'getParam': { 'signature': '[ string $param_name] | mixed', 'return_type': 'mixed'},
\     'getParams': { 'signature': 'void | array', 'return_type': 'array'},
\     'getPreparedParams': { 'signature': 'void | array', 'return_type': 'array'},
\     'serialize': { 'signature': 'void | string', 'return_type': 'string'},
\     'set': { 'signature': 'string $name, string $value | void', 'return_type': 'void'},
\     'setParam': { 'signature': 'string $name, string $value | SolrParams', 'return_type': 'SolrParams'},
\     'toString': { 'signature': '[ bool $url_encode = FALSE] | string', 'return_type': 'string'},
\     'unserialize': { 'signature': 'string $serialized | void', 'return_type': 'void'},
\   },
\},
\'solrpingresponse': {
\   'name': 'SolrPingResponse',
\   'constants': {
\     'PARSE_SOLR_OBJ': '0',
\     'PARSE_SOLR_DOC': '1',
\   },
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     '__destruct': { 'signature': 'void | void', 'return_type': 'void'},
\     'getResponse': { 'signature': 'void | SolrObject', 'return_type': 'SolrObject'},
\     'getDigestedResponse': { 'signature': 'void | string', 'return_type': 'string'},
\     'getHttpStatus': { 'signature': 'void | int', 'return_type': 'int'},
\     'getHttpStatusMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getRawRequest': { 'signature': 'void | string', 'return_type': 'string'},
\     'getRawRequestHeaders': { 'signature': 'void | string', 'return_type': 'string'},
\     'getRawResponse': { 'signature': 'void | string', 'return_type': 'string'},
\     'getRawResponseHeaders': { 'signature': 'void | string', 'return_type': 'string'},
\     'getRequestUrl': { 'signature': 'void | string', 'return_type': 'string'},
\     'setParseMode': { 'signature': '[ int $parser_mode = 0] | bool', 'return_type': 'bool'},
\     'success': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'solrquery': {
\   'name': 'SolrQuery',
\   'constants': {
\     'ORDER_ASC': '0',
\     'ORDER_DESC': '1',
\     'FACET_SORT_INDEX': '0',
\     'FACET_SORT_COUNT': '1',
\     'TERMS_SORT_INDEX': '0',
\     'TERMS_SORT_COUNT': '1',
\   },
\   'methods': {
\     'addExpandFilterQuery': { 'signature': 'string $fq | SolrQuery', 'return_type': 'SolrQuery'},
\     'addExpandSortField': { 'signature': 'string $field [, string $order] | SolrQuery', 'return_type': 'SolrQuery'},
\     'addFacetDateField': { 'signature': 'string $dateField | SolrQuery', 'return_type': 'SolrQuery'},
\     'addFacetDateOther': { 'signature': 'string $value [, string $field_override] | SolrQuery', 'return_type': 'SolrQuery'},
\     'addFacetField': { 'signature': 'string $field | SolrQuery', 'return_type': 'SolrQuery'},
\     'addFacetQuery': { 'signature': 'string $facetQuery | SolrQuery', 'return_type': 'SolrQuery'},
\     'addField': { 'signature': 'string $field | SolrQuery', 'return_type': 'SolrQuery'},
\     'addFilterQuery': { 'signature': 'string $fq | SolrQuery', 'return_type': 'SolrQuery'},
\     'addGroupField': { 'signature': 'string $value | SolrQuery', 'return_type': 'SolrQuery'},
\     'addGroupFunction': { 'signature': 'string $value | SolrQuery', 'return_type': 'SolrQuery'},
\     'addGroupQuery': { 'signature': 'string $value | SolrQuery', 'return_type': 'SolrQuery'},
\     'addGroupSortField': { 'signature': 'string $field [, int $order] | SolrQuery', 'return_type': 'SolrQuery'},
\     'addHighlightField': { 'signature': 'string $field | SolrQuery', 'return_type': 'SolrQuery'},
\     'addMltField': { 'signature': 'string $field | SolrQuery', 'return_type': 'SolrQuery'},
\     'addMltQueryField': { 'signature': 'string $field, float $boost | SolrQuery', 'return_type': 'SolrQuery'},
\     'addSortField': { 'signature': 'string $field [, int $order = SolrQuery::ORDER_DESC] | SolrQuery', 'return_type': 'SolrQuery'},
\     'addStatsFacet': { 'signature': 'string $field | SolrQuery', 'return_type': 'SolrQuery'},
\     'addStatsField': { 'signature': 'string $field | SolrQuery', 'return_type': 'SolrQuery'},
\     'collapse': { 'signature': 'SolrCollapseFunction $collapseFunction | SolrQuery', 'return_type': 'SolrQuery'},
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     '__destruct': { 'signature': 'void | void', 'return_type': 'void'},
\     'getExpand': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getExpandFilterQueries': { 'signature': 'void | array', 'return_type': 'array'},
\     'getExpandQuery': { 'signature': 'void | array', 'return_type': 'array'},
\     'getExpandRows': { 'signature': 'void | int', 'return_type': 'int'},
\     'getExpandSortFields': { 'signature': 'void | array', 'return_type': 'array'},
\     'getFacet': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getFacetDateEnd': { 'signature': '[ string $field_override] | string', 'return_type': 'string'},
\     'getFacetDateFields': { 'signature': 'void | array', 'return_type': 'array'},
\     'getFacetDateGap': { 'signature': '[ string $field_override] | string', 'return_type': 'string'},
\     'getFacetDateHardEnd': { 'signature': '[ string $field_override] | string', 'return_type': 'string'},
\     'getFacetDateOther': { 'signature': '[ string $field_override] | array', 'return_type': 'array'},
\     'getFacetDateStart': { 'signature': '[ string $field_override] | string', 'return_type': 'string'},
\     'getFacetFields': { 'signature': 'void | array', 'return_type': 'array'},
\     'getFacetLimit': { 'signature': '[ string $field_override] | int', 'return_type': 'int'},
\     'getFacetMethod': { 'signature': '[ string $field_override] | string', 'return_type': 'string'},
\     'getFacetMinCount': { 'signature': '[ string $field_override] | int', 'return_type': 'int'},
\     'getFacetMissing': { 'signature': '[ string $field_override] | bool', 'return_type': 'bool'},
\     'getFacetOffset': { 'signature': '[ string $field_override] | int', 'return_type': 'int'},
\     'getFacetPrefix': { 'signature': '[ string $field_override] | string', 'return_type': 'string'},
\     'getFacetQueries': { 'signature': 'void | array', 'return_type': 'array'},
\     'getFacetSort': { 'signature': '[ string $field_override] | int', 'return_type': 'int'},
\     'getFields': { 'signature': 'void | array', 'return_type': 'array'},
\     'getFilterQueries': { 'signature': 'void | array', 'return_type': 'array'},
\     'getGroup': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getGroupCachePercent': { 'signature': 'void | int', 'return_type': 'int'},
\     'getGroupFacet': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getGroupFields': { 'signature': 'void | array', 'return_type': 'array'},
\     'getGroupFormat': { 'signature': 'void | string', 'return_type': 'string'},
\     'getGroupFunctions': { 'signature': 'void | array', 'return_type': 'array'},
\     'getGroupLimit': { 'signature': 'void | int', 'return_type': 'int'},
\     'getGroupMain': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getGroupNGroups': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getGroupOffset': { 'signature': 'void | int', 'return_type': 'int'},
\     'getGroupQueries': { 'signature': 'void | array', 'return_type': 'array'},
\     'getGroupSortFields': { 'signature': 'void | array', 'return_type': 'array'},
\     'getGroupTruncate': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getHighlight': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getHighlightAlternateField': { 'signature': '[ string $field_override] | string', 'return_type': 'string'},
\     'getHighlightFields': { 'signature': 'void | array', 'return_type': 'array'},
\     'getHighlightFormatter': { 'signature': '[ string $field_override] | string', 'return_type': 'string'},
\     'getHighlightFragmenter': { 'signature': '[ string $field_override] | string', 'return_type': 'string'},
\     'getHighlightFragsize': { 'signature': '[ string $field_override] | int', 'return_type': 'int'},
\     'getHighlightHighlightMultiTerm': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getHighlightMaxAlternateFieldLength': { 'signature': '[ string $field_override] | int', 'return_type': 'int'},
\     'getHighlightMaxAnalyzedChars': { 'signature': 'void | int', 'return_type': 'int'},
\     'getHighlightMergeContiguous': { 'signature': '[ string $field_override] | bool', 'return_type': 'bool'},
\     'getHighlightRegexMaxAnalyzedChars': { 'signature': 'void | int', 'return_type': 'int'},
\     'getHighlightRegexPattern': { 'signature': 'void | string', 'return_type': 'string'},
\     'getHighlightRegexSlop': { 'signature': 'void | float', 'return_type': 'float'},
\     'getHighlightRequireFieldMatch': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getHighlightSimplePost': { 'signature': '[ string $field_override] | string', 'return_type': 'string'},
\     'getHighlightSimplePre': { 'signature': '[ string $field_override] | string', 'return_type': 'string'},
\     'getHighlightSnippets': { 'signature': '[ string $field_override] | int', 'return_type': 'int'},
\     'getHighlightUsePhraseHighlighter': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getMlt': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getMltBoost': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getMltCount': { 'signature': 'void | int', 'return_type': 'int'},
\     'getMltFields': { 'signature': 'void | array', 'return_type': 'array'},
\     'getMltMaxNumQueryTerms': { 'signature': 'void | int', 'return_type': 'int'},
\     'getMltMaxNumTokens': { 'signature': 'void | int', 'return_type': 'int'},
\     'getMltMaxWordLength': { 'signature': 'void | int', 'return_type': 'int'},
\     'getMltMinDocFrequency': { 'signature': 'void | int', 'return_type': 'int'},
\     'getMltMinTermFrequency': { 'signature': 'void | int', 'return_type': 'int'},
\     'getMltMinWordLength': { 'signature': 'void | int', 'return_type': 'int'},
\     'getMltQueryFields': { 'signature': 'void | array', 'return_type': 'array'},
\     'getQuery': { 'signature': 'void | string', 'return_type': 'string'},
\     'getRows': { 'signature': 'void | int', 'return_type': 'int'},
\     'getSortFields': { 'signature': 'void | array', 'return_type': 'array'},
\     'getStart': { 'signature': 'void | int', 'return_type': 'int'},
\     'getStats': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getStatsFacets': { 'signature': 'void | array', 'return_type': 'array'},
\     'getStatsFields': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTerms': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getTermsField': { 'signature': 'void | string', 'return_type': 'string'},
\     'getTermsIncludeLowerBound': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getTermsIncludeUpperBound': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getTermsLimit': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTermsLowerBound': { 'signature': 'void | string', 'return_type': 'string'},
\     'getTermsMaxCount': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTermsMinCount': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTermsPrefix': { 'signature': 'void | string', 'return_type': 'string'},
\     'getTermsReturnRaw': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getTermsSort': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTermsUpperBound': { 'signature': 'void | string', 'return_type': 'string'},
\     'getTimeAllowed': { 'signature': 'void | int', 'return_type': 'int'},
\     'removeExpandFilterQuery': { 'signature': 'string $fq | SolrQuery', 'return_type': 'SolrQuery'},
\     'removeExpandSortField': { 'signature': 'string $field | SolrQuery', 'return_type': 'SolrQuery'},
\     'removeFacetDateField': { 'signature': 'string $field | SolrQuery', 'return_type': 'SolrQuery'},
\     'removeFacetDateOther': { 'signature': 'string $value [, string $field_override] | SolrQuery', 'return_type': 'SolrQuery'},
\     'removeFacetField': { 'signature': 'string $field | SolrQuery', 'return_type': 'SolrQuery'},
\     'removeFacetQuery': { 'signature': 'string $value | SolrQuery', 'return_type': 'SolrQuery'},
\     'removeField': { 'signature': 'string $field | SolrQuery', 'return_type': 'SolrQuery'},
\     'removeFilterQuery': { 'signature': 'string $fq | SolrQuery', 'return_type': 'SolrQuery'},
\     'removeHighlightField': { 'signature': 'string $field | SolrQuery', 'return_type': 'SolrQuery'},
\     'removeMltField': { 'signature': 'string $field | SolrQuery', 'return_type': 'SolrQuery'},
\     'removeMltQueryField': { 'signature': 'string $queryField | SolrQuery', 'return_type': 'SolrQuery'},
\     'removeSortField': { 'signature': 'string $field | SolrQuery', 'return_type': 'SolrQuery'},
\     'removeStatsFacet': { 'signature': 'string $value | SolrQuery', 'return_type': 'SolrQuery'},
\     'removeStatsField': { 'signature': 'string $field | SolrQuery', 'return_type': 'SolrQuery'},
\     'setEchoHandler': { 'signature': 'bool $flag | SolrQuery', 'return_type': 'SolrQuery'},
\     'setEchoParams': { 'signature': 'string $type | SolrQuery', 'return_type': 'SolrQuery'},
\     'setExpand': { 'signature': 'bool $value | SolrQuery', 'return_type': 'SolrQuery'},
\     'setExpandQuery': { 'signature': 'string $q | SolrQuery', 'return_type': 'SolrQuery'},
\     'setExpandRows': { 'signature': 'int $value | SolrQuery', 'return_type': 'SolrQuery'},
\     'setExplainOther': { 'signature': 'string $query | SolrQuery', 'return_type': 'SolrQuery'},
\     'setFacet': { 'signature': 'bool $flag | SolrQuery', 'return_type': 'SolrQuery'},
\     'setFacetDateEnd': { 'signature': 'string $value [, string $field_override] | SolrQuery', 'return_type': 'SolrQuery'},
\     'setFacetDateGap': { 'signature': 'string $value [, string $field_override] | SolrQuery', 'return_type': 'SolrQuery'},
\     'setFacetDateHardEnd': { 'signature': 'bool $value [, string $field_override] | SolrQuery', 'return_type': 'SolrQuery'},
\     'setFacetDateStart': { 'signature': 'string $value [, string $field_override] | SolrQuery', 'return_type': 'SolrQuery'},
\     'setFacetEnumCacheMinDefaultFrequency': { 'signature': 'int $frequency [, string $field_override] | SolrQuery', 'return_type': 'SolrQuery'},
\     'setFacetLimit': { 'signature': 'int $limit [, string $field_override] | SolrQuery', 'return_type': 'SolrQuery'},
\     'setFacetMethod': { 'signature': 'string $method [, string $field_override] | SolrQuery', 'return_type': 'SolrQuery'},
\     'setFacetMinCount': { 'signature': 'int $mincount [, string $field_override] | SolrQuery', 'return_type': 'SolrQuery'},
\     'setFacetMissing': { 'signature': 'bool $flag [, string $field_override] | SolrQuery', 'return_type': 'SolrQuery'},
\     'setFacetOffset': { 'signature': 'int $offset [, string $field_override] | SolrQuery', 'return_type': 'SolrQuery'},
\     'setFacetPrefix': { 'signature': 'string $prefix [, string $field_override] | SolrQuery', 'return_type': 'SolrQuery'},
\     'setFacetSort': { 'signature': 'int $facetSort [, string $field_override] | SolrQuery', 'return_type': 'SolrQuery'},
\     'setGroup': { 'signature': 'bool $value | SolrQuery', 'return_type': 'SolrQuery'},
\     'setGroupCachePercent': { 'signature': 'int $percent | SolrQuery', 'return_type': 'SolrQuery'},
\     'setGroupFacet': { 'signature': 'bool $value | SolrQuery', 'return_type': 'SolrQuery'},
\     'setGroupFormat': { 'signature': 'string $value | SolrQuery', 'return_type': 'SolrQuery'},
\     'setGroupLimit': { 'signature': 'int $value | SolrQuery', 'return_type': 'SolrQuery'},
\     'setGroupMain': { 'signature': 'string $value | SolrQuery', 'return_type': 'SolrQuery'},
\     'setGroupNGroups': { 'signature': 'bool $value | SolrQuery', 'return_type': 'SolrQuery'},
\     'setGroupOffset': { 'signature': 'int $value | SolrQuery', 'return_type': 'SolrQuery'},
\     'setGroupTruncate': { 'signature': 'bool $value | SolrQuery', 'return_type': 'SolrQuery'},
\     'setHighlight': { 'signature': 'bool $flag | SolrQuery', 'return_type': 'SolrQuery'},
\     'setHighlightAlternateField': { 'signature': 'string $field [, string $field_override] | SolrQuery', 'return_type': 'SolrQuery'},
\     'setHighlightFormatter': { 'signature': 'string $formatter [, string $field_override] | SolrQuery', 'return_type': 'SolrQuery'},
\     'setHighlightFragmenter': { 'signature': 'string $fragmenter [, string $field_override] | SolrQuery', 'return_type': 'SolrQuery'},
\     'setHighlightFragsize': { 'signature': 'int $size [, string $field_override] | SolrQuery', 'return_type': 'SolrQuery'},
\     'setHighlightHighlightMultiTerm': { 'signature': 'bool $flag | SolrQuery', 'return_type': 'SolrQuery'},
\     'setHighlightMaxAlternateFieldLength': { 'signature': 'int $fieldLength [, string $field_override] | SolrQuery', 'return_type': 'SolrQuery'},
\     'setHighlightMaxAnalyzedChars': { 'signature': 'int $value | SolrQuery', 'return_type': 'SolrQuery'},
\     'setHighlightMergeContiguous': { 'signature': 'bool $flag [, string $field_override] | SolrQuery', 'return_type': 'SolrQuery'},
\     'setHighlightRegexMaxAnalyzedChars': { 'signature': 'int $maxAnalyzedChars | SolrQuery', 'return_type': 'SolrQuery'},
\     'setHighlightRegexPattern': { 'signature': 'string $value | SolrQuery', 'return_type': 'SolrQuery'},
\     'setHighlightRegexSlop': { 'signature': 'float $factor | SolrQuery', 'return_type': 'SolrQuery'},
\     'setHighlightRequireFieldMatch': { 'signature': 'bool $flag | SolrQuery', 'return_type': 'SolrQuery'},
\     'setHighlightSimplePost': { 'signature': 'string $simplePost [, string $field_override] | SolrQuery', 'return_type': 'SolrQuery'},
\     'setHighlightSimplePre': { 'signature': 'string $simplePre [, string $field_override] | SolrQuery', 'return_type': 'SolrQuery'},
\     'setHighlightSnippets': { 'signature': 'int $value [, string $field_override] | SolrQuery', 'return_type': 'SolrQuery'},
\     'setHighlightUsePhraseHighlighter': { 'signature': 'bool $flag | SolrQuery', 'return_type': 'SolrQuery'},
\     'setMlt': { 'signature': 'bool $flag | SolrQuery', 'return_type': 'SolrQuery'},
\     'setMltBoost': { 'signature': 'bool $flag | SolrQuery', 'return_type': 'SolrQuery'},
\     'setMltCount': { 'signature': 'int $count | SolrQuery', 'return_type': 'SolrQuery'},
\     'setMltMaxNumQueryTerms': { 'signature': 'int $value | SolrQuery', 'return_type': 'SolrQuery'},
\     'setMltMaxNumTokens': { 'signature': 'int $value | SolrQuery', 'return_type': 'SolrQuery'},
\     'setMltMaxWordLength': { 'signature': 'int $maxWordLength | SolrQuery', 'return_type': 'SolrQuery'},
\     'setMltMinDocFrequency': { 'signature': 'int $minDocFrequency | SolrQuery', 'return_type': 'SolrQuery'},
\     'setMltMinTermFrequency': { 'signature': 'int $minTermFrequency | SolrQuery', 'return_type': 'SolrQuery'},
\     'setMltMinWordLength': { 'signature': 'int $minWordLength | SolrQuery', 'return_type': 'SolrQuery'},
\     'setOmitHeader': { 'signature': 'bool $flag | SolrQuery', 'return_type': 'SolrQuery'},
\     'setQuery': { 'signature': 'string $query | SolrQuery', 'return_type': 'SolrQuery'},
\     'setRows': { 'signature': 'int $rows | SolrQuery', 'return_type': 'SolrQuery'},
\     'setShowDebugInfo': { 'signature': 'bool $flag | SolrQuery', 'return_type': 'SolrQuery'},
\     'setStart': { 'signature': 'int $start | SolrQuery', 'return_type': 'SolrQuery'},
\     'setStats': { 'signature': 'bool $flag | SolrQuery', 'return_type': 'SolrQuery'},
\     'setTerms': { 'signature': 'bool $flag | SolrQuery', 'return_type': 'SolrQuery'},
\     'setTermsField': { 'signature': 'string $fieldname | SolrQuery', 'return_type': 'SolrQuery'},
\     'setTermsIncludeLowerBound': { 'signature': 'bool $flag | SolrQuery', 'return_type': 'SolrQuery'},
\     'setTermsIncludeUpperBound': { 'signature': 'bool $flag | SolrQuery', 'return_type': 'SolrQuery'},
\     'setTermsLimit': { 'signature': 'int $limit | SolrQuery', 'return_type': 'SolrQuery'},
\     'setTermsLowerBound': { 'signature': 'string $lowerBound | SolrQuery', 'return_type': 'SolrQuery'},
\     'setTermsMaxCount': { 'signature': 'int $frequency | SolrQuery', 'return_type': 'SolrQuery'},
\     'setTermsMinCount': { 'signature': 'int $frequency | SolrQuery', 'return_type': 'SolrQuery'},
\     'setTermsPrefix': { 'signature': 'string $prefix | SolrQuery', 'return_type': 'SolrQuery'},
\     'setTermsReturnRaw': { 'signature': 'bool $flag | SolrQuery', 'return_type': 'SolrQuery'},
\     'setTermsSort': { 'signature': 'int $sortType | SolrQuery', 'return_type': 'SolrQuery'},
\     'setTermsUpperBound': { 'signature': 'string $upperBound | SolrQuery', 'return_type': 'SolrQuery'},
\     'setTimeAllowed': { 'signature': 'int $timeAllowed | SolrQuery', 'return_type': 'SolrQuery'},
\   },
\},
\'solrqueryresponse': {
\   'name': 'SolrQueryResponse',
\   'constants': {
\     'PARSE_SOLR_OBJ': '0',
\     'PARSE_SOLR_DOC': '1',
\     'SolrResponse::PARSE_SOLR_OBJ': '0',
\     'SolrResponse::PARSE_SOLR_DOC': '1',
\   },
\   'properties': {
\     'http_status': { 'initializer': '', 'type': 'integer'},
\     'parser_mode': { 'initializer': '', 'type': 'integer'},
\     'success': { 'initializer': '', 'type': 'bool'},
\     'http_status_message': { 'initializer': '', 'type': 'string'},
\     'http_request_url': { 'initializer': '', 'type': 'string'},
\     'http_raw_request_headers': { 'initializer': '', 'type': 'string'},
\     'http_raw_request': { 'initializer': '', 'type': 'string'},
\     'http_raw_response_headers': { 'initializer': '', 'type': 'string'},
\     'http_raw_response': { 'initializer': '', 'type': 'string'},
\     'http_digested_response': { 'initializer': '', 'type': 'string'},
\   },
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     '__destruct': { 'signature': 'void | void', 'return_type': 'void'},
\     'getDigestedResponse': { 'signature': 'void | string', 'return_type': 'string'},
\     'getHttpStatus': { 'signature': 'void | int', 'return_type': 'int'},
\     'getHttpStatusMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getRawRequest': { 'signature': 'void | string', 'return_type': 'string'},
\     'getRawRequestHeaders': { 'signature': 'void | string', 'return_type': 'string'},
\     'getRawResponse': { 'signature': 'void | string', 'return_type': 'string'},
\     'getRawResponseHeaders': { 'signature': 'void | string', 'return_type': 'string'},
\     'getRequestUrl': { 'signature': 'void | string', 'return_type': 'string'},
\     'getResponse': { 'signature': 'void | SolrObject', 'return_type': 'SolrObject'},
\     'setParseMode': { 'signature': '[ int $parser_mode = 0] | bool', 'return_type': 'bool'},
\     'success': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'solrresponse': {
\   'name': 'SolrResponse',
\   'constants': {
\     'PARSE_SOLR_OBJ': '0',
\     'PARSE_SOLR_DOC': '1',
\   },
\   'properties': {
\     'http_status': { 'initializer': '', 'type': 'integer'},
\     'parser_mode': { 'initializer': '', 'type': 'integer'},
\     'success': { 'initializer': '', 'type': 'bool'},
\     'http_status_message': { 'initializer': '', 'type': 'string'},
\     'http_request_url': { 'initializer': '', 'type': 'string'},
\     'http_raw_request_headers': { 'initializer': '', 'type': 'string'},
\     'http_raw_request': { 'initializer': '', 'type': 'string'},
\     'http_raw_response_headers': { 'initializer': '', 'type': 'string'},
\     'http_raw_response': { 'initializer': '', 'type': 'string'},
\     'http_digested_response': { 'initializer': '', 'type': 'string'},
\   },
\   'methods': {
\     'getDigestedResponse': { 'signature': 'void | string', 'return_type': 'string'},
\     'getHttpStatus': { 'signature': 'void | int', 'return_type': 'int'},
\     'getHttpStatusMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getRawRequest': { 'signature': 'void | string', 'return_type': 'string'},
\     'getRawRequestHeaders': { 'signature': 'void | string', 'return_type': 'string'},
\     'getRawResponse': { 'signature': 'void | string', 'return_type': 'string'},
\     'getRawResponseHeaders': { 'signature': 'void | string', 'return_type': 'string'},
\     'getRequestUrl': { 'signature': 'void | string', 'return_type': 'string'},
\     'getResponse': { 'signature': 'void | SolrObject', 'return_type': 'SolrObject'},
\     'setParseMode': { 'signature': '[ int $parser_mode = 0] | bool', 'return_type': 'bool'},
\     'success': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'solrserverexception': {
\   'name': 'SolrServerException',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\     'sourceline': { 'initializer': '', 'type': 'integer'},
\     'sourcefile': { 'initializer': '', 'type': 'string'},
\     'zif_name': { 'initializer': '', 'type': 'string'},
\   },
\   'methods': {
\     'getInternalInfo': { 'signature': 'void | array', 'return_type': 'array'},
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'solrupdateresponse': {
\   'name': 'SolrUpdateResponse',
\   'constants': {
\     'PARSE_SOLR_OBJ': '0',
\     'PARSE_SOLR_DOC': '1',
\     'SolrResponse::PARSE_SOLR_OBJ': '0',
\     'SolrResponse::PARSE_SOLR_DOC': '1',
\   },
\   'properties': {
\     'http_status': { 'initializer': '', 'type': 'integer'},
\     'parser_mode': { 'initializer': '', 'type': 'integer'},
\     'success': { 'initializer': '', 'type': 'bool'},
\     'http_status_message': { 'initializer': '', 'type': 'string'},
\     'http_request_url': { 'initializer': '', 'type': 'string'},
\     'http_raw_request_headers': { 'initializer': '', 'type': 'string'},
\     'http_raw_request': { 'initializer': '', 'type': 'string'},
\     'http_raw_response_headers': { 'initializer': '', 'type': 'string'},
\     'http_raw_response': { 'initializer': '', 'type': 'string'},
\     'http_digested_response': { 'initializer': '', 'type': 'string'},
\   },
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     '__destruct': { 'signature': 'void | void', 'return_type': 'void'},
\     'getDigestedResponse': { 'signature': 'void | string', 'return_type': 'string'},
\     'getHttpStatus': { 'signature': 'void | int', 'return_type': 'int'},
\     'getHttpStatusMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getRawRequest': { 'signature': 'void | string', 'return_type': 'string'},
\     'getRawRequestHeaders': { 'signature': 'void | string', 'return_type': 'string'},
\     'getRawResponse': { 'signature': 'void | string', 'return_type': 'string'},
\     'getRawResponseHeaders': { 'signature': 'void | string', 'return_type': 'string'},
\     'getRequestUrl': { 'signature': 'void | string', 'return_type': 'string'},
\     'getResponse': { 'signature': 'void | SolrObject', 'return_type': 'SolrObject'},
\     'setParseMode': { 'signature': '[ int $parser_mode = 0] | bool', 'return_type': 'bool'},
\     'success': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'solrutils': {
\   'name': 'SolrUtils',
\   'static_methods': {
\     'digestXmlResponse': { 'signature': 'string $xmlresponse [, int $parse_mode = 0] | SolrObject', 'return_type': 'SolrObject'},
\     'escapeQueryChars': { 'signature': 'string $str | string', 'return_type': 'string'},
\     'getSolrVersion': { 'signature': 'void | string', 'return_type': 'string'},
\     'queryPhrase': { 'signature': 'string $str | string', 'return_type': 'string'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['sphinx'] = {
\'sphinxclient': {
\   'name': 'SphinxClient',
\   'methods': {
\     'addQuery': { 'signature': 'string $query [, string $index = "*" [, string $comment = ""]] | int', 'return_type': 'int'},
\     'buildExcerpts': { 'signature': 'array $docs, string $index, string $words [, array $opts] | array', 'return_type': 'array'},
\     'buildKeywords': { 'signature': 'string $query, string $index, bool $hits | array', 'return_type': 'array'},
\     'close': { 'signature': 'void | bool', 'return_type': 'bool'},
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'escapeString': { 'signature': 'string $string | string', 'return_type': 'string'},
\     'getLastError': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLastWarning': { 'signature': 'void | string', 'return_type': 'string'},
\     'open': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'query': { 'signature': 'string $query [, string $index = "*" [, string $comment = ""]] | array', 'return_type': 'array'},
\     'resetFilters': { 'signature': 'void | void', 'return_type': 'void'},
\     'resetGroupBy': { 'signature': 'void | void', 'return_type': 'void'},
\     'runQueries': { 'signature': 'void | array', 'return_type': 'array'},
\     'setArrayResult': { 'signature': '[ bool $array_result = FALSE] | bool', 'return_type': 'bool'},
\     'setConnectTimeout': { 'signature': 'float $timeout | bool', 'return_type': 'bool'},
\     'setFieldWeights': { 'signature': 'array $weights | bool', 'return_type': 'bool'},
\     'setFilter': { 'signature': 'string $attribute, array $values [, bool $exclude = FALSE] | bool', 'return_type': 'bool'},
\     'setFilterFloatRange': { 'signature': 'string $attribute, float $min, float $max [, bool $exclude = FALSE] | bool', 'return_type': 'bool'},
\     'setFilterRange': { 'signature': 'string $attribute, int $min, int $max [, bool $exclude = FALSE] | bool', 'return_type': 'bool'},
\     'setGeoAnchor': { 'signature': 'string $attrlat, string $attrlong, float $latitude, float $longitude | bool', 'return_type': 'bool'},
\     'setGroupBy': { 'signature': 'string $attribute, int $func [, string $groupsort = "@group desc"] | bool', 'return_type': 'bool'},
\     'setGroupDistinct': { 'signature': 'string $attribute | bool', 'return_type': 'bool'},
\     'setIDRange': { 'signature': 'int $min, int $max | bool', 'return_type': 'bool'},
\     'setIndexWeights': { 'signature': 'array $weights | bool', 'return_type': 'bool'},
\     'setLimits': { 'signature': 'int $offset, int $limit [, int $max_matches = 0 [, int $cutoff = 0]] | bool', 'return_type': 'bool'},
\     'setMatchMode': { 'signature': 'int $mode | bool', 'return_type': 'bool'},
\     'setMaxQueryTime': { 'signature': 'int $qtime | bool', 'return_type': 'bool'},
\     'setOverride': { 'signature': 'string $attribute, int $type, array $values | bool', 'return_type': 'bool'},
\     'setRankingMode': { 'signature': 'int $ranker | bool', 'return_type': 'bool'},
\     'setRetries': { 'signature': 'int $count [, int $delay = 0] | bool', 'return_type': 'bool'},
\     'setSelect': { 'signature': 'string $clause | bool', 'return_type': 'bool'},
\     'setServer': { 'signature': 'string $server, int $port | bool', 'return_type': 'bool'},
\     'setSortMode': { 'signature': 'int $mode [, string $sortby] | bool', 'return_type': 'bool'},
\     'status': { 'signature': 'void | array', 'return_type': 'array'},
\     'updateAttributes': { 'signature': 'string $index, array $attributes, array $values [, bool $mva = FALSE] | int', 'return_type': 'int'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['spl_types'] = {
\'splbool': {
\   'name': 'SplBool',
\   'constants': {
\     '__default': 'FALSE',
\     'false': 'FALSE',
\     'true': 'TRUE',
\   },
\   'methods': {
\     'getConstList': { 'signature': '[ bool $include_default = FALSE] | array', 'return_type': 'array'},
\   },
\},
\'splenum': {
\   'name': 'SplEnum',
\   'constants': {
\     '__default': 'NULL',
\   },
\   'methods': {
\     'getConstList': { 'signature': '[ bool $include_default = FALSE] | array', 'return_type': 'array'},
\     '__construct': { 'signature': '[ mixed $initial_value [, bool $strict]]', 'return_type': ''},
\   },
\},
\'splfloat': {
\   'name': 'SplFloat',
\   'constants': {
\     '__default': '0',
\   },
\   'methods': {
\     '__construct': { 'signature': '[ mixed $initial_value [, bool $strict]]', 'return_type': ''},
\   },
\},
\'splint': {
\   'name': 'SplInt',
\   'constants': {
\     '__default': '0',
\   },
\   'methods': {
\     '__construct': { 'signature': '[ mixed $initial_value [, bool $strict]]', 'return_type': ''},
\   },
\},
\'splstring': {
\   'name': 'SplString',
\   'constants': {
\     '__default': '''''',
\   },
\   'methods': {
\     '__construct': { 'signature': '[ mixed $initial_value [, bool $strict]]', 'return_type': ''},
\   },
\},
\'spltype': {
\   'name': 'SplType',
\   'constants': {
\     '__default': 'NULL',
\   },
\   'methods': {
\     '__construct': { 'signature': '[ mixed $initial_value [, bool $strict]]', 'return_type': ''},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['sqlite3'] = {
\'sqlite3': {
\   'name': 'SQLite3',
\   'methods': {
\     'busyTimeout': { 'signature': 'int $msecs | bool', 'return_type': 'bool'},
\     'changes': { 'signature': 'void | int', 'return_type': 'int'},
\     'close': { 'signature': 'void | bool', 'return_type': 'bool'},
\     '__construct': { 'signature': 'string $filename [, int $flags = SQLITE3_OPEN_READWRITE | SQLITE3_OPEN_CREATE [, string $encryption_key = ""]]', 'return_type': ''},
\     'createAggregate': { 'signature': 'string $name, mixed $step_callback, mixed $final_callback [, int $argument_count = -1] | bool', 'return_type': 'bool'},
\     'createCollation': { 'signature': 'string $name, callable $callback | bool', 'return_type': 'bool'},
\     'createFunction': { 'signature': 'string $name, mixed $callback [, int $argument_count = -1 [, int $flags = 0]] | bool', 'return_type': 'bool'},
\     'enableExceptions': { 'signature': '[ bool $enableExceptions = FALSE] | bool', 'return_type': 'bool'},
\     'exec': { 'signature': 'string $query | bool', 'return_type': 'bool'},
\     'lastErrorCode': { 'signature': 'void | int', 'return_type': 'int'},
\     'lastErrorMsg': { 'signature': 'void | string', 'return_type': 'string'},
\     'lastInsertRowID': { 'signature': 'void | int', 'return_type': 'int'},
\     'loadExtension': { 'signature': 'string $shared_library | bool', 'return_type': 'bool'},
\     'open': { 'signature': 'string $filename [, int $flags = SQLITE3_OPEN_READWRITE | SQLITE3_OPEN_CREATE [, string $encryption_key = ""]] | void', 'return_type': 'void'},
\     'openBlob': { 'signature': 'string $table, string $column, int $rowid [, string $dbname = "main" [, int $flags = SQLITE3_OPEN_READONLY]] | resource', 'return_type': 'resource'},
\     'prepare': { 'signature': 'string $query | SQLite3Stmt', 'return_type': 'SQLite3Stmt'},
\     'query': { 'signature': 'string $query | SQLite3Result', 'return_type': 'SQLite3Result'},
\     'querySingle': { 'signature': 'string $query [, bool $entire_row = FALSE] | mixed', 'return_type': 'mixed'},
\   },
\   'static_methods': {
\     'escapeString': { 'signature': 'string $value | string', 'return_type': 'string'},
\     'version': { 'signature': 'void | array', 'return_type': 'array'},
\   },
\},
\'sqlite3result': {
\   'name': 'SQLite3Result',
\   'methods': {
\     'columnName': { 'signature': 'int $column_number | string', 'return_type': 'string'},
\     'columnType': { 'signature': 'int $column_number | int', 'return_type': 'int'},
\     'fetchArray': { 'signature': '[ int $mode = SQLITE3_BOTH] | array', 'return_type': 'array'},
\     'finalize': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'numColumns': { 'signature': 'void | int', 'return_type': 'int'},
\     'reset': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'sqlite3stmt': {
\   'name': 'SQLite3Stmt',
\   'methods': {
\     'bindParam': { 'signature': 'mixed $sql_param, mixed &$param [, int $type] | bool', 'return_type': 'bool'},
\     'bindValue': { 'signature': 'mixed $sql_param, mixed $value [, int $type] | bool', 'return_type': 'bool'},
\     'clear': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'close': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'execute': { 'signature': 'void | SQLite3Result', 'return_type': 'SQLite3Result'},
\     'getSQL': { 'signature': '[ bool $expanded = FALSE] | string', 'return_type': 'string'},
\     'paramCount': { 'signature': 'void | int', 'return_type': 'int'},
\     'readOnly': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'reset': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['stomp'] = {
\'stomp': {
\   'name': 'Stomp',
\   'methods': {
\     'abort': { 'signature': 'string $transaction_id [, array $headers] | bool', 'return_type': 'bool'},
\     'ack': { 'signature': 'mixed $msg [, array $headers] | bool', 'return_type': 'bool'},
\     'begin': { 'signature': 'string $transaction_id [, array $headers] | bool', 'return_type': 'bool'},
\     'commit': { 'signature': 'string $transaction_id [, array $headers] | bool', 'return_type': 'bool'},
\     '__construct': { 'signature': '[ string $broker = ini_get("stomp.default_broker_uri") [, string $username [, string $password [, array $headers]]]]', 'return_type': ''},
\     '__destruct': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'error': { 'signature': 'void | string', 'return_type': 'string'},
\     'getReadTimeout': { 'signature': 'void | array', 'return_type': 'array'},
\     'getSessionId': { 'signature': 'void | string', 'return_type': 'string'},
\     'hasFrame': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'readFrame': { 'signature': '[ string $class_name = "stompFrame"] | stompframe', 'return_type': 'stompframe'},
\     'send': { 'signature': 'string $destination, mixed $msg [, array $headers] | bool', 'return_type': 'bool'},
\     'setReadTimeout': { 'signature': 'int $seconds [, int $microseconds] | void', 'return_type': 'void'},
\     'subscribe': { 'signature': 'string $destination [, array $headers] | bool', 'return_type': 'bool'},
\     'unsubscribe': { 'signature': 'string $destination [, array $headers] | bool', 'return_type': 'bool'},
\   },
\},
\'stompexception': {
\   'name': 'StompException',
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\     'getDetails': { 'signature': 'void | string', 'return_type': 'string'},
\   },
\},
\'stompframe': {
\   'name': 'StompFrame',
\   'properties': {
\     'command': { 'initializer': '', 'type': ''},
\     'headers': { 'initializer': '', 'type': ''},
\     'body': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     '__construct': { 'signature': '[ string $command [, array $headers [, string $body]]]', 'return_type': ''},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['svm'] = {
\'svm': {
\   'name': 'SVM',
\   'constants': {
\     'C_SVC': '',
\     'NU_SVC': '',
\     'ONE_CLASS': '',
\     'EPSILON_SVR': '',
\     'NU_SVR': '',
\     'KERNEL_LINEAR': '',
\     'KERNEL_POLY': '',
\     'KERNEL_RBF': '',
\     'KERNEL_SIGMOID': '',
\     'KERNEL_PRECOMPUTED': '',
\     'OPT_TYPE': '',
\     'OPT_KERNEL_TYPE': '',
\     'OPT_DEGREE': '',
\     'OPT_SHRINKING': '',
\     'OPT_PROPABILITY': '105',
\     'OPT_GAMMA': '',
\     'OPT_NU': '',
\     'OPT_EPS': '',
\     'OPT_P': '',
\     'OPT_COEF_ZERO': '',
\     'OPT_C': '',
\     'OPT_CACHE_SIZE': '',
\     'OPT_PROBABILITY': '',
\   },
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'crossvalidate': { 'signature': 'array $problem, int $number_of_folds | float', 'return_type': 'float'},
\     'getOptions': { 'signature': 'void | array', 'return_type': 'array'},
\     'setOptions': { 'signature': 'array $params | bool', 'return_type': 'bool'},
\     'train': { 'signature': 'array $problem [, array $weights] | SVMModel', 'return_type': 'SVMModel'},
\   },
\},
\'svmmodel': {
\   'name': 'SVMModel',
\   'methods': {
\     'checkProbabilityModel': { 'signature': 'void | bool', 'return_type': 'bool'},
\     '__construct': { 'signature': '[ string $filename]', 'return_type': ''},
\     'getLabels': { 'signature': 'void | array', 'return_type': 'array'},
\     'getNrClass': { 'signature': 'void | int', 'return_type': 'int'},
\     'getSvmType': { 'signature': 'void | int', 'return_type': 'int'},
\     'getSvrProbability': { 'signature': 'void | float', 'return_type': 'float'},
\     'load': { 'signature': 'string $filename | bool', 'return_type': 'bool'},
\     'predict_probability': { 'signature': 'array $data | float', 'return_type': 'float'},
\     'predict': { 'signature': 'array $data | float', 'return_type': 'float'},
\     'save': { 'signature': 'string $filename | bool', 'return_type': 'bool'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['ming'] = {
\'swfaction': {
\   'name': 'SWFAction',
\   'methods': {
\     '__construct': { 'signature': 'string $script', 'return_type': ''},
\   },
\},
\'swfbitmap': {
\   'name': 'SWFBitmap',
\   'methods': {
\     '__construct': { 'signature': 'mixed $file [, mixed $alphafile]', 'return_type': ''},
\     'getHeight': { 'signature': 'void | float', 'return_type': 'float'},
\     'getWidth': { 'signature': 'void | float', 'return_type': 'float'},
\   },
\},
\'swfbutton': {
\   'name': 'SWFButton',
\   'methods': {
\     'addAction': { 'signature': 'SWFAction $action, int $flags | void', 'return_type': 'void'},
\     'addASound': { 'signature': 'SWFSound $sound, int $flags | SWFSoundInstance', 'return_type': 'SWFSoundInstance'},
\     'addShape': { 'signature': 'SWFShape $shape, int $flags | void', 'return_type': 'void'},
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'setAction': { 'signature': 'SWFAction $action | void', 'return_type': 'void'},
\     'setDown': { 'signature': 'SWFShape $shape | void', 'return_type': 'void'},
\     'setHit': { 'signature': 'SWFShape $shape | void', 'return_type': 'void'},
\     'setMenu': { 'signature': 'int $flag | void', 'return_type': 'void'},
\     'setOver': { 'signature': 'SWFShape $shape | void', 'return_type': 'void'},
\     'setUp': { 'signature': 'SWFShape $shape | void', 'return_type': 'void'},
\   },
\},
\'swfdisplayitem': {
\   'name': 'SWFDisplayItem',
\   'methods': {
\     'addAction': { 'signature': 'SWFAction $action, int $flags | void', 'return_type': 'void'},
\     'addColor': { 'signature': 'int $red, int $green, int $blue [, int $a] | void', 'return_type': 'void'},
\     'endMask': { 'signature': 'void | void', 'return_type': 'void'},
\     'getRot': { 'signature': 'void | float', 'return_type': 'float'},
\     'getX': { 'signature': 'void | float', 'return_type': 'float'},
\     'getXScale': { 'signature': 'void | float', 'return_type': 'float'},
\     'getXSkew': { 'signature': 'void | float', 'return_type': 'float'},
\     'getY': { 'signature': 'void | float', 'return_type': 'float'},
\     'getYScale': { 'signature': 'void | float', 'return_type': 'float'},
\     'getYSkew': { 'signature': 'void | float', 'return_type': 'float'},
\     'move': { 'signature': 'float $dx, float $dy | void', 'return_type': 'void'},
\     'moveTo': { 'signature': 'float $x, float $y | void', 'return_type': 'void'},
\     'multColor': { 'signature': 'float $red, float $green, float $blue [, float $a] | void', 'return_type': 'void'},
\     'remove': { 'signature': 'void | void', 'return_type': 'void'},
\     'rotate': { 'signature': 'float $angle | void', 'return_type': 'void'},
\     'rotateTo': { 'signature': 'float $angle | void', 'return_type': 'void'},
\     'scale': { 'signature': 'float $dx, float $dy | void', 'return_type': 'void'},
\     'scaleTo': { 'signature': 'float $x [, float $y] | void', 'return_type': 'void'},
\     'setDepth': { 'signature': 'int $depth | void', 'return_type': 'void'},
\     'setMaskLevel': { 'signature': 'int $level | void', 'return_type': 'void'},
\     'setMatrix': { 'signature': 'float $a, float $b, float $c, float $d, float $x, float $y | void', 'return_type': 'void'},
\     'setName': { 'signature': 'string $name | void', 'return_type': 'void'},
\     'setRatio': { 'signature': 'float $ratio | void', 'return_type': 'void'},
\     'skewX': { 'signature': 'float $ddegrees | void', 'return_type': 'void'},
\     'skewXTo': { 'signature': 'float $degrees | void', 'return_type': 'void'},
\     'skewY': { 'signature': 'float $ddegrees | void', 'return_type': 'void'},
\     'skewYTo': { 'signature': 'float $degrees | void', 'return_type': 'void'},
\   },
\},
\'swffill': {
\   'name': 'SWFFill',
\   'methods': {
\     'moveTo': { 'signature': 'float $x, float $y | void', 'return_type': 'void'},
\     'rotateTo': { 'signature': 'float $angle | void', 'return_type': 'void'},
\     'scaleTo': { 'signature': 'float $x [, float $y] | void', 'return_type': 'void'},
\     'skewXTo': { 'signature': 'float $x | void', 'return_type': 'void'},
\     'skewYTo': { 'signature': 'float $y | void', 'return_type': 'void'},
\   },
\},
\'swffont': {
\   'name': 'SWFFont',
\   'methods': {
\     '__construct': { 'signature': 'string $filename', 'return_type': ''},
\     'getAscent': { 'signature': 'void | float', 'return_type': 'float'},
\     'getDescent': { 'signature': 'void | float', 'return_type': 'float'},
\     'getLeading': { 'signature': 'void | float', 'return_type': 'float'},
\     'getShape': { 'signature': 'int $code | string', 'return_type': 'string'},
\     'getUTF8Width': { 'signature': 'string $string | float', 'return_type': 'float'},
\     'getWidth': { 'signature': 'string $string | float', 'return_type': 'float'},
\   },
\},
\'swffontchar': {
\   'name': 'SWFFontChar',
\   'methods': {
\     'addChars': { 'signature': 'string $char | void', 'return_type': 'void'},
\     'addUTF8Chars': { 'signature': 'string $char | void', 'return_type': 'void'},
\   },
\},
\'swfgradient': {
\   'name': 'SWFGradient',
\   'methods': {
\     'addEntry': { 'signature': 'float $ratio, int $red, int $green, int $blue [, int $alpha = 255] | void', 'return_type': 'void'},
\     '__construct': { 'signature': 'void', 'return_type': ''},
\   },
\},
\'swfmorph': {
\   'name': 'SWFMorph',
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'getShape1': { 'signature': 'void | SWFShape', 'return_type': 'SWFShape'},
\     'getShape2': { 'signature': 'void | SWFShape', 'return_type': 'SWFShape'},
\   },
\},
\'swfmovie': {
\   'name': 'SWFMovie',
\   'methods': {
\     'add': { 'signature': 'object $instance | mixed', 'return_type': 'mixed'},
\     'addExport': { 'signature': 'SWFCharacter $char, string $name | void', 'return_type': 'void'},
\     'addFont': { 'signature': 'SWFFont $font | mixed', 'return_type': 'mixed'},
\     '__construct': { 'signature': '[ int $version]', 'return_type': ''},
\     'importChar': { 'signature': 'string $libswf, string $name | SWFSprite', 'return_type': 'SWFSprite'},
\     'importFont': { 'signature': 'string $libswf, string $name | SWFFontChar', 'return_type': 'SWFFontChar'},
\     'labelFrame': { 'signature': 'string $label | void', 'return_type': 'void'},
\     'nextFrame': { 'signature': 'void | void', 'return_type': 'void'},
\     'output': { 'signature': '[ int $compression] | int', 'return_type': 'int'},
\     'remove': { 'signature': 'object $instance | void', 'return_type': 'void'},
\     'save': { 'signature': 'string $filename [, int $compression = -1] | int', 'return_type': 'int'},
\     'saveToFile': { 'signature': 'resource $x [, int $compression = -1] | int', 'return_type': 'int'},
\     'setbackground': { 'signature': 'int $red, int $green, int $blue | void', 'return_type': 'void'},
\     'setDimension': { 'signature': 'float $width, float $height | void', 'return_type': 'void'},
\     'setFrames': { 'signature': 'int $number | void', 'return_type': 'void'},
\     'setRate': { 'signature': 'float $rate | void', 'return_type': 'void'},
\     'startSound': { 'signature': 'SWFSound $sound | SWFSoundInstance', 'return_type': 'SWFSoundInstance'},
\     'stopSound': { 'signature': 'SWFSound $sound | void', 'return_type': 'void'},
\     'streamMP3': { 'signature': 'mixed $mp3file [, float $skip = 0] | int', 'return_type': 'int'},
\     'writeExports': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'swfprebuiltclip': {
\   'name': 'SWFPrebuiltClip',
\   'methods': {
\     '__construct': { 'signature': 'mixed $file', 'return_type': ''},
\   },
\},
\'swfshape': {
\   'name': 'SWFShape',
\   'methods': {
\     'addFill': { 'signature': 'int $red, int $green, int $blue [, int $alpha = 255] | SWFFill', 'return_type': 'SWFFill'},
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'drawArc': { 'signature': 'float $r, float $startAngle, float $endAngle | void', 'return_type': 'void'},
\     'drawCircle': { 'signature': 'float $r | void', 'return_type': 'void'},
\     'drawCubic': { 'signature': 'float $bx, float $by, float $cx, float $cy, float $dx, float $dy | int', 'return_type': 'int'},
\     'drawCubicTo': { 'signature': 'float $bx, float $by, float $cx, float $cy, float $dx, float $dy | int', 'return_type': 'int'},
\     'drawCurve': { 'signature': 'float $controldx, float $controldy, float $anchordx, float $anchordy [, float $targetdx [, float $targetdy]] | int', 'return_type': 'int'},
\     'drawCurveTo': { 'signature': 'float $controlx, float $controly, float $anchorx, float $anchory [, float $targetx [, float $targety]] | int', 'return_type': 'int'},
\     'drawGlyph': { 'signature': 'SWFFont $font, string $character [, int $size] | void', 'return_type': 'void'},
\     'drawLine': { 'signature': 'float $dx, float $dy | void', 'return_type': 'void'},
\     'drawLineTo': { 'signature': 'float $x, float $y | void', 'return_type': 'void'},
\     'movePen': { 'signature': 'float $dx, float $dy | void', 'return_type': 'void'},
\     'movePenTo': { 'signature': 'float $x, float $y | void', 'return_type': 'void'},
\     'setLeftFill': { 'signature': 'SWFGradient $fill | void', 'return_type': 'void'},
\     'setLine': { 'signature': 'SWFShape $shape | void', 'return_type': 'void'},
\     'setRightFill': { 'signature': 'SWFGradient $fill | void', 'return_type': 'void'},
\   },
\},
\'swfsound': {
\   'name': 'SWFSound',
\   'methods': {
\     '__construct': { 'signature': 'string $filename [, int $flags = 0]', 'return_type': ''},
\   },
\},
\'swfsoundinstance': {
\   'name': 'SWFSoundInstance',
\   'methods': {
\     'loopCount': { 'signature': 'int $point | void', 'return_type': 'void'},
\     'loopInPoint': { 'signature': 'int $point | void', 'return_type': 'void'},
\     'loopOutPoint': { 'signature': 'int $point | void', 'return_type': 'void'},
\     'noMultiple': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'swfsprite': {
\   'name': 'SWFSprite',
\   'methods': {
\     'add': { 'signature': 'object $object | void', 'return_type': 'void'},
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'labelFrame': { 'signature': 'string $label | void', 'return_type': 'void'},
\     'nextFrame': { 'signature': 'void | void', 'return_type': 'void'},
\     'remove': { 'signature': 'object $object | void', 'return_type': 'void'},
\     'setFrames': { 'signature': 'int $number | void', 'return_type': 'void'},
\     'startSound': { 'signature': 'SWFSound $sount | SWFSoundInstance', 'return_type': 'SWFSoundInstance'},
\     'stopSound': { 'signature': 'SWFSound $sount | void', 'return_type': 'void'},
\   },
\},
\'swftext': {
\   'name': 'SWFText',
\   'methods': {
\     'addString': { 'signature': 'string $string | void', 'return_type': 'void'},
\     'addUTF8String': { 'signature': 'string $text | void', 'return_type': 'void'},
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'getAscent': { 'signature': 'void | float', 'return_type': 'float'},
\     'getDescent': { 'signature': 'void | float', 'return_type': 'float'},
\     'getLeading': { 'signature': 'void | float', 'return_type': 'float'},
\     'getUTF8Width': { 'signature': 'string $string | float', 'return_type': 'float'},
\     'getWidth': { 'signature': 'string $string | float', 'return_type': 'float'},
\     'moveTo': { 'signature': 'float $x, float $y | void', 'return_type': 'void'},
\     'setColor': { 'signature': 'int $red, int $green, int $blue [, int $a = 255] | void', 'return_type': 'void'},
\     'setFont': { 'signature': 'SWFFont $font | void', 'return_type': 'void'},
\     'setHeight': { 'signature': 'float $height | void', 'return_type': 'void'},
\     'setSpacing': { 'signature': 'float $spacing | void', 'return_type': 'void'},
\   },
\},
\'swftextfield': {
\   'name': 'SWFTextField',
\   'methods': {
\     'addChars': { 'signature': 'string $chars | void', 'return_type': 'void'},
\     'addString': { 'signature': 'string $string | void', 'return_type': 'void'},
\     'align': { 'signature': 'int $alignement | void', 'return_type': 'void'},
\     '__construct': { 'signature': '[ int $flags]', 'return_type': ''},
\     'setBounds': { 'signature': 'float $width, float $height | void', 'return_type': 'void'},
\     'setColor': { 'signature': 'int $red, int $green, int $blue [, int $a = 255] | void', 'return_type': 'void'},
\     'setFont': { 'signature': 'SWFFont $font | void', 'return_type': 'void'},
\     'setHeight': { 'signature': 'float $height | void', 'return_type': 'void'},
\     'setIndentation': { 'signature': 'float $width | void', 'return_type': 'void'},
\     'setLeftMargin': { 'signature': 'float $width | void', 'return_type': 'void'},
\     'setLineSpacing': { 'signature': 'float $height | void', 'return_type': 'void'},
\     'setMargins': { 'signature': 'float $left, float $right | void', 'return_type': 'void'},
\     'setName': { 'signature': 'string $name | void', 'return_type': 'void'},
\     'setPadding': { 'signature': 'float $padding | void', 'return_type': 'void'},
\     'setRightMargin': { 'signature': 'float $width | void', 'return_type': 'void'},
\   },
\},
\'swfvideostream': {
\   'name': 'SWFVideoStream',
\   'methods': {
\     '__construct': { 'signature': '[ string $file]', 'return_type': ''},
\     'getNumFrames': { 'signature': 'void | int', 'return_type': 'int'},
\     'setDimension': { 'signature': 'int $x, int $y | void', 'return_type': 'void'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['swoole'] = {
\'swoole\async': {
\   'name': 'Swoole\Async',
\   'static_methods': {
\     'dnsLookup': { 'signature': 'string $hostname, callable $callback | void', 'return_type': 'void'},
\     'read': { 'signature': 'string $filename, callable $callback [, integer $chunk_size [, integer $offset]] | bool', 'return_type': 'bool'},
\     'readFile': { 'signature': 'string $filename, callable $callback | void', 'return_type': 'void'},
\     'set': { 'signature': 'array $settings | void', 'return_type': 'void'},
\     'write': { 'signature': 'string $filename, string $content [, integer $offset [, callable $callback]] | void', 'return_type': 'void'},
\     'writeFile': { 'signature': 'string $filename, string $content [, callable $callback [, string $flags]] | void', 'return_type': 'void'},
\   },
\},
\'swoole\atomic': {
\   'name': 'Swoole\Atomic',
\   'methods': {
\     'add': { 'signature': '[ integer $add_value] | integer', 'return_type': 'integer'},
\     'cmpset': { 'signature': 'integer $cmp_value, integer $new_value | integer', 'return_type': 'integer'},
\     'get': { 'signature': 'void | integer', 'return_type': 'integer'},
\     'set': { 'signature': 'integer $value | integer', 'return_type': 'integer'},
\     'sub': { 'signature': '[ integer $sub_value] | integer', 'return_type': 'integer'},
\   },
\},
\'swoole\buffer': {
\   'name': 'Swoole\Buffer',
\   'methods': {
\     'append': { 'signature': 'string $data | integer', 'return_type': 'integer'},
\     'clear': { 'signature': 'void | void', 'return_type': 'void'},
\     '__destruct': { 'signature': 'void | void', 'return_type': 'void'},
\     'expand': { 'signature': 'integer $size | integer', 'return_type': 'integer'},
\     'read': { 'signature': 'integer $offset, integer $length | string', 'return_type': 'string'},
\     'recycle': { 'signature': 'void | void', 'return_type': 'void'},
\     'substr': { 'signature': 'integer $offset [, integer $length [, bool $remove]] | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     'write': { 'signature': 'integer $offset, string $data | void', 'return_type': 'void'},
\   },
\},
\'swoole\channel': {
\   'name': 'Swoole\Channel',
\   'methods': {
\     '__destruct': { 'signature': 'void | void', 'return_type': 'void'},
\     'pop': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'push': { 'signature': 'string $data | bool', 'return_type': 'bool'},
\     'stats': { 'signature': 'void | array', 'return_type': 'array'},
\   },
\},
\'swoole\client': {
\   'name': 'Swoole\Client',
\   'constants': {
\     'MSG_OOB': '1',
\     'MSG_PEEK': '2',
\     'MSG_DONTWAIT': '128',
\     'MSG_WAITALL': '64',
\   },
\   'properties': {
\     'errCode': { 'initializer': '', 'type': ''},
\     'sock': { 'initializer': '', 'type': ''},
\     'reuse': { 'initializer': '', 'type': ''},
\     'reuseCount': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     'close': { 'signature': '[ bool $force] | bool', 'return_type': 'bool'},
\     'connect': { 'signature': 'string $host [, integer $port [, integer $timeout [, integer $flag]]] | bool', 'return_type': 'bool'},
\     '__destruct': { 'signature': 'void | void', 'return_type': 'void'},
\     'getpeername': { 'signature': 'void | array', 'return_type': 'array'},
\     'getsockname': { 'signature': 'void | array', 'return_type': 'array'},
\     'isConnected': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'on': { 'signature': 'string $event, callable $callback | void', 'return_type': 'void'},
\     'pause': { 'signature': 'void | void', 'return_type': 'void'},
\     'pipe': { 'signature': 'string $socket | void', 'return_type': 'void'},
\     'recv': { 'signature': '[ string $size [, string $flag]] | void', 'return_type': 'void'},
\     'resume': { 'signature': 'void | void', 'return_type': 'void'},
\     'send': { 'signature': 'string $data [, string $flag] | integer', 'return_type': 'integer'},
\     'sendfile': { 'signature': 'string $filename [, int $offset] | boolean', 'return_type': 'boolean'},
\     'sendto': { 'signature': 'string $ip, integer $port, string $data | boolean', 'return_type': 'boolean'},
\     'set': { 'signature': 'array $settings | void', 'return_type': 'void'},
\     'sleep': { 'signature': 'void | void', 'return_type': 'void'},
\     'wakeup': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'swoole\connection\iterator': {
\   'name': 'Swoole\Connection\Iterator',
\   'methods': {
\     'count': { 'signature': 'void | int', 'return_type': 'int'},
\     'current': { 'signature': 'void | Connection', 'return_type': 'Connection'},
\     'key': { 'signature': 'void | int', 'return_type': 'int'},
\     'next': { 'signature': 'void | Connection', 'return_type': 'Connection'},
\     'offsetExists': { 'signature': 'int $index | boolean', 'return_type': 'boolean'},
\     'offsetGet': { 'signature': 'string $index | Connection', 'return_type': 'Connection'},
\     'offsetSet': { 'signature': 'int $offset, mixed $connection | void', 'return_type': 'void'},
\     'offsetUnset': { 'signature': 'int $offset | void', 'return_type': 'void'},
\     'rewind': { 'signature': 'void | void', 'return_type': 'void'},
\     'valid': { 'signature': 'void | boolean', 'return_type': 'boolean'},
\   },
\},
\'swoole\coroutine': {
\   'name': 'Swoole\Coroutine',
\   'methods': {
\     'close': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'connect': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     '__destruct': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'getpeername': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'getsockname': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'isConnected': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'recv': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'send': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'sendfile': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'sendto': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'set': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'addFile': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'execute': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'get': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'getDefer': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'post': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'setCookies': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'setData': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'setDefer': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'setHeaders': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'setMethod': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'query': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\   },
\   'static_methods': {
\     'call_user_func_array': { 'signature': 'callable $callback, array $param_array | mixed', 'return_type': 'mixed'},
\     'call_user_func': { 'signature': 'callable $callback [, mixed $...] | mixed', 'return_type': 'mixed'},
\     'cli_wait': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'create': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'getuid': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'resume': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'suspend': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\   },
\},
\'swoole\event': {
\   'name': 'Swoole\Event',
\   'static_methods': {
\     'add': { 'signature': 'int $fd, callable $read_callback [, callable $write_callback [, string $events]] | boolean', 'return_type': 'boolean'},
\     'defer': { 'signature': 'mixed $callback | void', 'return_type': 'void'},
\     'del': { 'signature': 'string $fd | boolean', 'return_type': 'boolean'},
\     'exit': { 'signature': 'void | void', 'return_type': 'void'},
\     'set': { 'signature': 'int $fd [, string $read_callback [, string $write_callback [, string $events]]] | boolean', 'return_type': 'boolean'},
\     'wait': { 'signature': 'void | void', 'return_type': 'void'},
\     'write': { 'signature': 'string $fd, string $data | void', 'return_type': 'void'},
\   },
\},
\'swoole\exception': {
\   'name': 'Swoole\Exception',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\},
\'swoole\http\client': {
\   'name': 'Swoole\Http\Client',
\   'properties': {
\     'errCode': { 'initializer': '', 'type': ''},
\     'sock': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     'addFile': { 'signature': 'string $path, string $name [, string $type [, string $filename [, string $offset]]] | void', 'return_type': 'void'},
\     'close': { 'signature': 'void | void', 'return_type': 'void'},
\     '__destruct': { 'signature': 'void | void', 'return_type': 'void'},
\     'download': { 'signature': 'string $path, string $file, callable $callback [, integer $offset] | void', 'return_type': 'void'},
\     'execute': { 'signature': 'string $path, string $callback | void', 'return_type': 'void'},
\     'get': { 'signature': 'string $path, callable $callback | void', 'return_type': 'void'},
\     'isConnected': { 'signature': 'void | boolean', 'return_type': 'boolean'},
\     'on': { 'signature': 'string $event_name, callable $callback | void', 'return_type': 'void'},
\     'post': { 'signature': 'string $path, string $data, callable $callback | void', 'return_type': 'void'},
\     'push': { 'signature': 'string $data [, string $opcode [, string $finish]] | void', 'return_type': 'void'},
\     'set': { 'signature': 'array $settings | void', 'return_type': 'void'},
\     'setCookies': { 'signature': 'array $cookies | void', 'return_type': 'void'},
\     'setData': { 'signature': 'string $data | ReturnType', 'return_type': 'ReturnType'},
\     'setHeaders': { 'signature': 'array $headers | void', 'return_type': 'void'},
\     'setMethod': { 'signature': 'string $method | void', 'return_type': 'void'},
\     'upgrade': { 'signature': 'string $path, string $callback | void', 'return_type': 'void'},
\   },
\},
\'swoole\http\request': {
\   'name': 'Swoole\Http\Request',
\   'methods': {
\     '__destruct': { 'signature': 'void | void', 'return_type': 'void'},
\     'rawcontent': { 'signature': 'void | string', 'return_type': 'string'},
\   },
\},
\'swoole\http\response': {
\   'name': 'Swoole\Http\Response',
\   'methods': {
\     'cookie': { 'signature': 'string $name [, string $value [, string $expires [, string $path [, string $domain [, string $secure [, string $httponly]]]]]] | string', 'return_type': 'string'},
\     '__destruct': { 'signature': 'void | void', 'return_type': 'void'},
\     'end': { 'signature': '[ string $content] | void', 'return_type': 'void'},
\     'gzip': { 'signature': '[ string $compress_level] | ReturnType', 'return_type': 'ReturnType'},
\     'header': { 'signature': 'string $key, string $value [, string $ucwords] | void', 'return_type': 'void'},
\     'initHeader': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'rawcookie': { 'signature': 'string $name [, string $value [, string $expires [, string $path [, string $domain [, string $secure [, string $httponly]]]]]] | ReturnType', 'return_type': 'ReturnType'},
\     'sendfile': { 'signature': 'string $filename [, int $offset] | ReturnType', 'return_type': 'ReturnType'},
\     'status': { 'signature': 'string $http_code | ReturnType', 'return_type': 'ReturnType'},
\     'write': { 'signature': 'string $content | void', 'return_type': 'void'},
\   },
\},
\'swoole\http\server': {
\   'name': 'Swoole\Http\Server',
\   'methods': {
\     'on': { 'signature': 'string $event_name, callable $callback | void', 'return_type': 'void'},
\     'start': { 'signature': 'void | void', 'return_type': 'void'},
\     'addlistener': { 'signature': 'string $host, integer $port, string $socket_type | void', 'return_type': 'void'},
\     'addProcess': { 'signature': 'swoole_process $process | boolean', 'return_type': 'boolean'},
\     'after': { 'signature': 'integer $after_time_ms, callable $callback [, string $param] | ReturnType', 'return_type': 'ReturnType'},
\     'bind': { 'signature': 'integer $fd, integer $uid | boolean', 'return_type': 'boolean'},
\     'clearTimer': { 'signature': 'integer $timer_id | void', 'return_type': 'void'},
\     'swoole_timer_clear': { 'signature': 'integer $timer_id | void', 'return_type': 'void'},
\     'close': { 'signature': 'integer $fd [, boolean $reset] | boolean', 'return_type': 'boolean'},
\     'confirm': { 'signature': 'integer $fd | boolean', 'return_type': 'boolean'},
\     'connection_info': { 'signature': 'integer $fd [, integer $reactor_id] | array', 'return_type': 'array'},
\     'connection_list': { 'signature': 'integer $start_fd [, integer $pagesize] | array', 'return_type': 'array'},
\     'defer': { 'signature': 'callable $callback | void', 'return_type': 'void'},
\     '__destruct': { 'signature': 'void | void', 'return_type': 'void'},
\     'set': { 'signature': 'array $settings | ReturnType', 'return_type': 'ReturnType'},
\     'exist': { 'signature': 'integer $fd | boolean', 'return_type': 'boolean'},
\     'finish': { 'signature': 'string $data | void', 'return_type': 'void'},
\     'getClientInfo': { 'signature': 'integer $fd [, integer $reactor_id] | ReturnType', 'return_type': 'ReturnType'},
\     'getClientList': { 'signature': 'integer $start_fd [, integer $pagesize] | array', 'return_type': 'array'},
\     'getLastError': { 'signature': 'void | integer', 'return_type': 'integer'},
\     'heartbeat': { 'signature': 'boolean $if_close_connection | mixed', 'return_type': 'mixed'},
\     'listen': { 'signature': 'string $host, integer $port, string $socket_type | boolean', 'return_type': 'boolean'},
\     'pause': { 'signature': 'integer $fd | void', 'return_type': 'void'},
\     'protect': { 'signature': 'integer $fd [, boolean $is_protected] | void', 'return_type': 'void'},
\     'reload': { 'signature': 'void | boolean', 'return_type': 'boolean'},
\     'resume': { 'signature': 'integer $fd | void', 'return_type': 'void'},
\     'send': { 'signature': 'integer $fd, string $data [, integer $reactor_id] | boolean', 'return_type': 'boolean'},
\     'sendfile': { 'signature': 'integer $fd, string $filename [, integer $offset] | boolean', 'return_type': 'boolean'},
\     'sendMessage': { 'signature': 'integer $worker_id, string $data | boolean', 'return_type': 'boolean'},
\     'sendto': { 'signature': 'string $ip, integer $port, string $data [, string $server_socket] | boolean', 'return_type': 'boolean'},
\     'sendwait': { 'signature': 'integer $fd, string $data | boolean', 'return_type': 'boolean'},
\     'shutdown': { 'signature': 'void | void', 'return_type': 'void'},
\     'stats': { 'signature': 'void | array', 'return_type': 'array'},
\     'stop': { 'signature': '[ integer $worker_id] | boolean', 'return_type': 'boolean'},
\     'task': { 'signature': 'string $data [, integer $dst_worker_id [, callable $callback]] | mixed', 'return_type': 'mixed'},
\     'taskwait': { 'signature': 'string $data [, float $timeout [, integer $worker_id]] | void', 'return_type': 'void'},
\     'taskWaitMulti': { 'signature': 'array $tasks [, double $timeout_ms] | void', 'return_type': 'void'},
\     'tick': { 'signature': 'integer $interval_ms, callable $callback | void', 'return_type': 'void'},
\   },
\},
\'swoole\lock': {
\   'name': 'Swoole\Lock',
\   'methods': {
\     '__destruct': { 'signature': 'void | void', 'return_type': 'void'},
\     'lock_read': { 'signature': 'void | void', 'return_type': 'void'},
\     'lock': { 'signature': 'void | void', 'return_type': 'void'},
\     'trylock_read': { 'signature': 'void | void', 'return_type': 'void'},
\     'trylock': { 'signature': 'void | void', 'return_type': 'void'},
\     'unlock': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'swoole\mmap': {
\   'name': 'Swoole\Mmap',
\   'static_methods': {
\     'open': { 'signature': 'string $filename [, string $size [, string $offset]] | ReturnType', 'return_type': 'ReturnType'},
\   },
\},
\'swoole\mysql\exception': {
\   'name': 'Swoole\MySQL\Exception',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\},
\'swoole\mysql': {
\   'name': 'Swoole\MySQL',
\   'methods': {
\     'close': { 'signature': 'void | void', 'return_type': 'void'},
\     'connect': { 'signature': 'array $server_config, callable $callback | void', 'return_type': 'void'},
\     '__destruct': { 'signature': 'void | void', 'return_type': 'void'},
\     'getBuffer': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'on': { 'signature': 'string $event_name, callable $callback | void', 'return_type': 'void'},
\     'query': { 'signature': 'string $sql, callable $callback | ReturnType', 'return_type': 'ReturnType'},
\   },
\},
\'swoole\process': {
\   'name': 'Swoole\Process',
\   'constants': {
\     'IPC_NOWAIT': '256',
\   },
\   'methods': {
\     'close': { 'signature': 'void | void', 'return_type': 'void'},
\     '__destruct': { 'signature': 'void | void', 'return_type': 'void'},
\     'exec': { 'signature': 'string $exec_file, string $args | ReturnType', 'return_type': 'ReturnType'},
\     'exit': { 'signature': '[ string $exit_code] | void', 'return_type': 'void'},
\     'freeQueue': { 'signature': 'void | void', 'return_type': 'void'},
\     'name': { 'signature': 'string $process_name | void', 'return_type': 'void'},
\     'pop': { 'signature': '[ integer $maxsize] | mixed', 'return_type': 'mixed'},
\     'push': { 'signature': 'string $data | boolean', 'return_type': 'boolean'},
\     'read': { 'signature': '[ integer $maxsize] | string', 'return_type': 'string'},
\     'start': { 'signature': 'void | void', 'return_type': 'void'},
\     'statQueue': { 'signature': 'void | array', 'return_type': 'array'},
\     'useQueue': { 'signature': 'integer $key [, integer $mode] | boolean', 'return_type': 'boolean'},
\     'write': { 'signature': 'string $data | integer', 'return_type': 'integer'},
\   },
\   'static_methods': {
\     'alarm': { 'signature': 'integer $interval_usec | void', 'return_type': 'void'},
\     'daemon': { 'signature': '[ boolean $nochdir [, boolean $noclose]] | void', 'return_type': 'void'},
\     'kill': { 'signature': 'integer $pid [, string $signal_no] | void', 'return_type': 'void'},
\     'signal': { 'signature': 'string $signal_no, callable $callback | void', 'return_type': 'void'},
\     'wait': { 'signature': '[ boolean $blocking] | array', 'return_type': 'array'},
\   },
\},
\'swoole\redis\server': {
\   'name': 'Swoole\Redis\Server',
\   'constants': {
\     'NIL': '1',
\     'ERROR': '0',
\     'STATUS': '2',
\     'INT': '3',
\     'STRING': '4',
\     'SET': '5',
\     'MAP': '6',
\   },
\   'methods': {
\     'setHandler': { 'signature': 'string $command, string $callback [, string $number_of_string_param [, string $type_of_array_param]] | ReturnType', 'return_type': 'ReturnType'},
\     'start': { 'signature': 'void | void', 'return_type': 'void'},
\     'addlistener': { 'signature': 'string $host, integer $port, string $socket_type | void', 'return_type': 'void'},
\     'addProcess': { 'signature': 'swoole_process $process | boolean', 'return_type': 'boolean'},
\     'after': { 'signature': 'integer $after_time_ms, callable $callback [, string $param] | ReturnType', 'return_type': 'ReturnType'},
\     'bind': { 'signature': 'integer $fd, integer $uid | boolean', 'return_type': 'boolean'},
\     'clearTimer': { 'signature': 'integer $timer_id | void', 'return_type': 'void'},
\     'swoole_timer_clear': { 'signature': 'integer $timer_id | void', 'return_type': 'void'},
\     'close': { 'signature': 'integer $fd [, boolean $reset] | boolean', 'return_type': 'boolean'},
\     'confirm': { 'signature': 'integer $fd | boolean', 'return_type': 'boolean'},
\     'connection_info': { 'signature': 'integer $fd [, integer $reactor_id] | array', 'return_type': 'array'},
\     'connection_list': { 'signature': 'integer $start_fd [, integer $pagesize] | array', 'return_type': 'array'},
\     'defer': { 'signature': 'callable $callback | void', 'return_type': 'void'},
\     '__destruct': { 'signature': 'void | void', 'return_type': 'void'},
\     'on': { 'signature': 'string $event_name, callable $callback | void', 'return_type': 'void'},
\     'set': { 'signature': 'array $settings | ReturnType', 'return_type': 'ReturnType'},
\     'exist': { 'signature': 'integer $fd | boolean', 'return_type': 'boolean'},
\     'finish': { 'signature': 'string $data | void', 'return_type': 'void'},
\     'getClientInfo': { 'signature': 'integer $fd [, integer $reactor_id] | ReturnType', 'return_type': 'ReturnType'},
\     'getClientList': { 'signature': 'integer $start_fd [, integer $pagesize] | array', 'return_type': 'array'},
\     'getLastError': { 'signature': 'void | integer', 'return_type': 'integer'},
\     'heartbeat': { 'signature': 'boolean $if_close_connection | mixed', 'return_type': 'mixed'},
\     'listen': { 'signature': 'string $host, integer $port, string $socket_type | boolean', 'return_type': 'boolean'},
\     'pause': { 'signature': 'integer $fd | void', 'return_type': 'void'},
\     'protect': { 'signature': 'integer $fd [, boolean $is_protected] | void', 'return_type': 'void'},
\     'reload': { 'signature': 'void | boolean', 'return_type': 'boolean'},
\     'resume': { 'signature': 'integer $fd | void', 'return_type': 'void'},
\     'send': { 'signature': 'integer $fd, string $data [, integer $reactor_id] | boolean', 'return_type': 'boolean'},
\     'sendfile': { 'signature': 'integer $fd, string $filename [, integer $offset] | boolean', 'return_type': 'boolean'},
\     'sendMessage': { 'signature': 'integer $worker_id, string $data | boolean', 'return_type': 'boolean'},
\     'sendto': { 'signature': 'string $ip, integer $port, string $data [, string $server_socket] | boolean', 'return_type': 'boolean'},
\     'sendwait': { 'signature': 'integer $fd, string $data | boolean', 'return_type': 'boolean'},
\     'shutdown': { 'signature': 'void | void', 'return_type': 'void'},
\     'stats': { 'signature': 'void | array', 'return_type': 'array'},
\     'stop': { 'signature': '[ integer $worker_id] | boolean', 'return_type': 'boolean'},
\     'task': { 'signature': 'string $data [, integer $dst_worker_id [, callable $callback]] | mixed', 'return_type': 'mixed'},
\     'taskwait': { 'signature': 'string $data [, float $timeout [, integer $worker_id]] | void', 'return_type': 'void'},
\     'taskWaitMulti': { 'signature': 'array $tasks [, double $timeout_ms] | void', 'return_type': 'void'},
\     'tick': { 'signature': 'integer $interval_ms, callable $callback | void', 'return_type': 'void'},
\   },
\   'static_methods': {
\     'format': { 'signature': 'string $type [, string $value] | ReturnType', 'return_type': 'ReturnType'},
\   },
\},
\'swoole\serialize': {
\   'name': 'Swoole\Serialize',
\   'static_methods': {
\     'pack': { 'signature': 'string $data [, int $is_fast] | ReturnType', 'return_type': 'ReturnType'},
\     'unpack': { 'signature': 'string $data [, string $args] | ReturnType', 'return_type': 'ReturnType'},
\   },
\},
\'swoole\server': {
\   'name': 'Swoole\Server',
\   'methods': {
\     'addlistener': { 'signature': 'string $host, integer $port, string $socket_type | void', 'return_type': 'void'},
\     'addProcess': { 'signature': 'swoole_process $process | boolean', 'return_type': 'boolean'},
\     'after': { 'signature': 'integer $after_time_ms, callable $callback [, string $param] | ReturnType', 'return_type': 'ReturnType'},
\     'bind': { 'signature': 'integer $fd, integer $uid | boolean', 'return_type': 'boolean'},
\     'clearTimer': { 'signature': 'integer $timer_id | void', 'return_type': 'void'},
\     'swoole_timer_clear': { 'signature': 'integer $timer_id | void', 'return_type': 'void'},
\     'close': { 'signature': 'integer $fd [, boolean $reset] | boolean', 'return_type': 'boolean'},
\     'confirm': { 'signature': 'integer $fd | boolean', 'return_type': 'boolean'},
\     'connection_info': { 'signature': 'integer $fd [, integer $reactor_id] | array', 'return_type': 'array'},
\     'connection_list': { 'signature': 'integer $start_fd [, integer $pagesize] | array', 'return_type': 'array'},
\     'defer': { 'signature': 'callable $callback | void', 'return_type': 'void'},
\     '__destruct': { 'signature': 'void | void', 'return_type': 'void'},
\     'on': { 'signature': 'string $event_name, callable $callback | void', 'return_type': 'void'},
\     'set': { 'signature': 'array $settings | ReturnType', 'return_type': 'ReturnType'},
\     'exist': { 'signature': 'integer $fd | boolean', 'return_type': 'boolean'},
\     'finish': { 'signature': 'string $data | void', 'return_type': 'void'},
\     'getClientInfo': { 'signature': 'integer $fd [, integer $reactor_id] | ReturnType', 'return_type': 'ReturnType'},
\     'getClientList': { 'signature': 'integer $start_fd [, integer $pagesize] | array', 'return_type': 'array'},
\     'getLastError': { 'signature': 'void | integer', 'return_type': 'integer'},
\     'heartbeat': { 'signature': 'boolean $if_close_connection | mixed', 'return_type': 'mixed'},
\     'listen': { 'signature': 'string $host, integer $port, string $socket_type | boolean', 'return_type': 'boolean'},
\     'pause': { 'signature': 'integer $fd | void', 'return_type': 'void'},
\     'protect': { 'signature': 'integer $fd [, boolean $is_protected] | void', 'return_type': 'void'},
\     'reload': { 'signature': 'void | boolean', 'return_type': 'boolean'},
\     'resume': { 'signature': 'integer $fd | void', 'return_type': 'void'},
\     'send': { 'signature': 'integer $fd, string $data [, integer $reactor_id] | boolean', 'return_type': 'boolean'},
\     'sendfile': { 'signature': 'integer $fd, string $filename [, integer $offset] | boolean', 'return_type': 'boolean'},
\     'sendMessage': { 'signature': 'integer $worker_id, string $data | boolean', 'return_type': 'boolean'},
\     'sendto': { 'signature': 'string $ip, integer $port, string $data [, string $server_socket] | boolean', 'return_type': 'boolean'},
\     'sendwait': { 'signature': 'integer $fd, string $data | boolean', 'return_type': 'boolean'},
\     'shutdown': { 'signature': 'void | void', 'return_type': 'void'},
\     'start': { 'signature': 'void | void', 'return_type': 'void'},
\     'stats': { 'signature': 'void | array', 'return_type': 'array'},
\     'stop': { 'signature': '[ integer $worker_id] | boolean', 'return_type': 'boolean'},
\     'task': { 'signature': 'string $data [, integer $dst_worker_id [, callable $callback]] | mixed', 'return_type': 'mixed'},
\     'taskwait': { 'signature': 'string $data [, float $timeout [, integer $worker_id]] | void', 'return_type': 'void'},
\     'taskWaitMulti': { 'signature': 'array $tasks [, double $timeout_ms] | void', 'return_type': 'void'},
\     'tick': { 'signature': 'integer $interval_ms, callable $callback | void', 'return_type': 'void'},
\   },
\},
\'swoole\table': {
\   'name': 'Swoole\Table',
\   'constants': {
\     'TYPE_INT': '1',
\     'TYPE_STRING': '7',
\     'TYPE_FLOAT': '6',
\   },
\   'methods': {
\     'column': { 'signature': 'string $name, string $type [, integer $size] | ReturnType', 'return_type': 'ReturnType'},
\     'count': { 'signature': 'void | integer', 'return_type': 'integer'},
\     'create': { 'signature': 'void | void', 'return_type': 'void'},
\     'current': { 'signature': 'void | array', 'return_type': 'array'},
\     'decr': { 'signature': 'string $key, string $column [, integer $decrby] | ReturnType', 'return_type': 'ReturnType'},
\     'del': { 'signature': 'string $key | void', 'return_type': 'void'},
\     'destroy': { 'signature': 'void | void', 'return_type': 'void'},
\     'exist': { 'signature': 'string $key | boolean', 'return_type': 'boolean'},
\     'get': { 'signature': 'string $row_key, string $column_key | integer', 'return_type': 'integer'},
\     'incr': { 'signature': 'string $key, string $column [, integer $incrby] | void', 'return_type': 'void'},
\     'key': { 'signature': 'void | string', 'return_type': 'string'},
\     'next': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'rewind': { 'signature': 'void | void', 'return_type': 'void'},
\     'set': { 'signature': 'string $key, array $value | VOID', 'return_type': 'VOID'},
\     'valid': { 'signature': 'void | boolean', 'return_type': 'boolean'},
\   },
\},
\'swoole\timer': {
\   'name': 'Swoole\Timer',
\   'static_methods': {
\     'after': { 'signature': 'int $after_time_ms, callable $callback | void', 'return_type': 'void'},
\     'clear': { 'signature': 'integer $timer_id | void', 'return_type': 'void'},
\     'exists': { 'signature': 'integer $timer_id | boolean', 'return_type': 'boolean'},
\     'tick': { 'signature': 'integer $interval_ms, callable $callback [, string $param] | void', 'return_type': 'void'},
\   },
\},
\'swoole\websocket\frame': {
\   'name': 'Swoole\WebSocket\Frame',
\},
\'swoole\websocket\server': {
\   'name': 'Swoole\WebSocket\Server',
\   'methods': {
\     'exist': { 'signature': 'integer $fd | boolean', 'return_type': 'boolean'},
\     'on': { 'signature': 'string $event_name, callable $callback | void', 'return_type': 'void'},
\     'push': { 'signature': 'string $fd, string $data [, string $opcode [, string $finish]] | void', 'return_type': 'void'},
\     'start': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\   'static_methods': {
\     'pack': { 'signature': 'string $data [, string $opcode [, string $finish [, string $mask]]] | binary', 'return_type': 'binary'},
\     'unpack': { 'signature': 'binary $data | string', 'return_type': 'string'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['sync'] = {
\'syncevent': {
\   'name': 'SyncEvent',
\   'methods': {
\     '__construct': { 'signature': '[ string $name [, bool $manual = FALSE [, bool $prefire = FALSE]]]', 'return_type': ''},
\     'fire': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'reset': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'wait': { 'signature': '[ int $wait = -1] | bool', 'return_type': 'bool'},
\   },
\},
\'syncmutex': {
\   'name': 'SyncMutex',
\   'methods': {
\     '__construct': { 'signature': '[ string $name]', 'return_type': ''},
\     'lock': { 'signature': '[ int $wait = -1] | bool', 'return_type': 'bool'},
\     'unlock': { 'signature': '[ bool $all = FALSE] | bool', 'return_type': 'bool'},
\   },
\},
\'syncreaderwriter': {
\   'name': 'SyncReaderWriter',
\   'methods': {
\     '__construct': { 'signature': '[ string $name [, bool $autounlock = TRUE]]', 'return_type': ''},
\     'readlock': { 'signature': '[ int $wait = -1] | bool', 'return_type': 'bool'},
\     'readunlock': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'writelock': { 'signature': '[ int $wait = -1] | bool', 'return_type': 'bool'},
\     'writeunlock': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'syncsemaphore': {
\   'name': 'SyncSemaphore',
\   'methods': {
\     '__construct': { 'signature': '[ string $name [, int $initialval = 1 [, bool $autounlock = TRUE]]]', 'return_type': ''},
\     'lock': { 'signature': '[ int $wait = -1] | bool', 'return_type': 'bool'},
\     'unlock': { 'signature': '[ int &$prevcount] | bool', 'return_type': 'bool'},
\   },
\},
\'syncsharedmemory': {
\   'name': 'SyncSharedMemory',
\   'methods': {
\     '__construct': { 'signature': 'string $name, int $size', 'return_type': ''},
\     'first': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'size': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['tidy'] = {
\'tidy': {
\   'name': 'tidy',
\   'properties': {
\     'errorBuffer': { 'initializer': '', 'type': 'string'},
\   },
\   'methods': {
\     'body': { 'signature': 'void | tidyNode', 'return_type': 'tidyNode'},
\     'cleanRepair': { 'signature': 'void | bool', 'return_type': 'bool'},
\     '__construct': { 'signature': '[ string $filename [, mixed $config [, string $encoding [, bool $use_include_path]]]]', 'return_type': ''},
\     'diagnose': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getConfig': { 'signature': 'void | array', 'return_type': 'array'},
\     'getHtmlVer': { 'signature': 'void | int', 'return_type': 'int'},
\     'getOpt': { 'signature': 'string $option | mixed', 'return_type': 'mixed'},
\     'getOptDoc': { 'signature': 'string $optname | string', 'return_type': 'string'},
\     'getRelease': { 'signature': 'void | string', 'return_type': 'string'},
\     'getStatus': { 'signature': 'void | int', 'return_type': 'int'},
\     'head': { 'signature': 'void | tidyNode', 'return_type': 'tidyNode'},
\     'html': { 'signature': 'void | tidyNode', 'return_type': 'tidyNode'},
\     'isXhtml': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isXml': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'parseFile': { 'signature': 'string $filename [, mixed $config [, string $encoding [, bool $use_include_path = FALSE]]] | bool', 'return_type': 'bool'},
\     'parseString': { 'signature': 'string $input [, mixed $config [, string $encoding]] | bool', 'return_type': 'bool'},
\     'repairFile': { 'signature': 'string $filename [, mixed $config [, string $encoding [, bool $use_include_path = FALSE]]] | string', 'return_type': 'string'},
\     'repairString': { 'signature': 'string $data [, mixed $config [, string $encoding]] | string', 'return_type': 'string'},
\     'root': { 'signature': 'void | tidyNode', 'return_type': 'tidyNode'},
\   },
\},
\'tidynode': {
\   'name': 'tidyNode',
\   'properties': {
\     'value': { 'initializer': '', 'type': 'string'},
\     'name': { 'initializer': '', 'type': 'string'},
\     'type': { 'initializer': '', 'type': 'int'},
\     'line': { 'initializer': '', 'type': 'int'},
\     'column': { 'initializer': '', 'type': 'int'},
\     'proprietary': { 'initializer': '', 'type': 'bool'},
\     'id': { 'initializer': '', 'type': 'int'},
\     'attribute': { 'initializer': '', 'type': 'array'},
\     'child': { 'initializer': '', 'type': 'array'},
\   },
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'getParent': { 'signature': 'void | tidyNode', 'return_type': 'tidyNode'},
\     'hasChildren': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'hasSiblings': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isAsp': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isComment': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isHtml': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isJste': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isPhp': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isText': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['tokyo_tyrant'] = {
\'tokyotyrant': {
\   'name': 'TokyoTyrant',
\   'constants': {
\     'RDBDEF_PORT': '1978',
\     'RDBQC_STREQ': '0',
\     'RDBQC_STRINC': '1',
\     'RDBQC_STRBW': '2',
\     'RDBQC_STREW': '3',
\     'RDBQC_STRAND': '4',
\     'RDBQC_STROR': '5',
\     'RDBQC_STROREQ': '6',
\     'RDBQC_STRRX': '7',
\     'RDBQC_NUMEQ': '8',
\     'RDBQC_NUMGT': '9',
\     'RDBQC_NUMGE': '10',
\     'RDBQC_NUMLT': '11',
\     'RDBQC_NUMLE': '12',
\     'RDBQC_NUMBT': '13',
\     'RDBQC_NUMOREQ': '14',
\     'RDBQC_NEGATE': '16777216',
\     'RDBQC_NOIDX': '33554432',
\     'RDBQO_STRASC': '0',
\     'RDBQO_STRDESC': '1',
\     'RDBQO_NUMASC': '2',
\     'RDBQO_NUMDESC': '3',
\     'RDBIT_LEXICAL': '0',
\     'RDBIT_DECIMAL': '1',
\     'RDBIT_TOKEN': '2',
\     'RDBIT_QGRAM': '3',
\     'RDBIT_OPT': '9998',
\     'RDBIT_VOID': '9999',
\     'RDBIT_KEEP': '16777216',
\     'RDBQCFTS_PH': '15',
\     'RDBQCFTS_AND': '16',
\     'RDBQCFTS_OR': '17',
\     'RDBQCFTS_EX': '18',
\     'RDBXO_LCKREC': '1',
\     'RDBXOLCK_GLB': '2',
\     'RDBREC_INT': '1',
\     'RDBREC_DBL': '2',
\     'RDBMS_UNION': '0',
\     'RDBMS_ISECT': '1',
\     'RDBMS_DIFF': '2',
\     'RDBT_RECON': '1',
\   },
\   'methods': {
\     'add': { 'signature': 'string $key, number $increment [, int $type = 0] | number', 'return_type': 'number'},
\     'connect': { 'signature': 'string $host [, int $port = TokyoTyrant::RDBDEF_PORT [, array $options]] | TokyoTyrant', 'return_type': 'TokyoTyrant'},
\     'connectUri': { 'signature': 'string $uri | TokyoTyrant', 'return_type': 'TokyoTyrant'},
\     '__construct': { 'signature': '[ string $host [, int $port = TokyoTyrant::RDBDEF_PORT [, array $options]]]', 'return_type': ''},
\     'copy': { 'signature': 'string $path | TokyoTyrant', 'return_type': 'TokyoTyrant'},
\     'ext': { 'signature': 'string $name, int $options, string $key, string $value | string', 'return_type': 'string'},
\     'fwmKeys': { 'signature': 'string $prefix, int $max_recs | array', 'return_type': 'array'},
\     'get': { 'signature': 'mixed $keys | mixed', 'return_type': 'mixed'},
\     'getIterator': { 'signature': 'void | TokyoTyrantIterator', 'return_type': 'TokyoTyrantIterator'},
\     'num': { 'signature': 'void | int', 'return_type': 'int'},
\     'out': { 'signature': 'mixed $keys | TokyoTyrant', 'return_type': 'TokyoTyrant'},
\     'put': { 'signature': 'mixed $keys [, string $value = NULL] | TokyoTyrant', 'return_type': 'TokyoTyrant'},
\     'putCat': { 'signature': 'mixed $keys [, string $value] | TokyoTyrant', 'return_type': 'TokyoTyrant'},
\     'putKeep': { 'signature': 'mixed $keys [, string $value] | TokyoTyrant', 'return_type': 'TokyoTyrant'},
\     'putNr': { 'signature': 'mixed $keys [, string $value = NULL] | TokyoTyrant', 'return_type': 'TokyoTyrant'},
\     'putShl': { 'signature': 'string $key, string $value, int $width | mixed', 'return_type': 'mixed'},
\     'restore': { 'signature': 'string $log_dir, int $timestamp [, bool $check_consistency = TRUE] | mixed', 'return_type': 'mixed'},
\     'setMaster': { 'signature': 'string $host, int $port, int $timestamp [, bool $check_consistency = TRUE] | mixed', 'return_type': 'mixed'},
\     'size': { 'signature': 'string $key | int', 'return_type': 'int'},
\     'stat': { 'signature': 'void | array', 'return_type': 'array'},
\     'sync': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'tune': { 'signature': 'float $timeout [, int $options = TokyoTyrant::RDBT_RECON] | TokyoTyrant', 'return_type': 'TokyoTyrant'},
\     'vanish': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\   },
\},
\'tokyotyrantexception': {
\   'name': 'tokyotyrantexception',
\   'properties': {
\     'code': { 'initializer': '', 'type': 'int'},
\     'message': { 'initializer': '', 'type': 'string'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'tokyotyrantiterator': {
\   'name': 'TokyoTyrantIterator',
\   'methods': {
\     '__construct': { 'signature': '[ string $host [, int $port = TokyoTyrant::RDBDEF_PORT [, array $options]]]', 'return_type': ''},
\     'current': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'key': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'next': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'rewind': { 'signature': 'void | void', 'return_type': 'void'},
\     'valid': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'add': { 'signature': 'string $key, number $increment [, int $type = 0] | number', 'return_type': 'number'},
\     'connect': { 'signature': 'string $host [, int $port = TokyoTyrant::RDBDEF_PORT [, array $options]] | TokyoTyrant', 'return_type': 'TokyoTyrant'},
\     'connectUri': { 'signature': 'string $uri | TokyoTyrant', 'return_type': 'TokyoTyrant'},
\     'copy': { 'signature': 'string $path | TokyoTyrant', 'return_type': 'TokyoTyrant'},
\     'ext': { 'signature': 'string $name, int $options, string $key, string $value | string', 'return_type': 'string'},
\     'fwmKeys': { 'signature': 'string $prefix, int $max_recs | array', 'return_type': 'array'},
\     'get': { 'signature': 'mixed $keys | mixed', 'return_type': 'mixed'},
\     'getIterator': { 'signature': 'void | TokyoTyrantIterator', 'return_type': 'TokyoTyrantIterator'},
\     'num': { 'signature': 'void | int', 'return_type': 'int'},
\     'out': { 'signature': 'mixed $keys | TokyoTyrant', 'return_type': 'TokyoTyrant'},
\     'put': { 'signature': 'mixed $keys [, string $value = NULL] | TokyoTyrant', 'return_type': 'TokyoTyrant'},
\     'putCat': { 'signature': 'mixed $keys [, string $value] | TokyoTyrant', 'return_type': 'TokyoTyrant'},
\     'putKeep': { 'signature': 'mixed $keys [, string $value] | TokyoTyrant', 'return_type': 'TokyoTyrant'},
\     'putNr': { 'signature': 'mixed $keys [, string $value = NULL] | TokyoTyrant', 'return_type': 'TokyoTyrant'},
\     'putShl': { 'signature': 'string $key, string $value, int $width | mixed', 'return_type': 'mixed'},
\     'restore': { 'signature': 'string $log_dir, int $timestamp [, bool $check_consistency = TRUE] | mixed', 'return_type': 'mixed'},
\     'setMaster': { 'signature': 'string $host, int $port, int $timestamp [, bool $check_consistency = TRUE] | mixed', 'return_type': 'mixed'},
\     'size': { 'signature': 'string $key | int', 'return_type': 'int'},
\     'stat': { 'signature': 'void | array', 'return_type': 'array'},
\     'sync': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'tune': { 'signature': 'float $timeout [, int $options = TokyoTyrant::RDBT_RECON] | TokyoTyrant', 'return_type': 'TokyoTyrant'},
\     'vanish': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\   },
\},
\'tokyotyrantquery': {
\   'name': 'TokyoTyrantQuery',
\   'methods': {
\     'addCond': { 'signature': 'string $name, int $op, string $expr | mixed', 'return_type': 'mixed'},
\     '__construct': { 'signature': 'TokyoTyrantTable $table', 'return_type': ''},
\     'count': { 'signature': 'void | int', 'return_type': 'int'},
\     'current': { 'signature': 'void | array', 'return_type': 'array'},
\     'hint': { 'signature': 'void | string', 'return_type': 'string'},
\     'key': { 'signature': 'void | string', 'return_type': 'string'},
\     'metaSearch': { 'signature': 'array $queries, int $type | array', 'return_type': 'array'},
\     'next': { 'signature': 'void | array', 'return_type': 'array'},
\     'out': { 'signature': 'void | TokyoTyrantQuery', 'return_type': 'TokyoTyrantQuery'},
\     'rewind': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'search': { 'signature': 'void | array', 'return_type': 'array'},
\     'setLimit': { 'signature': '[ int $max [, int $skip]] | mixed', 'return_type': 'mixed'},
\     'setOrder': { 'signature': 'string $name, int $type | mixed', 'return_type': 'mixed'},
\     'valid': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'tokyotyranttable': {
\   'name': 'TokyoTyrantTable',
\   'methods': {
\     'add': { 'signature': 'string $key, number $increment [, int $type = 0] | number', 'return_type': 'number'},
\     'genUid': { 'signature': 'void | int', 'return_type': 'int'},
\     'get': { 'signature': 'mixed $keys | mixed', 'return_type': 'mixed'},
\     'getIterator': { 'signature': 'void | TokyoTyrantIterator', 'return_type': 'TokyoTyrantIterator'},
\     'getQuery': { 'signature': 'void | TokyoTyrantQuery', 'return_type': 'TokyoTyrantQuery'},
\     'out': { 'signature': 'mixed $keys | TokyoTyrant', 'return_type': 'TokyoTyrant'},
\     'put': { 'signature': 'mixed $keys [, string $value = NULL] | TokyoTyrant', 'return_type': 'TokyoTyrant'},
\     'putCat': { 'signature': 'mixed $keys [, string $value] | TokyoTyrant', 'return_type': 'TokyoTyrant'},
\     'putKeep': { 'signature': 'mixed $keys [, string $value] | TokyoTyrant', 'return_type': 'TokyoTyrant'},
\     'putNr': { 'signature': 'mixed $keys [, string $value = NULL] | TokyoTyrant', 'return_type': 'TokyoTyrant'},
\     'putShl': { 'signature': 'string $key, string $value, int $width | mixed', 'return_type': 'mixed'},
\     'setIndex': { 'signature': 'string $column, int $type | mixed', 'return_type': 'mixed'},
\     'connect': { 'signature': 'string $host [, int $port = TokyoTyrant::RDBDEF_PORT [, array $options]] | TokyoTyrant', 'return_type': 'TokyoTyrant'},
\     'connectUri': { 'signature': 'string $uri | TokyoTyrant', 'return_type': 'TokyoTyrant'},
\     '__construct': { 'signature': '[ string $host [, int $port = TokyoTyrant::RDBDEF_PORT [, array $options]]]', 'return_type': ''},
\     'copy': { 'signature': 'string $path | TokyoTyrant', 'return_type': 'TokyoTyrant'},
\     'ext': { 'signature': 'string $name, int $options, string $key, string $value | string', 'return_type': 'string'},
\     'fwmKeys': { 'signature': 'string $prefix, int $max_recs | array', 'return_type': 'array'},
\     'num': { 'signature': 'void | int', 'return_type': 'int'},
\     'restore': { 'signature': 'string $log_dir, int $timestamp [, bool $check_consistency = TRUE] | mixed', 'return_type': 'mixed'},
\     'setMaster': { 'signature': 'string $host, int $port, int $timestamp [, bool $check_consistency = TRUE] | mixed', 'return_type': 'mixed'},
\     'size': { 'signature': 'string $key | int', 'return_type': 'int'},
\     'stat': { 'signature': 'void | array', 'return_type': 'array'},
\     'sync': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'tune': { 'signature': 'float $timeout [, int $options = TokyoTyrant::RDBT_RECON] | TokyoTyrant', 'return_type': 'TokyoTyrant'},
\     'vanish': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['ui'] = {
\'ui\area': {
\   'name': 'UI\Area',
\   'constants': {
\     'Ctrl': '',
\     'Alt': '',
\     'Shift': '',
\     'Super': '',
\     'Down': '',
\     'Up': '',
\   },
\   'methods': {
\     'getParent': { 'signature': 'void | UI\Control', 'return_type': 'UI\Control'},
\     'getTopLevel': { 'signature': 'void | int', 'return_type': 'int'},
\     'isEnabled': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isVisible': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'ui\control': {
\   'name': 'UI\Control',
\   'methods': {
\     'getParent': { 'signature': 'void | UI\Control', 'return_type': 'UI\Control'},
\     'getTopLevel': { 'signature': 'void | int', 'return_type': 'int'},
\     'isEnabled': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isVisible': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'ui\controls\box': {
\   'name': 'UI\Controls\Box',
\   'constants': {
\     'Vertical': '',
\     'Horizontal': '',
\   },
\   'properties': {
\     'controls': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     '__construct': { 'signature': '[ int $orientation = UI\Controls\Box::Horizontal]', 'return_type': ''},
\     'append': { 'signature': 'Control $control [, bool $stretchy = FALSE] | int', 'return_type': 'int'},
\     'delete': { 'signature': 'int $index | bool', 'return_type': 'bool'},
\     'getOrientation': { 'signature': 'void | int', 'return_type': 'int'},
\     'isPadded': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getParent': { 'signature': 'void | UI\Control', 'return_type': 'UI\Control'},
\     'getTopLevel': { 'signature': 'void | int', 'return_type': 'int'},
\     'isEnabled': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isVisible': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'ui\controls\button': {
\   'name': 'UI\Controls\Button',
\   'methods': {
\     '__construct': { 'signature': 'string $text', 'return_type': ''},
\     'getText': { 'signature': 'void | string', 'return_type': 'string'},
\     'getParent': { 'signature': 'void | UI\Control', 'return_type': 'UI\Control'},
\     'getTopLevel': { 'signature': 'void | int', 'return_type': 'int'},
\     'isEnabled': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isVisible': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'ui\controls\check': {
\   'name': 'UI\Controls\Check',
\   'methods': {
\     '__construct': { 'signature': 'string $text', 'return_type': ''},
\     'getText': { 'signature': 'void | string', 'return_type': 'string'},
\     'isChecked': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getParent': { 'signature': 'void | UI\Control', 'return_type': 'UI\Control'},
\     'getTopLevel': { 'signature': 'void | int', 'return_type': 'int'},
\     'isEnabled': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isVisible': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'ui\controls\colorbutton': {
\   'name': 'UI\Controls\ColorButton',
\   'methods': {
\     'getColor': { 'signature': 'void | UI\Color', 'return_type': 'UI\Color'},
\     'getParent': { 'signature': 'void | UI\Control', 'return_type': 'UI\Control'},
\     'getTopLevel': { 'signature': 'void | int', 'return_type': 'int'},
\     'isEnabled': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isVisible': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'ui\controls\combo': {
\   'name': 'UI\Controls\Combo',
\   'methods': {
\     'getSelected': { 'signature': 'void | int', 'return_type': 'int'},
\     'getParent': { 'signature': 'void | UI\Control', 'return_type': 'UI\Control'},
\     'getTopLevel': { 'signature': 'void | int', 'return_type': 'int'},
\     'isEnabled': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isVisible': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'ui\controls\editablecombo': {
\   'name': 'UI\Controls\EditableCombo',
\   'methods': {
\     'getText': { 'signature': 'void | string', 'return_type': 'string'},
\     'getParent': { 'signature': 'void | UI\Control', 'return_type': 'UI\Control'},
\     'getTopLevel': { 'signature': 'void | int', 'return_type': 'int'},
\     'isEnabled': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isVisible': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'ui\controls\entry': {
\   'name': 'UI\Controls\Entry',
\   'constants': {
\     'Normal': '',
\     'Password': '',
\     'Search': '',
\   },
\   'methods': {
\     '__construct': { 'signature': '[ int $type = UI\Controls\Entry::Normal]', 'return_type': ''},
\     'getText': { 'signature': 'void | string', 'return_type': 'string'},
\     'isReadOnly': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getParent': { 'signature': 'void | UI\Control', 'return_type': 'UI\Control'},
\     'getTopLevel': { 'signature': 'void | int', 'return_type': 'int'},
\     'isEnabled': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isVisible': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'ui\controls\form': {
\   'name': 'UI\Controls\Form',
\   'properties': {
\     'controls': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     'append': { 'signature': 'string $label, UI\Control $control [, bool $stretchy = FALSE] | int', 'return_type': 'int'},
\     'delete': { 'signature': 'int $index | bool', 'return_type': 'bool'},
\     'isPadded': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getParent': { 'signature': 'void | UI\Control', 'return_type': 'UI\Control'},
\     'getTopLevel': { 'signature': 'void | int', 'return_type': 'int'},
\     'isEnabled': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isVisible': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'ui\controls\grid': {
\   'name': 'UI\Controls\Grid',
\   'constants': {
\     'Fill': '',
\     'Start': '',
\     'Center': '',
\     'End': '',
\     'Leading': '',
\     'Top': '',
\     'Trailing': '',
\     'Bottom': '',
\   },
\   'properties': {
\     'controls': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     'isPadded': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getParent': { 'signature': 'void | UI\Control', 'return_type': 'UI\Control'},
\     'getTopLevel': { 'signature': 'void | int', 'return_type': 'int'},
\     'isEnabled': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isVisible': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'ui\controls\group': {
\   'name': 'UI\Controls\Group',
\   'properties': {
\     'controls': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     '__construct': { 'signature': 'string $title', 'return_type': ''},
\     'getTitle': { 'signature': 'void | string', 'return_type': 'string'},
\     'hasMargin': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getParent': { 'signature': 'void | UI\Control', 'return_type': 'UI\Control'},
\     'getTopLevel': { 'signature': 'void | int', 'return_type': 'int'},
\     'isEnabled': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isVisible': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'ui\controls\label': {
\   'name': 'UI\Controls\Label',
\   'methods': {
\     '__construct': { 'signature': 'string $text', 'return_type': ''},
\     'getText': { 'signature': 'void | string', 'return_type': 'string'},
\     'getParent': { 'signature': 'void | UI\Control', 'return_type': 'UI\Control'},
\     'getTopLevel': { 'signature': 'void | int', 'return_type': 'int'},
\     'isEnabled': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isVisible': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'ui\controls\multilineentry': {
\   'name': 'UI\Controls\MultilineEntry',
\   'constants': {
\     'Wrap': '',
\     'NoWrap': '',
\   },
\   'methods': {
\     '__construct': { 'signature': '[ int $type]', 'return_type': ''},
\     'getText': { 'signature': 'void | string', 'return_type': 'string'},
\     'isReadOnly': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getParent': { 'signature': 'void | UI\Control', 'return_type': 'UI\Control'},
\     'getTopLevel': { 'signature': 'void | int', 'return_type': 'int'},
\     'isEnabled': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isVisible': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'ui\controls\picker': {
\   'name': 'UI\Controls\Picker',
\   'constants': {
\     'Date': '',
\     'Time': '',
\     'DateTime': '',
\   },
\   'methods': {
\     '__construct': { 'signature': '[ int $type = UI\Controls\Picker::Date]', 'return_type': ''},
\     'getParent': { 'signature': 'void | UI\Control', 'return_type': 'UI\Control'},
\     'getTopLevel': { 'signature': 'void | int', 'return_type': 'int'},
\     'isEnabled': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isVisible': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'ui\controls\progress': {
\   'name': 'UI\Controls\Progress',
\   'methods': {
\     'getValue': { 'signature': 'void | int', 'return_type': 'int'},
\     'getParent': { 'signature': 'void | UI\Control', 'return_type': 'UI\Control'},
\     'getTopLevel': { 'signature': 'void | int', 'return_type': 'int'},
\     'isEnabled': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isVisible': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'ui\controls\radio': {
\   'name': 'UI\Controls\Radio',
\   'methods': {
\     'getSelected': { 'signature': 'void | int', 'return_type': 'int'},
\     'getParent': { 'signature': 'void | UI\Control', 'return_type': 'UI\Control'},
\     'getTopLevel': { 'signature': 'void | int', 'return_type': 'int'},
\     'isEnabled': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isVisible': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'ui\controls\separator': {
\   'name': 'UI\Controls\Separator',
\   'constants': {
\     'Horizontal': '',
\     'Vertical': '',
\   },
\   'methods': {
\     '__construct': { 'signature': '[ int $type = UI\Controls\Separator::Horizontal]', 'return_type': ''},
\     'getParent': { 'signature': 'void | UI\Control', 'return_type': 'UI\Control'},
\     'getTopLevel': { 'signature': 'void | int', 'return_type': 'int'},
\     'isEnabled': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isVisible': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'ui\controls\slider': {
\   'name': 'UI\Controls\Slider',
\   'methods': {
\     '__construct': { 'signature': 'int $min, int $max', 'return_type': ''},
\     'getValue': { 'signature': 'void | int', 'return_type': 'int'},
\     'getParent': { 'signature': 'void | UI\Control', 'return_type': 'UI\Control'},
\     'getTopLevel': { 'signature': 'void | int', 'return_type': 'int'},
\     'isEnabled': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isVisible': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'ui\controls\spin': {
\   'name': 'UI\Controls\Spin',
\   'methods': {
\     '__construct': { 'signature': 'int $min, int $max', 'return_type': ''},
\     'getValue': { 'signature': 'void | int', 'return_type': 'int'},
\     'getParent': { 'signature': 'void | UI\Control', 'return_type': 'UI\Control'},
\     'getTopLevel': { 'signature': 'void | int', 'return_type': 'int'},
\     'isEnabled': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isVisible': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'ui\controls\tab': {
\   'name': 'UI\Controls\Tab',
\   'properties': {
\     'controls': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     'append': { 'signature': 'string $name, UI\Control $control | int', 'return_type': 'int'},
\     'delete': { 'signature': 'int $index | bool', 'return_type': 'bool'},
\     'hasMargin': { 'signature': 'int $page | bool', 'return_type': 'bool'},
\     'pages': { 'signature': 'void | int', 'return_type': 'int'},
\     'getParent': { 'signature': 'void | UI\Control', 'return_type': 'UI\Control'},
\     'getTopLevel': { 'signature': 'void | int', 'return_type': 'int'},
\     'isEnabled': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isVisible': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'ui\draw\brush\gradient': {
\   'name': 'UI\Draw\Brush\Gradient',
\   'methods': {
\     'addStop': { 'signature': 'float $position, int $color | int', 'return_type': 'int'},
\     'delStop': { 'signature': 'int $index | int', 'return_type': 'int'},
\     'setStop': { 'signature': 'int $index, float $position, int $color | bool', 'return_type': 'bool'},
\     'getColor': { 'signature': 'void | UI\Draw\Color', 'return_type': 'UI\Draw\Color'},
\     'setColor': { 'signature': 'int $color | void', 'return_type': 'void'},
\   },
\},
\'ui\draw\brush\lineargradient': {
\   'name': 'UI\Draw\Brush\LinearGradient',
\   'methods': {
\     '__construct': { 'signature': 'UI\Point $start, UI\Point $end', 'return_type': ''},
\     'addStop': { 'signature': 'float $position, int $color | int', 'return_type': 'int'},
\     'delStop': { 'signature': 'int $index | int', 'return_type': 'int'},
\     'setStop': { 'signature': 'int $index, float $position, int $color | bool', 'return_type': 'bool'},
\   },
\},
\'ui\draw\brush\radialgradient': {
\   'name': 'UI\Draw\Brush\RadialGradient',
\   'methods': {
\     '__construct': { 'signature': 'UI\Point $start, UI\Point $outer, float $radius', 'return_type': ''},
\     'addStop': { 'signature': 'float $position, int $color | int', 'return_type': 'int'},
\     'delStop': { 'signature': 'int $index | int', 'return_type': 'int'},
\     'setStop': { 'signature': 'int $index, float $position, int $color | bool', 'return_type': 'bool'},
\   },
\},
\'ui\draw\brush': {
\   'name': 'UI\Draw\Brush',
\   'methods': {
\     '__construct': { 'signature': 'int $color', 'return_type': ''},
\     'getColor': { 'signature': 'void | UI\Draw\Color', 'return_type': 'UI\Draw\Color'},
\     'setColor': { 'signature': 'int $color | void', 'return_type': 'void'},
\   },
\},
\'ui\draw\color': {
\   'name': 'UI\Draw\Color',
\   'constants': {
\     'Red': '',
\     'Green': '',
\     'Blue': '',
\     'Alpha': '',
\   },
\   'properties': {
\     'r': { 'initializer': '', 'type': ''},
\     'g': { 'initializer': '', 'type': ''},
\     'b': { 'initializer': '', 'type': ''},
\     'a': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     '__construct': { 'signature': '[ int $color]', 'return_type': ''},
\     'getChannel': { 'signature': 'int $channel | float', 'return_type': 'float'},
\     'setChannel': { 'signature': 'int $channel, float $value | void', 'return_type': 'void'},
\   },
\},
\'ui\draw\line\cap': {
\   'name': 'UI\Draw\Line\Cap',
\   'constants': {
\     'Flat': '',
\     'Round': '',
\     'Square': '',
\   },
\},
\'ui\draw\line\join': {
\   'name': 'UI\Draw\Line\Join',
\   'constants': {
\     'Miter': '',
\     'Round': '',
\     'Bevel': '',
\   },
\},
\'ui\draw\matrix': {
\   'name': 'UI\Draw\Matrix',
\   'methods': {
\     'isInvertible': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'multiply': { 'signature': 'UI\Draw\Matrix $matrix | UI\Draw\Matrix', 'return_type': 'UI\Draw\Matrix'},
\   },
\},
\'ui\draw\path': {
\   'name': 'UI\Draw\Path',
\   'constants': {
\     'Winding': '',
\     'Alternate': '',
\   },
\   'methods': {
\     '__construct': { 'signature': '[ int $mode = UI\Draw\Path::Winding]', 'return_type': ''},
\   },
\},
\'ui\draw\pen': {
\   'name': 'UI\Draw\Pen',
\},
\'ui\draw\stroke': {
\   'name': 'UI\Draw\Stroke',
\   'methods': {
\     '__construct': { 'signature': '[ int $cap = UI\Draw\Line\Cap::Flat [, int $join = UI\Draw\Line\Join::Miter [, float $thickness = 1 [, float $miterLimit = 10]]]]', 'return_type': ''},
\     'getCap': { 'signature': 'void | int', 'return_type': 'int'},
\     'getJoin': { 'signature': 'void | int', 'return_type': 'int'},
\     'getMiterLimit': { 'signature': 'void | float', 'return_type': 'float'},
\     'getThickness': { 'signature': 'void | float', 'return_type': 'float'},
\   },
\},
\'ui\draw\text\font\descriptor': {
\   'name': 'UI\Draw\Text\Font\Descriptor',
\   'methods': {
\     '__construct': { 'signature': 'string $family, float $size [, int $weight = UI\Draw\Text\Font\Weight::Normal [, int $italic = UI\Draw\Text\Font\Italic::Normal [, int $stretch = UI\Draw\Text\Font\Stretch::Normal]]]', 'return_type': ''},
\     'getFamily': { 'signature': 'void | string', 'return_type': 'string'},
\     'getItalic': { 'signature': 'void | int', 'return_type': 'int'},
\     'getSize': { 'signature': 'void | float', 'return_type': 'float'},
\     'getStretch': { 'signature': 'void | int', 'return_type': 'int'},
\     'getWeight': { 'signature': 'void | int', 'return_type': 'int'},
\   },
\},
\'ui\draw\text\font\italic': {
\   'name': 'UI\Draw\Text\Font\Italic',
\   'constants': {
\     'Normal': '0',
\     'Oblique': '1',
\     'Italic': '2',
\   },
\},
\'ui\draw\text\font\stretch': {
\   'name': 'UI\Draw\Text\Font\Stretch',
\   'constants': {
\     'UltraCondensed': '0',
\     'ExtraCondensed': '1',
\     'Condensed': '2',
\     'SemiCondensed': '3',
\     'Normal': '4',
\     'SemiExpanded': '5',
\     'Expanded': '6',
\     'ExtraExpanded': '7',
\     'UltraExpanded': '8',
\   },
\},
\'ui\draw\text\font\weight': {
\   'name': 'UI\Draw\Text\Font\Weight',
\   'constants': {
\     'Thin': '',
\     'UltraLight': '',
\     'Light': '',
\     'Book': '',
\     'Normal': '',
\     'Medium': '',
\     'SemiBold': '',
\     'Bold': '',
\     'UltraBold': '',
\     'Heavy': '',
\     'UltraHeavy': '',
\   },
\},
\'ui\draw\text\font': {
\   'name': 'UI\Draw\Text\Font',
\   'methods': {
\     '__construct': { 'signature': 'UI\Draw\Text\Font\Descriptor $descriptor', 'return_type': ''},
\     'getAscent': { 'signature': 'void | float', 'return_type': 'float'},
\     'getDescent': { 'signature': 'void | float', 'return_type': 'float'},
\     'getLeading': { 'signature': 'void | float', 'return_type': 'float'},
\     'getUnderlinePosition': { 'signature': 'void | float', 'return_type': 'float'},
\     'getUnderlineThickness': { 'signature': 'void | float', 'return_type': 'float'},
\   },
\},
\'ui\draw\text\layout': {
\   'name': 'UI\Draw\Text\Layout',
\   'methods': {
\     '__construct': { 'signature': 'string $text, UI\Draw\Text\Font $font, float $width', 'return_type': ''},
\   },
\},
\'ui\exception\invalidargumentexception': {
\   'name': 'UI\Exception\InvalidArgumentException',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'ui\exception\runtimeexception': {
\   'name': 'UI\Exception\RuntimeException',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'ui\executor': {
\   'name': 'UI\Executor',
\   'methods': {
\     '__construct': { 'signature': 'int $seconds, int $microseconds', 'return_type': ''},
\     'kill': { 'signature': 'void | void', 'return_type': 'void'},
\     'onExecute': { 'signature': 'void | void', 'return_type': 'void'},
\     'setInterval': { 'signature': 'int $seconds, int $microseconds | bool', 'return_type': 'bool'},
\   },
\},
\'ui\key': {
\   'name': 'UI\Key',
\   'constants': {
\     'Escape': '',
\     'Insert': '',
\     'Delete': '',
\     'Home': '',
\     'End': '',
\     'PageUp': '',
\     'PageDown': '',
\     'Up': '',
\     'Down': '',
\     'Left': '',
\     'Right': '',
\     'F1': '',
\     'F2': '',
\     'F3': '',
\     'F4': '',
\     'F5': '',
\     'F6': '',
\     'F7': '',
\     'F8': '',
\     'F9': '',
\     'F10': '',
\     'F11': '',
\     'F12': '',
\     'N0': '',
\     'N1': '',
\     'N2': '',
\     'N3': '',
\     'N4': '',
\     'N5': '',
\     'N6': '',
\     'N7': '',
\     'N8': '',
\     'N9': '',
\     'NDot': '',
\     'NEnter': '',
\     'NAdd': '',
\     'NSubtract': '',
\     'NMultiply': '',
\     'NDivide': '',
\   },
\},
\'ui\menu': {
\   'name': 'UI\Menu',
\   'methods': {
\     '__construct': { 'signature': 'string $name', 'return_type': ''},
\     'append': { 'signature': 'string $name [, string $type = UI\MenuItem::class] | UI\MenuItem', 'return_type': 'UI\MenuItem'},
\     'appendAbout': { 'signature': '[ string $type = UI\MenuItem::class] | UI\MenuItem', 'return_type': 'UI\MenuItem'},
\     'appendCheck': { 'signature': 'string $name [, string $type = UI\MenuItem::class] | UI\MenuItem', 'return_type': 'UI\MenuItem'},
\     'appendPreferences': { 'signature': '[ string $type = UI\MenuItem::class] | UI\MenuItem', 'return_type': 'UI\MenuItem'},
\     'appendQuit': { 'signature': '[ string $type = UI\MenuItem::class] | UI\MenuItem', 'return_type': 'UI\MenuItem'},
\   },
\},
\'ui\menuitem': {
\   'name': 'UI\MenuItem',
\   'methods': {
\     'isChecked': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'ui\point': {
\   'name': 'UI\Point',
\   'properties': {
\     'x': { 'initializer': '', 'type': ''},
\     'y': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     '__construct': { 'signature': 'float $x, float $y', 'return_type': ''},
\     'getX': { 'signature': 'void | float', 'return_type': 'float'},
\     'getY': { 'signature': 'void | float', 'return_type': 'float'},
\   },
\   'static_methods': {
\     'at': { 'signature': 'UI\Size $size | UI\Point', 'return_type': 'UI\Point'},
\   },
\},
\'ui\size': {
\   'name': 'UI\Size',
\   'properties': {
\     'width': { 'initializer': '', 'type': ''},
\     'height': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     '__construct': { 'signature': 'float $width, float $height', 'return_type': ''},
\     'getHeight': { 'signature': 'void | float', 'return_type': 'float'},
\     'getWidth': { 'signature': 'void | float', 'return_type': 'float'},
\   },
\   'static_methods': {
\     'of': { 'signature': 'UI\Point $point | UI\Size', 'return_type': 'UI\Size'},
\   },
\},
\'ui\window': {
\   'name': 'UI\Window',
\   'properties': {
\     'controls': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     '__construct': { 'signature': 'string $title, Size $size [, bool $menu = FALSE]', 'return_type': ''},
\     'getSize': { 'signature': 'void | UI\Size', 'return_type': 'UI\Size'},
\     'getTitle': { 'signature': 'void | string', 'return_type': 'string'},
\     'hasBorders': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'hasMargin': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isFullScreen': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'onClosing': { 'signature': 'void | int', 'return_type': 'int'},
\     'open': { 'signature': 'void | string', 'return_type': 'string'},
\     'save': { 'signature': 'void | string', 'return_type': 'string'},
\     'getParent': { 'signature': 'void | UI\Control', 'return_type': 'UI\Control'},
\     'getTopLevel': { 'signature': 'void | int', 'return_type': 'int'},
\     'isEnabled': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isVisible': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['v8js'] = {
\'v8js': {
\   'name': 'V8Js',
\   'constants': {
\     'V8_VERSION': '',
\     'FLAG_NONE': '1',
\     'FLAG_FORCE_ARRAY': '2',
\   },
\   'methods': {
\     '__construct': { 'signature': '[ string $object_name = "PHP" [, array $variables = array() [, array $extensions = array() [, bool $report_uncaught_exceptions = TRUE]]]]', 'return_type': ''},
\     'executeString': { 'signature': 'string $script [, string $identifier = "V8Js::executeString()" [, int $flags = V8Js::FLAG_NONE]] | mixed', 'return_type': 'mixed'},
\     'getPendingException': { 'signature': 'void | V8JsException', 'return_type': 'V8JsException'},
\   },
\   'static_methods': {
\     'getExtensions': { 'signature': 'void | array', 'return_type': 'array'},
\     'registerExtension': { 'signature': 'string $extension_name, string $script [, array $dependencies = array() [, bool $auto_enable = FALSE]] | bool', 'return_type': 'bool'},
\   },
\},
\'v8jsexception': {
\   'name': 'V8JsException',
\   'properties': {
\     'JsFileName': { 'initializer': '', 'type': ''},
\     'JsLineNumber': { 'initializer': '', 'type': ''},
\     'JsSourceLine': { 'initializer': '', 'type': ''},
\     'JsTrace': { 'initializer': '', 'type': ''},
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getJsFileName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getJsLineNumber': { 'signature': 'void | int', 'return_type': 'int'},
\     'getJsSourceLine': { 'signature': 'void | string', 'return_type': 'string'},
\     'getJsTrace': { 'signature': 'void | string', 'return_type': 'string'},
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['varnish'] = {
\'varnishadmin': {
\   'name': 'VarnishAdmin',
\   'methods': {
\     'auth': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'ban': { 'signature': 'string $vcl_regex | int', 'return_type': 'int'},
\     'banUrl': { 'signature': 'string $vcl_regex | int', 'return_type': 'int'},
\     'clearPanic': { 'signature': 'void | int', 'return_type': 'int'},
\     'connect': { 'signature': 'void | bool', 'return_type': 'bool'},
\     '__construct': { 'signature': '[ array $args]', 'return_type': ''},
\     'disconnect': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getPanic': { 'signature': 'void | string', 'return_type': 'string'},
\     'getParams': { 'signature': 'void | array', 'return_type': 'array'},
\     'isRunning': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'setCompat': { 'signature': 'int $compat | void', 'return_type': 'void'},
\     'setHost': { 'signature': 'string $host | void', 'return_type': 'void'},
\     'setIdent': { 'signature': 'string $ident | void', 'return_type': 'void'},
\     'setParam': { 'signature': 'string $name, string|integer $value | int', 'return_type': 'int'},
\     'setPort': { 'signature': 'int $port | void', 'return_type': 'void'},
\     'setSecret': { 'signature': 'string $secret | void', 'return_type': 'void'},
\     'setTimeout': { 'signature': 'int $timeout | void', 'return_type': 'void'},
\     'start': { 'signature': 'void | int', 'return_type': 'int'},
\     'stop': { 'signature': 'void | int', 'return_type': 'int'},
\   },
\},
\'varnishlog': {
\   'name': 'VarnishLog',
\   'constants': {
\     'TAG_Debug': '0',
\     'TAG_Error': '1',
\     'TAG_CLI': '2',
\     'TAG_StatSess': '3',
\     'TAG_ReqEnd': '4',
\     'TAG_SessionOpen': '5',
\     'TAG_SessionClose': '6',
\     'TAG_BackendOpen': '7',
\     'TAG_BackendXID': '8',
\     'TAG_BackendReuse': '9',
\     'TAG_BackendClose': '10',
\     'TAG_HttpGarbage': '11',
\     'TAG_Backend': '12',
\     'TAG_Length': '13',
\     'TAG_FetchError': '14',
\     'TAG_RxRequest': '15',
\     'TAG_RxResponse': '16',
\     'TAG_RxStatus': '17',
\     'TAG_RxURL': '18',
\     'TAG_RxProtocol': '19',
\     'TAG_RxHeader': '20',
\     'TAG_TxRequest': '21',
\     'TAG_TxResponse': '22',
\     'TAG_TxStatus': '23',
\     'TAG_TxURL': '24',
\     'TAG_TxProtocol': '25',
\     'TAG_TxHeader': '26',
\     'TAG_ObjRequest': '27',
\     'TAG_ObjResponse': '28',
\     'TAG_ObjStatus': '29',
\     'TAG_ObjURL': '30',
\     'TAG_ObjProtocol': '31',
\     'TAG_ObjHeader': '32',
\     'TAG_LostHeader': '33',
\     'TAG_TTL': '34',
\     'TAG_Fetch_Body': '35',
\     'TAG_VCL_acl': '36',
\     'TAG_VCL_call': '37',
\     'TAG_VCL_trace': '38',
\     'TAG_VCL_return': '39',
\     'TAG_VCL_error': '40',
\     'TAG_ReqStart': '41',
\     'TAG_Hit': '42',
\     'TAG_HitPass': '43',
\     'TAG_ExpBan': '44',
\     'TAG_ExpKill': '45',
\     'TAG_WorkThread': '46',
\     'TAG_ESI_xmlerror': '47',
\     'TAG_Hash': '48',
\     'TAG_Backend_health': '49',
\     'TAG_VCL_Log': '50',
\     'TAG_Gzip': '51',
\   },
\   'methods': {
\     '__construct': { 'signature': '[ array $args]', 'return_type': ''},
\     'getLine': { 'signature': 'void | array', 'return_type': 'array'},
\   },
\   'static_methods': {
\     'getTagName': { 'signature': 'int $index | string', 'return_type': 'string'},
\   },
\},
\'varnishstat': {
\   'name': 'VarnishStat',
\   'methods': {
\     '__construct': { 'signature': '[ array $args]', 'return_type': ''},
\     'getSnapshot': { 'signature': 'void | array', 'return_type': 'array'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['xlswriter'] = {
\'vtiful\kernel\excel': {
\   'name': 'Vtiful\Kernel\Excel',
\   'methods': {
\     '__construct': { 'signature': 'array $config', 'return_type': ''},
\   },
\},
\'vtiful\kernel\format': {
\   'name': 'Vtiful\Kernel\Format',
\   'constants': {
\     'FORMAT_ALIGN_LEFT': '1',
\     'FORMAT_ALIGN_CENTER': '2',
\     'FORMAT_ALIGN_RIGHT': '3',
\     'FORMAT_ALIGN_FILL': '4',
\     'FORMAT_ALIGN_JUSTIFY': '5',
\     'FORMAT_ALIGN_CENTER_ACROSS': '6',
\     'FORMAT_ALIGN_DISTRIBUTED': '7',
\     'FORMAT_ALIGN_VERTICAL_TOP': '8',
\     'FORMAT_ALIGN_VERTICAL_BOTTOM': '9',
\     'FORMAT_ALIGN_VERTICAL_CENTER': '10',
\     'FORMAT_ALIGN_VERTICAL_JUSTIFY': '11',
\     'FORMAT_ALIGN_VERTICAL_DISTRIBUTED': '12',
\     'UNDERLINE_SINGLE': '1',
\     'UNDERLINE_DOUBLE': '2',
\     'UNDERLINE_SINGLE_ACCOUNTING': '3',
\     'UNDERLINE_DOUBLE_ACCOUNTING': '4',
\   },
\},
\}
let g:phpcomplete_builtin['classes']['weakref'] = {
\'weakmap': {
\   'name': 'WeakMap',
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'count': { 'signature': 'void | int', 'return_type': 'int'},
\     'current': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'key': { 'signature': 'void | object', 'return_type': 'object'},
\     'next': { 'signature': 'void | void', 'return_type': 'void'},
\     'offsetExists': { 'signature': 'object $object | bool', 'return_type': 'bool'},
\     'offsetGet': { 'signature': 'object $object | mixed', 'return_type': 'mixed'},
\     'offsetSet': { 'signature': 'object $object, mixed $value | void', 'return_type': 'void'},
\     'offsetUnset': { 'signature': 'object $object | void', 'return_type': 'void'},
\     'rewind': { 'signature': 'void | void', 'return_type': 'void'},
\     'valid': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'weakref': {
\   'name': 'WeakRef',
\   'methods': {
\     '__construct': { 'signature': 'object $object', 'return_type': ''},
\     'acquire': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'get': { 'signature': 'void | object', 'return_type': 'object'},
\     'release': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'valid': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['wkhtmltox'] = {
\'wkhtmltox\image\converter': {
\   'name': 'wkhtmltox\Image\Converter',
\   'methods': {
\     '__construct': { 'signature': '[ string $buffer [, array $settings]]', 'return_type': ''},
\     'convert': { 'signature': 'void | ?string', 'return_type': '?string'},
\     'getVersion': { 'signature': 'void | string', 'return_type': 'string'},
\   },
\},
\'wkhtmltox\pdf\converter': {
\   'name': 'wkhtmltox\PDF\Converter',
\   'methods': {
\     '__construct': { 'signature': '[ array $settings]', 'return_type': ''},
\     'add': { 'signature': 'wkhtmltox\PDF\Object $object | void', 'return_type': 'void'},
\     'convert': { 'signature': 'void | ?string', 'return_type': '?string'},
\     'getVersion': { 'signature': 'void | string', 'return_type': 'string'},
\   },
\},
\'wkhtmltox\pdf\object': {
\   'name': 'wkhtmltox\PDF\Object',
\   'methods': {
\     '__construct': { 'signature': 'string $buffer [, array $settings]', 'return_type': ''},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['xmldiff'] = {
\'xmldiff\base': {
\   'name': 'XMLDiff\Base',
\   'methods': {
\     '__construct': { 'signature': 'string $nsname', 'return_type': ''},
\     'diff': { 'signature': 'mixed $from, mixed $to | mixed', 'return_type': 'mixed'},
\     'merge': { 'signature': 'mixed $src, mixed $diff | mixed', 'return_type': 'mixed'},
\   },
\},
\'xmldiff\dom': {
\   'name': 'XMLDiff\DOM',
\   'methods': {
\     'diff': { 'signature': 'mixed $from, mixed $to | mixed', 'return_type': 'mixed'},
\     'merge': { 'signature': 'mixed $src, mixed $diff | mixed', 'return_type': 'mixed'},
\     '__construct': { 'signature': 'string $nsname', 'return_type': ''},
\   },
\},
\'xmldiff\file': {
\   'name': 'XMLDiff\File',
\   'methods': {
\     'diff': { 'signature': 'mixed $from, mixed $to | mixed', 'return_type': 'mixed'},
\     'merge': { 'signature': 'mixed $src, mixed $diff | mixed', 'return_type': 'mixed'},
\     '__construct': { 'signature': 'string $nsname', 'return_type': ''},
\   },
\},
\'xmldiff\memory': {
\   'name': 'XMLDiff\Memory',
\   'methods': {
\     'diff': { 'signature': 'mixed $from, mixed $to | mixed', 'return_type': 'mixed'},
\     'merge': { 'signature': 'mixed $src, mixed $diff | mixed', 'return_type': 'mixed'},
\     '__construct': { 'signature': 'string $nsname', 'return_type': ''},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['xmlreader'] = {
\'xmlreader': {
\   'name': 'XMLReader',
\   'constants': {
\     'NONE': '0',
\     'ELEMENT': '1',
\     'ATTRIBUTE': '2',
\     'TEXT': '3',
\     'CDATA': '4',
\     'ENTITY_REF': '5',
\     'ENTITY': '6',
\     'PI': '7',
\     'COMMENT': '8',
\     'DOC': '9',
\     'DOC_TYPE': '10',
\     'DOC_FRAGMENT': '11',
\     'NOTATION': '12',
\     'WHITESPACE': '13',
\     'SIGNIFICANT_WHITESPACE': '14',
\     'END_ELEMENT': '15',
\     'END_ENTITY': '16',
\     'XML_DECLARATION': '17',
\     'LOADDTD': '1',
\     'DEFAULTATTRS': '2',
\     'VALIDATE': '3',
\     'SUBST_ENTITIES': '4',
\   },
\   'properties': {
\     'attributeCount': { 'initializer': '', 'type': 'int'},
\     'baseURI': { 'initializer': '', 'type': 'string'},
\     'depth': { 'initializer': '', 'type': 'int'},
\     'hasAttributes': { 'initializer': '', 'type': 'bool'},
\     'hasValue': { 'initializer': '', 'type': 'bool'},
\     'isDefault': { 'initializer': '', 'type': 'bool'},
\     'isEmptyElement': { 'initializer': '', 'type': 'bool'},
\     'localName': { 'initializer': '', 'type': 'string'},
\     'name': { 'initializer': '', 'type': 'string'},
\     'namespaceURI': { 'initializer': '', 'type': 'string'},
\     'nodeType': { 'initializer': '', 'type': 'int'},
\     'prefix': { 'initializer': '', 'type': 'string'},
\     'value': { 'initializer': '', 'type': 'string'},
\     'xmlLang': { 'initializer': '', 'type': 'string'},
\   },
\   'methods': {
\     'close': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'expand': { 'signature': '[ DOMNode $basenode] | DOMNode', 'return_type': 'DOMNode'},
\     'getAttribute': { 'signature': 'string $name | string', 'return_type': 'string'},
\     'getAttributeNo': { 'signature': 'int $index | string', 'return_type': 'string'},
\     'getAttributeNs': { 'signature': 'string $localName, string $namespaceURI | string', 'return_type': 'string'},
\     'getParserProperty': { 'signature': 'int $property | bool', 'return_type': 'bool'},
\     'isValid': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'lookupNamespace': { 'signature': 'string $prefix | string', 'return_type': 'string'},
\     'moveToAttribute': { 'signature': 'string $name | bool', 'return_type': 'bool'},
\     'moveToAttributeNo': { 'signature': 'int $index | bool', 'return_type': 'bool'},
\     'moveToAttributeNs': { 'signature': 'string $localName, string $namespaceURI | bool', 'return_type': 'bool'},
\     'moveToElement': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'moveToFirstAttribute': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'moveToNextAttribute': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'next': { 'signature': '[ string $localname] | bool', 'return_type': 'bool'},
\     'open': { 'signature': 'string $URI [, string $encoding [, int $options = 0]] | bool', 'return_type': 'bool'},
\     'read': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'readInnerXml': { 'signature': 'void | string', 'return_type': 'string'},
\     'readOuterXml': { 'signature': 'void | string', 'return_type': 'string'},
\     'readString': { 'signature': 'void | string', 'return_type': 'string'},
\     'setParserProperty': { 'signature': 'int $property, bool $value | bool', 'return_type': 'bool'},
\     'setRelaxNGSchema': { 'signature': 'string $filename | bool', 'return_type': 'bool'},
\     'setRelaxNGSchemaSource': { 'signature': 'string $source | bool', 'return_type': 'bool'},
\     'setSchema': { 'signature': 'string $filename | bool', 'return_type': 'bool'},
\     'xml': { 'signature': 'string $source [, string $encoding [, int $options = 0]] | bool', 'return_type': 'bool'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['xsl'] = {
\'xsltprocessor': {
\   'name': 'XSLTProcessor',
\   'methods': {
\     'getParameter': { 'signature': 'string $namespaceURI, string $localName | string', 'return_type': 'string'},
\     'getSecurityPrefs': { 'signature': 'void | int', 'return_type': 'int'},
\     'hasExsltSupport': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'importStylesheet': { 'signature': 'object $stylesheet | bool', 'return_type': 'bool'},
\     'registerPHPFunctions': { 'signature': '[ mixed $restrict] | void', 'return_type': 'void'},
\     'removeParameter': { 'signature': 'string $namespaceURI, string $localName | bool', 'return_type': 'bool'},
\     'setParameter': { 'signature': 'string $namespace, string $name, string $value | bool', 'return_type': 'bool'},
\     'setProfiling': { 'signature': 'string $filename | bool', 'return_type': 'bool'},
\     'setSecurityPrefs': { 'signature': 'int $securityPrefs | int', 'return_type': 'int'},
\     'transformToDoc': { 'signature': 'DOMNode $doc | DOMDocument', 'return_type': 'DOMDocument'},
\     'transformToURI': { 'signature': 'DOMDocument $doc, string $uri | int', 'return_type': 'int'},
\     'transformToXml': { 'signature': 'object $doc | string', 'return_type': 'string'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['yaconf'] = {
\'yaconf': {
\   'name': 'Yaconf',
\   'static_methods': {
\     'get': { 'signature': 'string $name [, mixed $default_value = NULL] | mixed', 'return_type': 'mixed'},
\     'has': { 'signature': 'string $name | bool', 'return_type': 'bool'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['yaf'] = {
\'yaf_action_abstract': {
\   'name': 'Yaf_Action_Abstract',
\   'properties': {
\     '_controller': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     'execute': { 'signature': '[ mixed $arg [, mixed $...]] | mixed', 'return_type': 'mixed'},
\     'getController': { 'signature': 'void | Yaf_Controller_Abstract', 'return_type': 'Yaf_Controller_Abstract'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'display': { 'signature': 'string $tpl [, array $parameters] | bool', 'return_type': 'bool'},
\     'forward': { 'signature': 'string $action [, array $paramters] | void', 'return_type': 'void'},
\     'getInvokeArg': { 'signature': 'string $name | void', 'return_type': 'void'},
\     'getInvokeArgs': { 'signature': 'void | void', 'return_type': 'void'},
\     'getModuleName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getRequest': { 'signature': 'void | Yaf_Request_Abstract', 'return_type': 'Yaf_Request_Abstract'},
\     'getResponse': { 'signature': 'void | Yaf_Response_Abstract', 'return_type': 'Yaf_Response_Abstract'},
\     'getView': { 'signature': 'void | Yaf_View_Interface', 'return_type': 'Yaf_View_Interface'},
\     'getViewpath': { 'signature': 'void | string', 'return_type': 'string'},
\     'init': { 'signature': 'void | void', 'return_type': 'void'},
\     'initView': { 'signature': '[ array $options] | void', 'return_type': 'void'},
\     'redirect': { 'signature': 'string $url | bool', 'return_type': 'bool'},
\     'render': { 'signature': 'string $tpl [, array $parameters] | string', 'return_type': 'string'},
\     'setViewpath': { 'signature': 'string $view_directory | void', 'return_type': 'void'},
\   },
\},
\'yaf_application': {
\   'name': 'Yaf_Application',
\   'properties': {
\     'config': { 'initializer': '', 'type': ''},
\     'dispatcher': { 'initializer': '', 'type': ''},
\     '_modules': { 'initializer': '', 'type': ''},
\     '_running': { 'initializer': '', 'type': ''},
\     '_environ': { 'initializer': '', 'type': ''},
\   },
\   'static_properties': {
\     '$_app': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     'bootstrap': { 'signature': '[ Yaf_Bootstrap_Abstract $bootstrap] | void', 'return_type': 'void'},
\     'clearLastError': { 'signature': 'void | Yaf_Application', 'return_type': 'Yaf_Application'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\     '__construct': { 'signature': 'mixed $config [, string $envrion]', 'return_type': ''},
\     '__destruct': { 'signature': 'void | void', 'return_type': 'void'},
\     'environ': { 'signature': 'void | void', 'return_type': 'void'},
\     'execute': { 'signature': 'callable $entry, string $... | void', 'return_type': 'void'},
\     'getAppDirectory': { 'signature': 'void | Yaf_Application', 'return_type': 'Yaf_Application'},
\     'getConfig': { 'signature': 'void | Yaf_Config_Abstract', 'return_type': 'Yaf_Config_Abstract'},
\     'getDispatcher': { 'signature': 'void | Yaf_Dispatcher', 'return_type': 'Yaf_Dispatcher'},
\     'getLastErrorMsg': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLastErrorNo': { 'signature': 'void | int', 'return_type': 'int'},
\     'getModules': { 'signature': 'void | array', 'return_type': 'array'},
\     'run': { 'signature': 'void | void', 'return_type': 'void'},
\     'setAppDirectory': { 'signature': 'string $directory | Yaf_Application', 'return_type': 'Yaf_Application'},
\     '__sleep': { 'signature': 'void | void', 'return_type': 'void'},
\     '__wakeup': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\   'static_methods': {
\     'app': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\   },
\},
\'yaf_bootstrap_abstract': {
\   'name': 'Yaf_Bootstrap_Abstract',
\},
\'yaf_config_abstract': {
\   'name': 'Yaf_Config_Abstract',
\   'properties': {
\     '_config': { 'initializer': '', 'type': ''},
\     '_readonly': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     'get': { 'signature': 'string $name, mixed $value | mixed', 'return_type': 'mixed'},
\     'readonly': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'set': { 'signature': 'void | Yaf_Config_Abstract', 'return_type': 'Yaf_Config_Abstract'},
\     'toArray': { 'signature': 'void | array', 'return_type': 'array'},
\   },
\},
\'yaf_config_ini': {
\   'name': 'Yaf_Config_Ini',
\   'methods': {
\     '__construct': { 'signature': 'string $config_file [, string $section]', 'return_type': ''},
\     'count': { 'signature': 'void | void', 'return_type': 'void'},
\     'current': { 'signature': 'void | void', 'return_type': 'void'},
\     '__get': { 'signature': '[ string $name] | void', 'return_type': 'void'},
\     '__isset': { 'signature': 'string $name | void', 'return_type': 'void'},
\     'key': { 'signature': 'void | void', 'return_type': 'void'},
\     'next': { 'signature': 'void | void', 'return_type': 'void'},
\     'offsetExists': { 'signature': 'string $name | void', 'return_type': 'void'},
\     'offsetGet': { 'signature': 'string $name | void', 'return_type': 'void'},
\     'offsetSet': { 'signature': 'string $name, string $value | void', 'return_type': 'void'},
\     'offsetUnset': { 'signature': 'string $name | void', 'return_type': 'void'},
\     'readonly': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'rewind': { 'signature': 'void | void', 'return_type': 'void'},
\     '__set': { 'signature': 'string $name, mixed $value | void', 'return_type': 'void'},
\     'toArray': { 'signature': 'void | array', 'return_type': 'array'},
\     'valid': { 'signature': 'void | void', 'return_type': 'void'},
\     'get': { 'signature': 'string $name, mixed $value | mixed', 'return_type': 'mixed'},
\     'set': { 'signature': 'void | Yaf_Config_Abstract', 'return_type': 'Yaf_Config_Abstract'},
\   },
\},
\'yaf_config_simple': {
\   'name': 'Yaf_Config_Simple',
\   'properties': {
\     '_readonly': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     '__construct': { 'signature': 'string $config_file [, string $section]', 'return_type': ''},
\     'count': { 'signature': 'void | void', 'return_type': 'void'},
\     'current': { 'signature': 'void | void', 'return_type': 'void'},
\     '__get': { 'signature': '[ string $name] | void', 'return_type': 'void'},
\     '__isset': { 'signature': 'string $name | void', 'return_type': 'void'},
\     'key': { 'signature': 'void | void', 'return_type': 'void'},
\     'next': { 'signature': 'void | void', 'return_type': 'void'},
\     'offsetExists': { 'signature': 'string $name | void', 'return_type': 'void'},
\     'offsetGet': { 'signature': 'string $name | void', 'return_type': 'void'},
\     'offsetSet': { 'signature': 'string $name, string $value | void', 'return_type': 'void'},
\     'offsetUnset': { 'signature': 'string $name | void', 'return_type': 'void'},
\     'readonly': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'rewind': { 'signature': 'void | void', 'return_type': 'void'},
\     '__set': { 'signature': 'string $name, string $value | void', 'return_type': 'void'},
\     'toArray': { 'signature': 'void | array', 'return_type': 'array'},
\     'valid': { 'signature': 'void | void', 'return_type': 'void'},
\     'get': { 'signature': 'string $name, mixed $value | mixed', 'return_type': 'mixed'},
\     'set': { 'signature': 'void | Yaf_Config_Abstract', 'return_type': 'Yaf_Config_Abstract'},
\   },
\},
\'yaf_controller_abstract': {
\   'name': 'Yaf_Controller_Abstract',
\   'properties': {
\     'actions': { 'initializer': '', 'type': ''},
\     '_module': { 'initializer': '', 'type': ''},
\     '_name': { 'initializer': '', 'type': ''},
\     '_request': { 'initializer': '', 'type': ''},
\     '_response': { 'initializer': '', 'type': ''},
\     '_invoke_args': { 'initializer': '', 'type': ''},
\     '_view': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'display': { 'signature': 'string $tpl [, array $parameters] | bool', 'return_type': 'bool'},
\     'forward': { 'signature': 'string $action [, array $paramters] | void', 'return_type': 'void'},
\     'getInvokeArg': { 'signature': 'string $name | void', 'return_type': 'void'},
\     'getInvokeArgs': { 'signature': 'void | void', 'return_type': 'void'},
\     'getModuleName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getRequest': { 'signature': 'void | Yaf_Request_Abstract', 'return_type': 'Yaf_Request_Abstract'},
\     'getResponse': { 'signature': 'void | Yaf_Response_Abstract', 'return_type': 'Yaf_Response_Abstract'},
\     'getView': { 'signature': 'void | Yaf_View_Interface', 'return_type': 'Yaf_View_Interface'},
\     'getViewpath': { 'signature': 'void | string', 'return_type': 'string'},
\     'init': { 'signature': 'void | void', 'return_type': 'void'},
\     'initView': { 'signature': '[ array $options] | void', 'return_type': 'void'},
\     'redirect': { 'signature': 'string $url | bool', 'return_type': 'bool'},
\     'render': { 'signature': 'string $tpl [, array $parameters] | string', 'return_type': 'string'},
\     'setViewpath': { 'signature': 'string $view_directory | void', 'return_type': 'void'},
\   },
\},
\'yaf_dispatcher': {
\   'name': 'Yaf_Dispatcher',
\   'properties': {
\     '_router': { 'initializer': '', 'type': ''},
\     '_view': { 'initializer': '', 'type': ''},
\     '_request': { 'initializer': '', 'type': ''},
\     '_plugins': { 'initializer': '', 'type': ''},
\     '_auto_render': { 'initializer': '', 'type': ''},
\     '_return_response': { 'initializer': '', 'type': ''},
\     '_instantly_flush': { 'initializer': '', 'type': ''},
\     '_default_module': { 'initializer': '', 'type': ''},
\     '_default_controller': { 'initializer': '', 'type': ''},
\     '_default_action': { 'initializer': '', 'type': ''},
\   },
\   'static_properties': {
\     '$_instance': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     'autoRender': { 'signature': '[ bool $flag] | Yaf_Dispatcher', 'return_type': 'Yaf_Dispatcher'},
\     'catchException': { 'signature': '[ bool $flag] | Yaf_Dispatcher', 'return_type': 'Yaf_Dispatcher'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'disableView': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'dispatch': { 'signature': 'Yaf_Request_Abstract $request | Yaf_Response_Abstract', 'return_type': 'Yaf_Response_Abstract'},
\     'enableView': { 'signature': 'void | Yaf_Dispatcher', 'return_type': 'Yaf_Dispatcher'},
\     'flushInstantly': { 'signature': '[ bool $flag] | Yaf_Dispatcher', 'return_type': 'Yaf_Dispatcher'},
\     'getApplication': { 'signature': 'void | Yaf_Application', 'return_type': 'Yaf_Application'},
\     'getRequest': { 'signature': 'void | Yaf_Request_Abstract', 'return_type': 'Yaf_Request_Abstract'},
\     'getRouter': { 'signature': 'void | Yaf_Router', 'return_type': 'Yaf_Router'},
\     'initView': { 'signature': 'string $templates_dir [, array $options] | Yaf_View_Interface', 'return_type': 'Yaf_View_Interface'},
\     'registerPlugin': { 'signature': 'Yaf_Plugin_Abstract $plugin | Yaf_Dispatcher', 'return_type': 'Yaf_Dispatcher'},
\     'returnResponse': { 'signature': 'bool $flag | Yaf_Dispatcher', 'return_type': 'Yaf_Dispatcher'},
\     'setDefaultAction': { 'signature': 'string $action | Yaf_Dispatcher', 'return_type': 'Yaf_Dispatcher'},
\     'setDefaultController': { 'signature': 'string $controller | Yaf_Dispatcher', 'return_type': 'Yaf_Dispatcher'},
\     'setDefaultModule': { 'signature': 'string $module | Yaf_Dispatcher', 'return_type': 'Yaf_Dispatcher'},
\     'setErrorHandler': { 'signature': 'call $callback, int $error_types | Yaf_Dispatcher', 'return_type': 'Yaf_Dispatcher'},
\     'setRequest': { 'signature': 'Yaf_Request_Abstract $request | Yaf_Dispatcher', 'return_type': 'Yaf_Dispatcher'},
\     'setView': { 'signature': 'Yaf_View_Interface $view | Yaf_Dispatcher', 'return_type': 'Yaf_Dispatcher'},
\     '__sleep': { 'signature': 'void | void', 'return_type': 'void'},
\     'throwException': { 'signature': '[ bool $flag] | Yaf_Dispatcher', 'return_type': 'Yaf_Dispatcher'},
\     '__wakeup': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\   'static_methods': {
\     'getInstance': { 'signature': 'void | Yaf_Dispatcher', 'return_type': 'Yaf_Dispatcher'},
\   },
\},
\'yaf_exception_dispatchfailed': {
\   'name': 'Yaf_Exception_DispatchFailed',
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'getPrevious': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'yaf_exception_loadfailed_action': {
\   'name': 'Yaf_Exception_LoadFailed_Action',
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'getPrevious': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'yaf_exception_loadfailed_controller': {
\   'name': 'Yaf_Exception_LoadFailed_Controller',
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'getPrevious': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'yaf_exception_loadfailed_module': {
\   'name': 'Yaf_Exception_LoadFailed_Module',
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'getPrevious': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'yaf_exception_loadfailed_view': {
\   'name': 'Yaf_Exception_LoadFailed_View',
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'getPrevious': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'yaf_exception_loadfailed': {
\   'name': 'Yaf_Exception_LoadFailed',
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'getPrevious': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'yaf_exception_routerfailed': {
\   'name': 'Yaf_Exception_RouterFailed',
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'getPrevious': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'yaf_exception_startuperror': {
\   'name': 'Yaf_Exception_StartupError',
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'getPrevious': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'yaf_exception_typeerror': {
\   'name': 'Yaf_Exception_TypeError',
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'getPrevious': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'yaf_exception': {
\   'name': 'Yaf_Exception',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'yaf_loader': {
\   'name': 'Yaf_Loader',
\   'properties': {
\     '_local_ns': { 'initializer': '', 'type': ''},
\     '_library': { 'initializer': '', 'type': ''},
\     '_global_library': { 'initializer': '', 'type': ''},
\   },
\   'static_properties': {
\     '$_instance': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     'autoload': { 'signature': 'void | void', 'return_type': 'void'},
\     'clearLocalNamespace': { 'signature': 'void | void', 'return_type': 'void'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'getLibraryPath': { 'signature': '[ bool $is_global = FALSE] | Yaf_Loader', 'return_type': 'Yaf_Loader'},
\     'getLocalNamespace': { 'signature': 'void | void', 'return_type': 'void'},
\     'isLocalName': { 'signature': 'void | void', 'return_type': 'void'},
\     'registerLocalNamespace': { 'signature': 'mixed $prefix | void', 'return_type': 'void'},
\     'setLibraryPath': { 'signature': 'string $directory [, bool $is_global = FALSE] | Yaf_Loader', 'return_type': 'Yaf_Loader'},
\     '__sleep': { 'signature': 'void | void', 'return_type': 'void'},
\     '__wakeup': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\   'static_methods': {
\     'getInstance': { 'signature': 'void | void', 'return_type': 'void'},
\     'import': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'yaf_plugin_abstract': {
\   'name': 'Yaf_Plugin_Abstract',
\   'methods': {
\     'dispatchLoopShutdown': { 'signature': 'Yaf_Request_Abstract $request, Yaf_Response_Abstract $response | void', 'return_type': 'void'},
\     'dispatchLoopStartup': { 'signature': 'Yaf_Request_Abstract $request, Yaf_Response_Abstract $response | void', 'return_type': 'void'},
\     'postDispatch': { 'signature': 'Yaf_Request_Abstract $request, Yaf_Response_Abstract $response | void', 'return_type': 'void'},
\     'preDispatch': { 'signature': 'Yaf_Request_Abstract $request, Yaf_Response_Abstract $response | void', 'return_type': 'void'},
\     'preResponse': { 'signature': 'Yaf_Request_Abstract $request, Yaf_Response_Abstract $response | void', 'return_type': 'void'},
\     'routerShutdown': { 'signature': 'Yaf_Request_Abstract $request, Yaf_Response_Abstract $response | void', 'return_type': 'void'},
\     'routerStartup': { 'signature': 'Yaf_Request_Abstract $request, Yaf_Response_Abstract $response | void', 'return_type': 'void'},
\   },
\},
\'yaf_registry': {
\   'name': 'Yaf_Registry',
\   'properties': {
\     '_entries': { 'initializer': '', 'type': ''},
\   },
\   'static_properties': {
\     '$_instance': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\     '__construct': { 'signature': 'void', 'return_type': ''},
\   },
\   'static_methods': {
\     'del': { 'signature': 'string $name | void', 'return_type': 'void'},
\     'get': { 'signature': 'string $name | mixed', 'return_type': 'mixed'},
\     'has': { 'signature': 'string $name | bool', 'return_type': 'bool'},
\     'set': { 'signature': 'string $name, string $value | bool', 'return_type': 'bool'},
\   },
\},
\'yaf_request_abstract': {
\   'name': 'Yaf_Request_Abstract',
\   'constants': {
\     'SCHEME_HTTP': 'http',
\     'SCHEME_HTTPS': 'https',
\   },
\   'properties': {
\     'module': { 'initializer': '', 'type': ''},
\     'controller': { 'initializer': '', 'type': ''},
\     'action': { 'initializer': '', 'type': ''},
\     'method': { 'initializer': '', 'type': ''},
\     'params': { 'initializer': '', 'type': ''},
\     'language': { 'initializer': '', 'type': ''},
\     '_exception': { 'initializer': '', 'type': ''},
\     '_base_uri': { 'initializer': '', 'type': ''},
\     'uri': { 'initializer': '', 'type': ''},
\     'dispatched': { 'initializer': '', 'type': ''},
\     'routed': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     'getActionName': { 'signature': 'void | void', 'return_type': 'void'},
\     'getBaseUri': { 'signature': 'void | void', 'return_type': 'void'},
\     'getControllerName': { 'signature': 'void | void', 'return_type': 'void'},
\     'getEnv': { 'signature': 'string $name [, string $default] | void', 'return_type': 'void'},
\     'getException': { 'signature': 'void | void', 'return_type': 'void'},
\     'getLanguage': { 'signature': 'void | void', 'return_type': 'void'},
\     'getMethod': { 'signature': 'void | string', 'return_type': 'string'},
\     'getModuleName': { 'signature': 'void | void', 'return_type': 'void'},
\     'getParam': { 'signature': 'string $name [, string $default] | mixed', 'return_type': 'mixed'},
\     'getParams': { 'signature': 'void | array', 'return_type': 'array'},
\     'getRequestUri': { 'signature': 'void | void', 'return_type': 'void'},
\     'getServer': { 'signature': 'string $name [, string $default] | void', 'return_type': 'void'},
\     'isCli': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isDispatched': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isGet': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isHead': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isOptions': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isPost': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isPut': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isRouted': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isXmlHttpRequest': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'setActionName': { 'signature': 'string $action | void', 'return_type': 'void'},
\     'setBaseUri': { 'signature': 'string $uir | bool', 'return_type': 'bool'},
\     'setControllerName': { 'signature': 'string $controller | void', 'return_type': 'void'},
\     'setDispatched': { 'signature': 'void | void', 'return_type': 'void'},
\     'setModuleName': { 'signature': 'string $module | void', 'return_type': 'void'},
\     'setParam': { 'signature': 'string $name [, string $value] | bool', 'return_type': 'bool'},
\     'setRequestUri': { 'signature': 'string $uir | void', 'return_type': 'void'},
\     'setRouted': { 'signature': '[ string $flag] | void', 'return_type': 'void'},
\   },
\},
\'yaf_request_http': {
\   'name': 'Yaf_Request_Http',
\   'methods': {
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\     '__construct': { 'signature': '[ string $request_uri [, string $base_uri]]', 'return_type': ''},
\     'get': { 'signature': 'string $name [, string $default] | mixed', 'return_type': 'mixed'},
\     'getCookie': { 'signature': 'string $name [, string $default] | mixed', 'return_type': 'mixed'},
\     'getFiles': { 'signature': 'void | void', 'return_type': 'void'},
\     'getPost': { 'signature': 'string $name [, string $default] | mixed', 'return_type': 'mixed'},
\     'getQuery': { 'signature': 'string $name [, string $default] | mixed', 'return_type': 'mixed'},
\     'getRaw': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getRequest': { 'signature': 'void | void', 'return_type': 'void'},
\     'isXmlHttpRequest': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getActionName': { 'signature': 'void | void', 'return_type': 'void'},
\     'getBaseUri': { 'signature': 'void | void', 'return_type': 'void'},
\     'getControllerName': { 'signature': 'void | void', 'return_type': 'void'},
\     'getEnv': { 'signature': 'string $name [, string $default] | void', 'return_type': 'void'},
\     'getException': { 'signature': 'void | void', 'return_type': 'void'},
\     'getLanguage': { 'signature': 'void | void', 'return_type': 'void'},
\     'getMethod': { 'signature': 'void | string', 'return_type': 'string'},
\     'getModuleName': { 'signature': 'void | void', 'return_type': 'void'},
\     'getParam': { 'signature': 'string $name [, string $default] | mixed', 'return_type': 'mixed'},
\     'getParams': { 'signature': 'void | array', 'return_type': 'array'},
\     'getRequestUri': { 'signature': 'void | void', 'return_type': 'void'},
\     'getServer': { 'signature': 'string $name [, string $default] | void', 'return_type': 'void'},
\     'isCli': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isDispatched': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isGet': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isHead': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isOptions': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isPost': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isPut': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isRouted': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'setActionName': { 'signature': 'string $action | void', 'return_type': 'void'},
\     'setBaseUri': { 'signature': 'string $uir | bool', 'return_type': 'bool'},
\     'setControllerName': { 'signature': 'string $controller | void', 'return_type': 'void'},
\     'setDispatched': { 'signature': 'void | void', 'return_type': 'void'},
\     'setModuleName': { 'signature': 'string $module | void', 'return_type': 'void'},
\     'setParam': { 'signature': 'string $name [, string $value] | bool', 'return_type': 'bool'},
\     'setRequestUri': { 'signature': 'string $uir | void', 'return_type': 'void'},
\     'setRouted': { 'signature': '[ string $flag] | void', 'return_type': 'void'},
\   },
\},
\'yaf_request_simple': {
\   'name': 'Yaf_Request_Simple',
\   'constants': {
\     'SCHEME_HTTP': 'http',
\     'SCHEME_HTTPS': 'https',
\   },
\   'methods': {
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\     '__construct': { 'signature': '[ string $method [, string $module [, string $controller [, string $action [, array $params]]]]]', 'return_type': ''},
\     'get': { 'signature': 'void | void', 'return_type': 'void'},
\     'getCookie': { 'signature': 'void | void', 'return_type': 'void'},
\     'getFiles': { 'signature': 'void | void', 'return_type': 'void'},
\     'getPost': { 'signature': 'void | void', 'return_type': 'void'},
\     'getQuery': { 'signature': 'void | void', 'return_type': 'void'},
\     'getRequest': { 'signature': 'void | void', 'return_type': 'void'},
\     'isXmlHttpRequest': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getActionName': { 'signature': 'void | void', 'return_type': 'void'},
\     'getBaseUri': { 'signature': 'void | void', 'return_type': 'void'},
\     'getControllerName': { 'signature': 'void | void', 'return_type': 'void'},
\     'getEnv': { 'signature': 'string $name [, string $default] | void', 'return_type': 'void'},
\     'getException': { 'signature': 'void | void', 'return_type': 'void'},
\     'getLanguage': { 'signature': 'void | void', 'return_type': 'void'},
\     'getMethod': { 'signature': 'void | string', 'return_type': 'string'},
\     'getModuleName': { 'signature': 'void | void', 'return_type': 'void'},
\     'getParam': { 'signature': 'string $name [, string $default] | mixed', 'return_type': 'mixed'},
\     'getParams': { 'signature': 'void | array', 'return_type': 'array'},
\     'getRequestUri': { 'signature': 'void | void', 'return_type': 'void'},
\     'getServer': { 'signature': 'string $name [, string $default] | void', 'return_type': 'void'},
\     'isCli': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isDispatched': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isGet': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isHead': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isOptions': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isPost': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isPut': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isRouted': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'setActionName': { 'signature': 'string $action | void', 'return_type': 'void'},
\     'setBaseUri': { 'signature': 'string $uir | bool', 'return_type': 'bool'},
\     'setControllerName': { 'signature': 'string $controller | void', 'return_type': 'void'},
\     'setDispatched': { 'signature': 'void | void', 'return_type': 'void'},
\     'setModuleName': { 'signature': 'string $module | void', 'return_type': 'void'},
\     'setParam': { 'signature': 'string $name [, string $value] | bool', 'return_type': 'bool'},
\     'setRequestUri': { 'signature': 'string $uir | void', 'return_type': 'void'},
\     'setRouted': { 'signature': '[ string $flag] | void', 'return_type': 'void'},
\   },
\},
\'yaf_response_abstract': {
\   'name': 'Yaf_Response_Abstract',
\   'constants': {
\     'DEFAULT_BODY': '"content"',
\   },
\   'properties': {
\     '_header': { 'initializer': '', 'type': ''},
\     '_body': { 'initializer': '', 'type': ''},
\     '_sendheader': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     'appendBody': { 'signature': 'string $content [, string $key] | bool', 'return_type': 'bool'},
\     'clearBody': { 'signature': '[ string $key] | bool', 'return_type': 'bool'},
\     'clearHeaders': { 'signature': 'void | void', 'return_type': 'void'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     '__destruct': { 'signature': 'void | void', 'return_type': 'void'},
\     'getBody': { 'signature': '[ string $key] | mixed', 'return_type': 'mixed'},
\     'getHeader': { 'signature': 'void | void', 'return_type': 'void'},
\     'prependBody': { 'signature': 'string $content [, string $key] | bool', 'return_type': 'bool'},
\     'response': { 'signature': 'void | void', 'return_type': 'void'},
\     'setAllHeaders': { 'signature': 'void | void', 'return_type': 'void'},
\     'setBody': { 'signature': 'string $content [, string $key] | bool', 'return_type': 'bool'},
\     'setHeader': { 'signature': 'string $name, string $value [, bool $replace] | bool', 'return_type': 'bool'},
\     'setRedirect': { 'signature': 'void | void', 'return_type': 'void'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\   },
\},
\'yaf_route_interface': {
\   'name': 'Yaf_Route_Interface',
\   'methods': {
\     'assemble': { 'signature': 'array $info [, array $query] | string', 'return_type': 'string'},
\     'route': { 'signature': 'Yaf_Request_Abstract $request | bool', 'return_type': 'bool'},
\   },
\},
\'yaf_route_map': {
\   'name': 'Yaf_Route_Map',
\   'properties': {
\     '_ctl_router': { 'initializer': '', 'type': ''},
\     '_delimiter': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     'assemble': { 'signature': 'array $info [, array $query] | string', 'return_type': 'string'},
\     '__construct': { 'signature': '[ string $controller_prefer = FALSE [, string $delimiter = ""]]', 'return_type': ''},
\     'route': { 'signature': 'Yaf_Request_Abstract $request | bool', 'return_type': 'bool'},
\   },
\},
\'yaf_route_regex': {
\   'name': 'Yaf_Route_Regex',
\   'properties': {
\     '_route': { 'initializer': '', 'type': ''},
\     '_default': { 'initializer': '', 'type': ''},
\     '_maps': { 'initializer': '', 'type': ''},
\     '_verify': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     'assemble': { 'signature': 'array $info [, array $query] | string', 'return_type': 'string'},
\     '__construct': { 'signature': 'string $match, array $route [, array $map [, array $verify [, string $reverse]]]', 'return_type': ''},
\     'route': { 'signature': 'Yaf_Request_Abstract $request | bool', 'return_type': 'bool'},
\   },
\},
\'yaf_route_rewrite': {
\   'name': 'Yaf_Route_Rewrite',
\   'properties': {
\     '_route': { 'initializer': '', 'type': ''},
\     '_default': { 'initializer': '', 'type': ''},
\     '_verify': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     'assemble': { 'signature': 'array $info [, array $query] | string', 'return_type': 'string'},
\     '__construct': { 'signature': 'string $match, array $route [, array $verify]', 'return_type': ''},
\     'route': { 'signature': 'Yaf_Request_Abstract $request | bool', 'return_type': 'bool'},
\   },
\},
\'yaf_route_simple': {
\   'name': 'Yaf_Route_Simple',
\   'properties': {
\     'controller': { 'initializer': '', 'type': ''},
\     'module': { 'initializer': '', 'type': ''},
\     'action': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     'assemble': { 'signature': 'array $info [, array $query] | string', 'return_type': 'string'},
\     '__construct': { 'signature': 'string $module_name, string $controller_name, string $action_name', 'return_type': ''},
\     'route': { 'signature': 'Yaf_Request_Abstract $request | bool', 'return_type': 'bool'},
\   },
\},
\'yaf_route_static': {
\   'name': 'Yaf_Route_Static',
\   'methods': {
\     'assemble': { 'signature': 'array $info [, array $query] | string', 'return_type': 'string'},
\     'match': { 'signature': 'string $uri | void', 'return_type': 'void'},
\     'route': { 'signature': 'Yaf_Request_Abstract $request | bool', 'return_type': 'bool'},
\   },
\},
\'yaf_route_supervar': {
\   'name': 'Yaf_Route_Supervar',
\   'properties': {
\     '_var_name': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     'assemble': { 'signature': 'array $info [, array $query] | string', 'return_type': 'string'},
\     '__construct': { 'signature': 'string $supervar_name', 'return_type': ''},
\     'route': { 'signature': 'Yaf_Request_Abstract $request | bool', 'return_type': 'bool'},
\   },
\},
\'yaf_router': {
\   'name': 'Yaf_Router',
\   'properties': {
\     '_routes': { 'initializer': '', 'type': ''},
\     '_current': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     'addConfig': { 'signature': 'Yaf_Config_Abstract $config | bool', 'return_type': 'bool'},
\     'addRoute': { 'signature': 'string $name, Yaf_Route_Abstract $route | bool', 'return_type': 'bool'},
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'getCurrentRoute': { 'signature': 'void | string', 'return_type': 'string'},
\     'getRoute': { 'signature': 'string $name | Yaf_Route_Interface', 'return_type': 'Yaf_Route_Interface'},
\     'getRoutes': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'route': { 'signature': 'Yaf_Request_Abstract $request | bool', 'return_type': 'bool'},
\   },
\},
\'yaf_session': {
\   'name': 'Yaf_Session',
\   'properties': {
\     '_session': { 'initializer': '', 'type': ''},
\     '_started': { 'initializer': '', 'type': ''},
\   },
\   'static_properties': {
\     '$_instance': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'count': { 'signature': 'void | void', 'return_type': 'void'},
\     'current': { 'signature': 'void | void', 'return_type': 'void'},
\     'del': { 'signature': 'string $name | void', 'return_type': 'void'},
\     '__get': { 'signature': 'string $name | void', 'return_type': 'void'},
\     'has': { 'signature': 'string $name | void', 'return_type': 'void'},
\     '__isset': { 'signature': 'string $name | void', 'return_type': 'void'},
\     'key': { 'signature': 'void | void', 'return_type': 'void'},
\     'next': { 'signature': 'void | void', 'return_type': 'void'},
\     'offsetExists': { 'signature': 'string $name | void', 'return_type': 'void'},
\     'offsetGet': { 'signature': 'string $name | void', 'return_type': 'void'},
\     'offsetSet': { 'signature': 'string $name, string $value | void', 'return_type': 'void'},
\     'offsetUnset': { 'signature': 'string $name | void', 'return_type': 'void'},
\     'rewind': { 'signature': 'void | void', 'return_type': 'void'},
\     '__set': { 'signature': 'string $name, string $value | void', 'return_type': 'void'},
\     '__sleep': { 'signature': 'void | void', 'return_type': 'void'},
\     'start': { 'signature': 'void | void', 'return_type': 'void'},
\     '__unset': { 'signature': 'string $name | void', 'return_type': 'void'},
\     'valid': { 'signature': 'void | void', 'return_type': 'void'},
\     '__wakeup': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\   'static_methods': {
\     'getInstance': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'yaf_view_interface': {
\   'name': 'Yaf_View_Interface',
\   'methods': {
\     'assign': { 'signature': 'string $name [, string $value] | bool', 'return_type': 'bool'},
\     'display': { 'signature': 'string $tpl [, array $tpl_vars] | bool', 'return_type': 'bool'},
\     'getScriptPath': { 'signature': 'void | void', 'return_type': 'void'},
\     'render': { 'signature': 'string $tpl [, array $tpl_vars] | string', 'return_type': 'string'},
\     'setScriptPath': { 'signature': 'string $template_dir | void', 'return_type': 'void'},
\   },
\},
\'yaf_view_simple': {
\   'name': 'Yaf_View_Simple',
\   'properties': {
\     '_tpl_vars': { 'initializer': '', 'type': ''},
\     '_tpl_dir': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     'assign': { 'signature': 'string $name [, mixed $value] | bool', 'return_type': 'bool'},
\     'assignRef': { 'signature': 'string $name, mixed &$value | bool', 'return_type': 'bool'},
\     'clear': { 'signature': '[ string $name] | bool', 'return_type': 'bool'},
\     '__construct': { 'signature': 'string $template_dir [, array $options]', 'return_type': ''},
\     'display': { 'signature': 'string $tpl [, array $tpl_vars] | bool', 'return_type': 'bool'},
\     'eval': { 'signature': 'string $tpl_content [, array $tpl_vars] | string', 'return_type': 'string'},
\     '__get': { 'signature': '[ string $name] | void', 'return_type': 'void'},
\     'getScriptPath': { 'signature': 'void | string', 'return_type': 'string'},
\     '__isset': { 'signature': 'string $name | void', 'return_type': 'void'},
\     'render': { 'signature': 'string $tpl [, array $tpl_vars] | string', 'return_type': 'string'},
\     '__set': { 'signature': 'string $name, mixed $value | void', 'return_type': 'void'},
\     'setScriptPath': { 'signature': 'string $template_dir | bool', 'return_type': 'bool'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['yar'] = {
\'yar_client_exception': {
\   'name': 'Yar_Client_Exception',
\   'methods': {
\     'getType': { 'signature': 'void | string', 'return_type': 'string'},
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'yar_client': {
\   'name': 'Yar_Client',
\   'properties': {
\     '_protocol': { 'initializer': '', 'type': ''},
\     '_uri': { 'initializer': '', 'type': ''},
\     '_options': { 'initializer': '', 'type': ''},
\     '_running': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     '__call': { 'signature': 'string $method, array $parameters | void', 'return_type': 'void'},
\     '__construct': { 'signature': 'string $url [, array $options]', 'return_type': ''},
\     'setOpt': { 'signature': 'int $name, mixed $value | Yar_Client', 'return_type': 'Yar_Client'},
\   },
\},
\'yar_concurrent_client': {
\   'name': 'Yar_Concurrent_Client',
\   'static_properties': {
\     '$_callstack': { 'initializer': '', 'type': ''},
\     '$_callback': { 'initializer': '', 'type': ''},
\     '$_error_callback': { 'initializer': '', 'type': ''},
\   },
\   'static_methods': {
\     'call': { 'signature': 'string $uri, string $method [, array $parameters [, callable $callback [, callable $error_callback [, array $options]]]] | int', 'return_type': 'int'},
\     'loop': { 'signature': '[ callable $callback [, callable $error_callback]] | bool', 'return_type': 'bool'},
\     'reset': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'yar_server_exception': {
\   'name': 'Yar_Server_Exception',
\   'properties': {
\     '_type': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     'getType': { 'signature': 'void | string', 'return_type': 'string'},
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'yar_server': {
\   'name': 'Yar_Server',
\   'properties': {
\     '_executor': { 'initializer': '', 'type': ''},
\   },
\   'methods': {
\     '__construct': { 'signature': 'Object $obj', 'return_type': ''},
\     'handle': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['zip'] = {
\'ziparchive': {
\   'name': 'ZipArchive',
\   'properties': {
\     'status': { 'initializer': '', 'type': 'int'},
\     'statusSys': { 'initializer': '', 'type': 'int'},
\     'numFiles': { 'initializer': '', 'type': 'int'},
\     'filename': { 'initializer': '', 'type': 'string'},
\     'comment': { 'initializer': '', 'type': 'string'},
\   },
\   'methods': {
\     'addEmptyDir': { 'signature': 'string $dirname | bool', 'return_type': 'bool'},
\     'addFile': { 'signature': 'string $filename [, string $localname = NULL [, int $start = 0 [, int $length = 0]]] | bool', 'return_type': 'bool'},
\     'addFromString': { 'signature': 'string $localname, string $contents | bool', 'return_type': 'bool'},
\     'addGlob': { 'signature': 'string $pattern [, int $flags = 0 [, array $options = array()]] | bool', 'return_type': 'bool'},
\     'addPattern': { 'signature': 'string $pattern [, string $path = "." [, array $options = array()]] | bool', 'return_type': 'bool'},
\     'close': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'count': { 'signature': 'void | int', 'return_type': 'int'},
\     'deleteIndex': { 'signature': 'int $index | bool', 'return_type': 'bool'},
\     'deleteName': { 'signature': 'string $name | bool', 'return_type': 'bool'},
\     'extractTo': { 'signature': 'string $destination [, mixed $entries] | bool', 'return_type': 'bool'},
\     'getArchiveComment': { 'signature': '[ int $flags] | string', 'return_type': 'string'},
\     'getCommentIndex': { 'signature': 'int $index [, int $flags] | string', 'return_type': 'string'},
\     'getCommentName': { 'signature': 'string $name [, int $flags] | string', 'return_type': 'string'},
\     'GetExternalAttributesIndex': { 'signature': 'int $index, int &$opsys, int &$attr [, int $flags] | bool', 'return_type': 'bool'},
\     'getExternalAttributesName': { 'signature': 'string $name, int &$opsys, int &$attr [, int $flags] | bool', 'return_type': 'bool'},
\     'getFromIndex': { 'signature': 'int $index [, int $length = 0 [, int $flags]] | string', 'return_type': 'string'},
\     'getFromName': { 'signature': 'string $name [, int $length = 0 [, int $flags]] | string', 'return_type': 'string'},
\     'getNameIndex': { 'signature': 'int $index [, int $flags] | string', 'return_type': 'string'},
\     'getStatusString': { 'signature': 'void | string', 'return_type': 'string'},
\     'getStream': { 'signature': 'string $name | resource', 'return_type': 'resource'},
\     'locateName': { 'signature': 'string $name [, int $flags] | int', 'return_type': 'int'},
\     'open': { 'signature': 'string $filename [, int $flags] | mixed', 'return_type': 'mixed'},
\     'renameIndex': { 'signature': 'int $index, string $newname | bool', 'return_type': 'bool'},
\     'renameName': { 'signature': 'string $name, string $newname | bool', 'return_type': 'bool'},
\     'setArchiveComment': { 'signature': 'string $comment | bool', 'return_type': 'bool'},
\     'setCommentIndex': { 'signature': 'int $index, string $comment | bool', 'return_type': 'bool'},
\     'setCommentName': { 'signature': 'string $name, string $comment | bool', 'return_type': 'bool'},
\     'setCompressionIndex': { 'signature': 'int $index, int $comp_method [, int $comp_flags = 0] | bool', 'return_type': 'bool'},
\     'setCompressionName': { 'signature': 'string $name, int $comp_method [, int $comp_flags = 0] | bool', 'return_type': 'bool'},
\     'setEncryptionIndex': { 'signature': 'int $index, string $method [, string $password] | bool', 'return_type': 'bool'},
\     'setEncryptionName': { 'signature': 'string $name, int $method [, string $password] | bool', 'return_type': 'bool'},
\     'setExternalAttributesIndex': { 'signature': 'int $index, int $opsys, int $attr [, int $flags] | bool', 'return_type': 'bool'},
\     'setExternalAttributesName': { 'signature': 'string $name, int $opsys, int $attr [, int $flags] | bool', 'return_type': 'bool'},
\     'setPassword': { 'signature': 'string $password | bool', 'return_type': 'bool'},
\     'statIndex': { 'signature': 'int $index [, int $flags] | array', 'return_type': 'array'},
\     'statName': { 'signature': 'string $name [, int $flags] | array', 'return_type': 'array'},
\     'unchangeAll': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'unchangeArchive': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'unchangeIndex': { 'signature': 'int $index | bool', 'return_type': 'bool'},
\     'unchangeName': { 'signature': 'string $name | bool', 'return_type': 'bool'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['0mq_messaging'] = {
\'zmq': {
\   'name': 'ZMQ',
\   'constants': {
\     'SOCKET_PAIR': '',
\     'SOCKET_PUB': '',
\     'SOCKET_SUB': '',
\     'SOCKET_REQ': '',
\     'SOCKET_REP': '',
\     'SOCKET_XREQ': '',
\     'SOCKET_XREP': '',
\     'SOCKET_PUSH': '',
\     'SOCKET_PULL': '',
\     'SOCKET_ROUTER': '',
\     'SOCKET_DEALER': '',
\     'SOCKET_XPUB': '',
\     'SOCKET_XSUB': '',
\     'SOCKET_STREAM': '',
\     'SOCKOPT_HWM': '',
\     'SOCKOPT_SNDHWM': '',
\     'SOCKOPT_RCVHWM': '',
\     'SOCKOPT_AFFINITY': '',
\     'SOCKOPT_IDENTITY': '',
\     'SOCKOPT_SUBSCRIBE': '',
\     'SOCKOPT_UNSUBSCRIBE': '',
\     'SOCKOPT_RATE': '',
\     'SOCKOPT_RECOVERY_IVL': '',
\     'SOCKOPT_RECONNECT_IVL': '',
\     'SOCKOPT_RECONNECT_IVL_MAX': '',
\     'SOCKOPT_MCAST_LOOP': '',
\     'SOCKOPT_SNDBUF': '',
\     'SOCKOPT_RCVBUF': '',
\     'SOCKOPT_RCVMORE': '',
\     'SOCKOPT_TYPE': '',
\     'SOCKOPT_LINGER': '',
\     'SOCKOPT_BACKLOG': '',
\     'SOCKOPT_MAXMSGSIZE': '',
\     'SOCKOPT_SNDTIMEO': '',
\     'SOCKOPT_RCVTIMEO': '',
\     'SOCKOPT_IPV4ONLY': '',
\     'SOCKOPT_LAST_ENDPOINT': '',
\     'SOCKOPT_TCP_KEEPALIVE_IDLE': '',
\     'SOCKOPT_TCP_KEEPALIVE_CNT': '',
\     'SOCKOPT_TCP_KEEPALIVE_INTVL': '',
\     'SOCKOPT_TCP_ACCEPT_FILTER': '',
\     'SOCKOPT_DELAY_ATTACH_ON_CONNECT': '',
\     'SOCKOPT_XPUB_VERBOSE': '',
\     'SOCKOPT_ROUTER_RAW': '',
\     'SOCKOPT_IPV6': '',
\     'CTXOPT_MAX_SOCKETS': '',
\     'POLL_IN': '',
\     'POLL_OUT': '',
\     'MODE_NOBLOCK': '',
\     'MODE_DONTWAIT': '',
\     'MODE_SNDMORE': '',
\     'ERR_INTERNAL': '',
\     'ERR_EAGAIN': '',
\     'ERR_ENOTSUP': '',
\     'ERR_EFSM': '',
\     'ERR_ETERM': '',
\     'DEVICE_FORWARDER': '',
\     'DEVICE_QUEUE': '',
\     'DEVICE_STREAMER': '',
\   },
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\   },
\},
\'zmqcontext': {
\   'name': 'ZMQContext',
\   'methods': {
\     '__construct': { 'signature': '[ int $io_threads = 1 [, bool $is_persistent = TRUE]]', 'return_type': ''},
\     'getOpt': { 'signature': 'string $key | mixed', 'return_type': 'mixed'},
\     'getSocket': { 'signature': 'int $type [, string $persistent_id = NULL [, callback $on_new_socket = NULL]] | ZMQSocket', 'return_type': 'ZMQSocket'},
\     'isPersistent': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'setOpt': { 'signature': 'int $key, mixed $value | ZMQContext', 'return_type': 'ZMQContext'},
\   },
\},
\'zmqdevice': {
\   'name': 'ZMQDevice',
\   'methods': {
\     '__construct': { 'signature': 'ZMQSocket $frontend, ZMQSocket $backend [, ZMQSocket $listener]', 'return_type': ''},
\     'getIdleTimeout': { 'signature': 'void | ZMQDevice', 'return_type': 'ZMQDevice'},
\     'getTimerTimeout': { 'signature': 'void | ZMQDevice', 'return_type': 'ZMQDevice'},
\     'run': { 'signature': 'void | void', 'return_type': 'void'},
\     'setIdleCallback': { 'signature': 'callable $cb_func, int $timeout [, mixed $user_data] | ZMQDevice', 'return_type': 'ZMQDevice'},
\     'setIdleTimeout': { 'signature': 'int $timeout | ZMQDevice', 'return_type': 'ZMQDevice'},
\     'setTimerCallback': { 'signature': 'callable $cb_func, int $timeout [, mixed $user_data] | ZMQDevice', 'return_type': 'ZMQDevice'},
\     'setTimerTimeout': { 'signature': 'int $timeout | ZMQDevice', 'return_type': 'ZMQDevice'},
\   },
\},
\'zmqpoll': {
\   'name': 'ZMQPoll',
\   'methods': {
\     'add': { 'signature': 'mixed $entry, int $type | string', 'return_type': 'string'},
\     'clear': { 'signature': 'void | ZMQPoll', 'return_type': 'ZMQPoll'},
\     'count': { 'signature': 'void | int', 'return_type': 'int'},
\     'getLastErrors': { 'signature': 'void | array', 'return_type': 'array'},
\     'poll': { 'signature': 'array &$readable, array &$writable [, int $timeout = -1] | int', 'return_type': 'int'},
\     'remove': { 'signature': 'mixed $item | bool', 'return_type': 'bool'},
\   },
\},
\'zmqsocket': {
\   'name': 'ZMQSocket',
\   'methods': {
\     'bind': { 'signature': 'string $dsn [, bool $force = FALSE] | ZMQSocket', 'return_type': 'ZMQSocket'},
\     'connect': { 'signature': 'string $dsn [, bool $force = FALSE] | ZMQSocket', 'return_type': 'ZMQSocket'},
\     '__construct': { 'signature': 'ZMQContext $context, int $type [, string $persistent_id = NULL [, callback $on_new_socket = NULL]]', 'return_type': ''},
\     'disconnect': { 'signature': 'string $dsn | ZMQSocket', 'return_type': 'ZMQSocket'},
\     'getEndpoints': { 'signature': 'void | array', 'return_type': 'array'},
\     'getPersistentId': { 'signature': 'void | string', 'return_type': 'string'},
\     'getSocketType': { 'signature': 'void | int', 'return_type': 'int'},
\     'getSockOpt': { 'signature': 'string $key | mixed', 'return_type': 'mixed'},
\     'isPersistent': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'recv': { 'signature': '[ int $mode = 0] | string', 'return_type': 'string'},
\     'recvMulti': { 'signature': '[ int $mode = 0] | array', 'return_type': 'array'},
\     'send': { 'signature': 'array $message [, int $mode = 0] | ZMQSocket', 'return_type': 'ZMQSocket'},
\     'setSockOpt': { 'signature': 'int $key, mixed $value | ZMQSocket', 'return_type': 'ZMQSocket'},
\     'unbind': { 'signature': 'string $dsn | ZMQSocket', 'return_type': 'ZMQSocket'},
\   },
\},
\}
let g:phpcomplete_builtin['classes']['zookeeper'] = {
\'zookeeper': {
\   'name': 'Zookeeper',
\   'constants': {
\     'PERM_READ': '1',
\     'PERM_WRITE': '2',
\     'PERM_CREATE': '4',
\     'PERM_DELETE': '8',
\     'PERM_ADMIN': '16',
\     'PERM_ALL': '31',
\     'EPHEMERAL': '1',
\     'SEQUENCE': '2',
\     'LOG_LEVEL_ERROR': '1',
\     'LOG_LEVEL_WARN': '2',
\     'LOG_LEVEL_INFO': '3',
\     'LOG_LEVEL_DEBUG': '4',
\     'EXPIRED_SESSION_STATE': '-112',
\     'AUTH_FAILED_STATE': '-113',
\     'CONNECTING_STATE': '1',
\     'ASSOCIATING_STATE': '2',
\     'CONNECTED_STATE': '3',
\     'READONLY_STATE': '5',
\     'NOTCONNECTED_STATE': '999',
\     'CREATED_EVENT': '1',
\     'DELETED_EVENT': '2',
\     'CHANGED_EVENT': '3',
\     'CHILD_EVENT': '4',
\     'SESSION_EVENT': '-1',
\     'NOTWATCHING_EVENT': '-2',
\     'SYSTEMERROR': '-1',
\     'RUNTIMEINCONSISTENCY': '-2',
\     'DATAINCONSISTENCY': '-3',
\     'CONNECTIONLOSS': '-4',
\     'MARSHALLINGERROR': '-5',
\     'UNIMPLEMENTED': '-6',
\     'OPERATIONTIMEOUT': '-7',
\     'BADARGUMENTS': '-8',
\     'INVALIDSTATE': '-9',
\     'NEWCONFIGNOQUORUM': '-13',
\     'RECONFIGINPROGRESS': '-14',
\     'OK': '0',
\     'APIERROR': '-100',
\     'NONODE': '-101',
\     'NOAUTH': '-102',
\     'BADVERSION': '-103',
\     'NOCHILDRENFOREPHEMERALS': '-108',
\     'NODEEXISTS': '-110',
\     'NOTEMPTY': '-111',
\     'SESSIONEXPIRED': '-112',
\     'INVALIDCALLBACK': '-113',
\     'INVALIDACL': '-114',
\     'AUTHFAILED': '-115',
\     'CLOSING': '-116',
\     'NOTHING': '-117',
\     'SESSIONMOVED': '-118',
\     'NOTREADONLY': '-119',
\     'EPHEMERALONLOCALSESSION': '-120',
\     'NOWATCHER': '-121',
\     'RECONFIGDISABLED': '-122',
\   },
\   'methods': {
\     '__construct': { 'signature': '[ string $host = '''' [, callable $watcher_cb = NULL [, int $recv_timeout = 10000]]]', 'return_type': ''},
\     'addAuth': { 'signature': 'string $scheme, string $cert [, callable $completion_cb = NULL] | bool', 'return_type': 'bool'},
\     'close': { 'signature': 'void | void', 'return_type': 'void'},
\     'connect': { 'signature': 'string $host [, callable $watcher_cb = NULL [, int $recv_timeout = 10000]] | void', 'return_type': 'void'},
\     'create': { 'signature': 'string $path, string $value, array $acls [, int $flags = NULL] | string', 'return_type': 'string'},
\     'delete': { 'signature': 'string $path [, int $version = -1] | bool', 'return_type': 'bool'},
\     'exists': { 'signature': 'string $path [, callable $watcher_cb = NULL] | array', 'return_type': 'array'},
\     'get': { 'signature': 'string $path [, callable $watcher_cb = NULL [, array &$stat = NULL [, int $max_size = 0]]] | string', 'return_type': 'string'},
\     'getAcl': { 'signature': 'string $path | array', 'return_type': 'array'},
\     'getChildren': { 'signature': 'string $path [, callable $watcher_cb = NULL] | array', 'return_type': 'array'},
\     'getClientId': { 'signature': 'void | int', 'return_type': 'int'},
\     'getConfig': { 'signature': 'void | ZookeeperConfig', 'return_type': 'ZookeeperConfig'},
\     'getRecvTimeout': { 'signature': 'void | int', 'return_type': 'int'},
\     'getState': { 'signature': 'void | int', 'return_type': 'int'},
\     'isRecoverable': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'set': { 'signature': 'string $path, string $value [, int $version = -1 [, array &$stat = NULL]] | bool', 'return_type': 'bool'},
\     'setAcl': { 'signature': 'string $path, int $version, array $acl | bool', 'return_type': 'bool'},
\     'setLogStream': { 'signature': 'resource $stream | bool', 'return_type': 'bool'},
\     'setWatcher': { 'signature': 'callable $watcher_cb | bool', 'return_type': 'bool'},
\   },
\   'static_methods': {
\     'setDebugLevel': { 'signature': 'int $logLevel | bool', 'return_type': 'bool'},
\     'setDeterministicConnOrder': { 'signature': 'bool $yesOrNo | bool', 'return_type': 'bool'},
\   },
\},
\'zookeeperauthenticationexception': {
\   'name': 'ZookeeperAuthenticationException',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'zookeeperconfig': {
\   'name': 'ZookeeperConfig',
\   'methods': {
\     'add': { 'signature': 'string $members [, int $version = -1 [, array &$stat = NULL]] | void', 'return_type': 'void'},
\     'get': { 'signature': '[ callable $watcher_cb = NULL [, array &$stat = NULL]] | string', 'return_type': 'string'},
\     'remove': { 'signature': 'string $id_list [, int $version = -1 [, array &$stat = NULL]] | void', 'return_type': 'void'},
\     'set': { 'signature': 'string $members [, int $version = -1 [, array &$stat = NULL]] | void', 'return_type': 'void'},
\   },
\},
\'zookeeperconnectionexception': {
\   'name': 'ZookeeperConnectionException',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'zookeeperexception': {
\   'name': 'ZookeeperException',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'zookeepermarshallingexception': {
\   'name': 'ZookeeperMarshallingException',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'zookeepernonodeexception': {
\   'name': 'ZookeeperNoNodeException',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'zookeeperoperationtimeoutexception': {
\   'name': 'ZookeeperOperationTimeoutException',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'zookeepersessionexception': {
\   'name': 'ZookeeperSessionException',
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\}
let g:phpcomplete_builtin['interfaces']['predefined_interfaces_and_classes'] = {
\'arrayaccess': {
\   'name': 'ArrayAccess',
\   'methods': {
\     'offsetExists': { 'signature': 'mixed $offset | bool', 'return_type': 'bool'},
\     'offsetGet': { 'signature': 'mixed $offset | mixed', 'return_type': 'mixed'},
\     'offsetSet': { 'signature': 'mixed $offset, mixed $value | void', 'return_type': 'void'},
\     'offsetUnset': { 'signature': 'mixed $offset | void', 'return_type': 'void'},
\   },
\},
\'iterator': {
\   'name': 'Iterator',
\   'methods': {
\     'current': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'key': { 'signature': 'void | scalar', 'return_type': 'scalar'},
\     'next': { 'signature': 'void | void', 'return_type': 'void'},
\     'rewind': { 'signature': 'void | void', 'return_type': 'void'},
\     'valid': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'iteratoraggregate': {
\   'name': 'IteratorAggregate',
\   'methods': {
\     'getIterator': { 'signature': 'void | Traversable', 'return_type': 'Traversable'},
\   },
\},
\'serializable': {
\   'name': 'Serializable',
\   'methods': {
\     'serialize': { 'signature': 'void | string', 'return_type': 'string'},
\     'unserialize': { 'signature': 'string $serialized | void', 'return_type': 'void'},
\   },
\},
\'throwable': {
\   'name': 'Throwable',
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getCode': { 'signature': 'void | int', 'return_type': 'int'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Throwable', 'return_type': 'Throwable'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\   },
\},
\'traversable': {
\   'name': 'Traversable',
\},
\}
let g:phpcomplete_builtin['interfaces']['pthreads'] = {
\'collectable': {
\   'name': 'Collectable',
\   'methods': {
\     'isGarbage': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'setGarbage': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\}
let g:phpcomplete_builtin['interfaces']['commonmark'] = {
\'commonmark\interfaces\ivisitable': {
\   'name': 'CommonMark\Interfaces\IVisitable',
\   'methods': {
\     'accept': { 'signature': 'CommonMark\Interfaces\IVisitor $visitor | void', 'return_type': 'void'},
\   },
\},
\'commonmark\interfaces\ivisitor': {
\   'name': 'CommonMark\Interfaces\IVisitor',
\   'constants': {
\     'Done': '',
\     'Enter': '',
\     'Leave': '',
\   },
\   'methods': {
\     'enter': { 'signature': 'IVisitable $visitable | ?int|IVisitable', 'return_type': '?int|IVisitable'},
\     'leave': { 'signature': 'IVisitable $visitable | ?int|IVisitable', 'return_type': '?int|IVisitable'},
\   },
\},
\}
let g:phpcomplete_builtin['interfaces']['spl'] = {
\'countable': {
\   'name': 'Countable',
\   'methods': {
\     'count': { 'signature': 'void | int', 'return_type': 'int'},
\   },
\},
\'outeriterator': {
\   'name': 'OuterIterator',
\   'methods': {
\     'getInnerIterator': { 'signature': 'void | Iterator', 'return_type': 'Iterator'},
\     'current': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'key': { 'signature': 'void | scalar', 'return_type': 'scalar'},
\     'next': { 'signature': 'void | void', 'return_type': 'void'},
\     'rewind': { 'signature': 'void | void', 'return_type': 'void'},
\     'valid': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'recursiveiterator': {
\   'name': 'RecursiveIterator',
\   'methods': {
\     'getChildren': { 'signature': 'void | RecursiveIterator', 'return_type': 'RecursiveIterator'},
\     'hasChildren': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'current': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'key': { 'signature': 'void | scalar', 'return_type': 'scalar'},
\     'next': { 'signature': 'void | void', 'return_type': 'void'},
\     'rewind': { 'signature': 'void | void', 'return_type': 'void'},
\     'valid': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'seekableiterator': {
\   'name': 'SeekableIterator',
\   'methods': {
\     'seek': { 'signature': 'int $position | void', 'return_type': 'void'},
\     'current': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'key': { 'signature': 'void | scalar', 'return_type': 'scalar'},
\     'next': { 'signature': 'void | void', 'return_type': 'void'},
\     'rewind': { 'signature': 'void | void', 'return_type': 'void'},
\     'valid': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\'splobserver': {
\   'name': 'SplObserver',
\   'methods': {
\     'update': { 'signature': 'SplSubject $subject | void', 'return_type': 'void'},
\   },
\},
\'splsubject': {
\   'name': 'SplSubject',
\   'methods': {
\     'attach': { 'signature': 'SplObserver $observer | void', 'return_type': 'void'},
\     'detach': { 'signature': 'SplObserver $observer | void', 'return_type': 'void'},
\     'notify': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\}
let g:phpcomplete_builtin['interfaces']['date_time'] = {
\'datetimeinterface': {
\   'name': 'DateTimeInterface',
\   'constants': {
\     'ATOM': '"Y-m-d\TH:i:sP"',
\     'COOKIE': '"l, d-M-Y H:i:s T"',
\     'ISO8601': '"Y-m-d\TH:i:sO"',
\     'RFC822': '"D, d M y H:i:s O"',
\     'RFC850': '"l, d-M-y H:i:s T"',
\     'RFC1036': '"D, d M y H:i:s O"',
\     'RFC1123': '"D, d M Y H:i:s O"',
\     'RFC2822': '"D, d M Y H:i:s O"',
\     'RFC3339': '"Y-m-d\TH:i:sP"',
\     'RFC3339_EXTENDED': '"Y-m-d\TH:i:s.vP"',
\     'RSS': '"D, d M Y H:i:s O"',
\     'W3C': '"Y-m-d\TH:i:sP"',
\   },
\   'methods': {
\     'diff': { 'signature': 'DateTimeInterface $datetime2 [, bool $absolute = FALSE] | DateInterval', 'return_type': 'DateInterval'},
\     'format': { 'signature': 'string $format | string', 'return_type': 'string'},
\     'getOffset': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTimestamp': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTimezone': { 'signature': 'void | DateTimeZone', 'return_type': 'DateTimeZone'},
\     '__wakeup': { 'signature': 'void', 'return_type': ''},
\   },
\},
\}
let g:phpcomplete_builtin['interfaces']['data_structures'] = {
\'ds\collection': {
\   'name': 'Ds\Collection',
\   'methods': {
\     'clear': { 'signature': 'void | void', 'return_type': 'void'},
\     'copy': { 'signature': 'void | Ds\Collection', 'return_type': 'Ds\Collection'},
\     'isEmpty': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'toArray': { 'signature': 'void | array', 'return_type': 'array'},
\   },
\},
\'ds\hashable': {
\   'name': 'Ds\Hashable',
\   'methods': {
\     'equals': { 'signature': 'object $obj | bool', 'return_type': 'bool'},
\     'hash': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\   },
\},
\'ds\sequence': {
\   'name': 'Ds\Sequence',
\   'methods': {
\     'allocate': { 'signature': 'int $capacity | void', 'return_type': 'void'},
\     'apply': { 'signature': 'callable $callback | void', 'return_type': 'void'},
\     'capacity': { 'signature': 'void | int', 'return_type': 'int'},
\     'contains': { 'signature': '[ mixed $...values] | bool', 'return_type': 'bool'},
\     'filter': { 'signature': '[ callable $callback] | Ds\Sequence', 'return_type': 'Ds\Sequence'},
\     'find': { 'signature': 'mixed $value | mixed', 'return_type': 'mixed'},
\     'first': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'get': { 'signature': 'int $index | mixed', 'return_type': 'mixed'},
\     'insert': { 'signature': 'int $index [, mixed $...values] | void', 'return_type': 'void'},
\     'join': { 'signature': '[ string $glue] | string', 'return_type': 'string'},
\     'last': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'map': { 'signature': 'callable $callback | Ds\Sequence', 'return_type': 'Ds\Sequence'},
\     'merge': { 'signature': 'mixed $values | Ds\Sequence', 'return_type': 'Ds\Sequence'},
\     'pop': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'push': { 'signature': '[ mixed $...values] | void', 'return_type': 'void'},
\     'reduce': { 'signature': 'callable $callback [, mixed $initial] | mixed', 'return_type': 'mixed'},
\     'remove': { 'signature': 'int $index | mixed', 'return_type': 'mixed'},
\     'reverse': { 'signature': 'void | void', 'return_type': 'void'},
\     'reversed': { 'signature': 'void | Ds\Sequence', 'return_type': 'Ds\Sequence'},
\     'rotate': { 'signature': 'int $rotations | void', 'return_type': 'void'},
\     'set': { 'signature': 'int $index, mixed $value | void', 'return_type': 'void'},
\     'shift': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'slice': { 'signature': 'int $index [, int $length] | Ds\Sequence', 'return_type': 'Ds\Sequence'},
\     'sort': { 'signature': '[ callable $comparator] | void', 'return_type': 'void'},
\     'sorted': { 'signature': '[ callable $comparator] | Ds\Sequence', 'return_type': 'Ds\Sequence'},
\     'sum': { 'signature': 'void | number', 'return_type': 'number'},
\     'unshift': { 'signature': '[ mixed $values] | void', 'return_type': 'void'},
\   },
\},
\}
let g:phpcomplete_builtin['interfaces']['json'] = {
\'jsonserializable': {
\   'name': 'JsonSerializable',
\   'methods': {
\     'jsonSerialize': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\   },
\},
\}
let g:phpcomplete_builtin['interfaces']['mongo'] = {
\'mongocursorinterface': {
\   'name': 'MongoCursorInterface',
\   'methods': {
\     'batchSize': { 'signature': 'int $batchSize | MongoCursorInterface', 'return_type': 'MongoCursorInterface'},
\     'dead': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getReadPreference': { 'signature': 'void | array', 'return_type': 'array'},
\     'info': { 'signature': 'void | array', 'return_type': 'array'},
\     'setReadPreference': { 'signature': 'string $read_preference [, array $tags] | MongoCursorInterface', 'return_type': 'MongoCursorInterface'},
\     'timeout': { 'signature': 'int $ms | MongoCursorInterface', 'return_type': 'MongoCursorInterface'},
\     'current': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'key': { 'signature': 'void | scalar', 'return_type': 'scalar'},
\     'next': { 'signature': 'void | void', 'return_type': 'void'},
\     'rewind': { 'signature': 'void | void', 'return_type': 'void'},
\     'valid': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\},
\}
let g:phpcomplete_builtin['interfaces']['vendor_specific_database_extensions'] = {
\'mongodb\bson\binaryinterface': {
\   'name': 'MongoDB\BSON\BinaryInterface',
\   'methods': {
\     'getData': { 'signature': 'void | string', 'return_type': 'string'},
\     'getType': { 'signature': 'void | int', 'return_type': 'int'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\   },
\},
\'mongodb\bson\decimal128interface': {
\   'name': 'MongoDB\BSON\Decimal128Interface',
\   'methods': {
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\   },
\},
\'mongodb\bson\javascriptinterface': {
\   'name': 'MongoDB\BSON\JavascriptInterface',
\   'methods': {
\     'getCode': { 'signature': 'void | string', 'return_type': 'string'},
\     'getScope': { 'signature': 'void | object|null', 'return_type': 'object|null'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\   },
\},
\'mongodb\bson\maxkeyinterface': {
\   'name': 'MongoDB\BSON\MaxKeyInterface',
\},
\'mongodb\bson\minkeyinterface': {
\   'name': 'MongoDB\BSON\MinKeyInterface',
\},
\'mongodb\bson\objectidinterface': {
\   'name': 'MongoDB\BSON\ObjectIdInterface',
\   'methods': {
\     'getTimestamp': { 'signature': 'void | int', 'return_type': 'int'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\   },
\},
\'mongodb\bson\persistable': {
\   'name': 'MongoDB\BSON\Persistable',
\   'methods': {
\     'bsonSerialize': { 'signature': 'void | array|object', 'return_type': 'array|object'},
\     'bsonUnserialize': { 'signature': 'array $data | void', 'return_type': 'void'},
\   },
\},
\'mongodb\bson\regexinterface': {
\   'name': 'MongoDB\BSON\RegexInterface',
\   'methods': {
\     'getFlags': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPattern': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\   },
\},
\'mongodb\bson\serializable': {
\   'name': 'MongoDB\BSON\Serializable',
\   'methods': {
\     'bsonSerialize': { 'signature': 'void | array|object', 'return_type': 'array|object'},
\   },
\},
\'mongodb\bson\timestampinterface': {
\   'name': 'MongoDB\BSON\TimestampInterface',
\   'methods': {
\     'getIncrement': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTimestamp': { 'signature': 'void | int', 'return_type': 'int'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\   },
\},
\'mongodb\bson\type': {
\   'name': 'MongoDB\BSON\Type',
\},
\'mongodb\bson\unserializable': {
\   'name': 'MongoDB\BSON\Unserializable',
\   'methods': {
\     'bsonUnserialize': { 'signature': 'array $data | void', 'return_type': 'void'},
\   },
\},
\'mongodb\bson\utcdatetimeinterface': {
\   'name': 'MongoDB\BSON\UTCDateTimeInterface',
\   'methods': {
\     'toDateTime': { 'signature': 'void | DateTime', 'return_type': 'DateTime'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\   },
\},
\'mongodb\driver\cursorinterface': {
\   'name': 'MongoDB\Driver\CursorInterface',
\   'methods': {
\     'getId': { 'signature': 'void | MongoDB\Driver\CursorId', 'return_type': 'MongoDB\Driver\CursorId'},
\     'getServer': { 'signature': 'void | MongoDB\Driver\Server', 'return_type': 'MongoDB\Driver\Server'},
\     'isDead': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'setTypeMap': { 'signature': 'array $typemap | void', 'return_type': 'void'},
\     'toArray': { 'signature': 'void | array', 'return_type': 'array'},
\   },
\},
\'mongodb\driver\exception\exception': {
\   'name': 'MongoDB\Driver\Exception\Exception',
\},
\'mongodb\driver\monitoring\commandsubscriber': {
\   'name': 'MongoDB\Driver\Monitoring\CommandSubscriber',
\   'methods': {
\     'commandFailed': { 'signature': 'MongoDB\Driver\Monitoring\CommandFailedEvent $event | void', 'return_type': 'void'},
\     'commandStarted': { 'signature': 'MongoDB\Driver\Monitoring\CommandStartedEvent $event | void', 'return_type': 'void'},
\     'commandSucceeded': { 'signature': 'MongoDB\Driver\Monitoring\CommandSucceededEvent $event | void', 'return_type': 'void'},
\   },
\},
\'mongodb\driver\monitoring\subscriber': {
\   'name': 'MongoDB\Driver\Monitoring\Subscriber',
\},
\'mysql_xdevapi\baseresult': {
\   'name': 'mysql_xdevapi\BaseResult',
\   'methods': {
\     'getWarnings': { 'signature': 'void | array', 'return_type': 'array'},
\     'getWarningsCount': { 'signature': 'void | integer', 'return_type': 'integer'},
\   },
\},
\'mysql_xdevapi\crudoperationbindable': {
\   'name': 'mysql_xdevapi\CrudOperationBindable',
\   'methods': {
\     'bind': { 'signature': 'array $placeholder_values | mysql_xdevapi\CrudOperationBindable', 'return_type': 'mysql_xdevapi\CrudOperationBindable'},
\   },
\},
\'mysql_xdevapi\crudoperationlimitable': {
\   'name': 'mysql_xdevapi\CrudOperationLimitable',
\   'methods': {
\     'limit': { 'signature': 'integer $rows | mysql_xdevapi\CrudOperationLimitable', 'return_type': 'mysql_xdevapi\CrudOperationLimitable'},
\   },
\},
\'mysql_xdevapi\crudoperationskippable': {
\   'name': 'mysql_xdevapi\CrudOperationSkippable',
\   'methods': {
\     'skip': { 'signature': 'integer $skip | mysql_xdevapi\CrudOperationSkippable', 'return_type': 'mysql_xdevapi\CrudOperationSkippable'},
\   },
\},
\'mysql_xdevapi\crudoperationsortable': {
\   'name': 'mysql_xdevapi\CrudOperationSortable',
\   'methods': {
\     'sort': { 'signature': 'string $sort_expr | mysql_xdevapi\CrudOperationSortable', 'return_type': 'mysql_xdevapi\CrudOperationSortable'},
\   },
\},
\'mysql_xdevapi\databaseobject': {
\   'name': 'mysql_xdevapi\DatabaseObject',
\   'methods': {
\     'existsInDatabase': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getSession': { 'signature': 'void | mysql_xdevapi\Session', 'return_type': 'mysql_xdevapi\Session'},
\   },
\},
\'mysql_xdevapi\executable': {
\   'name': 'mysql_xdevapi\Executable',
\   'methods': {
\     'execute': { 'signature': 'void | mysql_xdevapi\Result', 'return_type': 'mysql_xdevapi\Result'},
\   },
\},
\'mysql_xdevapi\schemaobject': {
\   'name': 'mysql_xdevapi\SchemaObject',
\   'methods': {
\     'getSchema': { 'signature': 'void | mysql_xdevapi\Schema', 'return_type': 'mysql_xdevapi\Schema'},
\   },
\},
\}
let g:phpcomplete_builtin['interfaces']['pht'] = {
\'pht\runnable': {
\   'name': 'pht\Runnable',
\   'methods': {
\     'run': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\'pht\threaded': {
\   'name': 'pht\Threaded',
\   'methods': {
\     'lock': { 'signature': 'void | void', 'return_type': 'void'},
\     'unlock': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\}
let g:phpcomplete_builtin['interfaces']['reflection'] = {
\'reflector': {
\   'name': 'Reflector',
\   'methods': {
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\   },
\   'static_methods': {
\     'export': { 'signature': 'void | string', 'return_type': 'string'},
\   },
\},
\}
let g:phpcomplete_builtin['interfaces']['sessions'] = {
\'sessionidinterface': {
\   'name': 'SessionIdInterface',
\   'methods': {
\     'create_sid': { 'signature': 'void | string', 'return_type': 'string'},
\   },
\},
\'sessionupdatetimestamphandlerinterface': {
\   'name': 'SessionUpdateTimestampHandlerInterface',
\   'methods': {
\     'updateTimestamp': { 'signature': 'string $key, string $val | bool', 'return_type': 'bool'},
\     'validateId': { 'signature': 'string $key | bool', 'return_type': 'bool'},
\   },
\},
\}
let g:phpcomplete_builtin['constants']['common'] = {
\ 'TRUE': '',
\ 'FALSE': '',
\ 'NULL': '',
\ 'E_NOTICE': '',
\ 'E_DEPRECATED': '',
\ 'E_RECOVERABLE_ERROR': '',
\ 'E_ALL': '',
\ 'E_COMPILE_ERROR': '',
\ 'E_STRICT': '',
\ 'E_WARNING': '',
\ 'E_ERROR': '',
\ 'E_PARSE': '',
\ 'E_CORE_ERROR': '',
\ 'E_CORE_WARNING': '',
\ 'E_COMPILE_WARNING': '',
\ 'E_USER_ERROR': '',
\ 'E_USER_WARNING': '',
\ 'E_USER_NOTICE': '',
\ 'E_USER_DEPRECATED': '',
\ '__COMPILER_HALT_OFFSET__': '',
\ '__LINE__': '',
\ '__FILE__': '',
\ '__DIR__': '',
\ '__FUNCTION__': '',
\ '__CLASS__': '',
\ '__TRAIT__': '',
\ '__METHOD__': '',
\ '__NAMESPACE__': '',
\ }
let g:phpcomplete_builtin['constants']['apc'] = {
\ 'APC_BIN_VERIFY_CRC32': '',
\ 'APC_BIN_VERIFY_MD5': '',
\ 'APC_ITER_ALL': '',
\ 'APC_ITER_ATIME': '',
\ 'APC_ITER_CTIME': '',
\ 'APC_ITER_DEVICE': '',
\ 'APC_ITER_DTIME': '',
\ 'APC_ITER_FILENAME': '',
\ 'APC_ITER_INODE': '',
\ 'APC_ITER_KEY': '',
\ 'APC_ITER_MD5': '',
\ 'APC_ITER_MEM_SIZE': '',
\ 'APC_ITER_MTIME': '',
\ 'APC_ITER_NONE': '',
\ 'APC_ITER_NUM_HITS': '',
\ 'APC_ITER_REFCOUNT': '',
\ 'APC_ITER_TTL': '',
\ 'APC_ITER_TYPE': '',
\ 'APC_ITER_VALUE': '',
\ 'APC_LIST_ACTIVE': '',
\ 'APC_LIST_DELETED': '',
\ }
let g:phpcomplete_builtin['constants']['apcu'] = {
\ 'APC_ITER_ALL': '',
\ 'APC_ITER_ATIME': '',
\ 'APC_ITER_CTIME': '',
\ 'APC_ITER_DEVICE': '',
\ 'APC_ITER_DTIME': '',
\ 'APC_ITER_FILENAME': '',
\ 'APC_ITER_INODE': '',
\ 'APC_ITER_KEY': '',
\ 'APC_ITER_MD5': '',
\ 'APC_ITER_MEM_SIZE': '',
\ 'APC_ITER_MTIME': '',
\ 'APC_ITER_NONE': '',
\ 'APC_ITER_NUM_HITS': '',
\ 'APC_ITER_REFCOUNT': '',
\ 'APC_ITER_TTL': '',
\ 'APC_ITER_TYPE': '',
\ 'APC_ITER_VALUE': '',
\ 'APC_LIST_ACTIVE': '',
\ 'APC_LIST_DELETED': '',
\ }
let g:phpcomplete_builtin['constants']['apd'] = {
\ 'FUNCTION_TRACE': '',
\ 'ARGS_TRACE': '',
\ 'ASSIGNMENT_TRACE': '',
\ 'STATEMENT_TRACE': '',
\ 'MEMORY_TRACE': '',
\ 'TIMING_TRACE': '',
\ 'SUMMARY_TRACE': '',
\ 'ERROR_TRACE': '',
\ 'PROF_TRACE': '',
\ 'APD_VERSION': '',
\ 'AF_UNIX': '',
\ 'APD_AF_INET': '',
\ }
let g:phpcomplete_builtin['constants']['arrays'] = {
\ 'CASE_LOWER': '',
\ 'CASE_UPPER': '',
\ 'SORT_ASC': '',
\ 'SORT_DESC': '',
\ 'SORT_REGULAR': '',
\ 'SORT_NUMERIC': '',
\ 'SORT_STRING': '',
\ 'SORT_LOCALE_STRING': '',
\ 'SORT_NATURAL': '',
\ 'SORT_FLAG_CASE': '',
\ 'ARRAY_FILTER_USE_KEY': '',
\ 'ARRAY_FILTER_USE_BOTH': '',
\ 'COUNT_NORMAL': '',
\ 'COUNT_RECURSIVE': '',
\ 'EXTR_OVERWRITE': '',
\ 'EXTR_SKIP': '',
\ 'EXTR_PREFIX_SAME': '',
\ 'EXTR_PREFIX_ALL': '',
\ 'EXTR_PREFIX_INVALID': '',
\ 'EXTR_PREFIX_IF_EXISTS': '',
\ 'EXTR_IF_EXISTS': '',
\ 'EXTR_REFS': '',
\ }
let g:phpcomplete_builtin['constants']['bbcode'] = {
\ 'BBCODE_TYPE_NOARG': '',
\ 'BBCODE_TYPE_SINGLE': '',
\ 'BBCODE_TYPE_ARG': '',
\ 'BBCODE_TYPE_OPTARG': '',
\ 'BBCODE_TYPE_ROOT': '',
\ 'BBCODE_FLAGS_ARG_PARSING': '',
\ 'BBCODE_FLAGS_CDATA_NOT_ALLOWED': '',
\ 'BBCODE_FLAGS_SMILEYS_ON': '',
\ 'BBCODE_FLAGS_SMILEYS_OFF': '',
\ 'BBCODE_FLAGS_ONE_OPEN_PER_LEVEL': '',
\ 'BBCODE_FLAGS_REMOVE_IF_EMPTY': '',
\ 'BBCODE_FLAGS_DENY_REOPEN_CHILD': '',
\ 'BBCODE_ARG_DOUBLE_QUOTE': '',
\ 'BBCODE_ARG_SINGLE_QUOTE': '',
\ 'BBCODE_ARG_HTML_QUOTE': '',
\ 'BBCODE_ARG_QUOTE_ESCAPING': '',
\ 'BBCODE_AUTO_CORRECT': '',
\ 'BBCODE_CORRECT_REOPEN_TAGS': '',
\ 'BBCODE_DISABLE_TREE_BUILD': '',
\ 'BBCODE_DEFAULT_SMILEYS_ON': '',
\ 'BBCODE_DEFAULT_SMILEYS_OFF': '',
\ 'BBCODE_FORCE_SMILEYS_OFF': '',
\ 'BBCODE_SMILEYS_CASE_INSENSITIVE': '',
\ 'BBCODE_SET_FLAGS_SET': '',
\ 'BBCODE_SET_FLAGS_ADD': '',
\ 'BBCODE_SET_FLAGS_REMOVE': '',
\ }
let g:phpcomplete_builtin['constants']['blenc'] = {
\ 'BLENC_EXT_VERSION': '',
\ }
let g:phpcomplete_builtin['constants']['cairo'] = {
\ 'CAIRO_STATUS_SUCCESS': '',
\ 'CAIRO_STATUS_NO_MEMORY': '',
\ 'CAIRO_STATUS_INVALID_RESTORE': '',
\ 'CAIRO_STATUS_INVALID_POP_GROUP': '',
\ 'CAIRO_STATUS_NO_CURRENT_POINT': '',
\ 'CAIRO_STATUS_INVALID_MATRIX': '',
\ 'CAIRO_STATUS_INVALID_STATUS': '',
\ 'CAIRO_STATUS_NULL_POINTER': '',
\ 'CAIRO_STATUS_INVALID_STRING': '',
\ 'CAIRO_STATUS_INVALID_PATH_DATA': '',
\ 'CAIRO_STATUS_READ_ERROR': '',
\ 'CAIRO_STATUS_WRITE_ERROR': '',
\ 'CAIRO_STATUS_SURFACE_FINISHED': '',
\ 'CAIRO_STATUS_SURFACE_TYPE_MISMATCH': '',
\ 'CAIRO_STATUS_PATTERN_TYPE_MISMATCH': '',
\ 'CAIRO_STATUS_INVALID_CONTENT': '',
\ 'CAIRO_STATUS_INVALID_FORMAT': '',
\ 'CAIRO_STATUS_INVALID_VISUAL': '',
\ 'CAIRO_STATUS_FILE_NOT_FOUND': '',
\ 'CAIRO_STATUS_INVALID_DASH': '',
\ 'CAIRO_STATUS_INVALID_DSC_COMMENT': '',
\ 'CAIRO_STATUS_INVALID_INDEX': '',
\ 'CAIRO_STATUS_CLIP_NOT_REPRESENTABLE': '',
\ 'CAIRO_STATUS_TEMP_FILE_ERROR': '',
\ 'CAIRO_STATUS_INVALID_STRIDE': '',
\ 'CAIRO_ANTIALIAS_DEFAULT': '',
\ 'CAIRO_ANTIALIAS_NONE': '',
\ 'CAIRO_ANTIALIAS_GRAY': '',
\ 'CAIRO_ANTIALIAS_SUBPIXEL': '',
\ 'CAIRO_SUBPIXEL_ORDER_DEFAULT': '',
\ 'CAIRO_SUBPIXEL_ORDER_RGB': '',
\ 'CAIRO_SUBPIXEL_ORDER_BGR': '',
\ 'CAIRO_SUBPIXEL_ORDER_VRGB': '',
\ 'CAIRO_SUBPIXEL_ORDER_VBGR': '',
\ 'CAIRO_FILL_RULE_WINDING': '',
\ 'CAIRO_FILL_RULE_EVEN_ODD': '',
\ 'CAIRO_LINE_CAP_BUTT': '',
\ 'CAIRO_LINE_CAP_ROUND': '',
\ 'CAIRO_LINE_CAP_SQUARE': '',
\ 'CAIRO_LINE_JOIN_MITER': '',
\ 'CAIRO_LINE_JOIN_ROUND': '',
\ 'CAIRO_LINE_JOIN_BEVEL': '',
\ 'CAIRO_OPERATOR_CLEAR': '',
\ 'CAIRO_OPERATOR_SOURCE': '',
\ 'CAIRO_OPERATOR_OVER': '',
\ 'CAIRO_OPERATOR_IN': '',
\ 'CAIRO_OPERATOR_OUT': '',
\ 'CAIRO_OPERATOR_ATOP': '',
\ 'CAIRO_OPERATOR_DEST': '',
\ 'CAIRO_OPERATOR_DEST_OVER': '',
\ 'CAIRO_OPERATOR_DEST_IN': '',
\ 'CAIRO_OPERATOR_DEST_OUT': '',
\ 'CAIRO_OPERATOR_DEST_ATOP': '',
\ 'CAIRO_OPERATOR_XOR': '',
\ 'CAIRO_OPERATOR_ADD': '',
\ 'CAIRO_OPERATOR_SATURATE': '',
\ 'CAIRO_PATTERN_TYPE_SOLID': '',
\ 'CAIRO_PATTERN_TYPE_SURFACE': '',
\ 'CAIRO_PATTERN_TYPE_LINEAR': '',
\ 'CAIRO_PATTERN_TYPE_RADIAL': '',
\ 'CAIRO_EXTEND_NONE': '',
\ 'CAIRO_EXTEND_REPEAT': '',
\ 'CAIRO_EXTEND_REFLECT': '',
\ 'CAIRO_EXTEND_PAD': '',
\ 'CAIRO_FILTER_FAST': '',
\ 'CAIRO_FILTER_GOOD': '',
\ 'CAIRO_FILTER_BEST': '',
\ 'CAIRO_FILTER_NEAREST': '',
\ 'CAIRO_FILTER_BILINEAR': '',
\ 'CAIRO_FILTER_GAUSSIAN': '',
\ 'CAIRO_HINT_STYLE_DEFAULT': '',
\ 'CAIRO_HINT_STYLE_NONE': '',
\ 'CAIRO_HINT_STYLE_SLIGHT': '',
\ 'CAIRO_HINT_STYLE_MEDIUM': '',
\ 'CAIRO_HINT_STYLE_FULL': '',
\ 'CAIRO_HINT_METRICS_DEFAULT': '',
\ 'CAIRO_HINT_METRICS_OFF': '',
\ 'CAIRO_HINT_METRICS_ON': '',
\ 'CAIRO_FONT_TYPE_TOY': '',
\ 'CAIRO_FONT_TYPE_FT': '',
\ 'CAIRO_FONT_TYPE_WIN32': '',
\ 'CAIRO_FONT_TYPE_QUARTZ': '',
\ 'CAIRO_FONT_SLANT_NORMAL': '',
\ 'CAIRO_FONT_SLANT_ITALIC': '',
\ 'CAIRO_FONT_SLANT_OBLIQUE': '',
\ 'CAIRO_FONT_WEIGHT_NORMAL': '',
\ 'CAIRO_FONT_WEIGHT_BOLD': '',
\ 'CAIRO_CONTENT_COLOR': '',
\ 'CAIRO_CONTENT_ALPHA': '',
\ 'CAIRO_CONTENT_COLOR_ALPHA': '',
\ 'CAIRO_SURFACE_TYPE_IMAGE': '',
\ 'CAIRO_SURFACE_TYPE_PDF': '',
\ 'CAIRO_SURFACE_TYPE_PS': '',
\ 'CAIRO_SURFACE_TYPE_XLIB': '',
\ 'CAIRO_SURFACE_TYPE_XCB': '',
\ 'CAIRO_SURFACE_TYPE_GLITZ': '',
\ 'CAIRO_SURFACE_TYPE_QUARTZ': '',
\ 'CAIRO_SURFACE_TYPE_WIN32': '',
\ 'CAIRO_SURFACE_TYPE_BEOS': '',
\ 'CAIRO_SURFACE_TYPE_DIRECTFB': '',
\ 'CAIRO_SURFACE_TYPE_SVG': '',
\ 'CAIRO_SURFACE_TYPE_OS2': '',
\ 'CAIRO_SURFACE_TYPE_WIN32_PRINTING': '',
\ 'CAIRO_SURFACE_TYPE_QUARTZ_IMAGE': '',
\ 'CAIRO_FORMAT_ARGB32': '',
\ 'CAIRO_FORMAT_RGB24': '',
\ 'CAIRO_FORMAT_A8': '',
\ 'CAIRO_FORMAT_A1': '',
\ 'CAIRO_PS_LEVEL_2': '',
\ 'CAIRO_PS_LEVEL_3': '',
\ 'CAIRO_SVG_VERSION_1_1': '',
\ 'CAIRO_SVG_VERSION_1_2': '',
\ }
let g:phpcomplete_builtin['constants']['calendar'] = {
\ 'CAL_EASTER_DEFAULT': '',
\ 'CAL_EASTER_ROMAN': '',
\ 'CAL_EASTER_ALWAYS_GREGORIAN': '',
\ 'CAL_EASTER_ALWAYS_JULIAN': '',
\ 'CAL_GREGORIAN': '',
\ 'CAL_JULIAN': '',
\ 'CAL_JEWISH': '',
\ 'CAL_FRENCH': '',
\ 'CAL_NUM_CALS': '',
\ 'CAL_JEWISH_ADD_ALAFIM_GERESH': '',
\ 'CAL_JEWISH_ADD_ALAFIM': '',
\ 'CAL_JEWISH_ADD_GERESHAYIM': '',
\ 'CAL_DOW_DAYNO': '',
\ 'CAL_DOW_SHORT': '',
\ 'CAL_DOW_LONG': '',
\ 'CAL_MONTH_GREGORIAN_SHORT': '',
\ 'CAL_MONTH_GREGORIAN_LONG': '',
\ 'CAL_MONTH_JULIAN_SHORT': '',
\ 'CAL_MONTH_JULIAN_LONG': '',
\ 'CAL_MONTH_JEWISH': '',
\ 'CAL_MONTH_FRENCH': '',
\ }
let g:phpcomplete_builtin['constants']['oci8'] = {
\ 'OCI_SEEK_SET': '',
\ 'SQLT_NUM': '',
\ 'SQLT_INT': '',
\ 'SQLT_FLT': '',
\ 'SQLT_AFC': '',
\ 'SQLT_CHR': '',
\ 'SQLT_VCS': '',
\ 'SQLT_AVC': '',
\ 'SQLT_STR': '',
\ 'SQLT_LVC': '',
\ 'SQLT_ODT': '',
\ 'SQLT_BFILEE': '',
\ 'OCI_B_BFILE': '',
\ 'SQLT_CFILEE': '',
\ 'OCI_B_CFILEE': '',
\ 'SQLT_CLOB': '',
\ 'OCI_B_CLOB': '',
\ 'SQLT_BLOB': '',
\ 'OCI_B_BLOB': '',
\ 'SQLT_RDD': '',
\ 'OCI_B_ROWID': '',
\ 'SQLT_NTY': '',
\ 'OCI_B_NTY': '',
\ 'OCI_B_INT': '',
\ 'SQLT_BIN': '',
\ 'OCI_B_BIN': '',
\ 'SQLT_LNG': '',
\ 'SQLT_LBI': '',
\ 'SQLT_RSET': '',
\ 'SQLT_BOL': '',
\ 'OCI_B_BOL': '',
\ 'OCI_NO_AUTO_COMMIT': '',
\ 'OCI_COMMIT_ON_SUCCESS': '',
\ 'TWO_TASK': '',
\ 'LOCAL': '',
\ 'ORACLE_SID': '',
\ 'NLS_LANG': '',
\ 'OCI_DEFAULT': '',
\ 'OCI_SYSOPER': '',
\ 'OCI_SYSDBA': '',
\ 'OCI_CRED_EXT': '',
\ 'OCI_DESCRIBE_ONLY': '',
\ 'OCI_FETCHSTATEMENT_BY_COLUMN': '',
\ 'OCI_ASSOC': '',
\ 'OCI_FETCHSTATEMENT_BY_ROW': '',
\ 'OCI_NUM': '',
\ 'OCI_BOTH': '',
\ 'OCI_RETURN_NULLS': '',
\ 'OCI_RETURN_LOBS': '',
\ 'OCI_DTYPE_FILE': '',
\ 'OCI_DTYPE_LOB': '',
\ 'OCI_DTYPE_ROWID': '',
\ 'OCI_LOB_BUFFER_FREE': '',
\ 'OCI_SEEK_CUR': '',
\ 'OCI_SEEK_END': '',
\ 'OCI_TEMP_BLOB': '',
\ 'OCI_TEMP_CLOB': '',
\ 'OCI_EXACT_FETCH': '',
\ 'OCI_SYSDATE': '',
\ 'OCI_B_CURSOR': '',
\ 'OCI_B_SQLT_NTY': '',
\ 'OCI_B_NUM': '',
\ 'SQLT_BDOUBLE': '',
\ 'SQLT_BFLOAT': '',
\ 'SQLT_UIN': '',
\ 'OCI_D_FILE': '',
\ 'OCI_D_LOB': '',
\ 'OCI_D_ROWID': '',
\ 'SQLT_BFILE': '',
\ 'OCI_FO_BEGIN': '',
\ 'OCI_FO_END': '',
\ 'OCI_FO_ABORT': '',
\ 'OCI_FO_ERROR': '',
\ 'OCI_FO_REAUTH': '',
\ 'OCI_FO_SESSION': '',
\ 'OCI_FO_SELECT': '',
\ 'OCI_FO_RETRY': '',
\ }
let g:phpcomplete_builtin['constants']['curl'] = {
\ 'CURLOPT_POSTFIELDS': '',
\ 'CURLOPT_CAINFO': '',
\ 'CURLOPT_AUTOREFERER': '',
\ 'CURLOPT_COOKIESESSION': '',
\ 'CURLOPT_DNS_USE_GLOBAL_CACHE': '',
\ 'CURLOPT_DNS_CACHE_TIMEOUT': '',
\ 'CURLOPT_FTP_SSL': '',
\ 'CURLFTP_CREATE_DIR': '',
\ 'CURLFTP_CREATE_DIR_NONE': '',
\ 'CURLFTP_CREATE_DIR_RETRY': '',
\ 'CURLFTPSSL_TRY': '',
\ 'CURLFTPSSL_ALL': '',
\ 'CURLFTPSSL_CONTROL': '',
\ 'CURLFTPSSL_NONE': '',
\ 'CURLOPT_PRIVATE': '',
\ 'CURLOPT_FTPSSLAUTH': '',
\ 'CURLOPT_PORT': '',
\ 'CURLOPT_FILE': '',
\ 'CURLOPT_INFILE': '',
\ 'CURLOPT_INFILESIZE': '',
\ 'CURLOPT_URL': '',
\ 'CURLOPT_PROXY': '',
\ 'CURLOPT_VERBOSE': '',
\ 'CURLOPT_HEADER': '',
\ 'CURLOPT_HTTPHEADER': '',
\ 'CURLOPT_NOPROGRESS': '',
\ 'CURLOPT_NOBODY': '',
\ 'CURLOPT_FAILONERROR': '',
\ 'CURLOPT_UPLOAD': '',
\ 'CURLOPT_POST': '',
\ 'CURLOPT_FTPLISTONLY': '',
\ 'CURLOPT_FTPAPPEND': '',
\ 'CURLOPT_FTP_CREATE_MISSING_DIRS': '',
\ 'CURLOPT_NETRC': '',
\ 'CURLOPT_FOLLOWLOCATION': '',
\ 'CURLOPT_FTPASCII': '',
\ 'CURLOPT_PUT': '',
\ 'CURLOPT_MUTE': '',
\ 'CURLOPT_USERPWD': '',
\ 'CURLOPT_PROXYUSERPWD': '',
\ 'CURLOPT_RANGE': '',
\ 'CURLOPT_TIMEOUT': '',
\ 'CURLOPT_TIMEOUT_MS': '',
\ 'CURLOPT_TCP_NODELAY': '',
\ 'CURLOPT_PROGRESSFUNCTION': '',
\ 'CURLOPT_REFERER': '',
\ 'CURLOPT_USERAGENT': '',
\ 'CURLOPT_FTPPORT': '',
\ 'CURLOPT_FTP_USE_EPSV': '',
\ 'CURLOPT_LOW_SPEED_LIMIT': '',
\ 'CURLOPT_LOW_SPEED_TIME': '',
\ 'CURLOPT_RESUME_FROM': '',
\ 'CURLOPT_COOKIE': '',
\ 'CURLOPT_SSLCERT': '',
\ 'CURLOPT_SSLCERTPASSWD': '',
\ 'CURLOPT_WRITEHEADER': '',
\ 'CURLOPT_SSL_VERIFYHOST': '',
\ 'CURLOPT_COOKIEFILE': '',
\ 'CURLOPT_SSLVERSION': '',
\ 'CURL_SSLVERSION_DEFAULT': '',
\ 'CURLOPT_TIMECONDITION': '',
\ 'CURLOPT_TIMEVALUE': '',
\ 'CURLOPT_CUSTOMREQUEST': '',
\ 'CURLOPT_STDERR': '',
\ 'CURLOPT_TRANSFERTEXT': '',
\ 'CURLOPT_RETURNTRANSFER': '',
\ 'CURLOPT_QUOTE': '',
\ 'CURLOPT_POSTQUOTE': '',
\ 'CURLOPT_INTERFACE': '',
\ 'CURLOPT_KRB4LEVEL': '',
\ 'CURLOPT_HTTPPROXYTUNNEL': '',
\ 'CURLOPT_FILETIME': '',
\ 'CURLOPT_WRITEFUNCTION': '',
\ 'CURLOPT_READFUNCTION': '',
\ 'CURLOPT_PASSWDFUNCTION': '',
\ 'CURLOPT_HEADERFUNCTION': '',
\ 'CURLOPT_MAXREDIRS': '',
\ 'CURLOPT_MAXCONNECTS': '',
\ 'CURLOPT_CLOSEPOLICY': '',
\ 'CURLOPT_FRESH_CONNECT': '',
\ 'CURLOPT_FORBID_REUSE': '',
\ 'CURLOPT_RANDOM_FILE': '',
\ 'CURLOPT_EGDSOCKET': '',
\ 'CURLOPT_CONNECTTIMEOUT': '',
\ 'CURLOPT_CONNECTTIMEOUT_MS': '',
\ 'CURLOPT_SSL_VERIFYPEER': '',
\ 'CURLOPT_CAPATH': '',
\ 'CURLOPT_COOKIEJAR': '',
\ 'CURLOPT_SSL_CIPHER_LIST': '',
\ 'CURLOPT_BINARYTRANSFER': '',
\ 'CURLOPT_NOSIGNAL': '',
\ 'CURLOPT_PROXYTYPE': '',
\ 'CURLOPT_BUFFERSIZE': '',
\ 'CURLOPT_HTTPGET': '',
\ 'CURLOPT_HTTP_VERSION': '',
\ 'CURLOPT_SSLKEY': '',
\ 'CURLOPT_SSLKEYTYPE': '',
\ 'CURLOPT_SSLKEYPASSWD': '',
\ 'CURLOPT_SSLENGINE': '',
\ 'CURLOPT_SSLENGINE_DEFAULT': '',
\ 'CURLOPT_SSLCERTTYPE': '',
\ 'CURLOPT_CRLF': '',
\ 'CURLOPT_ENCODING': '',
\ 'CURLOPT_PROXYPORT': '',
\ 'CURLOPT_UNRESTRICTED_AUTH': '',
\ 'CURLOPT_FTP_USE_EPRT': '',
\ 'CURLOPT_HTTP200ALIASES': '',
\ 'CURLOPT_HTTPAUTH': '',
\ 'CURLAUTH_BASIC': '',
\ 'CURLAUTH_DIGEST': '',
\ 'CURLAUTH_GSSNEGOTIATE': '',
\ 'CURLAUTH_NEGOTIATE': '',
\ 'CURLAUTH_NTLM': '',
\ 'CURLAUTH_NTLM_WB': '',
\ 'CURLAUTH_ANY': '',
\ 'CURLAUTH_ANYSAFE': '',
\ 'CURLOPT_PROXYAUTH': '',
\ 'CURLOPT_MAX_RECV_SPEED_LARGE': '',
\ 'CURLOPT_MAX_SEND_SPEED_LARGE': '',
\ 'CURLOPT_HEADEROPT': '',
\ 'CURLOPT_PROXYHEADER': '',
\ 'CURLCLOSEPOLICY_LEAST_RECENTLY_USED': '',
\ 'CURLCLOSEPOLICY_LEAST_TRAFFIC': '',
\ 'CURLCLOSEPOLICY_SLOWEST': '',
\ 'CURLCLOSEPOLICY_CALLBACK': '',
\ 'CURLCLOSEPOLICY_OLDEST': '',
\ 'CURLINFO_PRIVATE': '',
\ 'CURLINFO_EFFECTIVE_URL': '',
\ 'CURLINFO_HTTP_CODE': '',
\ 'CURLINFO_RESPONSE_CODE': '',
\ 'CURLINFO_HEADER_OUT': '',
\ 'CURLINFO_HEADER_SIZE': '',
\ 'CURLINFO_REQUEST_SIZE': '',
\ 'CURLINFO_TOTAL_TIME': '',
\ 'CURLINFO_NAMELOOKUP_TIME': '',
\ 'CURLINFO_CONNECT_TIME': '',
\ 'CURLINFO_PRETRANSFER_TIME': '',
\ 'CURLINFO_SIZE_UPLOAD': '',
\ 'CURLINFO_SIZE_DOWNLOAD': '',
\ 'CURLINFO_SPEED_DOWNLOAD': '',
\ 'CURLINFO_SPEED_UPLOAD': '',
\ 'CURLINFO_FILETIME': '',
\ 'CURLINFO_SSL_VERIFYRESULT': '',
\ 'CURLINFO_CONTENT_LENGTH_DOWNLOAD': '',
\ 'CURLINFO_CONTENT_LENGTH_UPLOAD': '',
\ 'CURLINFO_STARTTRANSFER_TIME': '',
\ 'CURLINFO_CONTENT_TYPE': '',
\ 'CURLINFO_REDIRECT_TIME': '',
\ 'CURLINFO_REDIRECT_COUNT': '',
\ 'CURLINFO_REDIRECT_URL': '',
\ 'CURLINFO_PRIMARY_IP': '',
\ 'CURLINFO_PRIMARY_PORT': '',
\ 'CURLINFO_LOCAL_IP': '',
\ 'CURLINFO_LOCAL_PORT': '',
\ 'CURL_PUSH_OK': '',
\ 'CURL_PUSH_DENY': '',
\ 'CURL_REDIR_POST_301': '',
\ 'CURL_REDIR_POST_302': '',
\ 'CURL_REDIR_POST_303': '',
\ 'CURL_REDIR_POST_ALL': '',
\ 'CURL_TIMECOND_IFMODSINCE': '',
\ 'CURL_TIMECOND_IFUNMODSINCE': '',
\ 'CURL_TIMECOND_LASTMOD': '',
\ 'CURL_VERSION_ALTSVC': '',
\ 'CURL_VERSION_CURLDEBUG': '',
\ 'CURL_VERSION_IPV6': '',
\ 'CURL_VERSION_KERBEROS4': '',
\ 'CURL_VERSION_KERBEROS5': '',
\ 'CURL_VERSION_HTTP2': '',
\ 'CURL_VERSION_PSL': '',
\ 'CURL_VERSION_SSL': '',
\ 'CURL_VERSION_UNIX_SOCKETS': '',
\ 'CURL_VERSION_LIBZ': '',
\ 'CURLVERSION_NOW': '',
\ 'CURLE_OK': '',
\ 'CURLE_UNSUPPORTED_PROTOCOL': '',
\ 'CURLE_FAILED_INIT': '',
\ 'CURLE_URL_MALFORMAT': '',
\ 'CURLE_URL_MALFORMAT_USER': '',
\ 'CURLE_COULDNT_RESOLVE_PROXY': '',
\ 'CURLE_COULDNT_RESOLVE_HOST': '',
\ 'CURLE_COULDNT_CONNECT': '',
\ 'CURLE_FTP_WEIRD_SERVER_REPLY': '',
\ 'CURLE_FTP_ACCESS_DENIED': '',
\ 'CURLE_FTP_USER_PASSWORD_INCORRECT': '',
\ 'CURLE_FTP_WEIRD_PASS_REPLY': '',
\ 'CURLE_FTP_WEIRD_USER_REPLY': '',
\ 'CURLE_FTP_WEIRD_PASV_REPLY': '',
\ 'CURLE_FTP_WEIRD_227_FORMAT': '',
\ 'CURLE_FTP_CANT_GET_HOST': '',
\ 'CURLE_FTP_CANT_RECONNECT': '',
\ 'CURLE_FTP_COULDNT_SET_BINARY': '',
\ 'CURLE_PARTIAL_FILE': '',
\ 'CURLE_FTP_COULDNT_RETR_FILE': '',
\ 'CURLE_FTP_WRITE_ERROR': '',
\ 'CURLE_FTP_QUOTE_ERROR': '',
\ 'CURLE_HTTP_NOT_FOUND': '',
\ 'CURLE_WRITE_ERROR': '',
\ 'CURLE_MALFORMAT_USER': '',
\ 'CURLE_FTP_COULDNT_STOR_FILE': '',
\ 'CURLE_READ_ERROR': '',
\ 'CURLE_OUT_OF_MEMORY': '',
\ 'CURLE_OPERATION_TIMEOUTED': '',
\ 'CURLE_FTP_COULDNT_SET_ASCII': '',
\ 'CURLE_FTP_PORT_FAILED': '',
\ 'CURLE_FTP_COULDNT_USE_REST': '',
\ 'CURLE_FTP_COULDNT_GET_SIZE': '',
\ 'CURLE_HTTP_RANGE_ERROR': '',
\ 'CURLE_HTTP_POST_ERROR': '',
\ 'CURLE_SSL_CONNECT_ERROR': '',
\ 'CURLE_FTP_BAD_DOWNLOAD_RESUME': '',
\ 'CURLE_FILE_COULDNT_READ_FILE': '',
\ 'CURLE_LDAP_CANNOT_BIND': '',
\ 'CURLE_LDAP_SEARCH_FAILED': '',
\ 'CURLE_LIBRARY_NOT_FOUND': '',
\ 'CURLE_FUNCTION_NOT_FOUND': '',
\ 'CURLE_ABORTED_BY_CALLBACK': '',
\ 'CURLE_BAD_FUNCTION_ARGUMENT': '',
\ 'CURLE_BAD_CALLING_ORDER': '',
\ 'CURLE_HTTP_PORT_FAILED': '',
\ 'CURLE_BAD_PASSWORD_ENTERED': '',
\ 'CURLE_TOO_MANY_REDIRECTS': '',
\ 'CURLE_UNKNOWN_TELNET_OPTION': '',
\ 'CURLE_TELNET_OPTION_SYNTAX': '',
\ 'CURLE_OBSOLETE': '',
\ 'CURLE_SSL_PEER_CERTIFICATE': '',
\ 'CURLE_GOT_NOTHING': '',
\ 'CURLE_SSL_ENGINE_NOTFOUND': '',
\ 'CURLE_SSL_ENGINE_SETFAILED': '',
\ 'CURLE_SEND_ERROR': '',
\ 'CURLE_RECV_ERROR': '',
\ 'CURLE_SHARE_IN_USE': '',
\ 'CURLE_SSL_CERTPROBLEM': '',
\ 'CURLE_SSL_CIPHER': '',
\ 'CURLE_SSL_CACERT': '',
\ 'CURLE_BAD_CONTENT_ENCODING': '',
\ 'CURLE_LDAP_INVALID_URL': '',
\ 'CURLE_FILESIZE_EXCEEDED': '',
\ 'CURLE_FTP_SSL_FAILED': '',
\ 'CURLE_SSH': '',
\ 'CURLFTPAUTH_DEFAULT': '',
\ 'CURLFTPAUTH_SSL': '',
\ 'CURLFTPAUTH_TLS': '',
\ 'CURLPROXY_HTTP': '',
\ 'CURLPROXY_HTTP_1_0': '',
\ 'CURLPROXY_SOCKS4': '',
\ 'CURLPROXY_SOCKS5': '',
\ 'CURL_NETRC_OPTIONAL': '',
\ 'CURL_NETRC_IGNORED': '',
\ 'CURL_NETRC_REQUIRED': '',
\ 'CURL_HTTP_VERSION_NONE': '',
\ 'CURL_HTTP_VERSION_1_0': '',
\ 'CURL_HTTP_VERSION_1_1': '',
\ 'CURL_HTTP_VERSION_2': '',
\ 'CURL_HTTP_VERSION_2_0': '',
\ 'CURL_HTTP_VERSION_2TLS': '',
\ 'CURL_HTTP_VERSION_2_PRIOR_KNOWLEDGE': '',
\ 'CURLM_CALL_MULTI_PERFORM': '',
\ 'CURLM_OK': '',
\ 'CURLM_BAD_HANDLE': '',
\ 'CURLM_BAD_EASY_HANDLE': '',
\ 'CURLM_OUT_OF_MEMORY': '',
\ 'CURLM_INTERNAL_ERROR': '',
\ 'CURLMSG_DONE': '',
\ 'CURLOPT_KEYPASSWD': '',
\ 'CURLOPT_SSH_AUTH_TYPES': '',
\ 'CURLOPT_SSH_HOST_PUBLIC_KEY_MD5': '',
\ 'CURLOPT_SSH_PRIVATE_KEYFILE': '',
\ 'CURLOPT_SSH_PUBLIC_KEYFILE': '',
\ 'CURLOPT_SSL_OPTIONS': '',
\ 'CURLSSLOPT_ALLOW_BEAST': '',
\ 'CURLSSLOPT_NO_REVOKE': '',
\ 'CURLOPT_USERNAME': '',
\ 'CURLOPT_SASL_IR': '',
\ 'CURLOPT_DNS_INTERFACE': '',
\ 'CURLOPT_DNS_LOCAL_IP4': '',
\ 'CURLOPT_DNS_LOCAL_IP6': '',
\ 'CURLOPT_XOAUTH2_BEARER': '',
\ 'CURLOPT_LOGIN_OPTIONS': '',
\ 'CURLOPT_EXPECT_100_TIMEOUT_MS': '',
\ 'CURLOPT_SSL_ENABLE_ALPN': '',
\ 'CURLOPT_SSL_ENABLE_NPN': '',
\ 'CURLOPT_PINNEDPUBLICKEY': '',
\ 'CURLOPT_UNIX_SOCKET_PATH': '',
\ 'CURLOPT_SSL_VERIFYSTATUS': '',
\ 'CURLOPT_PATH_AS_IS': '',
\ 'CURLOPT_SSL_FALSESTART': '',
\ 'CURLOPT_PIPEWAIT': '',
\ 'CURLOPT_PROXY_SERVICE_NAME': '',
\ 'CURLOPT_SERVICE_NAME': '',
\ 'CURLOPT_DEFAULT_PROTOCOL': '',
\ 'CURLOPT_STREAM_WEIGHT': '',
\ 'CURLOPT_TFTP_NO_OPTIONS': '',
\ 'CURLOPT_CONNECT_TO': '',
\ 'CURLOPT_TCP_FASTOPEN': '',
\ 'CURLMOPT_PIPELINING': '',
\ 'CURLMOPT_MAXCONNECTS': '',
\ 'CURLMOPT_CHUNK_LENGTH_PENALTY_SIZE': '',
\ 'CURLMOPT_CONTENT_LENGTH_PENALTY_SIZE': '',
\ 'CURLMOPT_MAX_HOST_CONNECTIONS': '',
\ 'CURLMOPT_MAX_PIPELINE_LENGTH': '',
\ 'CURLMOPT_MAX_TOTAL_CONNECTIONS': '',
\ 'CURLMOPT_PUSHFUNCTION': '',
\ 'CURLSSH_AUTH_AGENT': '',
\ 'CURLSSH_AUTH_ANY': '',
\ 'CURLSSH_AUTH_DEFAULT': '',
\ 'CURLSSH_AUTH_HOST': '',
\ 'CURLSSH_AUTH_KEYBOARD': '',
\ 'CURLSSH_AUTH_NONE': '',
\ 'CURLSSH_AUTH_PASSWORD': '',
\ 'CURLSSH_AUTH_PUBLICKEY': '',
\ 'CURL_WRAPPERS_ENABLED': '',
\ 'CURLPAUSE_ALL': '',
\ 'CURLPAUSE_CONT': '',
\ 'CURLPAUSE_RECV': '',
\ 'CURLPAUSE_RECV_CONT': '',
\ 'CURLPAUSE_SEND': '',
\ 'CURLPAUSE_SEND_CONT': '',
\ 'CURLPIPE_NOTHING': '',
\ 'CURLPIPE_HTTP1': '',
\ 'CURLPIPE_MULTIPLEX': '',
\ 'CURLPROXY_SOCKS4A': '',
\ 'CURLPROXY_SOCKS5_HOSTNAME': '',
\ 'CURLHEADER_SEPARATE': '',
\ 'CURLHEADER_UNIFIED': '',
\ 'CURLPROTO_SMB': '',
\ 'CURLPROTO_SMBS': '',
\ 'CURLOPT_REQUEST_TARGET': '',
\ 'CURLAUTH_GSSAPI': '',
\ 'CURLE_WEIRD_SERVER_REPLY': '',
\ 'CURLINFO_CONTENT_LENGTH_DOWNLOAD_T': '',
\ 'CURLINFO_CONTENT_LENGTH_UPLOAD_T': '',
\ 'CURLINFO_HTTP_VERSION': '',
\ 'CURLINFO_PROTOCOL': '',
\ 'CURLINFO_PROXY_SSL_VERIFYRESULT': '',
\ 'CURLINFO_SCHEME': '',
\ 'CURLINFO_SIZE_DOWNLOAD_T': '',
\ 'CURLINFO_SIZE_UPLOAD_T': '',
\ 'CURLINFO_SPEED_DOWNLOAD_T': '',
\ 'CURLINFO_SPEED_UPLOAD_T': '',
\ 'CURL_MAX_READ_SIZE': '',
\ 'CURLOPT_ABSTRACT_UNIX_SOCKET': '',
\ 'CURLOPT_KEEP_SENDING_ON_ERROR': '',
\ 'CURLOPT_PRE_PROXY': '',
\ 'CURLOPT_PROXY_CAINFO': '',
\ 'CURLOPT_PROXY_CAPATH': '',
\ 'CURLOPT_PROXY_CRLFILE': '',
\ 'CURLOPT_PROXY_KEYPASSWD': '',
\ 'CURLOPT_PROXY_PINNEDPUBLICKEY': '',
\ 'CURLOPT_PROXY_SSLCERT': '',
\ 'CURLOPT_PROXY_SSLCERTTYPE': '',
\ 'CURLOPT_PROXY_SSL_CIPHER_LIST': '',
\ 'CURLOPT_PROXY_SSLKEY': '',
\ 'CURLOPT_PROXY_SSLKEYTYPE': '',
\ 'CURLOPT_PROXY_SSL_OPTIONS': '',
\ 'CURLOPT_PROXY_SSL_VERIFYHOST': '',
\ 'CURLOPT_PROXY_SSL_VERIFYPEER': '',
\ 'CURLOPT_PROXY_SSLVERSION': '',
\ 'CURLOPT_PROXY_TLSAUTH_PASSWORD': '',
\ 'CURLOPT_PROXY_TLSAUTH_TYPE': '',
\ 'CURLOPT_PROXY_TLSAUTH_USERNAME': '',
\ 'CURLOPT_SOCKS5_AUTH': '',
\ 'CURLOPT_SUPPRESS_CONNECT_HEADERS': '',
\ 'CURLPROXY_HTTPS': '',
\ 'CURL_SSLVERSION_MAX_DEFAULT': '',
\ 'CURL_SSLVERSION_MAX_NONE': '',
\ 'CURL_VERSION_HTTPS_PROXY': '',
\ 'CURLINFO_HTTP_CONNECTCODE': '',
\ 'CURLINFO_HTTPAUTH_AVAIL': '',
\ 'CURLINFO_PROXYAUTH_AVAIL': '',
\ 'CURLINFO_OS_ERRNO': '',
\ 'CURLINFO_NUM_CONNECTS': '',
\ 'CURLINFO_SSL_ENGINES': '',
\ 'CURLINFO_COOKIELIST': '',
\ 'CURLINFO_FTP_ENTRY_PATH': '',
\ 'CURLINFO_APPCONNECT_TIME': '',
\ 'CURLINFO_CERTINFO': '',
\ 'CURLINFO_CONDITION_UNMET': '',
\ 'CURLINFO_RTSP_CLIENT_CSEQ': '',
\ 'CURLINFO_RTSP_CSEQ_RECV': '',
\ 'CURLINFO_RTSP_SERVER_CSEQ': '',
\ 'CURLINFO_RTSP_SESSION_ID': '',
\ 'CURLM_XXX': '',
\ 'CURLOPT_CERTINFO': '',
\ 'CURLOPT_CONNECT_ONLY': '',
\ 'CURLINFO_': '',
\ 'CURLOPT_SAFE_UPLOAD': '',
\ 'CURLOPT_POSTREDIR': '',
\ 'CURLOPT_PROTOCOLS': '',
\ 'CURLOPT_REDIR_PROTOCOLS': '',
\ 'CURLOPT_IPRESOLVE': '',
\ 'CURL_IPRESOLVE_WHATEVER': '',
\ 'CURL_IPRESOLVE_V4': '',
\ 'CURL_IPRESOLVE_V6': '',
\ 'CURLOPT_FTP_FILEMETHOD': '',
\ 'CURLFTPMETHOD_MULTICWD': '',
\ 'CURLFTPMETHOD_NOCWD': '',
\ 'CURLFTPMETHOD_SINGLECWD': '',
\ 'CURLOPT_RESOLVE': '',
\ 'CURLOPT_SHARE': '',
\ 'CURLSHOPT_SHARE': '',
\ 'CURLSHOPT_UNSHARE': '',
\ 'CURL_LOCK_DATA_COOKIE': '',
\ 'CURL_LOCK_DATA_DNS': '',
\ 'CURL_LOCK_DATA_SSL_SESSION': '',
\ }
let g:phpcomplete_builtin['constants']['date_time'] = {
\ 'DATE_ATOM': '',
\ 'DATE_COOKIE': '',
\ 'DATE_ISO8601': '',
\ 'DATE_RFC822': '',
\ 'DATE_RFC850': '',
\ 'DATE_RFC1036': '',
\ 'DATE_RFC1123': '',
\ 'DATE_RFC2822': '',
\ 'DATE_RFC3339': '',
\ 'DATE_RFC3339_EXTENDED': '',
\ 'DATE_RSS': '',
\ 'DATE_W3C': '',
\ 'PHP_INT_MIN': '',
\ 'PHP_INT_MAX': '',
\ 'SUNFUNCS_RET_TIMESTAMP': '',
\ 'SUNFUNCS_RET_STRING': '',
\ 'SUNFUNCS_RET_DOUBLE': '',
\ 'LC_TIME': '',
\ }
let g:phpcomplete_builtin['constants']['ev'] = {
\ 'SIGCHLD': '',
\ 'EAGAIN': '',
\ 'SIGALRM': '',
\ 'SIGINT': '',
\ 'SIGIO': '',
\ 'N': '',
\ 'STDIN': '',
\ }
let g:phpcomplete_builtin['constants']['event'] = {
\ 'FD_CLOEXEC': '',
\ 'SIGTERM': '',
\ 'SIGHUP': '',
\ }
let g:phpcomplete_builtin['constants']['json'] = {
\ 'JSON_THROW_ON_ERROR': '',
\ 'JSON_BIGINT_AS_STRING': '',
\ 'JSON_INVALID_UTF8_IGNORE': '',
\ 'JSON_INVALID_UTF8_SUBSTITUTE': '',
\ 'JSON_OBJECT_AS_ARRAY': '',
\ 'JSON_FORCE_OBJECT': '',
\ 'JSON_HEX_QUOT': '',
\ 'JSON_HEX_TAG': '',
\ 'JSON_HEX_AMP': '',
\ 'JSON_HEX_APOS': '',
\ 'JSON_NUMERIC_CHECK': '',
\ 'JSON_PARTIAL_OUTPUT_ON_ERROR': '',
\ 'JSON_PRESERVE_ZERO_FRACTION': '',
\ 'JSON_PRETTY_PRINT': '',
\ 'JSON_UNESCAPED_LINE_TERMINATORS': '',
\ 'JSON_UNESCAPED_SLASHES': '',
\ 'JSON_UNESCAPED_UNICODE': '',
\ 'JSON_ERROR_NONE': '',
\ 'JSON_ERROR_DEPTH': '',
\ 'JSON_ERROR_STATE_MISMATCH': '',
\ 'JSON_ERROR_CTRL_CHAR': '',
\ 'JSON_ERROR_SYNTAX': '',
\ 'JSON_ERROR_UTF8': '',
\ 'JSON_ERROR_RECURSION': '',
\ 'JSON_ERROR_INF_OR_NAN': '',
\ 'NAN': '',
\ 'INF': '',
\ 'JSON_ERROR_UNSUPPORTED_TYPE': '',
\ 'JSON_ERROR_INVALID_PROPERTY_NAME': '',
\ 'JSON_ERROR_UTF16': '',
\ }
let g:phpcomplete_builtin['constants']['libxml'] = {
\ 'LIBXML_ERR_WARNING': '',
\ 'LIBXML_ERR_ERROR': '',
\ 'LIBXML_ERR_FATAL': '',
\ 'LIBXML_NONET': '',
\ 'LIBXML_BIGLINES': '',
\ 'LIBXML_COMPACT': '',
\ 'LIBXML_DTDATTR': '',
\ 'LIBXML_DTDLOAD': '',
\ 'LIBXML_DTDVALID': '',
\ 'LIBXML_HTML_NOIMPLIED': '',
\ 'LIBXML_HTML_NODEFDTD': '',
\ 'LIBXML_NOBLANKS': '',
\ 'LIBXML_NOCDATA': '',
\ 'LIBXML_NOEMPTYTAG': '',
\ 'LIBXML_NOENT': '',
\ 'LIBXML_NOERROR': '',
\ 'LIBXML_NOWARNING': '',
\ 'LIBXML_NOXMLDECL': '',
\ 'LIBXML_NSCLEAN': '',
\ 'LIBXML_PARSEHUGE': '',
\ 'LIBXML_PEDANTIC': '',
\ 'LIBXML_XINCLUDE': '',
\ 'LIBXML_ERR_NONE': '',
\ 'LIBXML_VERSION': '',
\ 'LIBXML_DOTTED_VERSION': '',
\ 'LIBXML_SCHEMA_CREATE': '',
\ }
let g:phpcomplete_builtin['constants']['vendor_specific_database_extensions'] = {
\ 'PHP_INT_SIZE': '',
\ 'NAN': '',
\ 'INF': '',
\ 'MONGODB_VERSION': '',
\ 'MONGODB_STABILITY': '',
\ 'MYSQLX_LOCK_DEFAULT': '',
\ 'MYSQLX_LOCK_NOWAIT': '',
\ 'MYSQLX_LOCK_SKIP_LOCKED': '',
\ 'MYSQLX_CLIENT_SSL': '',
\ 'MYSQLX_TYPE_DECIMAL': '',
\ 'MYSQLX_TYPE_TINY': '',
\ 'MYSQLX_TYPE_SHORT': '',
\ 'MYSQLX_TYPE_SMALLINT': '',
\ 'MYSQLX_TYPE_MEDIUMINT': '',
\ 'MYSQLX_TYPE_INT': '',
\ 'MYSQLX_TYPE_BIGINT': '',
\ 'MYSQLX_TYPE_LONG': '',
\ 'MYSQLX_TYPE_FLOAT': '',
\ 'MYSQLX_TYPE_DOUBLE': '',
\ 'MYSQLX_TYPE_NULL': '',
\ 'MYSQLX_TYPE_TIMESTAMP': '',
\ 'MYSQLX_TYPE_LONGLONG': '',
\ 'MYSQLX_TYPE_INT24': '',
\ 'MYSQLX_TYPE_DATE': '',
\ 'MYSQLX_TYPE_TIME': '',
\ 'MYSQLX_TYPE_DATETIME': '',
\ 'MYSQLX_TYPE_YEAR': '',
\ 'MYSQLX_TYPE_NEWDATE': '',
\ 'MYSQLX_TYPE_ENUM': '',
\ 'MYSQLX_TYPE_SET': '',
\ 'MYSQLX_TYPE_TINY_BLOB': '',
\ 'MYSQLX_TYPE_MEDIUM_BLOB': '',
\ 'MYSQLX_TYPE_LONG_BLOB': '',
\ 'MYSQLX_TYPE_BLOB': '',
\ 'MYSQLX_TYPE_VAR_STRING': '',
\ 'MYSQLX_TYPE_STRING': '',
\ 'MYSQLX_TYPE_CHAR': '',
\ 'MYSQLX_TYPE_BYTES': '',
\ 'MYSQLX_TYPE_INTERVAL': '',
\ 'MYSQLX_TYPE_GEOMETRY': '',
\ 'MYSQLX_TYPE_JSON': '',
\ 'MYSQLX_TYPE_NEWDECIMAL': '',
\ 'MYSQLX_TYPE_BIT': '',
\ }
let g:phpcomplete_builtin['constants']['mysqli'] = {
\ 'MYSQLI_REPORT_OFF': '',
\ 'MYSQLI_REPORT_ALL': '',
\ 'MYSQLI_REPORT_STRICT': '',
\ 'MYSQLI_REPORT_ERROR': '',
\ 'MYSQLI_REPORT_INDEX': '',
\ 'MYSQLI_ASSOC': '',
\ 'MYSQLI_NUM': '',
\ 'MYSQLI_BOTH': '',
\ 'PHP_INT_MAX': '',
\ 'MYSQLI_TRANS_START_READ_ONLY': '',
\ 'MYSQLI_TRANS_START_READ_WRITE': '',
\ 'MYSQLI_TRANS_START_WITH_CONSISTENT_SNAPSHOT': '',
\ 'MYSQLI_READ_DEFAULT_GROUP': '',
\ 'MYSQLI_READ_DEFAULT_FILE': '',
\ 'MYSQLI_OPT_CONNECT_TIMEOUT': '',
\ 'MYSQLI_OPT_LOCAL_INFILE': '',
\ 'MYSQLI_INIT_COMMAND': '',
\ 'MYSQLI_CLIENT_SSL': '',
\ 'MYSQLI_CLIENT_COMPRESS': '',
\ 'MYSQLI_CLIENT_INTERACTIVE': '',
\ 'MYSQLI_CLIENT_IGNORE_SPACE': '',
\ 'MYSQLI_CLIENT_NO_SCHEMA': '',
\ 'MYSQLI_CLIENT_MULTI_QUERIES': '',
\ 'MYSQLI_STORE_RESULT': '',
\ 'MYSQLI_USE_RESULT': '',
\ 'MYSQLI_NOT_NULL_FLAG': '',
\ 'MYSQLI_PRI_KEY_FLAG': '',
\ 'MYSQLI_UNIQUE_KEY_FLAG': '',
\ 'MYSQLI_MULTIPLE_KEY_FLAG': '',
\ 'MYSQLI_BLOB_FLAG': '',
\ 'MYSQLI_UNSIGNED_FLAG': '',
\ 'MYSQLI_ZEROFILL_FLAG': '',
\ 'MYSQLI_AUTO_INCREMENT_FLAG': '',
\ 'MYSQLI_TIMESTAMP_FLAG': '',
\ 'MYSQLI_SET_FLAG': '',
\ 'MYSQLI_NUM_FLAG': '',
\ 'MYSQLI_PART_KEY_FLAG': '',
\ 'MYSQLI_GROUP_FLAG': '',
\ 'MYSQLI_TYPE_DECIMAL': '',
\ 'MYSQLI_TYPE_NEWDECIMAL': '',
\ 'MYSQLI_TYPE_BIT': '',
\ 'MYSQLI_TYPE_TINY': '',
\ 'MYSQLI_TYPE_SHORT': '',
\ 'MYSQLI_TYPE_LONG': '',
\ 'MYSQLI_TYPE_FLOAT': '',
\ 'MYSQLI_TYPE_DOUBLE': '',
\ 'MYSQLI_TYPE_NULL': '',
\ 'MYSQLI_TYPE_TIMESTAMP': '',
\ 'MYSQLI_TYPE_LONGLONG': '',
\ 'MYSQLI_TYPE_INT24': '',
\ 'MYSQLI_TYPE_DATE': '',
\ 'MYSQLI_TYPE_TIME': '',
\ 'MYSQLI_TYPE_DATETIME': '',
\ 'MYSQLI_TYPE_YEAR': '',
\ 'MYSQLI_TYPE_NEWDATE': '',
\ 'MYSQLI_TYPE_INTERVAL': '',
\ 'MYSQLI_TYPE_ENUM': '',
\ 'MYSQLI_TYPE_SET': '',
\ 'MYSQLI_TYPE_TINY_BLOB': '',
\ 'MYSQLI_TYPE_MEDIUM_BLOB': '',
\ 'MYSQLI_TYPE_LONG_BLOB': '',
\ 'MYSQLI_TYPE_BLOB': '',
\ 'MYSQLI_TYPE_VAR_STRING': '',
\ 'MYSQLI_TYPE_STRING': '',
\ 'MYSQLI_TYPE_CHAR': '',
\ 'MYSQLI_TYPE_GEOMETRY': '',
\ 'MYSQLI_NEED_DATA': '',
\ 'MYSQLI_NO_DATA': '',
\ 'MYSQLI_DATA_TRUNCATED': '',
\ 'MYSQLI_ENUM_FLAG': '',
\ 'MYSQLI_BINARY_FLAG': '',
\ 'MYSQLI_CURSOR_TYPE_FOR_UPDATE': '',
\ 'MYSQLI_CURSOR_TYPE_NO_CURSOR': '',
\ 'MYSQLI_CURSOR_TYPE_READ_ONLY': '',
\ 'MYSQLI_CURSOR_TYPE_SCROLLABLE': '',
\ 'MYSQLI_STMT_ATTR_CURSOR_TYPE': '',
\ 'MYSQLI_STMT_ATTR_PREFETCH_ROWS': '',
\ 'MYSQLI_STMT_ATTR_UPDATE_MAX_LENGTH': '',
\ 'MYSQLI_SET_CHARSET_NAME': '',
\ 'MYSQLI_DEBUG_TRACE_ENABLED': '',
\ 'MYSQLI_SERVER_QUERY_NO_GOOD_INDEX_USED': '',
\ 'MYSQLI_SERVER_QUERY_NO_INDEX_USED': '',
\ 'MYSQLI_REFRESH_GRANT': '',
\ 'MYSQLI_REFRESH_LOG': '',
\ 'MYSQLI_REFRESH_TABLES': '',
\ 'MYSQLI_REFRESH_HOSTS': '',
\ 'MYSQLI_REFRESH_STATUS': '',
\ 'MYSQLI_REFRESH_THREADS': '',
\ 'MYSQLI_REFRESH_SLAVE': '',
\ 'MYSQLI_REFRESH_MASTER': '',
\ 'MYSQLI_TRANS_COR_AND_CHAIN': '',
\ 'MYSQLI_TRANS_COR_AND_NO_CHAIN': '',
\ 'MYSQLI_TRANS_COR_RELEASE': '',
\ 'MYSQLI_TRANS_COR_NO_RELEASE': '',
\ 'MYSQLI_TRANS_START_CONSISTENT_SNAPSHOT': '',
\ 'MYSQL_READ_DEFAULT_FILE': '',
\ 'MYSQLI_SERVER_PUBLIC_KEY': '',
\ 'MYSQLI_OPT_NET_CMD_BUFFER_SIZE': '',
\ 'MYSQLI_OPT_NET_READ_BUFFER_SIZE': '',
\ 'MYSQLI_OPT_INT_AND_FLOAT_NATIVE': '',
\ 'MYSQLI_OPT_SSL_VERIFY_SERVER_CERT': '',
\ 'MYSQLI_NO_CHANGE_USER_ON_PCONNECT': '',
\ 'MYSQLI_ASYNC': '',
\ 'MYSQLI_CLIENT_FOUND_ROWS': '',
\ 'MYSQLI_CLIENT_SSL_DONT_VERIFY_SERVER_CERT': '',
\ 'MULTI_STATEMENT': '',
\ 'MYSQLI_RPL_MASTER': '',
\ 'MYSQLI_RPL_SLAVE': '',
\ 'MYSQLI_RPL_ADMIN': '',
\ 'MYSQLI_STORE_RESULT_COPY_DATA': '',
\ }
let g:phpcomplete_builtin['constants']['oauth'] = {
\ 'OAUTH_SIG_METHOD_HMACSHA1': '',
\ 'OAUTH_SIG_METHOD_RSASHA1': '',
\ 'OAUTH_SIG_METHOD_HMACSHA256': '',
\ 'OAUTH_AUTH_TYPE_AUTHORIZATION': '',
\ 'OAUTH_AUTH_TYPE_NONE': '',
\ 'OAUTH_AUTH_TYPE_URI': '',
\ 'OAUTH_AUTH_TYPE_FORM': '',
\ 'OAUTH_HTTP_METHOD_GET': '',
\ 'OAUTH_HTTP_METHOD_POST': '',
\ 'OAUTH_HTTP_METHOD_PUT': '',
\ 'OAUTH_HTTP_METHOD_HEAD': '',
\ 'OAUTH_HTTP_METHOD_DELETE': '',
\ 'OAUTH_REQENGINE_STREAMS': '',
\ 'OAUTH_REQENGINE_CURL': '',
\ 'OAUTH_OK': '',
\ 'OAUTH_BAD_NONCE': '',
\ 'OAUTH_BAD_TIMESTAMP': '',
\ 'OAUTH_CONSUMER_KEY_UNKNOWN': '',
\ 'OAUTH_CONSUMER_KEY_REFUSED': '',
\ 'OAUTH_INVALID_SIGNATURE': '',
\ 'OAUTH_TOKEN_USED': '',
\ 'OAUTH_TOKEN_EXPIRED': '',
\ 'OAUTH_TOKEN_REVOKED': '',
\ 'OAUTH_TOKEN_REJECTED': '',
\ 'OAUTH_VERIFIER_INVALID': '',
\ 'OAUTH_PARAMETER_ABSENT': '',
\ 'OAUTH_SIGNATURE_METHOD_REJECTED': '',
\ }
let g:phpcomplete_builtin['constants']['rar'] = {
\ 'RAR_HOST_MSDOS': '',
\ 'RAR_HOST_OS2': '',
\ 'RAR_HOST_WIN32': '',
\ 'RAR_HOST_UNIX': '',
\ 'RAR_HOST_BEOS': '',
\ 'PHP_INT_MAX': '',
\ }
let g:phpcomplete_builtin['constants']['spl'] = {
\ 'CHILD_ARRAYS_ONLY': '',
\ 'READ_AHEAD': '',
\ 'MIT_NEED_ALL': '',
\ 'MIT_KEYS_ASSOC': '',
\ 'CALL_TOSTRING': '',
\ 'CATCH_GET_CHILD': '',
\ 'RIT_LEAVES_ONLY': '',
\ 'LOCK_SH': '',
\ 'LOCK_EX': '',
\ 'LOCK_UN': '',
\ 'LOCK_NB': '',
\ 'PHP_INT_MAX': '',
\ 'SEEK_SET': '',
\ 'SEEK_CUR': '',
\ 'SEEK_END': '',
\ }
let g:phpcomplete_builtin['constants']['snmp'] = {
\ 'SNMP_VALUE_LIBRARY': '',
\ 'SNMP_VALUE_PLAIN': '',
\ 'SNMP_VALUE_OBJECT': '',
\ 'SNMP_OID_OUTPUT_FULL': '',
\ 'SNMP_OID_OUTPUT_NUMERIC': '',
\ 'SNMP_OID_OUTPUT_MODULE': '',
\ 'SNMP_OID_OUTPUT_SUFFIX': '',
\ 'SNMP_OID_OUTPUT_UCD': '',
\ 'SNMP_OID_OUTPUT_NONE': '',
\ 'OPAQUE_SPECIAL_TYPES': '',
\ 'SNMP_BIT_STR': '',
\ 'SNMP_OCTET_STR': '',
\ 'SNMP_OPAQUE': '',
\ 'SNMP_NULL': '',
\ 'SNMP_OBJECT_ID': '',
\ 'SNMP_IPADDRESS': '',
\ 'SNMP_COUNTER': '',
\ 'SNMP_UNSIGNED': '',
\ 'SNMP_TIMETICKS': '',
\ 'SNMP_UINTEGER': '',
\ 'SNMP_INTEGER': '',
\ 'SNMP_COUNTER64': '',
\ }
let g:phpcomplete_builtin['constants']['tidy'] = {
\ 'TIDY_NODETYPE_PHP': '',
\ 'TIDY_TAG_FRAME': '',
\ 'TIDY_TAG_A': '',
\ 'TIDY_TAG_UNKNOWN': '',
\ 'TIDY_TAG_ABBR': '',
\ 'TIDY_TAG_ACRONYM': '',
\ 'TIDY_TAG_ALIGN': '',
\ 'TIDY_TAG_APPLET': '',
\ 'TIDY_TAG_AREA': '',
\ 'TIDY_TAG_ARTICLE': '',
\ 'TIDY_TAG_ASIDE': '',
\ 'TIDY_TAG_AUDIO': '',
\ 'TIDY_TAG_B': '',
\ 'TIDY_TAG_BASE': '',
\ 'TIDY_TAG_BASEFONT': '',
\ 'TIDY_TAG_BDI': '',
\ 'TIDY_TAG_BDO': '',
\ 'TIDY_TAG_BGSOUND': '',
\ 'TIDY_TAG_BIG': '',
\ 'TIDY_TAG_BLINK': '',
\ 'TIDY_TAG_BLOCKQUOTE': '',
\ 'TIDY_TAG_BODY': '',
\ 'TIDY_TAG_BR': '',
\ 'TIDY_TAG_BUTTON': '',
\ 'TIDY_TAG_CANVAS': '',
\ 'TIDY_TAG_CAPTION': '',
\ 'TIDY_TAG_CENTER': '',
\ 'TIDY_TAG_CITE': '',
\ 'TIDY_TAG_CODE': '',
\ 'TIDY_TAG_COL': '',
\ 'TIDY_TAG_COLGROUP': '',
\ 'TIDY_TAG_COMMAND': '',
\ 'TIDY_TAG_COMMENT': '',
\ 'TIDY_TAG_DATALIST': '',
\ 'TIDY_TAG_DD': '',
\ 'TIDY_TAG_DEL': '',
\ 'TIDY_TAG_DETAILS': '',
\ 'TIDY_TAG_DFN': '',
\ 'TIDY_TAG_DIALOG': '',
\ 'TIDY_TAG_DIR': '',
\ 'TIDY_TAG_DIV': '',
\ 'TIDY_TAG_DL': '',
\ 'TIDY_TAG_DT': '',
\ 'TIDY_TAG_EM': '',
\ 'TIDY_TAG_EMBED': '',
\ 'TIDY_TAG_FIELDSET': '',
\ 'TIDY_TAG_FIGCAPTION': '',
\ 'TIDY_TAG_FIGURE': '',
\ 'TIDY_TAG_FONT': '',
\ 'TIDY_TAG_FOOTER': '',
\ 'TIDY_TAG_FORM': '',
\ 'TIDY_TAG_FRAMESET': '',
\ 'TIDY_TAG_H1': '',
\ 'TIDY_TAG_H2': '',
\ 'TIDY_TAG_H3': '',
\ 'TIDY_TAG_H4': '',
\ 'TIDY_TAG_H5': '',
\ 'TIDY_TAG_H6': '',
\ 'TIDY_TAG_HEAD': '',
\ 'TIDY_TAG_HEADER': '',
\ 'TIDY_TAG_HGROUP': '',
\ 'TIDY_TAG_HR': '',
\ 'TIDY_TAG_HTML': '',
\ 'TIDY_TAG_I': '',
\ 'TIDY_TAG_IFRAME': '',
\ 'TIDY_TAG_ILAYER': '',
\ 'TIDY_TAG_IMG': '',
\ 'TIDY_TAG_INPUT': '',
\ 'TIDY_TAG_INS': '',
\ 'TIDY_TAG_ISINDEX': '',
\ 'TIDY_TAG_KBD': '',
\ 'TIDY_TAG_KEYGEN': '',
\ 'TIDY_TAG_LABEL': '',
\ 'TIDY_TAG_LAYER': '',
\ 'TIDY_TAG_LEGEND': '',
\ 'TIDY_TAG_LI': '',
\ 'TIDY_TAG_LINK': '',
\ 'TIDY_TAG_LISTING': '',
\ 'TIDY_TAG_MAIN': '',
\ 'TIDY_TAG_MAP': '',
\ 'TIDY_TAG_MARK': '',
\ 'TIDY_TAG_MARQUEE': '',
\ 'TIDY_TAG_MENU': '',
\ 'TIDY_TAG_MENUITEM': '',
\ 'TIDY_TAG_META': '',
\ 'TIDY_TAG_METER': '',
\ 'TIDY_TAG_MULTICOL': '',
\ 'TIDY_TAG_NAV': '',
\ 'TIDY_TAG_NOBR': '',
\ 'TIDY_TAG_NOEMBED': '',
\ 'TIDY_TAG_NOFRAMES': '',
\ 'TIDY_TAG_NOLAYER': '',
\ 'TIDY_TAG_NOSAVE': '',
\ 'TIDY_TAG_NOSCRIPT': '',
\ 'TIDY_TAG_OBJECT': '',
\ 'TIDY_TAG_OL': '',
\ 'TIDY_TAG_OPTGROUP': '',
\ 'TIDY_TAG_OPTION': '',
\ 'TIDY_TAG_OUTPUT': '',
\ 'TIDY_TAG_P': '',
\ 'TIDY_TAG_PARAM': '',
\ 'TIDY_TAG_PLAINTEXT': '',
\ 'TIDY_TAG_PRE': '',
\ 'TIDY_TAG_PROGRESS': '',
\ 'TIDY_TAG_Q': '',
\ 'TIDY_TAG_RB': '',
\ 'TIDY_TAG_RBC': '',
\ 'TIDY_TAG_RP': '',
\ 'TIDY_TAG_RT': '',
\ 'TIDY_TAG_RTC': '',
\ 'TIDY_TAG_RUBY': '',
\ 'TIDY_TAG_S': '',
\ 'TIDY_TAG_SAMP': '',
\ 'TIDY_TAG_SCRIPT': '',
\ 'TIDY_TAG_SECTION': '',
\ 'TIDY_TAG_SELECT': '',
\ 'TIDY_TAG_SERVER': '',
\ 'TIDY_TAG_SERVLET': '',
\ 'TIDY_TAG_SMALL': '',
\ 'TIDY_TAG_SOURCE': '',
\ 'TIDY_TAG_SPACER': '',
\ 'TIDY_TAG_SPAN': '',
\ 'TIDY_TAG_STRIKE': '',
\ 'TIDY_TAG_STRONG': '',
\ 'TIDY_TAG_STYLE': '',
\ 'TIDY_TAG_SUB': '',
\ 'TIDY_TAG_SUMMARY': '',
\ 'TIDY_TAG_SUP': '',
\ 'TIDY_TAG_TABLE': '',
\ 'TIDY_TAG_TBODY': '',
\ 'TIDY_TAG_TD': '',
\ 'TIDY_TAG_TEMPLATE': '',
\ 'TIDY_TAG_TEXTAREA': '',
\ 'TIDY_TAG_TFOOT': '',
\ 'TIDY_TAG_TH': '',
\ 'TIDY_TAG_THEAD': '',
\ 'TIDY_TAG_TIME': '',
\ 'TIDY_TAG_TITLE': '',
\ 'TIDY_TAG_TR': '',
\ 'TIDY_TAG_TRACK': '',
\ 'TIDY_TAG_TT': '',
\ 'TIDY_TAG_U': '',
\ 'TIDY_TAG_UL': '',
\ 'TIDY_TAG_VAR': '',
\ 'TIDY_TAG_VIDEO': '',
\ 'TIDY_TAG_WBR': '',
\ 'TIDY_TAG_XMP': '',
\ 'TIDY_NODETYPE_ROOT': '',
\ 'TIDY_NODETYPE_DOCTYPE': '',
\ 'TIDY_NODETYPE_COMMENT': '',
\ 'TIDY_NODETYPE_PROCINS': '',
\ 'TIDY_NODETYPE_TEXT': '',
\ 'TIDY_NODETYPE_START': '',
\ 'TIDY_NODETYPE_END': '',
\ 'TIDY_NODETYPE_STARTEND': '',
\ 'TIDY_NODETYPE_CDATA': '',
\ 'TIDY_NODETYPE_SECTION': '',
\ 'TIDY_NODETYPE_ASP': '',
\ 'TIDY_NODETYPE_JSTE': '',
\ 'TIDY_NODETYPE_XMLDECL': '',
\ }
let g:phpcomplete_builtin['constants']['classkit'] = {
\ 'CLASSKIT_ACC_PRIVATE': '',
\ 'CLASSKIT_ACC_PROTECTED': '',
\ 'CLASSKIT_ACC_PUBLIC': '',
\ }
let g:phpcomplete_builtin['constants']['com'] = {
\ 'CP_ACP': '',
\ 'CLSCTX_INPROC_SERVER': '',
\ 'CLSCTX_INPROC_HANDLER': '',
\ 'CLSCTX_LOCAL_SERVER': '',
\ 'CLSCTX_REMOTE_SERVER': '',
\ 'CLSCTX_SERVER': '',
\ 'CLSCTX_ALL': '',
\ 'VT_NULL': '',
\ 'VT_EMPTY': '',
\ 'VT_UI1': '',
\ 'VT_I2': '',
\ 'VT_I4': '',
\ 'VT_R4': '',
\ 'VT_R8': '',
\ 'VT_BOOL': '',
\ 'VT_ERROR': '',
\ 'VT_CY': '',
\ 'VT_DATE': '',
\ 'VT_BSTR': '',
\ 'VT_DECIMAL': '',
\ 'VT_UNKNOWN': '',
\ 'VT_DISPATCH': '',
\ 'VT_VARIANT': '',
\ 'VT_BYREF': '',
\ 'VT_I1': '',
\ 'VT_UI2': '',
\ 'VT_UI4': '',
\ 'VT_INT': '',
\ 'VT_UINT': '',
\ 'VT_ARRAY': '',
\ 'CP_MACCP': '',
\ 'CP_OEMCP': '',
\ 'CP_UTF7': '',
\ 'CP_UTF8': '',
\ 'CP_SYMBOL': '',
\ 'CP_THREAD_ACP': '',
\ 'VARCMP_LT': '',
\ 'VARCMP_EQ': '',
\ 'VARCMP_GT': '',
\ 'VARCMP_NULL': '',
\ 'NORM_IGNORECASE': '',
\ 'NORM_IGNORENONSPACE': '',
\ 'NORM_IGNORESYMBOLS': '',
\ 'NORM_IGNOREWIDTH': '',
\ 'NORM_IGNOREKANATYPE': '',
\ 'NORM_IGNOREKASHIDA': '',
\ 'DISP_E_DIVBYZERO': '',
\ 'DISP_E_OVERFLOW': '',
\ 'MK_E_UNAVAILABLE': '',
\ 'VT_XXX': '',
\ }
let g:phpcomplete_builtin['constants']['dbx'] = {
\ 'DBX_MYSQL': '',
\ 'DBX_ODBC': '',
\ 'DBX_PGSQL': '',
\ 'DBX_MSSQL': '',
\ 'DBX_FBSQL': '',
\ 'DBX_OCI8': '',
\ 'DBX_SYBASECT': '',
\ 'DBX_SQLITE': '',
\ 'DBX_PERSISTENT': '',
\ 'DBX_RESULT_INFO': '',
\ 'DBX_RESULT_INDEX': '',
\ 'DBX_RESULT_ASSOC': '',
\ 'DBX_RESULT_UNBUFFERED': '',
\ 'DBX_COLNAMES_UNCHANGED': '',
\ 'DBX_COLNAMES_UPPERCASE': '',
\ 'DBX_COLNAMES_LOWERCASE': '',
\ 'DBX_CMP_NATIVE': '',
\ 'DBX_CMP_TEXT': '',
\ 'DBX_CMP_NUMBER': '',
\ 'DBX_CMP_ASC': '',
\ 'DBX_CMP_DESC': '',
\ }
let g:phpcomplete_builtin['constants']['newt'] = {
\ 'NEWT_ANCHOR_LEFT': '',
\ 'NEWT_ANCHOR_RIGHT': '',
\ 'NEWT_ANCHOR_TOP': '',
\ 'NEWT_ANCHOR_BOTTOM': '',
\ 'NEWT_ARG_LAST': '',
\ 'NEWT_ARG_APPEND': '',
\ 'NEWT_CHECKBOXTREE_UNSELECTABLE': '',
\ 'NEWT_CHECKBOXTREE_HIDE_BOX': '',
\ 'NEWT_CHECKBOXTREE_COLLAPSED': '',
\ 'NEWT_CHECKBOXTREE_EXPANDED': '',
\ 'NEWT_CHECKBOXTREE_UNSELECTED': '',
\ 'NEWT_CHECKBOXTREE_SELECTED': '',
\ 'NEWT_COLORSET_ROOT': '',
\ 'NEWT_COLORSET_BORDER': '',
\ 'NEWT_COLORSET_WINDOW': '',
\ 'NEWT_COLORSET_SHADOW': '',
\ 'NEWT_COLORSET_TITLE': '',
\ 'NEWT_COLORSET_BUTTON': '',
\ 'NEWT_COLORSET_ACTBUTTON': '',
\ 'NEWT_COLORSET_CHECKBOX': '',
\ 'NEWT_COLORSET_ACTCHECKBOX': '',
\ 'NEWT_COLORSET_ENTRY': '',
\ 'NEWT_COLORSET_LABEL': '',
\ 'NEWT_COLORSET_LISTBOX': '',
\ 'NEWT_COLORSET_ACTLISTBOX': '',
\ 'NEWT_COLORSET_TEXTBOX': '',
\ 'NEWT_COLORSET_ACTTEXTBOX': '',
\ 'NEWT_COLORSET_HELPLINE': '',
\ 'NEWT_COLORSET_ROOTTEXT': '',
\ 'NEWT_COLORSET_EMPTYSCALE': '',
\ 'NEWT_COLORSET_FULLSCALE': '',
\ 'NEWT_COLORSET_DISENTRY': '',
\ 'NEWT_COLORSET_COMPACTBUTTON': '',
\ 'NEWT_COLORSET_ACTSELLISTBOX': '',
\ 'NEWT_COLORSET_SELLISTBOX': '',
\ 'NEWT_FLAG_RETURNEXIT': '',
\ 'NEWT_FLAG_HIDDEN': '',
\ 'NEWT_FLAG_SCROLL': '',
\ 'NEWT_FLAG_DISABLED': '',
\ 'NEWT_FLAG_BORDER': '',
\ 'NEWT_FLAG_WRAP': '',
\ 'NEWT_FLAG_NOF12': '',
\ 'NEWT_FLAG_MULTIPLE': '',
\ 'NEWT_FLAG_SELECTED': '',
\ 'NEWT_FLAG_CHECKBOX': '',
\ 'NEWT_FLAG_PASSWORD': '',
\ 'NEWT_FLAG_SHOWCURSOR': '',
\ 'NEWT_ENTRY_SCROLL': '',
\ 'NEWT_ENTRY_HIDDEN': '',
\ 'NEWT_ENTRY_RETURNEXIT': '',
\ 'NEWT_ENTRY_DISABLED': '',
\ 'NEWT_FD_READ': '',
\ 'NEWT_FD_WRITE': '',
\ 'NEWT_FD_EXCEPT': '',
\ 'NEWT_FORM_NOF12': '',
\ 'NEWT_GRID_FLAG_GROWX': '',
\ 'NEWT_GRID_FLAG_GROWY': '',
\ 'NEWT_GRID_EMPTY': '',
\ 'NEWT_GRID_COMPONENT': '',
\ 'NEWT_GRID_SUBGRID': '',
\ 'NEWT_KEY_TAB': '',
\ 'NEWT_KEY_ENTER': '',
\ 'NEWT_KEY_SUSPEND': '',
\ 'NEWT_KEY_ESCAPE': '',
\ 'NEWT_KEY_RETURN': '',
\ 'NEWT_KEY_EXTRA_BASE': '',
\ 'NEWT_KEY_UP': '',
\ 'NEWT_KEY_DOWN': '',
\ 'NEWT_KEY_LEFT': '',
\ 'NEWT_KEY_RIGHT': '',
\ 'NEWT_KEY_BKSPC': '',
\ 'NEWT_KEY_DELETE': '',
\ 'NEWT_KEY_HOME': '',
\ 'NEWT_KEY_END': '',
\ 'NEWT_KEY_UNTAB': '',
\ 'NEWT_KEY_PGUP': '',
\ 'NEWT_KEY_PGDN': '',
\ 'NEWT_KEY_INSERT': '',
\ 'NEWT_KEY_F1': '',
\ 'NEWT_KEY_F2': '',
\ 'NEWT_KEY_F3': '',
\ 'NEWT_KEY_F4': '',
\ 'NEWT_KEY_F5': '',
\ 'NEWT_KEY_F6': '',
\ 'NEWT_KEY_F7': '',
\ 'NEWT_KEY_F8': '',
\ 'NEWT_KEY_F9': '',
\ 'NEWT_KEY_F10': '',
\ 'NEWT_KEY_F11': '',
\ 'NEWT_KEY_F12': '',
\ 'NEWT_KEY_RESIZE': '',
\ 'NEWT_LISTBOX_RETURNEXIT': '',
\ 'NEWT_EXIT_HOTKEY': '',
\ 'NEWT_EXIT_COMPONENT': '',
\ 'NEWT_EXIT_FDREADY': '',
\ 'NEWT_EXIT_TIMER': '',
\ 'NEWT_FLAGS_SET': '',
\ 'NEWT_FLAGS_RESET': '',
\ 'NEWT_FLAGS_TOGGLE': '',
\ 'NEWT_TEXTBOX_WRAP': '',
\ 'NEWT_TEXTBOX_SCROLL': '',
\ }
let g:phpcomplete_builtin['constants']['context_options_and_parameters'] = {
\ 'GET': '',
\ 'POST': '',
\ 'HEAD': '',
\ 'OPENSSL_TLSEXT_SERVER_NAME': '',
\ }
let g:phpcomplete_builtin['constants']['cyrus'] = {
\ 'CYRUS_CONN_NONSYNCLITERAL': '',
\ 'CYRUS_CONN_INITIALRESPONSE': '',
\ 'CYRUS_CALLBACK_NUMBERED': '',
\ 'CYRUS_CALLBACK_NOLITERAL': '',
\ }
let g:phpcomplete_builtin['constants']['dbase'] = {
\ 'DBASE_VERSION': '',
\ 'DBASE_RDONLY': '',
\ 'DBASE_RDWR': '',
\ 'DBASE_TYPE_DBASE': '',
\ 'DBASE_TYPE_FOXPRO': '',
\ 'PHP_INT_MIN': '',
\ 'PHP_INT_MAX': '',
\ }
let g:phpcomplete_builtin['constants']['db_'] = {
\ 'DBPLUS_ERR_NOERR': '',
\ 'DBPLUS_ERR_DUPLICATE': '',
\ 'DBPLUS_ERR_EOSCAN': '',
\ 'DBPLUS_ERR_EMPTY': '',
\ 'DBPLUS_ERR_CLOSE': '',
\ 'DBPLUS_ERR_WLOCKED': '',
\ 'DBPLUS_ERR_LOCKED': '',
\ 'DBPLUS_ERR_NOLOCK': '',
\ 'DBPLUS_ERR_READ': '',
\ 'DBPLUS_ERR_WRITE': '',
\ 'DBPLUS_ERR_CREATE': '',
\ 'DBPLUS_ERR_LSEEK': '',
\ 'DBPLUS_ERR_LENGTH': '',
\ 'DBPLUS_ERR_OPEN': '',
\ 'DBPLUS_ERR_WOPEN': '',
\ 'DBPLUS_ERR_MAGIC': '',
\ 'DBPLUS_ERR_VERSION': '',
\ 'DBPLUS_ERR_PGSIZE': '',
\ 'DBPLUS_ERR_CRC': '',
\ 'DBPLUS_ERR_PIPE': '',
\ 'DBPLUS_ERR_NIDX': '',
\ 'DBPLUS_ERR_MALLOC': '',
\ 'DBPLUS_ERR_NUSERS': '',
\ 'DBPLUS_ERR_PREEXIT': '',
\ 'DBPLUS_ERR_ONTRAP': '',
\ 'DBPLUS_ERR_PREPROC': '',
\ 'DBPLUS_ERR_DBPARSE': '',
\ 'DBPLUS_ERR_DBRUNERR': '',
\ 'DBPLUS_ERR_DBPREEXIT': '',
\ 'DBPLUS_ERR_WAIT': '',
\ 'DBPLUS_ERR_CORRUPT_TUPLE': '',
\ 'DBPLUS_ERR_WARNING0': '',
\ 'DBPLUS_ERR_PANIC': '',
\ 'DBPLUS_ERR_FIFO': '',
\ 'DBPLUS_ERR_PERM': '',
\ 'DBPLUS_ERR_TCL': '',
\ 'DBPLUS_ERR_RESTRICTED': '',
\ 'DBPLUS_ERR_USER': '',
\ 'DBPLUS_ERR_UNKNOWN': '',
\ }
let g:phpcomplete_builtin['constants']['direct_io'] = {
\ 'F_DUPFD': '',
\ 'F_GETFD': '',
\ 'F_GETFL': '',
\ 'F_GETLK': '',
\ 'F_GETOWN': '',
\ 'F_RDLCK': '',
\ 'F_SETFL': '',
\ 'F_SETLK': '',
\ 'F_SETLKW': '',
\ 'F_SETOWN': '',
\ 'F_UNLCK': '',
\ 'F_WRLCK': '',
\ 'O_APPEND': '',
\ 'O_ASYNC': '',
\ 'O_CREAT': '',
\ 'O_EXCL': '',
\ 'O_NDELAY': '',
\ 'O_NOCTTY': '',
\ 'O_NONBLOCK': '',
\ 'O_RDONLY': '',
\ 'O_RDWR': '',
\ 'O_SYNC': '',
\ 'O_TRUNC': '',
\ 'O_WRONLY': '',
\ 'S_IRGRP': '',
\ 'S_IROTH': '',
\ 'S_IRUSR': '',
\ 'S_IRWXG': '',
\ 'S_IRWXO': '',
\ 'S_IRWXU': '',
\ 'S_IWGRP': '',
\ 'S_IWOTH': '',
\ 'S_IWUSR': '',
\ 'S_IXGRP': '',
\ 'S_IXOTH': '',
\ 'S_IXUSR': '',
\ 'F_SETLLW': '',
\ 'SEEK_SET': '',
\ 'SEEK_END': '',
\ 'SEEK_CUR': '',
\ }
let g:phpcomplete_builtin['constants']['directories'] = {
\ 'DIRECTORY_SEPARATOR': '',
\ 'PATH_SEPARATOR': '',
\ 'SCANDIR_SORT_ASCENDING': '',
\ 'SCANDIR_SORT_DESCENDING': '',
\ 'SCANDIR_SORT_NONE': '',
\ }
let g:phpcomplete_builtin['constants']['dom'] = {
\ 'XML_ELEMENT_NODE': '',
\ 'XML_ATTRIBUTE_NODE': '',
\ 'XML_TEXT_NODE': '',
\ 'XML_CDATA_SECTION_NODE': '',
\ 'XML_ENTITY_REF_NODE': '',
\ 'XML_ENTITY_NODE': '',
\ 'XML_PI_NODE': '',
\ 'XML_COMMENT_NODE': '',
\ 'XML_DOCUMENT_NODE': '',
\ 'XML_DOCUMENT_TYPE_NODE': '',
\ 'XML_DOCUMENT_FRAG_NODE': '',
\ 'XML_NOTATION_NODE': '',
\ 'XML_HTML_DOCUMENT_NODE': '',
\ 'XML_DTD_NODE': '',
\ 'XML_ELEMENT_DECL_NODE': '',
\ 'XML_ATTRIBUTE_DECL_NODE': '',
\ 'XML_ENTITY_DECL_NODE': '',
\ 'XML_NAMESPACE_DECL_NODE': '',
\ 'XML_ATTRIBUTE_CDATA': '',
\ 'XML_ATTRIBUTE_ID': '',
\ 'XML_ATTRIBUTE_IDREF': '',
\ 'XML_ATTRIBUTE_IDREFS': '',
\ 'XML_ATTRIBUTE_ENTITY': '',
\ 'XML_ATTRIBUTE_NMTOKEN': '',
\ 'XML_ATTRIBUTE_NMTOKENS': '',
\ 'XML_ATTRIBUTE_ENUMERATION': '',
\ 'XML_ATTRIBUTE_NOTATION': '',
\ 'DOM_PHP_ERR': '',
\ 'DOM_INDEX_SIZE_ERR': '',
\ 'DOMSTRING_SIZE_ERR': '',
\ 'DOM_HIERARCHY_REQUEST_ERR': '',
\ 'DOM_WRONG_DOCUMENT_ERR': '',
\ 'DOM_INVALID_CHARACTER_ERR': '',
\ 'DOM_NO_DATA_ALLOWED_ERR': '',
\ 'DOM_NO_MODIFICATION_ALLOWED_ERR': '',
\ 'DOM_NOT_FOUND_ERR': '',
\ 'DOM_NOT_SUPPORTED_ERR': '',
\ 'DOM_INUSE_ATTRIBUTE_ERR': '',
\ 'DOM_INVALID_STATE_ERR': '',
\ 'DOM_SYNTAX_ERR': '',
\ 'DOM_INVALID_MODIFICATION_ERR': '',
\ 'DOM_NAMESPACE_ERR': '',
\ 'DOM_INVALID_ACCESS_ERR': '',
\ 'DOM_VALIDATION_ERR': '',
\ 'DOM_NOT_FOUND_ERROR': '',
\ 'DOM_NOT_FOUND': '',
\ }
let g:phpcomplete_builtin['constants']['eio'] = {
\ 'EIO_PRI_MIN': '',
\ 'EIO_PRI_DEFAULT': '',
\ 'EIO_PRI_MAX': '',
\ 'EIO_SEEK_SET': '',
\ 'EIO_SEEK_CUR': '',
\ 'EIO_SEEK_END': '',
\ 'EIO_READDIR_DENTS': '',
\ 'EIO_READDIR_DIRS_FIRST': '',
\ 'EIO_READDIR_STAT_ORDER': '',
\ 'EIO_READDIR_FOUND_UNKNOWN': '',
\ 'EIO_DT_UNKNOWN': '',
\ 'EIO_DT_FIFO': '',
\ 'EIO_DT_CHR': '',
\ 'EIO_DT_MPC': '',
\ 'EIO_DT_DIR': '',
\ 'EIO_DT_NAM': '',
\ 'EIO_DT_BLK': '',
\ 'EIO_DT_MPB': '',
\ 'EIO_DT_REG': '',
\ 'EIO_DT_NWK': '',
\ 'EIO_DT_CMP': '',
\ 'EIO_DT_LNK': '',
\ 'EIO_DT_SOCK': '',
\ 'EIO_DT_DOOR': '',
\ 'EIO_DT_WHT': '',
\ 'EIO_DT_MAX': '',
\ 'EIO_O_RDONLY': '',
\ 'EIO_O_WRONLY': '',
\ 'EIO_O_RDWR': '',
\ 'EIO_O_NONBLOCK': '',
\ 'EIO_O_APPEND': '',
\ 'EIO_O_CREAT': '',
\ 'EIO_O_TRUNC': '',
\ 'EIO_O_EXCL': '',
\ 'EIO_O_FSYNC': '',
\ 'EIO_S_IRUSR': '',
\ 'EIO_S_IWUSR': '',
\ 'EIO_S_IXUSR': '',
\ 'EIO_S_IRGRP': '',
\ 'EIO_S_IWGRP': '',
\ 'EIO_S_IXGRP': '',
\ 'EIO_S_IROTH': '',
\ 'EIO_S_IWOTH': '',
\ 'EIO_S_IXOTH': '',
\ 'EIO_S_IFREG': '',
\ 'EIO_S_IFCHR': '',
\ 'EIO_S_IFBLK': '',
\ 'EIO_S_IFIFO': '',
\ 'EIO_S_IFSOCK': '',
\ 'EIO_SYNC_FILE_RANGE_WAIT_BEFORE': '',
\ 'EIO_SYNC_FILE_RANGE_WRITE': '',
\ 'EIO_SYNC_FILE_RANGE_WAIT_AFTER': '',
\ 'EIO_FALLOC_FL_KEEP_SIZE': '',
\ 'FALLOC_FL_KEEP_SIZE': '',
\ }
let g:phpcomplete_builtin['constants']['enchant'] = {
\ 'ENCHANT_MYSPELL': '',
\ 'ENCHANT_ISPELL': '',
\ }
let g:phpcomplete_builtin['constants']['exif'] = {
\ 'EXIF_USE_MBSTRING': '',
\ 'IMAGETYPE_GIF': '',
\ 'IMAGETYPE_JPEG': '',
\ 'IMAGETYPE_PNG': '',
\ 'IMAGETYPE_SWF': '',
\ 'IMAGETYPE_PSD': '',
\ 'IMAGETYPE_BMP': '',
\ 'IMAGETYPE_TIFF_II': '',
\ 'IMAGETYPE_TIFF_MM': '',
\ 'IMAGETYPE_JPC': '',
\ 'IMAGETYPE_JP2': '',
\ 'IMAGETYPE_JPX': '',
\ 'IMAGETYPE_JB2': '',
\ 'IMAGETYPE_SWC': '',
\ 'IMAGETYPE_IFF': '',
\ 'IMAGETYPE_WBMP': '',
\ 'IMAGETYPE_XBM': '',
\ 'IMAGETYPE_ICO': '',
\ 'IMAGETYPE_WEBP': '',
\ }
let g:phpcomplete_builtin['constants']['expect'] = {
\ 'EXP_GLOB': '',
\ 'EXP_EXACT': '',
\ 'EXP_REGEXP': '',
\ 'EXP_EOF': '',
\ 'EXP_TIMEOUT': '',
\ 'EXP_FULLBUFFER': '',
\ }
let g:phpcomplete_builtin['constants']['fann'] = {
\ 'FANN_TRAIN_INCREMENTAL': '',
\ 'FANN_TRAIN_BATCH': '',
\ 'FANN_TRAIN_RPROP': '',
\ 'FANN_TRAIN_QUICKPROP': '',
\ 'FANN_TRAIN_SARPROP': '',
\ 'FANN_LINEAR': '',
\ 'FANN_THRESHOLD': '',
\ 'FANN_THRESHOLD_SYMMETRIC': '',
\ 'FANN_SIGMOID': '',
\ 'FANN_SIGMOID_STEPWISE': '',
\ 'FANN_SIGMOID_SYMMETRIC': '',
\ 'FANN_SIGMOID_SYMMETRIC_STEPWISE': '',
\ 'FANN_GAUSSIAN': '',
\ 'FANN_GAUSSIAN_SYMMETRIC': '',
\ 'FANN_GAUSSIAN_STEPWISE': '',
\ 'FANN_ELLIOT': '',
\ 'FANN_ELLIOT_SYMMETRIC': '',
\ 'FANN_LINEAR_PIECE': '',
\ 'FANN_LINEAR_PIECE_SYMMETRIC': '',
\ 'FANN_SIN_SYMMETRIC': '',
\ 'FANN_COS_SYMMETRIC': '',
\ 'FANN_SIN': '',
\ 'FANN_COS': '',
\ 'FANN_ERRORFUNC_LINEAR': '',
\ 'FANN_ERRORFUNC_TANH': '',
\ 'FANN_STOPFUNC_MSE': '',
\ 'FANN_STOPFUNC_BIT': '',
\ 'FANN_NETTYPE_LAYER': '',
\ 'FANN_NETTYPE_SHORTCUT': '',
\ 'FANN_E_NO_ERROR': '',
\ 'FANN_E_CANT_OPEN_CONFIG_R': '',
\ 'FANN_E_CANT_OPEN_CONFIG_W': '',
\ 'FANN_E_WRONG_CONFIG_VERSION': '',
\ 'FANN_E_CANT_READ_CONFIG': '',
\ 'FANN_E_CANT_READ_NEURON': '',
\ 'FANN_E_CANT_READ_CONNECTIONS': '',
\ 'FANN_E_WRONG_NUM_CONNECTIONS': '',
\ 'FANN_E_CANT_OPEN_TD_W': '',
\ 'FANN_E_CANT_OPEN_TD_R': '',
\ 'FANN_E_CANT_READ_TD': '',
\ 'FANN_E_CANT_ALLOCATE_MEM': '',
\ 'FANN_E_CANT_TRAIN_ACTIVATION': '',
\ 'FANN_E_CANT_USE_ACTIVATION': '',
\ 'FANN_E_TRAIN_DATA_MISMATCH': '',
\ 'FANN_E_CANT_USE_TRAIN_ALG': '',
\ 'FANN_E_TRAIN_DATA_SUBSET': '',
\ 'FANN_E_INDEX_OUT_OF_BOUND': '',
\ 'FANN_E_SCALE_NOT_PRESENT': '',
\ 'FANN_E_INPUT_NO_MATCH': '',
\ 'FANN_E_OUTPUT_NO_MATCH': '',
\ }
let g:phpcomplete_builtin['constants']['frontbase'] = {
\ 'FBSQL_ASSOC': '',
\ 'FBSQL_NUM': '',
\ 'FBSQL_BOTH': '',
\ 'FBSQL_LOCK_DEFERRED': '',
\ 'FBSQL_LOCK_OPTIMISTIC': '',
\ 'FBSQL_LOCK_PESSIMISTIC': '',
\ 'FBSQL_ISO_READ_UNCOMMITTED': '',
\ 'FBSQL_ISO_READ_COMMITTED': '',
\ 'FBSQL_ISO_REPEATABLE_READ': '',
\ 'FBSQL_ISO_SERIALIZABLE': '',
\ 'FBSQL_ISO_VERSIONED': '',
\ 'FBSQL_UNKNOWN': '',
\ 'FBSQL_STOPPED': '',
\ 'FBSQL_STARTING': '',
\ 'FBSQL_RUNNING': '',
\ 'FBSQL_STOPPING': '',
\ 'FBSQL_NOEXEC': '',
\ 'FBSQL_LOB_DIRECT': '',
\ 'FBSQL_LOB_HANDLE': '',
\ }
let g:phpcomplete_builtin['constants']['fdf'] = {
\ 'FDFID': '',
\ 'FDFAP': '',
\ 'FDFAS': '',
\ 'FDFAA': '',
\ 'FDFIF': '',
\ }
let g:phpcomplete_builtin['constants']['command_line_usage'] = {
\ 'PHP_SAPI': '',
\ 'STDIN': '',
\ 'STDOUT': '',
\ 'STDERR': '',
\ }
let g:phpcomplete_builtin['constants']['handling_file_uploads'] = {
\ 'UPLOAD_ERR_OK': '',
\ 'UPLOAD_ERR_INI_SIZE': '',
\ 'UPLOAD_ERR_FORM_SIZE': '',
\ 'UPLOAD_ERR_PARTIAL': '',
\ 'UPLOAD_ERR_NO_FILE': '',
\ 'UPLOAD_ERR_NO_TMP_DIR': '',
\ 'UPLOAD_ERR_CANT_WRITE': '',
\ 'UPLOAD_ERR_EXTENSION': '',
\ }
let g:phpcomplete_builtin['constants']['fileinfo'] = {
\ 'FILEINFO_NONE': '',
\ 'FILEINFO_SYMLINK': '',
\ 'FILEINFO_MIME_TYPE': '',
\ 'FILEINFO_MIME_ENCODING': '',
\ 'FILEINFO_MIME': '',
\ 'FILEINFO_COMPRESS': '',
\ 'FILEINFO_DEVICES': '',
\ 'FILEINFO_CONTINUE': '',
\ 'FILEINFO_PRESERVE_ATIME': '',
\ 'FILEINFO_RAW': '',
\ 'FILEINFO_EXTENSION': '',
\ }
let g:phpcomplete_builtin['constants']['filesystem'] = {
\ 'SEEK_SET': '',
\ 'SEEK_CUR': '',
\ 'SEEK_END': '',
\ 'LOCK_SH': '',
\ 'LOCK_EX': '',
\ 'LOCK_UN': '',
\ 'LOCK_NB': '',
\ 'GLOB_BRACE': '',
\ 'GLOB_ONLYDIR': '',
\ 'GLOB_MARK': '',
\ 'GLOB_NOSORT': '',
\ 'GLOB_NOCHECK': '',
\ 'GLOB_NOESCAPE': '',
\ 'GLOB_AVAILABLE_FLAGS': '',
\ 'PATHINFO_DIRNAME': '',
\ 'PATHINFO_BASENAME': '',
\ 'PATHINFO_EXTENSION': '',
\ 'PATHINFO_FILENAME': '',
\ 'FILE_USE_INCLUDE_PATH': '',
\ 'FILE_NO_DEFAULT_CONTEXT': '',
\ 'FILE_APPEND': '',
\ 'FILE_IGNORE_NEW_LINES': '',
\ 'FILE_SKIP_EMPTY_LINES': '',
\ 'FILE_BINARY': '',
\ 'FILE_TEXT': '',
\ 'INI_SCANNER_NORMAL': '',
\ 'INI_SCANNER_RAW': '',
\ 'INI_SCANNER_TYPED': '',
\ 'FNM_NOESCAPE': '',
\ 'FNM_PATHNAME': '',
\ 'FNM_PERIOD': '',
\ 'FNM_CASEFOLD': '',
\ 'PHP_INT_MAX': '',
\ 'GLOB_ERR': '',
\ }
let g:phpcomplete_builtin['constants']['filter'] = {
\ 'FILTER_FLAG_NO_ENCODE_QUOTES': '',
\ 'INPUT_POST': '',
\ 'INPUT_GET': '',
\ 'INPUT_COOKIE': '',
\ 'INPUT_ENV': '',
\ 'INPUT_SERVER': '',
\ 'INPUT_SESSION': '',
\ 'INPUT_REQUEST': '',
\ 'FILTER_FLAG_NONE': '',
\ 'FILTER_REQUIRE_SCALAR': '',
\ 'FILTER_REQUIRE_ARRAY': '',
\ 'FILTER_FORCE_ARRAY': '',
\ 'FILTER_NULL_ON_FAILURE': '',
\ 'FILTER_VALIDATE_INT': '',
\ 'FILTER_VALIDATE_BOOLEAN': '',
\ 'FILTER_VALIDATE_FLOAT': '',
\ 'FILTER_VALIDATE_REGEXP': '',
\ 'FILTER_VALIDATE_URL': '',
\ 'FILTER_VALIDATE_EMAIL': '',
\ 'FILTER_VALIDATE_IP': '',
\ 'FILTER_VALIDATE_MAC': '',
\ 'FILTER_DEFAULT': '',
\ 'FILTER_UNSAFE_RAW': '',
\ 'FILTER_SANITIZE_STRING': '',
\ 'FILTER_SANITIZE_STRIPPED': '',
\ 'FILTER_SANITIZE_ENCODED': '',
\ 'FILTER_SANITIZE_SPECIAL_CHARS': '',
\ 'FILTER_SANITIZE_EMAIL': '',
\ 'FILTER_SANITIZE_URL': '',
\ 'FILTER_SANITIZE_NUMBER_INT': '',
\ 'FILTER_SANITIZE_NUMBER_FLOAT': '',
\ 'FILTER_SANITIZE_MAGIC_QUOTES': '',
\ 'FILTER_CALLBACK': '',
\ 'FILTER_FLAG_ALLOW_OCTAL': '',
\ 'FILTER_FLAG_ALLOW_HEX': '',
\ 'FILTER_FLAG_STRIP_LOW': '',
\ 'FILTER_FLAG_STRIP_HIGH': '',
\ 'FILTER_FLAG_ENCODE_LOW': '',
\ 'FILTER_FLAG_ENCODE_HIGH': '',
\ 'FILTER_FLAG_ENCODE_AMP': '',
\ 'FILTER_FLAG_EMPTY_STRING_NULL': '',
\ 'FILTER_FLAG_ALLOW_FRACTION': '',
\ 'FILTER_FLAG_ALLOW_THOUSAND': '',
\ 'FILTER_FLAG_ALLOW_SCIENTIFIC': '',
\ 'FILTER_FLAG_PATH_REQUIRED': '',
\ 'FILTER_FLAG_QUERY_REQUIRED': '',
\ 'FILTER_FLAG_IPV4': '',
\ 'FILTER_FLAG_IPV6': '',
\ 'FILTER_FLAG_NO_RES_RANGE': '',
\ 'FILTER_FLAG_NO_PRIV_RANGE': '',
\ 'FILTER_FLAG_EMAIL_UNICODE': '',
\ 'FILTER_FLAG_STRIP_BACKTICK': '',
\ 'FILTER_SANITIZE_RAW': '',
\ 'FILTER_FLAG_SCHEME_REQUIRED': '',
\ 'FILTER_FLAG_HOST_REQUIRED': '',
\ 'FILTER_SANITIZE_FULL_SPECIAL_CHARS': '',
\ 'ENT_QUOTES': '',
\ 'FILTER_VALIDATE_DOMAIN': '',
\ 'FILTER_FLAG_HOSTNAME': '',
\ }
let g:phpcomplete_builtin['constants']['fribidi'] = {
\ 'FRIBIDI_CHARSET_UTF8': '',
\ 'FRIBIDI_CHARSET_8859_6': '',
\ 'FRIBIDI_CHARSET_8859_8': '',
\ 'FRIBIDI_CHARSET_CP1255': '',
\ 'FRIBIDI_CHARSET_CP1256': '',
\ 'FRIBIDI_CHARSET_ISIRI_3342': '',
\ 'FRIBIDI_CHARSET_CAP_RTL': '',
\ 'FRIBIDI_RTL': '',
\ 'FRIBIDI_LTR': '',
\ 'FRIBIDI_AUTO': '',
\ }
let g:phpcomplete_builtin['constants']['ftp'] = {
\ 'FTP_ASCII': '',
\ 'FTP_AUTOSEEK': '',
\ 'FTP_AUTORESUME': '',
\ 'FTP_FAILED': '',
\ 'FTP_FINISHED': '',
\ 'FTP_MOREDATA': '',
\ 'FTP_TEXT': '',
\ 'FTP_BINARY': '',
\ 'FTP_IMAGE': '',
\ 'FTP_TIMEOUT_SEC': '',
\ 'FTP_USEPASVADDRESS': '',
\ }
let g:phpcomplete_builtin['constants']['php_options_info'] = {
\ 'ASSERT_CALLBACK': '',
\ 'RUSAGE_CHILDREN': '',
\ 'RUSAGE_SELF': '',
\ 'RUSAGE_THREAD': '',
\ 'PHP_SAPI': '',
\ 'PHP_OS': '',
\ 'CREDITS_DOCS': '',
\ 'CREDITS_GENERAL': '',
\ 'CREDITS_GROUP': '',
\ 'CREDITS_MODULES': '',
\ 'CREDITS_FULLPAGE': '',
\ 'PHP_VERSION_ID': '',
\ 'PHP_VERSION': '',
\ 'PATH_SEPARATOR': '',
\ 'CREDITS_SAPI': '',
\ 'CREDITS_QA': '',
\ 'CREDITS_ALL': '',
\ 'INFO_GENERAL': '',
\ 'INFO_CREDITS': '',
\ 'INFO_CONFIGURATION': '',
\ 'INFO_MODULES': '',
\ 'INFO_ENVIRONMENT': '',
\ 'INFO_VARIABLES': '',
\ 'INFO_LICENSE': '',
\ 'INFO_ALL': '',
\ 'ASSERT_ACTIVE': '',
\ 'ASSERT_BAIL': '',
\ 'ASSERT_WARNING': '',
\ 'ASSERT_QUIET_EVAL': '',
\ 'PHP_WINDOWS_VERSION_MAJOR': '',
\ 'PHP_WINDOWS_VERSION_MINOR': '',
\ 'PHP_WINDOWS_VERSION_BUILD': '',
\ 'PHP_WINDOWS_VERSION_PLATFORM': '',
\ 'PHP_WINDOWS_VERSION_SP_MAJOR': '',
\ 'PHP_WINDOWS_VERSION_SP_MINOR': '',
\ 'PHP_WINDOWS_VERSION_SUITEMASK': '',
\ 'PHP_WINDOWS_VERSION_PRODUCTTYPE': '',
\ 'PHP_WINDOWS_NT_DOMAIN_CONTROLLER': '',
\ 'PHP_WINDOWS_NT_SERVER': '',
\ 'PHP_WINDOWS_NT_WORKSTATION': '',
\ }
let g:phpcomplete_builtin['constants']['strings'] = {
\ 'CRYPT_SALT_LENGTH': '',
\ 'CRYPT_STD_DES': '',
\ 'CRYPT_EXT_DES': '',
\ 'CRYPT_MD5': '',
\ 'CRYPT_BLOWFISH': '',
\ 'CRYPT_SHA256': '',
\ 'CRYPT_SHA512': '',
\ 'PHP_INT_MAX': '',
\ 'HTML_ENTITIES': '',
\ 'HTML_SPECIALCHARS': '',
\ 'ENT_COMPAT': '',
\ 'ENT_QUOTES': '',
\ 'ENT_NOQUOTES': '',
\ 'ENT_HTML401': '',
\ 'ENT_XML1': '',
\ 'ENT_XHTML': '',
\ 'ENT_HTML5': '',
\ 'ENT_IGNORE': '',
\ 'ENT_SUBSTITUTE': '',
\ 'ENT_DISALLOWED': '',
\ 'CHAR_MAX': '',
\ 'LC_MONETARY': '',
\ 'AM_STR': '',
\ 'PM_STR': '',
\ 'D_T_FMT': '',
\ 'D_FMT': '',
\ 'T_FMT': '',
\ 'T_FMT_AMPM': '',
\ 'ERA': '',
\ 'ERA_YEAR': '',
\ 'ERA_D_T_FMT': '',
\ 'ERA_D_FMT': '',
\ 'ERA_T_FMT': '',
\ 'INT_CURR_SYMBOL': '',
\ 'CURRENCY_SYMBOL': '',
\ 'CRNCYSTR': '',
\ 'MON_DECIMAL_POINT': '',
\ 'MON_THOUSANDS_SEP': '',
\ 'MON_GROUPING': '',
\ 'POSITIVE_SIGN': '',
\ 'NEGATIVE_SIGN': '',
\ 'INT_FRAC_DIGITS': '',
\ 'FRAC_DIGITS': '',
\ 'P_CS_PRECEDES': '',
\ 'P_SEP_BY_SPACE': '',
\ 'N_CS_PRECEDES': '',
\ 'N_SEP_BY_SPACE': '',
\ 'P_SIGN_POSN': '',
\ 'N_SIGN_POSN': '',
\ 'DECIMAL_POINT': '',
\ 'RADIXCHAR': '',
\ 'THOUSANDS_SEP': '',
\ 'THOUSEP': '',
\ 'GROUPING': '',
\ 'YESEXPR': '',
\ 'NOEXPR': '',
\ 'YESSTR': '',
\ 'NOSTR': '',
\ 'CODESET': '',
\ 'LC_ALL': '',
\ 'LC_COLLATE': '',
\ 'LC_CTYPE': '',
\ 'LC_NUMERIC': '',
\ 'LC_TIME': '',
\ 'LC_MESSAGES': '',
\ 'STR_PAD_RIGHT': '',
\ 'STR_PAD_LEFT': '',
\ 'STR_PAD_BOTH': '',
\ }
let g:phpcomplete_builtin['constants']['cubrid'] = {
\ 'PARAM_ISOLATION_LEVEL': '',
\ 'PARAM_LOCK_TIMEOUT': '',
\ 'PARAM_MAX_STRING_LENGTH': '',
\ 'PARAM_AUTO_COMMIT': '',
\ 'AUTO_INCREMENT': '',
\ 'CUBRID_AUTOCOMMIT_FALSE': '',
\ 'CUBRID_AUTOCOMMIT_TRUE': '',
\ }
let g:phpcomplete_builtin['constants']['ibm_db2'] = {
\ 'DB2_AUTOCOMMIT_OFF': '',
\ 'DB2_AUTOCOMMIT_ON': '',
\ 'DB2_BINARY': '',
\ 'DB2_CONVERT': '',
\ 'DB2_PASSTHRU': '',
\ 'DB2_SCROLLABLE': '',
\ 'DB2_FORWARD_ONLY': '',
\ 'DB2_PARAM_IN': '',
\ 'DB2_PARAM_OUT': '',
\ 'DB2_PARAM_INOUT': '',
\ 'DB2_PARAM_FILE': '',
\ 'DB2_DOUBLE': '',
\ 'DB2_LONG': '',
\ 'DB2_CHAR': '',
\ 'DB2_CASE_NATURAL': '',
\ 'DB2_CASE_LOWER': '',
\ 'DB2_CASE_UPPER': '',
\ 'DB2_DEFERRED_PREPARE_ON': '',
\ 'DB2_DEFERRED_PREPARE_OFF': '',
\ }
let g:phpcomplete_builtin['constants']['error_handling'] = {
\ 'DEBUG_BACKTRACE_PROVIDE_OBJECT': '',
\ 'DEBUG_BACKTRACE_IGNORE_ARGS': '',
\ }
let g:phpcomplete_builtin['constants']['math'] = {
\ 'PHP_INT_MAX': '',
\ 'PHP_INT_MIN': '',
\ 'MT_RAND_PHP': '',
\ 'MT_RAND_MT19937': '',
\ 'M_PI': '',
\ 'PHP_ROUND_HALF_UP': '',
\ 'PHP_ROUND_HALF_DOWN': '',
\ 'PHP_ROUND_HALF_EVEN': '',
\ 'PHP_ROUND_HALF_ODD': '',
\ 'M_E': '',
\ 'M_LOG2E': '',
\ 'M_LOG10E': '',
\ 'M_LN2': '',
\ 'M_LN10': '',
\ 'M_PI_2': '',
\ 'M_PI_4': '',
\ 'M_1_PI': '',
\ 'M_2_PI': '',
\ 'M_SQRTPI': '',
\ 'M_2_SQRTPI': '',
\ 'M_SQRT2': '',
\ 'M_SQRT3': '',
\ 'M_SQRT1_2': '',
\ 'M_LNPI': '',
\ 'M_EULER': '',
\ 'NAN': '',
\ 'INF': '',
\ }
let g:phpcomplete_builtin['constants']['network'] = {
\ 'LOG_EMERG': '',
\ 'LOG_ALERT': '',
\ 'LOG_CRIT': '',
\ 'LOG_ERR': '',
\ 'LOG_WARNING': '',
\ 'LOG_NOTICE': '',
\ 'LOG_INFO': '',
\ 'LOG_DEBUG': '',
\ 'LOG_KERN': '',
\ 'LOG_USER': '',
\ 'LOG_MAIL': '',
\ 'LOG_DAEMON': '',
\ 'LOG_AUTH': '',
\ 'LOG_SYSLOG': '',
\ 'LOG_LPR': '',
\ 'LOG_NEWS': '',
\ 'LOG_CRON': '',
\ 'LOG_AUTHPRIV': '',
\ 'LOG_LOCAL0': '',
\ 'LOG_LOCAL1': '',
\ 'LOG_LOCAL2': '',
\ 'LOG_LOCAL3': '',
\ 'LOG_LOCAL4': '',
\ 'LOG_LOCAL5': '',
\ 'LOG_LOCAL6': '',
\ 'LOG_LOCAL7': '',
\ 'LOG_PID': '',
\ 'LOG_CONS': '',
\ 'LOG_ODELAY': '',
\ 'LOG_NDELAY': '',
\ 'LOG_NOWAIT': '',
\ 'LOG_PERROR': '',
\ 'DNS_A': '',
\ 'DNS_CNAME': '',
\ 'DNS_HINFO': '',
\ 'DNS_CAA': '',
\ 'DNS_MX': '',
\ 'DNS_NS': '',
\ 'DNS_PTR': '',
\ 'DNS_SOA': '',
\ 'DNS_TXT': '',
\ 'DNS_AAAA': '',
\ 'DNS_SRV': '',
\ 'DNS_NAPTR': '',
\ 'DNS_A6': '',
\ 'DNS_ALL': '',
\ 'DNS_ANY': '',
\ 'SID': '',
\ 'PHP_INT_MAX': '',
\ 'LOG_UUCP': '',
\ }
let g:phpcomplete_builtin['constants']['zlib'] = {
\ 'ZLIB_BLOCK': '',
\ 'ZLIB_NO_FLUSH': '',
\ 'ZLIB_PARTIAL_FLUSH': '',
\ 'ZLIB_SYNC_FLUSH': '',
\ 'ZLIB_FULL_FLUSH': '',
\ 'ZLIB_FINISH': '',
\ 'ZLIB_FILTERED': '',
\ 'ZLIB_HUFFMAN_ONLY': '',
\ 'ZLIB_RLE': '',
\ 'ZLIB_FIXED': '',
\ 'ZLIB_DEFAULT_STRATEGY': '',
\ 'FORCE_GZIP': '',
\ 'FORCE_DEFLATE': '',
\ 'SEEK_SET': '',
\ 'SEEK_CUR': '',
\ 'ZLIB_OK': '',
\ 'ZLIB_STREAM_END': '',
\ 'ZLIB_ENCODING_RAW': '',
\ 'ZLIB_ENCODING_DEFLATE': '',
\ 'ZLIB_ENCODING_GZIP': '',
\ }
let g:phpcomplete_builtin['constants']['posix_regex'] = {
\ 'PCRE_CASELESS': '',
\ }
let g:phpcomplete_builtin['constants']['libevent'] = {
\ 'EVLOOP_ONCE': '',
\ 'EVLOOP_NONBLOCK': '',
\ 'EV_READ': '',
\ 'EV_WRITE': '',
\ 'EV_TIMEOUT': '',
\ 'EV_SIGNAL': '',
\ 'EV_PERSIST': '',
\ 'STDIN': '',
\ }
let g:phpcomplete_builtin['constants']['gmp'] = {
\ 'GMP_ROUND_ZERO': '',
\ 'GMP_ROUND_PLUSINF': '',
\ 'GMP_ROUND_MINUSINF': '',
\ 'GMP_MSW_FIRST': '',
\ 'GMP_NATIVE_ENDIAN': '',
\ 'GMP_LSW_FIRST': '',
\ 'GMP_LITTLE_ENDIAN': '',
\ 'GMP_BIG_ENDIAN': '',
\ 'GMP_VERSION': '',
\ }
let g:phpcomplete_builtin['constants']['gnupg'] = {
\ 'GNUPG_PROTOCOL_CMS': '',
\ 'GNUPG_ERROR_WARNING': '',
\ 'GNUPG_ERROR_EXCEPTION': '',
\ 'GNUPG_ERROR_SILENT': '',
\ 'GNUPG_SIG_MODE_NORMAL': '',
\ 'GNUPG_SIG_MODE_DETACH': '',
\ 'GNUPG_SIG_MODE_CLEAR': '',
\ 'GNUPG_VALIDITY_UNKNOWN': '',
\ 'GNUPG_VALIDITY_UNDEFINED': '',
\ 'GNUPG_VALIDITY_NEVER': '',
\ 'GNUPG_VALIDITY_MARGINAL': '',
\ 'GNUPG_VALIDITY_FULL': '',
\ 'GNUPG_VALIDITY_ULTIMATE': '',
\ 'GNUPG_SIGSUM_VALID': '',
\ 'GNUPG_SIGSUM_GREEN': '',
\ 'GNUPG_SIGSUM_RED': '',
\ 'GNUPG_SIGSUM_KEY_REVOKED': '',
\ 'GNUPG_SIGSUM_KEY_EXPIRED': '',
\ 'GNUPG_SIGSUM_KEY_MISSING': '',
\ 'GNUPG_SIGSUM_SIG_EXPIRED': '',
\ 'GNUPG_SIGSUM_CRL_MISSING': '',
\ 'GNUPG_SIGSUM_CRL_TOO_OLD': '',
\ 'GNUPG_SIGSUM_BAD_POLICY': '',
\ 'GNUPG_SIGSUM_SYS_ERROR': '',
\ }
let g:phpcomplete_builtin['constants']['gupnp'] = {
\ 'GUPNP_SIGNAL_DEVICE_PROXY_AVAILABLE': '',
\ 'GUPNP_SIGNAL_DEVICE_PROXY_UNAVAILABLE': '',
\ 'GUPNP_SIGNAL_SERVICE_PROXY_AVAILABLE': '',
\ 'GUPNP_SIGNAL_SERVICE_PROXY_UNAVAILABLE': '',
\ 'GUPNP_SIGNAL_ACTION_INVOKED': '',
\ 'GUPNP_SIGNAL_NOTIFY_FAILED': '',
\ 'GUPNP_TYPE_BOOLEAN': '',
\ 'GUPNP_TYPE_INT': '',
\ 'GUPNP_TYPE_LONG': '',
\ 'GUPNP_TYPE_DOUBLE': '',
\ 'GUPNP_TYPE_FLOAT': '',
\ 'GUPNP_TYPE_STRING': '',
\ 'GUPNP_CONTROL_ERROR_INVALID_ACTION': '',
\ 'GUPNP_CONTROL_ERROR_INVALID_ARGS': '',
\ 'GUPNP_CONTROL_ERROR_OUT_OF_SYNC': '',
\ 'GUPNP_CONTROL_ERROR_ACTION_FAILED': '',
\ 'GUPNP_SIGNAL_SUBSCRIPTION_LOST': '',
\ }
let g:phpcomplete_builtin['constants']['hash'] = {
\ 'HASH_HMAC': '',
\ 'INT_MAX': '',
\ 'CRYPT_BLOWFISH': '',
\ }
let g:phpcomplete_builtin['constants']['urls'] = {
\ 'PHP_QUERY_RFC1738': '',
\ 'PHP_QUERY_RFC3986': '',
\ 'PHP_URL_SCHEME': '',
\ 'PHP_URL_HOST': '',
\ 'PHP_URL_PORT': '',
\ 'PHP_URL_USER': '',
\ 'PHP_URL_PASS': '',
\ 'PHP_URL_PATH': '',
\ 'PHP_URL_QUERY': '',
\ 'PHP_URL_FRAGMENT': '',
\ }
let g:phpcomplete_builtin['constants']['firebird_interbase'] = {
\ 'IBASE_BKP_IGNORE_CHECKSUMS': '',
\ 'IBASE_BKP_IGNORE_LIMBO': '',
\ 'IBASE_BKP_METADATA_ONLY': '',
\ 'IBASE_BKP_NO_GARBAGE_COLLECT': '',
\ 'IBASE_BKP_OLD_DESCRIPTIONS': '',
\ 'IBASE_BKP_NON_TRANSPORTABLE': '',
\ 'IBASE_BKP_CONVERT': '',
\ 'IBASE_TEXT': '',
\ 'IBASE_UNIXTIME': '',
\ 'IBASE_RES_DEACTIVATE_IDX': '',
\ 'IBASE_RES_NO_SHADOW': '',
\ 'IBASE_RES_NO_VALIDITY': '',
\ 'IBASE_RES_ONE_AT_A_TIME': '',
\ 'IBASE_RES_REPLACE': '',
\ 'IBASE_RES_CREATE': '',
\ 'IBASE_RES_USE_ALL_SPACE': '',
\ 'IBASE_PRP_PAGE_BUFFERS': '',
\ 'IBASE_PRP_SWEEP_INTERVAL': '',
\ 'IBASE_READ': '',
\ 'IBASE_WRITE': '',
\ 'IBASE_COMMITTED': '',
\ 'IBASE_CONSISTENCY': '',
\ 'IBASE_CONCURRENCY': '',
\ 'IBASE_REC_VERSION': '',
\ 'IBASE_REC_NO_VERSION': '',
\ 'IBASE_WAIT': '',
\ 'IBASE_NOWAIT': '',
\ 'IBASE_PRP_SHUTDOWN_DB': '',
\ 'IBASE_PRP_DENY_NEW_TRANSACTIONS': '',
\ 'IBASE_PRP_DENY_NEW_ATTACHMENTS': '',
\ 'IBASE_PRP_RESERVE_SPACE': '',
\ 'IBASE_PRP_RES_USE_FULL': '',
\ 'IBASE_PRP_RES': '',
\ 'IBASE_PRP_WRITE_MODE': '',
\ 'IBASE_PRP_WM_ASYNC': '',
\ 'IBASE_PRP_WM_SYNC': '',
\ 'IBASE_PRP_ACCESS_MODE': '',
\ 'IBASE_PRP_AM_READONLY': '',
\ 'IBASE_PRP_AM_READWRITE': '',
\ 'IBASE_PRP_SET_SQL_DIALECT': '',
\ 'IBASE_PRP_ACTIVATE': '',
\ 'IBASE_PRP_DB_ONLINE': '',
\ 'IBASE_RPR_CHECK_DB': '',
\ 'IBASE_RPR_IGNORE_CHECKSUM': '',
\ 'IBASE_RPR_KILL_SHADOWS': '',
\ 'IBASE_RPR_MEND_DB': '',
\ 'IBASE_RPR_VALIDATE_DB': '',
\ 'IBASE_RPR_FULL': '',
\ 'IBASE_RPR_SWEEP_DB': '',
\ 'IBASE_STS_DATA_PAGES': '',
\ 'IBASE_STS_DB_LOG': '',
\ 'IBASE_STS_HDR_PAGES': '',
\ 'IBASE_STS_IDX_PAGES': '',
\ 'IBASE_STS_SYS_RELATIONS': '',
\ 'IBASE_SVC_SERVER_VERSION': '',
\ 'IBASE_SVC_IMPLEMENTATION': '',
\ 'IBASE_SVC_GET_ENV': '',
\ 'IBASE_SVC_GET_ENV_LOCK': '',
\ 'IBASE_SVC_GET_ENV_MSG': '',
\ 'IBASE_SVC_USER_DBPATH': '',
\ 'IBASE_SVC_SVR_DB_INFO': '',
\ 'IBASE_SVC_GET_USERS': '',
\ }
let g:phpcomplete_builtin['constants']['iconv'] = {
\ 'ICONV_IMPL': '',
\ 'ICONV_VERSION': '',
\ 'ICONV_MIME_DECODE_STRICT': '',
\ 'ICONV_MIME_DECODE_CONTINUE_ON_ERROR': '',
\ }
let g:phpcomplete_builtin['constants']['id3'] = {
\ 'ID3_V1_0': '',
\ 'ID3_V1_1': '',
\ 'ID3_V2': '',
\ 'ID3_V2_1': '',
\ 'ID3_V2_2': '',
\ 'ID3_V2_3': '',
\ 'ID3_V2_4': '',
\ 'ID3_BEST': '',
\ }
let g:phpcomplete_builtin['constants']['intl'] = {
\ 'INTL_IDNA_VARIANT_2003': '',
\ 'INTL_IDNA_VARIANT_UTS46': '',
\ 'INTL_MAX_LOCALE_LEN': '',
\ 'IDNA_DEFAULT': '',
\ 'IDNA_ALLOW_UNASSIGNED': '',
\ 'IDNA_USE_STD3_RULES': '',
\ 'IDNA_CHECK_BIDI': '',
\ 'IDNA_CHECK_CONTEXTJ': '',
\ 'IDNA_NONTRANSITIONAL_TO_ASCII': '',
\ 'IDNA_NONTRANSITIONAL_TO_UNICODE': '',
\ 'IDNA_ERROR_EMPTY_LABEL': '',
\ 'IDNA_ERROR_LABEL_TOO_LONG': '',
\ 'IDNA_ERROR_DOMAIN_NAME_TOO_LONG': '',
\ 'IDNA_ERROR_LEADING_HYPHEN': '',
\ 'IDNA_ERROR_TRAILING_HYPHEN': '',
\ 'IDNA_ERROR_HYPHEN_3_4': '',
\ 'IDNA_ERROR_LEADING_COMBINING_MARK': '',
\ 'IDNA_ERROR_DISALLOWED': '',
\ 'IDNA_ERROR_PUNYCODE': '',
\ 'IDNA_ERROR_LABEL_HAS_DOT': '',
\ 'IDNA_ERROR_INVALID_ACE_LABEL': '',
\ 'IDNA_ERROR_BIDI': '',
\ 'IDNA_ERROR_CONTEXTJ': '',
\ 'LD_LIBRARY_PATH': '',
\ 'U_ZERO_ERROR': '',
\ 'U_UNSUPPORTED_ERROR': '',
\ }
let g:phpcomplete_builtin['constants']['informix'] = {
\ 'IFX_SCROLL': '',
\ 'IFX_HOLD': '',
\ 'IFX_LO_RDONLY': '',
\ 'IFX_LO_WRONLY': '',
\ 'IFX_LO_APPEND': '',
\ 'IFX_LO_RDWR': '',
\ 'IFX_LO_BUFFER': '',
\ 'IFX_LO_NOBUFFER': '',
\ }
let g:phpcomplete_builtin['constants']['gd'] = {
\ 'IMAGETYPE_GIF': '',
\ 'IMAGETYPE_JPEG': '',
\ 'IMAGETYPE_PNG': '',
\ 'IMAGETYPE_SWF': '',
\ 'IMAGETYPE_PSD': '',
\ 'IMAGETYPE_BMP': '',
\ 'IMAGETYPE_TIFF_II': '',
\ 'IMAGETYPE_TIFF_MM': '',
\ 'IMAGETYPE_JPC': '',
\ 'IMAGETYPE_JP2': '',
\ 'IMAGETYPE_JPX': '',
\ 'IMAGETYPE_JB2': '',
\ 'IMAGETYPE_SWC': '',
\ 'IMAGETYPE_IFF': '',
\ 'IMAGETYPE_WBMP': '',
\ 'IMAGETYPE_XBM': '',
\ 'IMAGETYPE_ICO': '',
\ 'IMAGETYPE_WEBP': '',
\ 'IMG_AFFINE_TRANSLATE': '',
\ 'IMG_AFFINE_SCALE': '',
\ 'IMG_AFFINE_ROTATE': '',
\ 'IMG_AFFINE_SHEAR_HORIZONTAL': '',
\ 'IMG_AFFINE_SHEAR_VERTICAL': '',
\ 'IMG_CROP_DEFAULT': '',
\ 'IMG_CROP_TRANSPARENT': '',
\ 'IMG_CROP_SIDES': '',
\ 'IMG_CROP_BLACK': '',
\ 'IMG_CROP_WHITE': '',
\ 'IMG_CROP_THRESHOLD': '',
\ 'IMG_CROP_AUTO': '',
\ 'IMG_ARC_PIE': '',
\ 'IMG_ARC_CHORD': '',
\ 'IMG_ARC_NOFILL': '',
\ 'IMG_ARC_EDGED': '',
\ 'IMG_FILTER_NEGATE': '',
\ 'IMG_FILTER_GRAYSCALE': '',
\ 'IMG_FILTER_BRIGHTNESS': '',
\ 'IMG_FILTER_CONTRAST': '',
\ 'IMG_FILTER_COLORIZE': '',
\ 'IMG_FILTER_EDGEDETECT': '',
\ 'IMG_FILTER_EMBOSS': '',
\ 'IMG_FILTER_GAUSSIAN_BLUR': '',
\ 'IMG_FILTER_SELECTIVE_BLUR': '',
\ 'IMG_FILTER_MEAN_REMOVAL': '',
\ 'IMG_FILTER_SMOOTH': '',
\ 'IMG_FILTER_PIXELATE': '',
\ 'IMG_FILTER_SCATTER': '',
\ 'IMG_FLIP_HORIZONTAL': '',
\ 'IMG_FLIP_VERTICAL': '',
\ 'IMG_FLIP_BOTH': '',
\ 'IMG_GD2_RAW': '',
\ 'IMG_GD2_COMPRESSED': '',
\ 'IMG_EFFECT_REPLACE': '',
\ 'IMG_EFFECT_ALPHABLEND': '',
\ 'IMG_EFFECT_NORMAL': '',
\ 'IMG_EFFECT_OVERLAY': '',
\ 'IMG_EFFECT_MULTIPLY': '',
\ 'PNG_NO_FILTER': '',
\ 'PNG_ALL_FILTERS': '',
\ 'IMG_NEAREST_NEIGHBOUR': '',
\ 'IMG_BILINEAR_FIXED': '',
\ 'IMG_BICUBIC': '',
\ 'IMG_BICUBIC_FIXED': '',
\ 'IMG_WEIGHTED4': '',
\ 'IMG_COLOR_BRUSHED': '',
\ 'IMG_COLOR_STYLEDBRUSHED': '',
\ 'IMG_BELL': '',
\ 'IMG_BESSEL': '',
\ 'IMG_BLACKMAN': '',
\ 'IMG_BOX': '',
\ 'IMG_BSPLINE': '',
\ 'IMG_CATMULLROM': '',
\ 'IMG_GAUSSIAN': '',
\ 'IMG_GENERALIZED_CUBIC': '',
\ 'IMG_HERMITE': '',
\ 'IMG_HAMMING': '',
\ 'IMG_HANNING': '',
\ 'IMG_MITCHELL': '',
\ 'IMG_POWER': '',
\ 'IMG_QUADRATIC': '',
\ 'IMG_SINC': '',
\ 'IMG_TRIANGLE': '',
\ 'IMG_COLOR_STYLED': '',
\ 'IMG_COLOR_TRANSPARENT': '',
\ 'IMG_COLOR_TILED': '',
\ 'IMG_BMP': '',
\ 'IMG_GIF': '',
\ 'IMG_JPG': '',
\ 'IMG_PNG': '',
\ 'IMG_WBMP': '',
\ 'IMG_XPM': '',
\ 'IMG_WEBP': '',
\ 'GD_VERSION': '',
\ 'GD_MAJOR_VERSION': '',
\ 'GD_MINOR_VERSION': '',
\ 'GD_RELEASE_VERSION': '',
\ 'GD_EXTRA_VERSION': '',
\ 'GD_BUNDLED': '',
\ 'IMG_JPEG': '',
\ 'IMG_ARC_ROUNDED': '',
\ 'IMAGETYPE_JPEG2000': '',
\ 'PNG_FILTER_NONE': '',
\ 'PNG_FILTER_SUB': '',
\ 'PNG_FILTER_UP': '',
\ 'PNG_FILTER_AVG': '',
\ 'PNG_FILTER_PAETH': '',
\ }
let g:phpcomplete_builtin['constants']['imap'] = {
\ 'FT_UID': '',
\ 'FT_PEEK': '',
\ 'FT_INTERNAL': '',
\ 'ST_UID': '',
\ 'CL_EXPUNGE': '',
\ 'FT_PREFETCHTEXT': '',
\ 'IMAP_GC_ELT': '',
\ 'IMAP_GC_ENV': '',
\ 'IMAP_GC_TEXTS': '',
\ 'LATT_NOINFERIORS': '',
\ 'LATT_NOSELECT': '',
\ 'LATT_MARKED': '',
\ 'LATT_UNMARKED': '',
\ 'MARKED': '',
\ 'UNMARKED': '',
\ 'LATT_REFERRAL': '',
\ 'LATT_HASCHILDREN': '',
\ 'LATT_HASNOCHILDREN': '',
\ 'CP_UID': '',
\ 'CP_MOVE': '',
\ 'OP_READONLY': '',
\ 'OP_ANONYMOUS': '',
\ 'OP_HALFOPEN': '',
\ 'OP_DEBUG': '',
\ 'OP_SHORTCACHE': '',
\ 'OP_SILENT': '',
\ 'OP_PROTOTYPE': '',
\ 'OP_SECURE': '',
\ 'OP_EXPUNGE': '',
\ 'SE_UID': '',
\ 'SORTDATE': '',
\ 'SORTARRIVAL': '',
\ 'SORTFROM': '',
\ 'SORTSUBJECT': '',
\ 'SORTTO': '',
\ 'SORTCC': '',
\ 'SORTSIZE': '',
\ 'SE_NOPREFETCH': '',
\ 'SA_MESSAGES': '',
\ 'SA_RECENT': '',
\ 'SA_UNSEEN': '',
\ 'SA_UIDNEXT': '',
\ 'SA_UIDVALIDITY': '',
\ 'SA_ALL': '',
\ 'IMAP_OPENTIMEOUT': '',
\ 'IMAP_READTIMEOUT': '',
\ 'IMAP_WRITETIMEOUT': '',
\ 'IMAP_CLOSETIMEOUT': '',
\ 'NIL': '',
\ 'FT_NOT': '',
\ 'ST_SILENT': '',
\ 'ST_SET': '',
\ 'SE_FREE': '',
\ 'SO_FREE': '',
\ 'SO_NOSERVER': '',
\ 'TYPETEXT': '',
\ 'TYPEMULTIPART': '',
\ 'TYPEMESSAGE': '',
\ 'TYPEAPPLICATION': '',
\ 'TYPEAUDIO': '',
\ 'TYPEIMAGE': '',
\ 'TYPEVIDEO': '',
\ 'TYPEMODEL': '',
\ 'TYPEOTHER': '',
\ 'ENC7BIT': '',
\ 'ENC8BIT': '',
\ 'ENCBINARY': '',
\ 'ENCBASE64': '',
\ 'ENCQUOTEDPRINTABLE': '',
\ 'ENCOTHER': '',
\ }
let g:phpcomplete_builtin['constants']['ingres'] = {
\ 'INGRES_NUM': '',
\ 'INGRES_ASSOC': '',
\ 'INGRES_BOTH': '',
\ 'INGRES_CURSOR_UPDATE': '',
\ 'INGRES_CURSOR_READONLY': '',
\ 'INGRES_EXT_VERSION': '',
\ 'INGRES_API_VERSION': '',
\ 'INGRES_DATE_MULTINATIONAL': '',
\ 'INGRES_DATE_MULTINATIONAL4': '',
\ 'INGRES_DATE_FINNISH': '',
\ 'INGRES_DATE_ISO': '',
\ 'INGRES_DATE_ISO4': '',
\ 'INGRES_DATE_GERMAN': '',
\ 'INGRES_DATE_MDY': '',
\ 'INGRES_DATE_DMY': '',
\ 'INGRES_DATE_YMD': '',
\ 'INGRES_MONEY_LEADING': '',
\ 'INGRES_MONEY_TRAILING': '',
\ 'INGRES_STRUCTURE_BTREE': '',
\ 'INGRES_STRUCTURE_CBTREE': '',
\ 'INGRES_STRUCTURE_HASH': '',
\ 'INGRES_STRUCTURE_CHASH': '',
\ 'INGRES_STRUCTURE_HEAP': '',
\ 'INGRES_STRUCTURE_CHEAP': '',
\ 'INGRES_STRUCTURE_ISAM': '',
\ 'INGRES_STRUCTURE_CISAM': '',
\ }
let g:phpcomplete_builtin['constants']['inotify'] = {
\ 'IN_MASK_ADD': '',
\ 'IN_MOVE_FROM': '',
\ 'IN_MOVE_TO': '',
\ 'IN_ACCESS': '',
\ 'IN_MODIFY': '',
\ 'IN_ATTRIB': '',
\ 'IN_CLOSE_WRITE': '',
\ 'IN_CLOSE_NOWRITE': '',
\ 'IN_OPEN': '',
\ 'IN_MOVED_TO': '',
\ 'IN_MOVED_FROM': '',
\ 'IN_CREATE': '',
\ 'IN_DELETE': '',
\ 'IN_DELETE_SELF': '',
\ 'IN_MOVE_SELF': '',
\ 'IN_CLOSE': '',
\ 'IN_MOVE': '',
\ 'IN_ALL_EVENTS': '',
\ 'IN_UNMOUNT': '',
\ 'IN_Q_OVERFLOW': '',
\ 'IN_IGNORED': '',
\ 'IN_ISDIR': '',
\ 'IN_ONLYDIR': '',
\ 'IN_DONT_FOLLOW': '',
\ 'IN_ONESHOT': '',
\ }
let g:phpcomplete_builtin['constants']['kadm5'] = {
\ 'KADM5_PRINC_EXPIRE_TIME': '',
\ 'KADM5_PW_EXPIRATION': '',
\ 'KADM5_ATTRIBUTES': '',
\ 'KADM5_MAX_LIFE': '',
\ 'KADM5_KVNO': '',
\ 'KADM5_POLICY': '',
\ 'KADM5_CLEARPOLICY': '',
\ 'KADM5_MAX_RLIFE': '',
\ 'KADM5_FAIL_AUTH_COUNT': '',
\ }
let g:phpcomplete_builtin['constants']['ldap'] = {
\ 'LDAP_ESCAPE_FILTER': '',
\ 'LDAP_ESCAPE_DN': '',
\ 'LDAP_EXOP_START_TLS': '',
\ 'LDAP_EXOP_MODIFY_PASSWD': '',
\ 'LDAP_EXOP_REFRESH': '',
\ 'LDAP_EXOP_WHO_AM_I': '',
\ 'LDAP_EXOP_TURN': '',
\ 'LDAP_OPT_DEREF': '',
\ 'LDAP_OPT_SIZELIMIT': '',
\ 'LDAP_OPT_TIMELIMIT': '',
\ 'LDAP_OPT_NETWORK_TIMEOUT': '',
\ 'LDAP_OPT_PROTOCOL_VERSION': '',
\ 'LDAP_OPT_ERROR_NUMBER': '',
\ 'LDAP_OPT_DIAGNOSTIC_MESSAGE': '',
\ 'LDAP_OPT_REFERRALS': '',
\ 'LDAP_OPT_RESTART': '',
\ 'LDAP_OPT_HOST_NAME': '',
\ 'LDAP_OPT_ERROR_STRING': '',
\ 'LDAP_OPT_MATCHED_DN': '',
\ 'LDAP_OPT_SERVER_CONTROLS': '',
\ 'LDAP_OPT_CLIENT_CONTROLS': '',
\ 'LDAP_OPT_X_KEEPALIVE_IDLE': '',
\ 'LDAP_OPT_X_KEEPALIVE_PROBES': '',
\ 'LDAP_OPT_X_KEEPALIVE_INTERVAL': '',
\ 'LDAP_OPT_X_TLS_CACERTDIR': '',
\ 'LDAP_OPT_X_TLS_CACERTFILE': '',
\ 'LDAP_OPT_X_TLS_CERTFILE': '',
\ 'LDAP_OPT_X_TLS_CIPHER_SUITE': '',
\ 'LDAP_OPT_X_TLS_CRLCHECK': '',
\ 'LDAP_OPT_X_TLS_CRL_NONE': '',
\ 'LDAP_OPT_X_TLS_CRL_PEER': '',
\ 'LDAP_OPT_X_TLS_CRL_ALL': '',
\ 'LDAP_OPT_X_TLS_CRLFILE': '',
\ 'LDAP_OPT_X_TLS_DHFILE': '',
\ 'LDAP_OPT_X_TLS_KEYILE': '',
\ 'LDAP_OPT_X_TLS_PACKAGE': '',
\ 'LDAP_OPT_X_TLS_PROTOCOL_MIN': '',
\ 'LDAP_OPT_X_TLS_RANDOM_FILE': '',
\ 'LDAP_OPT_X_TLS_REQUIRE_CERT': '',
\ 'LDAP_SCOPE_ONELEVEL': '',
\ 'LDAP_DEREF_NEVER': '',
\ 'LDAP_DEREF_SEARCHING': '',
\ 'LDAP_DEREF_FINDING': '',
\ 'LDAP_DEREF_ALWAYS': '',
\ 'LDAP_MODIFY_BATCH_ADD': '',
\ 'LDAP_MODIFY_BATCH_REMOVE': '',
\ 'LDAP_MODIFY_BATCH_REMOVE_ALL': '',
\ 'LDAP_MODIFY_BATCH_REPLACE': '',
\ 'LDAP_SCOPE_BASE': '',
\ 'LDAP_SCOPE_SUBTREE': '',
\ 'LDAP_OPT_X_TLS_KEYFILE': '',
\ 'LDAP_OPT_DEBUG_LEVEL': '',
\ 'LDAP_OPT_X_TLS_PROTOCOL_SSL2': '',
\ 'LDAP_OPT_X_TLS_PROTOCOL_SSL3': '',
\ 'LDAP_OPT_X_TLS_PROTOCOL_TLS1_0': '',
\ 'LDAP_OPT_X_TLS_PROTOCOL_TLS1_1': '',
\ 'LDAP_OPT_X_TLS_PROTOCOL_TLS1_2': '',
\ 'LDAP_OPT_X_TLS_NEVER': '',
\ 'LDAP_OPT_X_TLS_HARD': '',
\ 'LDAP_OPT_X_TLS_DEMAND': '',
\ 'LDAP_OPT_X_TLS_ALLOW': '',
\ 'LDAP_OPT_X_TLS_TRY': '',
\ 'GSLC_SSL_NO_AUTH': '',
\ 'GSLC_SSL_ONEWAY_AUTH': '',
\ 'GSLC_SSL_TWOWAY_AUTH': '',
\ 'LDAP_CONTROL_MANAGEDSAIT': '',
\ 'LDAP_CONTROL_PROXY_AUTHZ': '',
\ 'LDAP_CONTROL_SUBENTRIES': '',
\ 'LDAP_CONTROL_VALUESRETURNFILTER': '',
\ 'LDAP_CONTROL_ASSERT': '',
\ 'LDAP_CONTROL_PRE_READ': '',
\ 'LDAP_CONTROL_POST_READ': '',
\ 'LDAP_CONTROL_SORTREQUEST': '',
\ 'LDAP_CONTROL_SORTRESPONSE': '',
\ 'LDAP_CONTROL_PAGEDRESULTS': '',
\ 'LDAP_CONTROL_AUTHZID_REQUEST': '',
\ 'LDAP_CONTROL_AUTHZID_RESPONSE': '',
\ 'LDAP_CONTROL_SYNC': '',
\ 'LDAP_CONTROL_SYNC_STATE': '',
\ 'LDAP_CONTROL_SYNC_DONE': '',
\ 'LDAP_CONTROL_DONTUSECOPY': '',
\ 'LDAP_CONTROL_PASSWORDPOLICYREQUEST': '',
\ 'LDAP_CONTROL_PASSWORDPOLICYRESPONSE': '',
\ 'LDAP_CONTROL_X_INCREMENTAL_VALUES': '',
\ 'LDAP_CONTROL_X_DOMAIN_SCOPE': '',
\ 'LDAP_CONTROL_X_PERMISSIVE_MODIFY': '',
\ 'LDAP_CONTROL_X_SEARCH_OPTIONS': '',
\ 'LDAP_CONTROL_X_TREE_DELETE': '',
\ 'LDAP_CONTROL_X_EXTENDED_DN': '',
\ 'LDAP_CONTROL_VLVREQUEST': '',
\ 'LDAP_CONTROL_VLVRESPONSE': '',
\ }
let g:phpcomplete_builtin['constants']['maxdb'] = {
\ 'MAXDB_COMPNAME': '',
\ 'MAXDB_APPLICATION': '',
\ 'MAXDB_APPVERSION': '',
\ 'MAXDB_SQLMODE': '',
\ 'MAXDB_UNICODE': '',
\ 'MAXDB_TIMEOUT': '',
\ 'MAXDB_ISOLATIONLEVEL': '',
\ 'MAXDB_PACKETCOUNT': '',
\ 'MAXDB_STATEMENTCACHESIZE': '',
\ 'MAXDB_CURSORPREFIX': '',
\ }
let g:phpcomplete_builtin['constants']['multibyte_string'] = {
\ 'MB_CASE_UPPER': '',
\ 'MB_CASE_LOWER': '',
\ 'MB_CASE_TITLE': '',
\ 'MB_CASE_FOLD': '',
\ 'MB_CASE_LOWER_SIMPLE': '',
\ 'MB_CASE_UPPER_SIMPLE': '',
\ 'MB_CASE_TITLE_SIMPLE': '',
\ 'MB_CASE_FOLD_SIMPLE': '',
\ 'MB_OVERLOAD_MAIL': '',
\ 'MB_OVERLOAD_STRING': '',
\ 'MB_OVERLOAD_REGEX': '',
\ }
let g:phpcomplete_builtin['constants']['mcrypt'] = {
\ 'MCRYPT_ENCRYPT': '',
\ 'MCRYPT_DECRYPT': '',
\ 'MCRYPT_RAND': '',
\ 'MCRYPT_DEV_RANDOM': '',
\ 'MCRYPT_DEV_URANDOM': '',
\ 'CFB': '',
\ 'OFB': '',
\ 'CBC': '',
\ 'MCRYPT_MODE_ECB': '',
\ 'MCRYPT_MODE_CBC': '',
\ 'MCRYPT_MODE_CFB': '',
\ 'MCRYPT_MODE_OFB': '',
\ 'MCRYPT_MODE_NOFB': '',
\ 'MCRYPT_MODE_STREAM': '',
\ }
let g:phpcomplete_builtin['constants']['semaphore'] = {
\ 'MSG_IPC_NOWAIT': '',
\ 'MSG_ENOMSG': '',
\ 'MSG_EXCEPT': '',
\ 'MSG_NOERROR': '',
\ 'MSG_EAGAIN': '',
\ }
let g:phpcomplete_builtin['constants']['msql'] = {
\ 'MSQL_ASSOC': '',
\ 'MSQL_NUM': '',
\ 'MSQL_BOTH': '',
\ }
let g:phpcomplete_builtin['constants']['mssql'] = {
\ 'SQLTEXT': '',
\ 'SQLVARCHAR': '',
\ 'SQLCHAR': '',
\ 'SQLINT1': '',
\ 'SQLINT2': '',
\ 'SQLINT4': '',
\ 'SQLBIT': '',
\ 'SQLFLT4': '',
\ 'SQLFLT8': '',
\ 'SQLFLTN': '',
\ 'MSSQL_ASSOC': '',
\ 'MSSQL_NUM': '',
\ 'MSSQL_BOTH': '',
\ }
let g:phpcomplete_builtin['constants']['mysql_original'] = {
\ 'MYSQL_CLIENT_SSL': '',
\ 'MYSQL_CLIENT_COMPRESS': '',
\ 'MYSQL_CLIENT_IGNORE_SPACE': '',
\ 'MYSQL_CLIENT_INTERACTIVE': '',
\ 'MYSQL_ASSOC': '',
\ 'MYSQL_NUM': '',
\ 'MYSQL_BOTH': '',
\ 'MYSQL_PORT': '',
\ }
let g:phpcomplete_builtin['constants']['mysqlnd_ms'] = {
\ 'MYSQLND_MS_QUERY_USE_MASTER': '',
\ 'MYSQLND_MS_QUERY_USE_SLAVE': '',
\ 'MYSQLND_MS_QUERY_USE_LAST_USED': '',
\ 'MYSQLND_MS_QOS_CONSISTENCY_EVENTUAL': '',
\ 'MYSQLND_MS_QOS_CONSISTENCY_SESSION': '',
\ 'MYSQLND_MS_QOS_CONSISTENCY_STRONG': '',
\ 'MYSQLND_MS_QOS_OPTION_GTID': '',
\ 'MYSQLND_MS_QOS_OPTION_AGE': '',
\ 'MYSQLND_MS_MASTER_SWITCH': '',
\ 'MYSQLND_MS_SLAVE_SWITCH': '',
\ 'MYSQLND_MS_LAST_USED_SWITCH': '',
\ 'MYSQLND_MS_VERSION': '',
\ 'MYSQLND_MS_VERSION_ID': '',
\ 'MYSQLND_MS_LAST_USED': '',
\ }
let g:phpcomplete_builtin['constants']['mysqlnd_qc'] = {
\ 'MYSQLND_QC_CONDITION_META_SCHEMA_PATTERN': '',
\ 'MYSQLND_QC_SERVER_ID_SWITCH': '',
\ 'MYSQLND_QC_VERSION': '',
\ 'MYSQLND_QC_VERSION_ID': '',
\ 'MYSQLND_QC_ENABLE_SWITCH': '',
\ 'MYSQLND_QC_DISABLE_SWITCH': '',
\ 'MYSQLND_QC_TTL_SWITCH': '',
\ }
let g:phpcomplete_builtin['constants']['ncurses'] = {
\ 'NCURSES_ERR': '',
\ 'NCURSES_KEY_MOUSE': '',
\ 'NCURSES_COLOR_BLACK': '',
\ 'NCURSES_COLOR_WHITE': '',
\ 'NCURSES_COLOR_RED': '',
\ 'NCURSES_COLOR_GREEN': '',
\ 'NCURSES_COLOR_YELLOW': '',
\ 'NCURSES_COLOR_BLUE': '',
\ 'NCURSES_COLOR_CYAN': '',
\ 'NCURSES_COLOR_MAGENTA': '',
\ 'NCURSES_KEY_F0': '',
\ 'NCURSES_KEY_F64': '',
\ 'NCURSES_KEY_DOWN': '',
\ 'NCURSES_KEY_UP': '',
\ 'NCURSES_KEY_LEFT': '',
\ 'NCURSES_KEY_RIGHT': '',
\ 'NCURSES_KEY_HOME': '',
\ 'NCURSES_KEY_BACKSPACE': '',
\ 'NCURSES_KEY_DL': '',
\ 'NCURSES_KEY_IL': '',
\ 'NCURSES_KEY_DC': '',
\ 'NCURSES_KEY_IC': '',
\ 'NCURSES_KEY_EIC': '',
\ 'NCURSES_KEY_CLEAR': '',
\ 'NCURSES_KEY_EOS': '',
\ 'NCURSES_KEY_EOL': '',
\ 'NCURSES_KEY_SF': '',
\ 'NCURSES_KEY_SR': '',
\ 'NCURSES_KEY_NPAGE': '',
\ 'NCURSES_KEY_PPAGE': '',
\ 'NCURSES_KEY_STAB': '',
\ 'NCURSES_KEY_CTAB': '',
\ 'NCURSES_KEY_CATAB': '',
\ 'NCURSES_KEY_SRESET': '',
\ 'NCURSES_KEY_RESET': '',
\ 'NCURSES_KEY_PRINT': '',
\ 'NCURSES_KEY_LL': '',
\ 'NCURSES_KEY_A1': '',
\ 'NCURSES_KEY_A3': '',
\ 'NCURSES_KEY_B2': '',
\ 'NCURSES_KEY_C1': '',
\ 'NCURSES_KEY_C3': '',
\ 'NCURSES_KEY_BTAB': '',
\ 'NCURSES_KEY_BEG': '',
\ 'NCURSES_KEY_CANCEL': '',
\ 'NCURSES_KEY_CLOSE': '',
\ 'NCURSES_KEY_COMMAND': '',
\ 'NCURSES_KEY_COPY': '',
\ 'NCURSES_KEY_CREATE': '',
\ 'NCURSES_KEY_END': '',
\ 'NCURSES_KEY_EXIT': '',
\ 'NCURSES_KEY_FIND': '',
\ 'NCURSES_KEY_HELP': '',
\ 'NCURSES_KEY_MARK': '',
\ 'NCURSES_KEY_MESSAGE': '',
\ 'NCURSES_KEY_MOVE': '',
\ 'NCURSES_KEY_NEXT': '',
\ 'NCURSES_KEY_OPEN': '',
\ 'NCURSES_KEY_OPTIONS': '',
\ 'NCURSES_KEY_PREVIOUS': '',
\ 'NCURSES_KEY_REDO': '',
\ 'NCURSES_KEY_REFERENCE': '',
\ 'NCURSES_KEY_REFRESH': '',
\ 'NCURSES_KEY_REPLACE': '',
\ 'NCURSES_KEY_RESTART': '',
\ 'NCURSES_KEY_RESUME': '',
\ 'NCURSES_KEY_SAVE': '',
\ 'NCURSES_KEY_SBEG': '',
\ 'NCURSES_KEY_SCANCEL': '',
\ 'NCURSES_KEY_SCOMMAND': '',
\ 'NCURSES_KEY_SCOPY': '',
\ 'NCURSES_KEY_SCREATE': '',
\ 'NCURSES_KEY_SDC': '',
\ 'NCURSES_KEY_SDL': '',
\ 'NCURSES_KEY_SELECT': '',
\ 'NCURSES_KEY_SEND': '',
\ 'NCURSES_KEY_SEOL': '',
\ 'NCURSES_KEY_SEXIT': '',
\ 'NCURSES_KEY_SFIND': '',
\ 'NCURSES_KEY_SHELP': '',
\ 'NCURSES_KEY_SHOME': '',
\ 'NCURSES_KEY_SIC': '',
\ 'NCURSES_KEY_SLEFT': '',
\ 'NCURSES_KEY_SMESSAGE': '',
\ 'NCURSES_KEY_SMOVE': '',
\ 'NCURSES_KEY_SNEXT': '',
\ 'NCURSES_KEY_SOPTIONS': '',
\ 'NCURSES_KEY_SPREVIOUS': '',
\ 'NCURSES_KEY_SPRINT': '',
\ 'NCURSES_KEY_SREDO': '',
\ 'NCURSES_KEY_SREPLACE': '',
\ 'NCURSES_KEY_SRIGHT': '',
\ 'NCURSES_KEY_SRSUME': '',
\ 'NCURSES_KEY_SSAVE': '',
\ 'NCURSES_KEY_SSUSPEND': '',
\ 'NCURSES_KEY_UNDO': '',
\ 'NCURSES_KEY_MAX': '',
\ 'NCURSES_BUTTON1_RELEASED': '',
\ 'NCURSES_BUTTON4_RELEASED': '',
\ 'NCURSES_BUTTON1_PRESSED': '',
\ 'NCURSES_BUTTON4_PRESSED': '',
\ 'NCURSES_BUTTON1_CLICKED': '',
\ 'NCURSES_BUTTON4_CLICKED': '',
\ 'NCURSES_BUTTON1_DOUBLE_CLICKED': '',
\ 'NCURSES_BUTTON4_DOUBLE_CLICKED': '',
\ 'NCURSES_BUTTON1_TRIPLE_CLICKED': '',
\ 'NCURSES_BUTTON4_TRIPLE_CLICKED': '',
\ 'NCURSES_BUTTON_CTRL': '',
\ 'NCURSES_BUTTON_SHIFT': '',
\ 'NCURSES_BUTTON_ALT': '',
\ 'NCURSES_ALL_MOUSE_EVENTS': '',
\ 'NCURSES_REPORT_MOUSE_POSITION': '',
\ }
let g:phpcomplete_builtin['constants']['output_control'] = {
\ 'PHP_OUTPUT_HANDLER_STDFLAGS': '',
\ 'PHP_OUTPUT_HANDLER_CLEANABLE': '',
\ 'PHP_OUTPUT_HANDLER_FLUSHABLE': '',
\ 'PHP_OUTPUT_HANDLER_REMOVABLE': '',
\ 'PHP_OUTPUT_HANDLER_START': '',
\ 'PHP_OUTPUT_HANDLER_WRITE': '',
\ 'PHP_OUTPUT_HANDLER_FLUSH': '',
\ 'PHP_OUTPUT_HANDLER_CLEAN': '',
\ 'PHP_OUTPUT_HANDLER_FINAL': '',
\ 'PHP_OUTPUT_HANDLER_CONT': '',
\ 'PHP_OUTPUT_HANDLER_END': '',
\ }
let g:phpcomplete_builtin['constants']['odbc'] = {
\ 'ODBC_BINMODE_PASSTHRU': '',
\ 'ODBC_BINMODE_RETURN': '',
\ 'ODBC_BINMODE_CONVERT': '',
\ 'SQL_FETCH_FIRST': '',
\ 'SQL_FETCH_NEXT': '',
\ 'SQL_BEST_ROWID': '',
\ 'SQL_ROWVER': '',
\ 'SQL_CURSOR_FORWARD_ONLY': '',
\ 'SQL_CURSOR_KEYSET_DRIVEN': '',
\ 'SQL_CURSOR_DYNAMIC': '',
\ 'SQL_CURSOR_STATIC': '',
\ 'ODBC_TYPE': '',
\ 'SQL_ODBC_CURSORS': '',
\ 'SQL_CUR_USE_DRIVER': '',
\ 'SQL_CUR_USE_IF_NEEDED': '',
\ 'SQL_CUR_USE_ODBC': '',
\ 'SQL_CONCURRENCY': '',
\ 'SQL_CONCUR_READ_ONLY': '',
\ 'SQL_CONCUR_LOCK': '',
\ 'SQL_CONCUR_ROWVER': '',
\ 'SQL_CONCUR_VALUES': '',
\ 'SQL_CURSOR_TYPE': '',
\ 'SQL_KEYSET_SIZE': '',
\ 'SQL_CHAR': '',
\ 'SQL_VARCHAR': '',
\ 'SQL_LONGVARCHAR': '',
\ 'SQL_DECIMAL': '',
\ 'SQL_NUMERIC': '',
\ 'SQL_BIT': '',
\ 'SQL_TINYINT': '',
\ 'SQL_SMALLINT': '',
\ 'SQL_INTEGER': '',
\ 'SQL_BIGINT': '',
\ 'SQL_REAL': '',
\ 'SQL_FLOAT': '',
\ 'SQL_DOUBLE': '',
\ 'SQL_BINARY': '',
\ 'SQL_VARBINARY': '',
\ 'SQL_LONGVARBINARY': '',
\ 'SQL_DATE': '',
\ 'SQL_TIME': '',
\ 'SQL_TIMESTAMP': '',
\ 'SQL_TYPE_DATE': '',
\ 'SQL_TYPE_TIME': '',
\ 'SQL_TYPE_TIMESTAMP': '',
\ 'SQL_SCOPE_CURROW': '',
\ 'SQL_SCOPE_TRANSACTION': '',
\ 'SQL_SCOPE_SESSION': '',
\ 'SQL_NO_NULLS': '',
\ 'SQL_NULLABLE': '',
\ 'SQL_INDEX_UNIQUE': '',
\ 'SQL_INDEX_ALL': '',
\ 'SQL_ENSURE': '',
\ 'SQL_QUICK': '',
\ }
let g:phpcomplete_builtin['constants']['openal'] = {
\ 'AL_FORMAT_MONO8': '',
\ 'AL_FORMAT_MONO16': '',
\ 'AL_FORMAT_STEREO8': '',
\ 'AL_FORMAT_STEREO16': '',
\ 'AL_FREQUENCY': '',
\ 'AL_BITS': '',
\ 'AL_CHANNELS': '',
\ 'AL_SIZE': '',
\ 'AL_GAIN': '',
\ 'AL_POSITION': '',
\ 'AL_VELOCITY': '',
\ 'AL_ORIENTATION': '',
\ 'AL_SOURCE_RELATIVE': '',
\ 'AL_SOURCE_STATE': '',
\ 'AL_PITCH': '',
\ 'AL_MIN_GAIN': '',
\ 'AL_MAX_GAIN': '',
\ 'AL_MAX_DISTANCE': '',
\ 'AL_ROLLOFF_FACTOR': '',
\ 'AL_CONE_OUTER_GAIN': '',
\ 'AL_CONE_INNER_ANGLE': '',
\ 'AL_CONE_OUTER_ANGLE': '',
\ 'AL_REFERENCE_DISTANCE': '',
\ 'AL_DIRECTION': '',
\ 'AL_BUFFER': '',
\ 'AL_LOOPING': '',
\ 'ALC_FREQUENCY': '',
\ 'ALC_REFRESH': '',
\ 'ALC_SYNC': '',
\ 'AL_INITIAL': '',
\ 'AL_PLAYING': '',
\ 'AL_PAUSED': '',
\ 'AL_STOPPED': '',
\ 'AL_TRUE': '',
\ 'AL_FALSE': '',
\ }
let g:phpcomplete_builtin['constants']['openssl'] = {
\ 'OPENSSL_KEYTYPE_DSA': '',
\ 'OPENSSL_KEYTYPE_DH': '',
\ 'OPENSSL_KEYTYPE_RSA': '',
\ 'OPENSSL_KEYTYPE_EC': '',
\ 'OPENSSL_RAW_DATA': '',
\ 'OPENSSL_ZERO_PADDING': '',
\ 'OPENSSL_PKCS1_PADDING': '',
\ 'OPENSSL_SSLV23_PADDING': '',
\ 'OPENSSL_PKCS1_OAEP_PADDING': '',
\ 'OPENSSL_NO_PADDING': '',
\ 'OPENSSL_CIPHER_RC2_40': '',
\ 'OPENSSL_CIPHER_RC2_128': '',
\ 'OPENSSL_CIPHER_RC2_64': '',
\ 'OPENSSL_CIPHER_DES': '',
\ 'OPENSSL_CIPHER_3DES': '',
\ 'OPENSSL_CIPHER_AES_128_CBC': '',
\ 'OPENSSL_CIPHER_AES_192_CBC': '',
\ 'OPENSSL_CIPHER_AES_256_CBC': '',
\ 'OPENSSL_TLSEXT_SERVER_NAME': '',
\ 'OPENSSL_VERSION_TEXT': '',
\ 'OPENSSL_VERSION_NUMBER': '',
\ 'PKCS7_TEXT': '',
\ 'PKCS7_BINARY': '',
\ 'PKCS7_NOINTERN': '',
\ 'PKCS7_NOVERIFY': '',
\ 'PKCS7_NOCHAIN': '',
\ 'PKCS7_NOCERTS': '',
\ 'PKCS7_NOATTR': '',
\ 'PKCS7_DETACHED': '',
\ 'PKCS7_NOSIGS': '',
\ 'X509_PURPOSE_SSL_CLIENT': '',
\ 'X509_PURPOSE_SSL_SERVER': '',
\ 'X509_PURPOSE_NS_SSL_SERVER': '',
\ 'X509_PURPOSE_SMIME_SIGN': '',
\ 'X509_PURPOSE_SMIME_ENCRYPT': '',
\ 'X509_PURPOSE_CRL_SIGN': '',
\ 'X509_PURPOSE_ANY': '',
\ 'OPENSSL_ALGO_DSS1': '',
\ 'OPENSSL_ALGO_SHA1': '',
\ 'OPENSSL_ALGO_SHA224': '',
\ 'OPENSSL_ALGO_SHA256': '',
\ 'OPENSSL_ALGO_SHA384': '',
\ 'OPENSSL_ALGO_SHA512': '',
\ 'OPENSSL_ALGO_RMD160': '',
\ 'OPENSSL_ALGO_MD5': '',
\ 'OPENSSL_ALGO_MD4': '',
\ 'OPENSSL_ALGO_MD2': '',
\ }
let g:phpcomplete_builtin['constants']['parsekit'] = {
\ 'PARSEKIT_QUIET': '',
\ 'PARSEKIT_SIMPLE': '',
\ 'PARSEKIT_EXTENDED_VALUE': '',
\ 'PARSEKIT_RESULT_CONST': '',
\ 'PARSEKIT_RESULT_EA_TYPE': '',
\ 'PARSEKIT_RESULT_JMP_ADDR': '',
\ 'PARSEKIT_RESULT_OPARRAY': '',
\ 'PARSEKIT_RESULT_OPLINE': '',
\ 'PARSEKIT_RESULT_VAR': '',
\ 'PARSEKIT_USAGE_UNKNOWN': '',
\ 'PARSEKIT_ZEND_INTERNAL_CLASS': '',
\ 'PARSEKIT_ZEND_USER_CLASS': '',
\ 'PARSEKIT_ZEND_EVAL_CODE': '',
\ 'PARSEKIT_ZEND_INTERNAL_FUNCTION': '',
\ 'PARSEKIT_ZEND_OVERLOADED_FUNCTION': '',
\ 'PARSEKIT_ZEND_OVERLOADED_FUNCTION_TEMPORARY': '',
\ 'PARSEKIT_ZEND_USER_FUNCTION': '',
\ 'PARSEKIT_IS_CONST': '',
\ 'PARSEKIT_IS_TMP_VAR': '',
\ 'PARSEKIT_IS_UNUSED': '',
\ 'PARSEKIT_IS_VAR': '',
\ 'PARSEKIT_ZEND_ADD': '',
\ 'PARSEKIT_ZEND_ADD_ARRAY_ELEMENT': '',
\ 'PARSEKIT_ZEND_ADD_CHAR': '',
\ 'PARSEKIT_ZEND_ADD_INTERFACE': '',
\ 'PARSEKIT_ZEND_ADD_STRING': '',
\ 'PARSEKIT_ZEND_ADD_VAR': '',
\ 'PARSEKIT_ZEND_ASSIGN': '',
\ 'PARSEKIT_ZEND_ASSIGN_ADD': '',
\ 'PARSEKIT_ZEND_ASSIGN_BW_AND': '',
\ 'PARSEKIT_ZEND_ASSIGN_BW_OR': '',
\ 'PARSEKIT_ZEND_ASSIGN_BW_XOR': '',
\ 'PARSEKIT_ZEND_ASSIGN_CONCAT': '',
\ 'PARSEKIT_ZEND_ASSIGN_DIM': '',
\ 'PARSEKIT_ZEND_ASSIGN_DIV': '',
\ 'PARSEKIT_ZEND_ASSIGN_MOD': '',
\ 'PARSEKIT_ZEND_ASSIGN_MUL': '',
\ 'PARSEKIT_ZEND_ASSIGN_OBJ': '',
\ 'PARSEKIT_ZEND_ASSIGN_REF': '',
\ 'PARSEKIT_ZEND_ASSIGN_SL': '',
\ 'PARSEKIT_ZEND_ASSIGN_SR': '',
\ 'PARSEKIT_ZEND_ASSIGN_SUB': '',
\ 'PARSEKIT_ZEND_BEGIN_SILENCE': '',
\ 'PARSEKIT_ZEND_BOOL': '',
\ 'PARSEKIT_ZEND_BOOL_NOT': '',
\ 'PARSEKIT_ZEND_BOOL_XOR': '',
\ 'PARSEKIT_ZEND_BRK': '',
\ 'PARSEKIT_ZEND_BW_AND': '',
\ 'PARSEKIT_ZEND_BW_NOT': '',
\ 'PARSEKIT_ZEND_BW_OR': '',
\ 'PARSEKIT_ZEND_BW_XOR': '',
\ 'PARSEKIT_ZEND_CASE': '',
\ 'PARSEKIT_ZEND_CAST': '',
\ 'PARSEKIT_ZEND_CATCH': '',
\ 'PARSEKIT_ZEND_CLONE': '',
\ 'PARSEKIT_ZEND_CONCAT': '',
\ 'PARSEKIT_ZEND_CONT': '',
\ 'PARSEKIT_ZEND_DECLARE_CLASS': '',
\ 'PARSEKIT_ZEND_DECLARE_FUNCTION': '',
\ 'PARSEKIT_ZEND_DECLARE_INHERITED_CLASS': '',
\ 'PARSEKIT_ZEND_DIV': '',
\ 'PARSEKIT_ZEND_DO_FCALL': '',
\ 'PARSEKIT_ZEND_DO_FCALL_BY_NAME': '',
\ 'PARSEKIT_ZEND_ECHO': '',
\ 'PARSEKIT_ZEND_END_SILENCE': '',
\ 'PARSEKIT_ZEND_EXIT': '',
\ 'PARSEKIT_ZEND_EXT_FCALL_BEGIN': '',
\ 'PARSEKIT_ZEND_EXT_FCALL_END': '',
\ 'PARSEKIT_ZEND_EXT_NOP': '',
\ 'PARSEKIT_ZEND_EXT_STMT': '',
\ 'PARSEKIT_ZEND_FETCH_CLASS': '',
\ 'PARSEKIT_ZEND_FETCH_CONSTANT': '',
\ 'PARSEKIT_ZEND_FETCH_DIM_FUNC_ARG': '',
\ 'PARSEKIT_ZEND_FETCH_DIM_IS': '',
\ 'PARSEKIT_ZEND_FETCH_DIM_R': '',
\ 'PARSEKIT_ZEND_FETCH_DIM_RW': '',
\ 'PARSEKIT_ZEND_FETCH_DIM_TMP_VAR': '',
\ 'PARSEKIT_ZEND_FETCH_DIM_UNSET': '',
\ 'PARSEKIT_ZEND_FETCH_DIM_W': '',
\ 'PARSEKIT_ZEND_FETCH_FUNC_ARG': '',
\ 'PARSEKIT_ZEND_FETCH_IS': '',
\ 'PARSEKIT_ZEND_FETCH_OBJ_FUNC_ARG': '',
\ 'PARSEKIT_ZEND_FETCH_OBJ_IS': '',
\ 'PARSEKIT_ZEND_FETCH_OBJ_R': '',
\ 'PARSEKIT_ZEND_FETCH_OBJ_RW': '',
\ 'PARSEKIT_ZEND_FETCH_OBJ_UNSET': '',
\ 'PARSEKIT_ZEND_FETCH_OBJ_W': '',
\ 'PARSEKIT_ZEND_FETCH_R': '',
\ 'PARSEKIT_ZEND_FETCH_RW': '',
\ 'PARSEKIT_ZEND_FETCH_UNSET': '',
\ 'PARSEKIT_ZEND_FETCH_W': '',
\ 'PARSEKIT_ZEND_FE_FETCH': '',
\ 'PARSEKIT_ZEND_FE_RESET': '',
\ 'PARSEKIT_ZEND_FREE': '',
\ 'PARSEKIT_ZEND_HANDLE_EXCEPTION': '',
\ 'PARSEKIT_ZEND_IMPORT_CLASS': '',
\ 'PARSEKIT_ZEND_IMPORT_CONST': '',
\ 'PARSEKIT_ZEND_IMPORT_FUNCTION': '',
\ 'PARSEKIT_ZEND_INCLUDE_OR_EVAL': '',
\ 'PARSEKIT_ZEND_INIT_ARRAY': '',
\ 'PARSEKIT_ZEND_INIT_CTOR_CALL': '',
\ 'PARSEKIT_ZEND_INIT_FCALL_BY_NAME': '',
\ 'PARSEKIT_ZEND_INIT_METHOD_CALL': '',
\ 'PARSEKIT_ZEND_INIT_STATIC_METHOD_CALL': '',
\ 'PARSEKIT_ZEND_INIT_STRING': '',
\ 'PARSEKIT_ZEND_INSTANCEOF': '',
\ 'PARSEKIT_ZEND_ISSET_ISEMPTY': '',
\ 'PARSEKIT_ZEND_ISSET_ISEMPTY_DIM_OBJ': '',
\ 'PARSEKIT_ZEND_ISSET_ISEMPTY_PROP_OBJ': '',
\ 'PARSEKIT_ZEND_ISSET_ISEMPTY_VAR': '',
\ 'PARSEKIT_ZEND_IS_EQUAL': '',
\ 'PARSEKIT_ZEND_IS_IDENTICAL': '',
\ 'PARSEKIT_ZEND_IS_NOT_EQUAL': '',
\ 'PARSEKIT_ZEND_IS_NOT_IDENTICAL': '',
\ 'PARSEKIT_ZEND_IS_SMALLER': '',
\ 'PARSEKIT_ZEND_IS_SMALLER_OR_EQUAL': '',
\ 'PARSEKIT_ZEND_JMP': '',
\ 'PARSEKIT_ZEND_JMPNZ': '',
\ 'PARSEKIT_ZEND_JMPNZ_EX': '',
\ 'PARSEKIT_ZEND_JMPZ': '',
\ 'PARSEKIT_ZEND_JMPZNZ': '',
\ 'PARSEKIT_ZEND_JMPZ_EX': '',
\ 'PARSEKIT_ZEND_JMP_NO_CTOR': '',
\ 'PARSEKIT_ZEND_MOD': '',
\ 'PARSEKIT_ZEND_MUL': '',
\ 'PARSEKIT_ZEND_NEW': '',
\ 'PARSEKIT_ZEND_NOP': '',
\ 'PARSEKIT_ZEND_OP_DATA': '',
\ 'PARSEKIT_ZEND_POST_DEC': '',
\ 'PARSEKIT_ZEND_POST_DEC_OBJ': '',
\ 'PARSEKIT_ZEND_POST_INC': '',
\ 'PARSEKIT_ZEND_POST_INC_OBJ': '',
\ 'PARSEKIT_ZEND_PRE_DEC': '',
\ 'PARSEKIT_ZEND_PRE_DEC_OBJ': '',
\ 'PARSEKIT_ZEND_PRE_INC': '',
\ 'PARSEKIT_ZEND_PRE_INC_OBJ': '',
\ 'PARSEKIT_ZEND_PRINT': '',
\ 'PARSEKIT_ZEND_QM_ASSIGN': '',
\ 'PARSEKIT_ZEND_RAISE_ABSTRACT_ERROR': '',
\ 'PARSEKIT_ZEND_RECV': '',
\ 'PARSEKIT_ZEND_RECV_INIT': '',
\ 'PARSEKIT_ZEND_RETURN': '',
\ 'PARSEKIT_ZEND_SEND_REF': '',
\ 'PARSEKIT_ZEND_SEND_VAL': '',
\ 'PARSEKIT_ZEND_SEND_VAR': '',
\ 'PARSEKIT_ZEND_SEND_VAR_NO_REF': '',
\ 'PARSEKIT_ZEND_SL': '',
\ 'PARSEKIT_ZEND_SR': '',
\ 'PARSEKIT_ZEND_SUB': '',
\ 'PARSEKIT_ZEND_SWITCH_FREE': '',
\ 'PARSEKIT_ZEND_THROW': '',
\ 'PARSEKIT_ZEND_TICKS': '',
\ 'PARSEKIT_ZEND_UNSET_DIM_OBJ': '',
\ 'PARSEKIT_ZEND_UNSET_VAR': '',
\ 'PARSEKIT_ZEND_VERIFY_ABSTRACT_CLASS': '',
\ }
let g:phpcomplete_builtin['constants']['password_hashing'] = {
\ 'PASSWORD_DEFAULT': '',
\ 'PASSWORD_BCRYPT': '',
\ 'CRYPT_BLOWFISH': '',
\ 'PASSWORD_ARGON2I': '',
\ 'PASSWORD_ARGON2ID': '',
\ 'PASSWORD_ARGON2_DEFAULT_MEMORY_COST': '',
\ 'PASSWORD_ARGON2_DEFAULT_TIME_COST': '',
\ 'PASSWORD_ARGON2_DEFAULT_THREADS': '',
\ }
let g:phpcomplete_builtin['constants']['pcntl'] = {
\ 'SIGALRM': '',
\ 'PRIO_PGRP': '',
\ 'PRIO_USER': '',
\ 'PRIO_PROCESS': '',
\ 'SIG_DFL': '',
\ 'SIG_IGN': '',
\ 'SIG_BLOCK': '',
\ 'SIG_UNBLOCK': '',
\ 'SIG_SETMASK': '',
\ 'SIGCHLD': '',
\ 'SIGILL': '',
\ 'SIGFPE': '',
\ 'SIGSEGV': '',
\ 'SIGBUS': '',
\ 'SIGPOLL': '',
\ 'WNOHANG': '',
\ 'WUNTRACED': '',
\ 'SIG_ERR': '',
\ 'SIGHUP': '',
\ 'SIGINT': '',
\ 'SIGQUIT': '',
\ 'SIGTRAP': '',
\ 'SIGABRT': '',
\ 'SIGIOT': '',
\ 'SIGKILL': '',
\ 'SIGUSR1': '',
\ 'SIGUSR2': '',
\ 'SIGPIPE': '',
\ 'SIGTERM': '',
\ 'SIGSTKFLT': '',
\ 'SIGCLD': '',
\ 'SIGCONT': '',
\ 'SIGSTOP': '',
\ 'SIGTSTP': '',
\ 'SIGTTIN': '',
\ 'SIGTTOU': '',
\ 'SIGURG': '',
\ 'SIGXCPU': '',
\ 'SIGXFSZ': '',
\ 'SIGVTALRM': '',
\ 'SIGPROF': '',
\ 'SIGWINCH': '',
\ 'SIGIO': '',
\ 'SIGPWR': '',
\ 'SIGSYS': '',
\ 'SIGBABY': '',
\ 'SI_USER': '',
\ 'SI_NOINFO': '',
\ 'SI_KERNEL': '',
\ 'SI_QUEUE': '',
\ 'SI_TIMER': '',
\ 'SI_MSGGQ': '',
\ 'SI_ASYNCIO': '',
\ 'SI_SIGIO': '',
\ 'SI_TKILL': '',
\ 'CLD_EXITED': '',
\ 'CLD_KILLED': '',
\ 'CLD_DUMPED': '',
\ 'CLD_TRAPPED': '',
\ 'CLD_STOPPED': '',
\ 'CLD_CONTINUED': '',
\ 'TRAP_BRKPT': '',
\ 'TRAP_TRACE': '',
\ 'POLL_IN': '',
\ 'POLL_OUT': '',
\ 'POLL_MSG': '',
\ 'POLL_ERR': '',
\ 'POLL_PRI': '',
\ 'POLL_HUP': '',
\ 'ILL_ILLOPC': '',
\ 'ILL_ILLOPN': '',
\ 'ILL_ILLADR': '',
\ 'ILL_ILLTRP': '',
\ 'ILL_PRVOPC': '',
\ 'ILL_PRVREG': '',
\ 'ILL_COPROC': '',
\ 'ILL_BADSTK': '',
\ 'FPE_INTDIV': '',
\ 'FPE_INTOVF': '',
\ 'FPE_FLTDIV': '',
\ 'FPE_FLTOVF': '',
\ 'FPE_FLTUND': '',
\ 'FPE_FLTRES': '',
\ 'FPE_FLTINV': '',
\ 'FPE_FLTSUB': '',
\ 'SEGV_MAPERR': '',
\ 'SEGV_ACCERR': '',
\ 'BUS_ADRALN': '',
\ 'BUS_ADRERR': '',
\ 'BUS_OBJERR': '',
\ }
let g:phpcomplete_builtin['constants']['postgresql'] = {
\ 'PGSQL_CONNECT_ASYNC': '',
\ 'PGSQL_POLLING_FAILED': '',
\ 'PGSQL_POLLING_READING': '',
\ 'PGSQL_POLLING_WRITING': '',
\ 'PGSQL_POLLING_OK': '',
\ 'PGSQL_POLLING_ACTIVE': '',
\ 'PGSQL_CONNECT_FORCE_NEW': '',
\ 'PGSQL_CONNECTION_OK': '',
\ 'PGSQL_CONNECTION_BAD': '',
\ 'PGSQL_CONV_IGNORE_DEFAULT': '',
\ 'PGSQL_CONV_FORCE_NULL': '',
\ 'PGSQL_CONV_IGNORE_NOT_NULL': '',
\ 'PGSQL_DML_NO_CONV': '',
\ 'PGSQL_DML_ESCAPE': '',
\ 'PGSQL_DML_EXEC': '',
\ 'PGSQL_DML_ASYNC': '',
\ 'PGSQL_DML_STRING': '',
\ 'PGSQL_ASSOC': '',
\ 'PGSQL_NUM': '',
\ 'PGSQL_BOTH': '',
\ 'PGSQL_CONV_OPTS': '',
\ 'PGSQL_NOTICE_LAST': '',
\ 'PGSQL_NOTICE_ALL': '',
\ 'PGSQL_NOTICE_CLEAR': '',
\ 'INV_READ': '',
\ 'INV_WRITE': '',
\ 'INV_ARCHIVE': '',
\ 'PGSQL_SEEK_SET': '',
\ 'PGSQL_SEEK_CUR': '',
\ 'PGSQL_SEEK_END': '',
\ 'PGSQL_DIAG_SEVERITY': '',
\ 'PGSQL_DIAG_SQLSTATE': '',
\ 'PGSQL_DIAG_MESSAGE_PRIMARY': '',
\ 'PGSQL_DIAG_MESSAGE_DETAIL': '',
\ 'PGSQL_DIAG_MESSAGE_HINT': '',
\ 'PGSQL_DIAG_STATEMENT_POSITION': '',
\ 'PGSQL_DIAG_INTERNAL_POSITION': '',
\ 'PGSQL_DIAG_INTERNAL_QUERY': '',
\ 'PGSQL_DIAG_CONTEXT': '',
\ 'PGSQL_DIAG_SOURCE_FILE': '',
\ 'PGSQL_DIAG_SOURCE_LINE': '',
\ 'PGSQL_DIAG_SOURCE_FUNCTION': '',
\ 'PGSQL_STATUS_LONG': '',
\ 'PGSQL_STATUS_STRING': '',
\ 'PGSQL_EMPTY_QUERY': '',
\ 'PGSQL_COMMAND_OK': '',
\ 'PGSQL_TUPLES_OK': '',
\ 'PGSQL_COPY_OUT': '',
\ 'PGSQL_COPY_IN': '',
\ 'PGSQL_BAD_RESPONSE': '',
\ 'PGSQL_NONFATAL_ERROR': '',
\ 'PGSQL_FATAL_ERROR': '',
\ 'PGSQL_ERRORS_TERSE': '',
\ 'PGSQL_ERRORS_DEFAULT': '',
\ 'PGSQL_ERRORS_VERBOSE': '',
\ 'PGSQL_TRANSACTION_IDLE': '',
\ 'PGSQL_TRANSACTION_ACTIVE': '',
\ 'PGSQL_TRANSACTION_INTRANS': '',
\ 'PGSQL_TRANSACTION_INERROR': '',
\ 'PGSQL_TRANSACTION_UNKNOWN': '',
\ 'PGSQL_LIBPQ_VERSION': '',
\ 'PGSQL_LIBPQ_VERSION_STR': '',
\ 'PG_DIAG_STATEMENT_POSITION': '',
\ 'PG_DIAG_INTERNAL_QUERY': '',
\ 'PGSQL_DIAG_SEVERITY_NONLOCALIZED': '',
\ }
let g:phpcomplete_builtin['constants']['posix'] = {
\ 'POSIX_F_OK': '',
\ 'POSIX_R_OK': '',
\ 'POSIX_W_OK': '',
\ 'POSIX_X_OK': '',
\ 'POSIX_S_IFREG': '',
\ 'POSIX_S_IFCHR': '',
\ 'POSIX_S_IFBLK': '',
\ 'POSIX_S_IFIFO': '',
\ 'POSIX_S_IFSOCK': '',
\ 'S_IFCHR': '',
\ 'S_IFBLK': '',
\ 'POSIX_RLIMIT_INFINITY': '',
\ 'POSIX_RLIMIT_AS': '',
\ 'POSIX_RLIMIT_CORE': '',
\ 'POSIX_RLIMIT_CPU': '',
\ 'POSIX_RLIMIT_DATA': '',
\ 'POSIX_RLIMIT_FSIZE': '',
\ 'POSIX_RLIMIT_LOCKS': '',
\ 'POSIX_RLIMIT_MEMLOCK': '',
\ 'POSIX_RLIMIT_MSGQUEUE': '',
\ 'POSIX_RLIMIT_NICE': '',
\ 'POSIX_RLIMIT_NOFILE': '',
\ 'POSIX_RLIMIT_NPROC': '',
\ 'POSIX_RLIMIT_RSS': '',
\ 'POSIX_RLIMIT_RTPRIO': '',
\ 'POSIX_RLIMIT_RTTIME': '',
\ 'POSIX_RLIMIT_SIGPENDING': '',
\ 'POSIX_RLIMIT_STACK': '',
\ }
let g:phpcomplete_builtin['constants']['pcre'] = {
\ 'PREG_GREP_INVERT': '',
\ 'PREG_NO_ERROR': '',
\ 'PREG_INTERNAL_ERROR': '',
\ 'PREG_BACKTRACK_LIMIT_ERROR': '',
\ 'PREG_RECURSION_LIMIT_ERROR': '',
\ 'PREG_BAD_UTF8_ERROR': '',
\ 'PREG_BAD_UTF8_OFFSET_ERROR': '',
\ 'PREG_JIT_STACKLIMIT_ERROR': '',
\ 'PREG_PATTERN_ORDER': '',
\ 'PREG_SET_ORDER': '',
\ 'PREG_OFFSET_CAPTURE': '',
\ 'PREG_UNMATCHED_AS_NULL': '',
\ 'PREG_SPLIT_NO_EMPTY': '',
\ 'PREG_SPLIT_DELIM_CAPTURE': '',
\ 'PREG_SPLIT_OFFSET_CAPTURE': '',
\ 'PCRE_VERSION': '',
\ }
let g:phpcomplete_builtin['constants']['program_execution'] = {
\ 'STDIN': '',
\ }
let g:phpcomplete_builtin['constants']['pspell'] = {
\ 'PSPELL_FAST': '',
\ 'PSPELL_NORMAL': '',
\ 'PSPELL_BAD_SPELLERS': '',
\ 'PSPELL_RUN_TOGETHER': '',
\ }
let g:phpcomplete_builtin['constants']['paradox'] = {
\ 'PX_KEYTOLOWER': '',
\ 'PX_KEYTOUPPER': '',
\ 'PX_FIELD_TIME': '',
\ 'PX_FIELD_TIMESTAMP': '',
\ 'PX_FIELD_DATE': '',
\ }
let g:phpcomplete_builtin['constants']['radius'] = {
\ 'RADIUS_ACCESS_REQUEST': '',
\ 'RADIUS_ACCOUNTING_REQUEST': '',
\ 'RADIUS_VENDOR_SPECIFIC': '',
\ 'RADIUS_OPTION_TAGGED': '',
\ 'RADIUS_OPTION_SALT': '',
\ 'RADIUS_ACCESS_ACCEPT': '',
\ 'RADIUS_ACCESS_REJECT': '',
\ 'RADIUS_ACCESS_CHALLENGE': '',
\ 'RADIUS_USER_NAME': '',
\ 'RADIUS_USER_PASSWORD': '',
\ 'RADIUS_CHAP_PASSWORD': '',
\ 'RADIUS_CHAP_CHALLENGE': '',
\ 'RADIUS_NAS_IP_ADDRESS': '',
\ 'RADIUS_NAS_PORT': '',
\ 'RADIUS_SERVICE_TYPE': '',
\ 'RADIUS_LOGIN': '',
\ 'RADIUS_FRAMED': '',
\ 'RADIUS_CALLBACK_LOGIN': '',
\ 'RADIUS_CALLBACK_FRAMED': '',
\ 'RADIUS_OUTBOUND': '',
\ 'RADIUS_ADMINISTRATIVE': '',
\ 'RADIUS_NAS_PROMPT': '',
\ 'RADIUS_AUTHENTICATE_ONLY': '',
\ 'RADIUS_CALLBACK_NAS_PROMPT': '',
\ 'RADIUS_FRAMED_PROTOCOL': '',
\ 'RADIUS_PPP': '',
\ 'RADIUS_SLIP': '',
\ 'RADIUS_ARAP': '',
\ 'RADIUS_GANDALF': '',
\ 'RADIUS_XYLOGICS': '',
\ 'RADIUS_FRAMED_IP_ADDRESS': '',
\ 'RADIUS_FRAMED_IP_NETMASK': '',
\ 'RADIUS_FRAMED_ROUTING': '',
\ 'RADIUS_FILTER_ID': '',
\ 'RADIUS_FRAMED_MTU': '',
\ 'RADIUS_FRAMED_COMPRESSION': '',
\ 'RADIUS_COMP_NONE': '',
\ 'RADIUS_COMP_VJ': '',
\ 'RADIUS_COMP_IPXHDR': '',
\ 'RADIUS_COMP_STAC_LZS': '',
\ 'RADIUS_LOGIN_IP_HOST': '',
\ 'RADIUS_LOGIN_SERVICE': '',
\ 'RADIUS_LOGIN_TCP_PORT': '',
\ 'RADIUS_REPLY_MESSAGE': '',
\ 'RADIUS_CALLBACK_NUMBER': '',
\ 'RADIUS_CALLBACK_ID': '',
\ 'RADIUS_FRAMED_ROUTE': '',
\ 'RADIUS_FRAMED_IPX_NETWORK': '',
\ 'RADIUS_STATE': '',
\ 'RADIUS_CLASS': '',
\ 'RADIUS_SESSION_TIMEOUT': '',
\ 'RADIUS_IDLE_TIMEOUT': '',
\ 'RADIUS_TERMINATION_ACTION': '',
\ 'RADIUS_CALLED_STATION_ID': '',
\ 'RADIUS_CALLING_STATION_ID': '',
\ 'RADIUS_NAS_IDENTIFIER': '',
\ 'RADIUS_PROXY_STATE': '',
\ 'RADIUS_LOGIN_LAT_SERVICE': '',
\ 'RADIUS_LOGIN_LAT_NODE': '',
\ 'RADIUS_LOGIN_LAT_GROUP': '',
\ 'RADIUS_FRAMED_APPLETALK_LINK': '',
\ 'RADIUS_FRAMED_APPLETALK_NETWORK': '',
\ 'RADIUS_FRAMED_APPLETALK_ZONE': '',
\ 'RADIUS_NAS_PORT_TYPE': '',
\ 'RADIUS_ASYNC': '',
\ 'RADIUS_SYNC': '',
\ 'RADIUS_ISDN_SYNC': '',
\ 'RADIUS_ISDN_ASYNC_V120': '',
\ 'RADIUS_ISDN_ASYNC_V110': '',
\ 'RADIUS_VIRTUAL': '',
\ 'RADIUS_PIAFS': '',
\ 'RADIUS_HDLC_CLEAR_CHANNEL': '',
\ 'RADIUS_X_25': '',
\ 'RADIUS_X_75': '',
\ 'RADIUS_G_3_FAX': '',
\ 'RADIUS_SDSL': '',
\ 'RADIUS_ADSL_CAP': '',
\ 'RADIUS_ADSL_DMT': '',
\ 'RADIUS_IDSL': '',
\ 'RADIUS_ETHERNET': '',
\ 'RADIUS_XDSL': '',
\ 'RADIUS_CABLE': '',
\ 'RADIUS_WIRELESS_OTHER': '',
\ 'RADIUS_WIRELESS_IEEE_802_11': '',
\ 'RADIUS_PORT_LIMIT': '',
\ 'RADIUS_LOGIN_LAT_PORT': '',
\ 'RADIUS_CONNECT_INFO': '',
\ 'RADIUS_ACCT_STATUS_TYPE': '',
\ 'RADIUS_START': '',
\ 'RADIUS_STOP': '',
\ 'RADIUS_ACCOUNTING_ON': '',
\ 'RADIUS_ACCOUNTING_OFF': '',
\ 'RADIUS_ACCT_DELAY_TIME': '',
\ 'RADIUS_ACCT_INPUT_OCTETS': '',
\ 'RADIUS_ACCT_OUTPUT_OCTETS': '',
\ 'RADIUS_ACCT_SESSION_ID': '',
\ 'RADIUS_ACCT_AUTHENTIC': '',
\ 'RADIUS_AUTH_RADIUS': '',
\ 'RADIUS_AUTH_LOCAL': '',
\ 'RADIUS_AUTH_REMOTE': '',
\ 'RADIUS_ACCT_SESSION_TIME': '',
\ 'RADIUS_ACCT_INPUT_PACKETS': '',
\ 'RADIUS_ACCT_OUTPUT_PACKETS': '',
\ 'RADIUS_ACCT_TERMINATE_CAUSE': '',
\ 'RADIUS_TERM_USER_REQUEST': '',
\ 'RADIUS_TERM_LOST_CARRIER': '',
\ 'RADIUS_TERM_LOST_SERVICE': '',
\ 'RADIUS_TERM_IDLE_TIMEOUT': '',
\ 'RADIUS_TERM_SESSION_TIMEOUT': '',
\ 'RADIUS_TERM_ADMIN_RESET': '',
\ 'RADIUS_TERM_ADMIN_REBOOT': '',
\ 'RADIUS_TERM_PORT_ERROR': '',
\ 'RADIUS_TERM_NAS_ERROR': '',
\ 'RADIUS_TERM_NAS_REQUEST': '',
\ 'RADIUS_TERM_NAS_REBOOT': '',
\ 'RADIUS_TERM_PORT_UNNEEDED': '',
\ 'RADIUS_TERM_PORT_PREEMPTED': '',
\ 'RADIUS_TERM_PORT_SUSPENDED': '',
\ 'RADIUS_TERM_SERVICE_UNAVAILABLE': '',
\ 'RADIUS_TERM_CALLBACK': '',
\ 'RADIUS_TERM_USER_ERROR': '',
\ 'RADIUS_TERM_HOST_REQUEST': '',
\ 'RADIUS_ACCT_MULTI_SESSION_ID': '',
\ 'RADIUS_ACCT_LINK_COUNT': '',
\ 'RADIUS_MPPE_KEY_LEN': '',
\ 'RADIUS_ACCOUNTING_RESPONSE': '',
\ 'RADIUS_COA_REQUEST': '',
\ 'RADIUS_COA_ACK': '',
\ 'RADIUS_COA_NAK': '',
\ 'RADIUS_DISCONNECT_REQUEST': '',
\ 'RADIUS_DISCONNECT_ACK': '',
\ 'RADIUS_DISCONNECT_NAK': '',
\ 'RADIUS_VENDOR_MICROSOFT': '',
\ 'RADIUS_MICROSOFT_MS_CHAP_RESPONSE': '',
\ 'RADIUS_MICROSOFT_MS_CHAP_ERROR': '',
\ 'RADIUS_MICROSOFT_MS_CHAP_PW_1': '',
\ 'RADIUS_MICROSOFT_MS_CHAP_PW_2': '',
\ 'RADIUS_MICROSOFT_MS_CHAP_LM_ENC_PW': '',
\ 'RADIUS_MICROSOFT_MS_CHAP_NT_ENC_PW': '',
\ 'RADIUS_MICROSOFT_MS_MPPE_ENCRYPTION_POLICY': '',
\ 'RADIUS_MICROSOFT_MS_MPPE_ENCRYPTION_TYPES': '',
\ 'RADIUS_MICROSOFT_MS_RAS_VENDOR': '',
\ 'RADIUS_MICROSOFT_MS_CHAP_DOMAIN': '',
\ 'RADIUS_MICROSOFT_MS_CHAP_CHALLENGE': '',
\ 'RADIUS_MICROSOFT_MS_CHAP_MPPE_KEYS': '',
\ 'RADIUS_MICROSOFT_MS_BAP_USAGE': '',
\ 'RADIUS_MICROSOFT_MS_LINK_UTILIZATION_THRESHOLD': '',
\ 'RADIUS_MICROSOFT_MS_LINK_DROP_TIME_LIMIT': '',
\ 'RADIUS_MICROSOFT_MS_MPPE_SEND_KEY': '',
\ 'RADIUS_MICROSOFT_MS_MPPE_RECV_KEY': '',
\ 'RADIUS_MICROSOFT_MS_RAS_VERSION': '',
\ 'RADIUS_MICROSOFT_MS_OLD_ARAP_PASSWORD': '',
\ 'RADIUS_MICROSOFT_MS_NEW_ARAP_PASSWORD': '',
\ 'RADIUS_MICROSOFT_MS_ARAP_PASSWORD_CHANGE_REASON': '',
\ 'RADIUS_MICROSOFT_MS_FILTER': '',
\ 'RADIUS_MICROSOFT_MS_ACCT_AUTH_TYPE': '',
\ 'RADIUS_MICROSOFT_MS_ACCT_EAP_TYPE': '',
\ 'RADIUS_MICROSOFT_MS_CHAP2_RESPONSE': '',
\ 'RADIUS_MICROSOFT_MS_CHAP2_SUCCESS': '',
\ 'RADIUS_MICROSOFT_MS_CHAP2_PW': '',
\ 'RADIUS_MICROSOFT_MS_PRIMARY_DNS_SERVER': '',
\ 'RADIUS_MICROSOFT_MS_SECONDARY_DNS_SERVER': '',
\ 'RADIUS_MICROSOFT_MS_PRIMARY_NBNS_SERVER': '',
\ 'RADIUS_MICROSOFT_MS_SECONDARY_NBNS_SERVER': '',
\ 'RADIUS_MICROSOFT_MS_ARAP_CHALLENGE': '',
\ }
let g:phpcomplete_builtin['constants']['csprng'] = {
\ 'PHP_INT_MIN': '',
\ 'PHP_INT_MAX': '',
\ }
let g:phpcomplete_builtin['constants']['runkit'] = {
\ 'RUNKIT_ACC_PUBLIC': '',
\ 'RUNKIT_ACC_PROTECTED': '',
\ 'RUNKIT_ACC_PRIVATE': '',
\ 'RUNKIT_ACC_STATIC': '',
\ 'RUNKIT_IMPORT_FUNCTIONS': '',
\ 'RUNKIT_IMPORT_CLASS_METHODS': '',
\ 'RUNKIT_IMPORT_CLASS_CONSTS': '',
\ 'RUNKIT_IMPORT_CLASS_PROPS': '',
\ 'RUNKIT_IMPORT_CLASS_STATIC_PROPS': '',
\ 'RUNKIT_IMPORT_CLASSES': '',
\ 'RUNKIT_IMPORT_OVERRIDE': '',
\ 'CLASSKIT_ACC_PUBLIC': '',
\ 'CLASSKIT_ACC_PROTECTED': '',
\ 'CLASSKIT_ACC_PRIVATE': '',
\ 'CLASSKIT_AGGREGATE_OVERRIDE': '',
\ 'RUNKIT_VERSION': '',
\ 'CLASSKIT_VERSION': '',
\ }
let g:phpcomplete_builtin['constants']['misc'] = {
\ 'STDOUT': '',
\ 'STDERR': '',
\ 'ENABLE_VIRTUAL_TERMINAL_PROCESSING': '',
\ 'WAIT_IO_COMPLETION': '',
\ 'CONNECTION_ABORTED': '',
\ 'CONNECTION_NORMAL': '',
\ 'CONNECTION_TIMEOUT': '',
\ }
let g:phpcomplete_builtin['constants']['sessions'] = {
\ 'SID': '',
\ 'PHP_SESSION_DISABLED': '',
\ 'PHP_SESSION_NONE': '',
\ 'PHP_SESSION_ACTIVE': '',
\ 'UPLOAD_ERR_EXTENSION': '',
\ }
let g:phpcomplete_builtin['constants']['variable_handling'] = {
\ 'PHP_INT_MAX': '',
\ }
let g:phpcomplete_builtin['constants']['sockets'] = {
\ 'AF_INET': '',
\ 'AF_UNIX': '',
\ 'AF_INET6': '',
\ 'SOMAXCONN': '',
\ 'SOL_TCP': '',
\ 'SOL_UDP': '',
\ 'SOCK_STREAM': '',
\ 'SOCK_DGRAM': '',
\ 'SOCK_SEQPACKET': '',
\ 'SOCK_RAW': '',
\ 'SOCK_RDM': '',
\ 'SOL_SOCKET': '',
\ 'TCP': '',
\ 'SO_DEBUG': '',
\ 'SO_BROADCAST': '',
\ 'SO_REUSEADDR': '',
\ 'SO_REUSEPORT': '',
\ 'SO_KEEPALIVE': '',
\ 'SO_LINGER': '',
\ 'SO_OOBINLINE': '',
\ 'SO_SNDBUF': '',
\ 'SO_RCVBUF': '',
\ 'SO_ERROR': '',
\ 'SO_TYPE': '',
\ 'SO_DONTROUTE': '',
\ 'SO_RCVLOWAT': '',
\ 'SO_RCVTIMEO': '',
\ 'SO_SNDTIMEO': '',
\ 'SO_SNDLOWAT': '',
\ 'TCP_NODELAY': '',
\ 'MCAST_JOIN_GROUP': '',
\ 'MCAST_LEAVE_GROUP': '',
\ 'MCAST_BLOCK_SOURCE': '',
\ 'MCAST_UNBLOCK_SOURCE': '',
\ 'MCAST_JOIN_SOURCE_GROUP': '',
\ 'MCAST_LEAVE_SOURCE_GROUP': '',
\ 'IP_MULTICAST_IF': '',
\ 'IPV6_MULTICAST_IF': '',
\ 'IP_MULTICAST_LOOP': '',
\ 'IPV6_MULTICAST_LOOP': '',
\ 'IP_MULTICAST_TTL': '',
\ 'IPV6_MULTICAST_HOPS': '',
\ 'PHP_BINARY_READ': '',
\ 'PHP_NORMAL_READ': '',
\ 'MSG_OOB': '',
\ 'MSG_PEEK': '',
\ 'MSG_WAITALL': '',
\ 'MSG_DONTWAIT': '',
\ 'MSG_EOR': '',
\ 'MSG_EOF': '',
\ 'MSG_DONTROUTE': '',
\ 'O_NONBLOCK': '',
\ 'O_BLOCK': '',
\ 'LC_MESSAGES': '',
\ 'SOCKET_EINTR': '',
\ 'SOCKET_EBADF': '',
\ 'SOCKET_EACCES': '',
\ 'SOCKET_EFAULT': '',
\ 'SOCKET_EINVAL': '',
\ 'SOCKET_EMFILE': '',
\ 'SOCKET_ENAMETOOLONG': '',
\ 'SOCKET_ENOTEMPTY': '',
\ 'SOCKET_ELOOP': '',
\ 'SOCKET_EWOULDBLOCK': '',
\ 'SOCKET_EREMOTE': '',
\ 'SOCKET_EUSERS': '',
\ 'SOCKET_ENOTSOCK': '',
\ 'SOCKET_EDESTADDRREQ': '',
\ 'SOCKET_EMSGSIZE': '',
\ 'SOCKET_EPROTOTYPE': '',
\ 'SOCKET_EPROTONOSUPPORT': '',
\ 'SOCKET_ESOCKTNOSUPPORT': '',
\ 'SOCKET_EOPNOTSUPP': '',
\ 'SOCKET_EPFNOSUPPORT': '',
\ 'SOCKET_EAFNOSUPPORT': '',
\ 'SOCKET_EADDRNOTAVAIL': '',
\ 'SOCKET_ENETDOWN': '',
\ 'SOCKET_ENETUNREACH': '',
\ 'SOCKET_ENETRESET': '',
\ 'SOCKET_ECONNABORTED': '',
\ 'SOCKET_ECONNRESET': '',
\ 'SOCKET_ENOBUFS': '',
\ 'SOCKET_EISCONN': '',
\ 'SOCKET_ENOTCONN': '',
\ 'SOCKET_ESHUTDOWN': '',
\ 'SOCKET_ETIMEDOUT': '',
\ 'SOCKET_ECONNREFUSED': '',
\ 'SOCKET_EHOSTDOWN': '',
\ 'SOCKET_EHOSTUNREACH': '',
\ 'SOCKET_EALREADY': '',
\ 'SOCKET_EINPROGRESS': '',
\ 'SOCKET_ENOPROTOOPT': '',
\ 'SOCKET_EADDRINUSE': '',
\ 'SOCKET_ETOOMYREFS': '',
\ 'SOCKET_EPROCLIM': '',
\ 'SOCKET_EDUOT': '',
\ 'SOCKET_ESTALE': '',
\ 'SOCKET_EDISCON': '',
\ 'SOCKET_SYSNOTREADY': '',
\ 'SOCKET_VERNOTSUPPORTED': '',
\ 'SOCKET_NOTINITIALISED': '',
\ 'SOCKET_HOST_NOT_FOUND': '',
\ 'SOCKET_TRY_AGAIN': '',
\ 'SOCKET_NO_RECOVERY': '',
\ 'SOCKET_NO_DATA': '',
\ 'SOCKET_NO_ADDRESS': '',
\ 'SOCKET_EPERM': '',
\ 'SOCKET_ENOENT': '',
\ 'SOCKET_EIO': '',
\ 'SOCKET_ENXIO': '',
\ 'SOCKET_E2BIG': '',
\ 'SOCKET_EAGAIN': '',
\ 'SOCKET_ENOMEM': '',
\ 'SOCKET_ENOTBLK': '',
\ 'SOCKET_EBUSY': '',
\ 'SOCKET_EEXIST': '',
\ 'SOCKET_EXDEV': '',
\ 'SOCKET_ENODEV': '',
\ 'SOCKET_ENOTDIR': '',
\ 'SOCKET_EISDIR': '',
\ 'SOCKET_ENFILE': '',
\ 'SOCKET_ENOTTY': '',
\ 'SOCKET_ENOSPC': '',
\ 'SOCKET_ESPIPE': '',
\ 'SOCKET_EROFS': '',
\ 'SOCKET_EMLINK': '',
\ 'SOCKET_EPIPE': '',
\ 'SOCKET_ENOLCK': '',
\ 'SOCKET_ENOSYS': '',
\ 'SOCKET_ENOMSG': '',
\ 'SOCKET_EIDRM': '',
\ 'SOCKET_ECHRNG': '',
\ 'SOCKET_EL2NSYNC': '',
\ 'SOCKET_EL3HLT': '',
\ 'SOCKET_EL3RST': '',
\ 'SOCKET_ELNRNG': '',
\ 'SOCKET_EUNATCH': '',
\ 'SOCKET_ENOCSI': '',
\ 'SOCKET_EL2HLT': '',
\ 'SOCKET_EBADE': '',
\ 'SOCKET_EBADR': '',
\ 'SOCKET_EXFULL': '',
\ 'SOCKET_ENOANO': '',
\ 'SOCKET_EBADRQC': '',
\ 'SOCKET_EBADSLT': '',
\ 'SOCKET_ENOSTR': '',
\ 'SOCKET_ENODATA': '',
\ 'SOCKET_ETIME': '',
\ 'SOCKET_ENOSR': '',
\ 'SOCKET_ENONET': '',
\ 'SOCKET_ENOLINK': '',
\ 'SOCKET_EADV': '',
\ 'SOCKET_ESRMNT': '',
\ 'SOCKET_ECOMM': '',
\ 'SOCKET_EPROTO': '',
\ 'SOCKET_EMULTIHOP': '',
\ 'SOCKET_EBADMSG': '',
\ 'SOCKET_ENOTUNIQ': '',
\ 'SOCKET_EBADFD': '',
\ 'SOCKET_EREMCHG': '',
\ 'SOCKET_ERESTART': '',
\ 'SOCKET_ESTRPIPE': '',
\ 'SOCKET_EPROTOOPT': '',
\ 'SOCKET_ADDRINUSE': '',
\ 'SOCKET_ETOOMANYREFS': '',
\ 'SOCKET_EISNAM': '',
\ 'SOCKET_EREMOTEIO': '',
\ 'SOCKET_EDQUOT': '',
\ 'SOCKET_ENOMEDIUM': '',
\ 'SOCKET_EMEDIUMTYPE': '',
\ }
let g:phpcomplete_builtin['constants']['sodium'] = {
\ 'SODIUM_CRYPTO_PWHASH_OPSLIMIT_INTERACTIVE': '',
\ 'SODIUM_CRYPTO_PWHASH_OPSLIMIT_MODERATE': '',
\ 'SODIUM_CRYPTO_PWHASH_OPSLIMIT_SENSITIVE': '',
\ 'SODIUM_CRYPTO_PWHASH_MEMLIMIT_INTERACTIVE': '',
\ 'SODIUM_CRYPTO_PWHASH_MEMLIMIT_MODERATE': '',
\ 'SODIUM_CRYPTO_PWHASH_MEMLIMIT_SENSITIVE': '',
\ 'SODIUM_CRYPTO_PWHASH_SALTBYTES': '',
\ 'SODIUM_CRYPTO_PWHASH_ALG_DEFAULT': '',
\ 'SODIUM_CRYPTO_PWHASH_ALG_ARGON2ID13': '',
\ 'SODIUM_LIBRARY_VERSION': '',
\ 'SODIUM_LIBRARY_MAJOR_VERSION': '',
\ 'SODIUM_LIBRARY_MINOR_VERSION': '',
\ 'SODIUM_CRYPTO_AEAD_AES256GCM_KEYBYTES': '',
\ 'SODIUM_CRYPTO_AEAD_AES256GCM_NSECBYTES': '',
\ 'SODIUM_CRYPTO_AEAD_AES256GCM_NPUBBYTES': '',
\ 'SODIUM_CRYPTO_AEAD_AES256GCM_ABYTES': '',
\ 'SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_KEYBYTES': '',
\ 'SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_NSECBYTES': '',
\ 'SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_NPUBBYTES': '',
\ 'SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_ABYTES': '',
\ 'SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_IETF_KEYBYTES': '',
\ 'SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_IETF_NSECBYTES': '',
\ 'SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_IETF_NPUBBYTES': '',
\ 'SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_IETF_ABYTES': '',
\ 'SODIUM_CRYPTO_AUTH_BYTES': '',
\ 'SODIUM_CRYPTO_AUTH_KEYBYTES': '',
\ 'SODIUM_CRYPTO_BOX_SEALBYTES': '',
\ 'SODIUM_CRYPTO_BOX_SECRETKEYBYTES': '',
\ 'SODIUM_CRYPTO_BOX_PUBLICKEYBYTES': '',
\ 'SODIUM_CRYPTO_BOX_KEYPAIRBYTES': '',
\ 'SODIUM_CRYPTO_BOX_MACBYTES': '',
\ 'SODIUM_CRYPTO_BOX_NONCEBYTES': '',
\ 'SODIUM_CRYPTO_BOX_SEEDBYTES': '',
\ 'SODIUM_CRYPTO_KDF_BYTES_MIN': '',
\ 'SODIUM_CRYPTO_KDF_BYTES_MAX': '',
\ 'SODIUM_CRYPTO_KDF_CONTEXTBYTES': '',
\ 'SODIUM_CRYPTO_KDF_KEYBYTES': '',
\ 'SODIUM_CRYPTO_KX_SEEDBYTES': '',
\ 'SODIUM_CRYPTO_KX_SESSIONKEYBYTES': '',
\ 'SODIUM_CRYPTO_KX_PUBLICKEYBYTES': '',
\ 'SODIUM_CRYPTO_KX_SECRETKEYBYTES': '',
\ 'SODIUM_CRYPTO_KX_KEYPAIRBYTES': '',
\ 'SODIUM_CRYPTO_GENERICHASH_BYTES': '',
\ 'SODIUM_CRYPTO_GENERICHASH_BYTES_MIN': '',
\ 'SODIUM_CRYPTO_GENERICHASH_BYTES_MAX': '',
\ 'SODIUM_CRYPTO_GENERICHASH_KEYBYTES': '',
\ 'SODIUM_CRYPTO_GENERICHASH_KEYBYTES_MIN': '',
\ 'SODIUM_CRYPTO_GENERICHASH_KEYBYTES_MAX': '',
\ 'SODIUM_CRYPTO_PWHASH_ALG_ARGON2I13': '',
\ 'SODIUM_CRYPTO_PWHASH_STRPREFIX': '',
\ 'SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_SALTBYTES': '',
\ 'SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_STRPREFIX': '',
\ 'SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_OPSLIMIT_INTERACTIVE': '',
\ 'SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_MEMLIMIT_INTERACTIVE': '',
\ 'SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_OPSLIMIT_SENSITIVE': '',
\ 'SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_MEMLIMIT_SENSITIVE': '',
\ 'SODIUM_CRYPTO_SCALARMULT_BYTES': '',
\ 'SODIUM_CRYPTO_SCALARMULT_SCALARBYTES': '',
\ 'SODIUM_CRYPTO_SHORTHASH_BYTES': '',
\ 'SODIUM_CRYPTO_SHORTHASH_KEYBYTES': '',
\ 'SODIUM_CRYPTO_SECRETBOX_KEYBYTES': '',
\ 'SODIUM_CRYPTO_SECRETBOX_MACBYTES': '',
\ 'SODIUM_CRYPTO_SECRETBOX_NONCEBYTES': '',
\ 'SODIUM_CRYPTO_SIGN_BYTES': '',
\ 'SODIUM_CRYPTO_SIGN_SEEDBYTES': '',
\ 'SODIUM_CRYPTO_SIGN_PUBLICKEYBYTES': '',
\ 'SODIUM_CRYPTO_SIGN_SECRETKEYBYTES': '',
\ 'SODIUM_CRYPTO_SIGN_KEYPAIRBYTES': '',
\ 'SODIUM_CRYPTO_STREAM_NONCEBYTES': '',
\ 'SODIUM_CRYPTO_STREAM_KEYBYTES': '',
\ }
let g:phpcomplete_builtin['constants']['sqlite'] = {
\ 'SQLITE_ASSOC': '',
\ 'SQLITE_NUM': '',
\ 'SQLITE_BOTH': '',
\ 'SQLITE_OK': '',
\ 'SQLITE_ERROR': '',
\ 'SQLITE_INTERNAL': '',
\ 'SQLITE_PERM': '',
\ 'SQLITE_ABORT': '',
\ 'SQLITE_BUSY': '',
\ 'SQLITE_LOCKED': '',
\ 'SQLITE_NOMEM': '',
\ 'SQLITE_READONLY': '',
\ 'SQLITE_INTERRUPT': '',
\ 'SQLITE_IOERR': '',
\ 'SQLITE_NOTADB': '',
\ 'SQLITE_CORRUPT': '',
\ 'SQLITE_FORMAT': '',
\ 'SQLITE_NOTFOUND': '',
\ 'SQLITE_FULL': '',
\ 'SQLITE_CANTOPEN': '',
\ 'SQLITE_PROTOCOL': '',
\ 'SQLITE_EMPTY': '',
\ 'SQLITE_SCHEMA': '',
\ 'SQLITE_TOOBIG': '',
\ 'SQLITE_CONSTRAINT': '',
\ 'SQLITE_MISMATCH': '',
\ 'SQLITE_MISUSE': '',
\ 'SQLITE_NOLFS': '',
\ 'SQLITE_AUTH': '',
\ 'SQLITE_ROW': '',
\ 'SQLITE_DONE': '',
\ }
let g:phpcomplete_builtin['constants']['sqlsrv'] = {
\ 'SQLSRV_FETCH_ASSOC': '',
\ 'SQLSRV_FETCH_NUMERIC': '',
\ 'SQLSRV_FETCH_BOTH': '',
\ 'SQLSRV_SCROLL_NEXT': '',
\ 'SQLSRV_SCROLL_PRIOR': '',
\ 'SQLSRV_SCROLL_FIRST': '',
\ 'SQLSRV_SCROLL_LAST': '',
\ 'SQLSRV_SCROLL_ABSOLUTE': '',
\ 'SQLSRV_SCROLL_RELATIVE': '',
\ 'SQLSRV_FETCH_TYPE': '',
\ 'SQLSRV_ERR_ALL': '',
\ 'SQLSRV_ERR_ERRORS': '',
\ 'SQLSRV_ERR_WARNINGS': '',
\ 'SQLSRV_LOG_SYSTEM_ALL': '',
\ 'SQLSRV_LOG_SYSTEM_CONN': '',
\ 'SQLSRV_LOG_SYSTEM_INIT': '',
\ 'SQLSRV_LOG_SYSTEM_OFF': '',
\ 'SQLSRV_LOG_SYSTEM_STMT': '',
\ 'SQLSRV_LOG_SYSTEM_UTIL': '',
\ 'SQLSRV_LOG_SEVERITY_ALL': '',
\ 'SQLSRV_LOG_SEVERITY_ERROR': '',
\ 'SQLSRV_LOG_SEVERITY_NOTICE': '',
\ 'SQLSRV_LOG_SEVERITY_WARNING': '',
\ 'SQLSRV_NULLABLE_YES': '',
\ 'SQLSRV_NULLABLE_NO': '',
\ 'SQLSRV_NULLABLE_UNKNOWN': '',
\ 'SQLSRV_PARAM_IN': '',
\ 'SQLSRV_PARAM_INOUT': '',
\ 'SQLSRV_PARAM_OUT': '',
\ 'SQLSRV_PHPTYPE_INT': '',
\ 'SQLSRV_PHPTYPE_DATETIME': '',
\ 'SQLSRV_PHPTYPE_FLOAT': '',
\ 'SQLSRV_PHPTYPE_STREAM': '',
\ 'SQLSRV_PHPTYPE_STRING': '',
\ 'SQLSRV_ENC_BINARY': '',
\ 'SQLSRV_ENC_CHAR': '',
\ 'SQLSRV_SQLTYPE_BIGINT': '',
\ 'SQLSRV_SQLTYPE_BINARY': '',
\ 'SQLSRV_SQLTYPE_BIT': '',
\ 'SQLSRV_SQLTYPE_CHAR': '',
\ 'SQLSRV_SQLTYPE_DATE': '',
\ 'SQLSRV_SQLTYPE_DATETIME': '',
\ 'SQLSRV_SQLTYPE_DATETIME2': '',
\ 'SQLSRV_SQLTYPE_DATETIMEOFFSET': '',
\ 'SQLSRV_SQLTYPE_DECIMAL': '',
\ 'SQLSRV_SQLTYPE_FLOAT': '',
\ 'SQLSRV_SQLTYPE_IMAGE': '',
\ 'SQLSRV_SQLTYPE_INT': '',
\ 'SQLSRV_SQLTYPE_MONEY': '',
\ 'SQLSRV_SQLTYPE_NCHAR': '',
\ 'SQLSRV_SQLTYPE_NUMERIC': '',
\ 'SQLSRV_SQLTYPE_NVARCHAR': '',
\ 'SQLSRV_SQLTYPE_NTEXT': '',
\ 'SQLSRV_SQLTYPE_REAL': '',
\ 'SQLSRV_SQLTYPE_SMALLDATETIME': '',
\ 'SQLSRV_SQLTYPE_SMALLINT': '',
\ 'SQLSRV_SQLTYPE_SMALLMONEY': '',
\ 'SQLSRV_SQLTYPE_TEXT': '',
\ 'SQLSRV_SQLTYPE_TIME': '',
\ 'SQLSRV_SQLTYPE_TIMESTAMP': '',
\ 'SQLSRV_SQLTYPE_TINYINT': '',
\ 'SQLSRV_SQLTYPE_UNIQUEIDENTIFIER': '',
\ 'SQLSRV_SQLTYPE_UDT': '',
\ 'SQLSRV_SQLTYPE_VARBINARY': '',
\ 'SQLSRV_SQLTYPE_VARCHAR': '',
\ 'SQLSRV_SQLTYPE_XML': '',
\ 'SQLSRV_TXN_READ_UNCOMMITTED': '',
\ 'SQLSRV_TXN_READ_COMMITTED': '',
\ 'SQLSRV_TXN_REPEATABLE_READ': '',
\ 'SQLSRV_TXN_SNAPSHOT': '',
\ 'SQLSRV_TXN_READ_SERIALIZABLE': '',
\ 'SQLSRV_CURSOR_FORWARD': '',
\ 'SQLSRV_CURSOR_STATIC': '',
\ 'SQLSRV_CURSOR_DYNAMIC': '',
\ 'SQLSRV_CURSOR_KEYSET': '',
\ 'SQLSRV_CURSOR_BUFFERED': '',
\ }
let g:phpcomplete_builtin['constants']['ssh2'] = {
\ 'SSH2_MSG_IGNORE': '',
\ 'SSH2_MSG_DEBUG': '',
\ 'SSH2_MSG_DISCONNECT': '',
\ 'SSH2_TERM_UNIT_CHARS': '',
\ 'SSH2_TERM_UNIT_PIXELS': '',
\ 'SSH2_STREAM_STDERR': '',
\ 'SSH2_FINGERPRINT_MD5': '',
\ 'SSH2_FINGERPRINT_SHA1': '',
\ 'SSH2_FINGERPRINT_HEX': '',
\ 'SSH2_FINGERPRINT_RAW': '',
\ 'SSH2_DEFAULT_TERM_WIDTH': '',
\ 'SSH2_DEFAULT_TERM_HEIGHT': '',
\ 'SSH2_DEFAULT_TERM_UNIT': '',
\ 'SSH2_STREAM_STDIO': '',
\ 'SSH2_DEFAULT_TERMINAL': '',
\ }
let g:phpcomplete_builtin['constants']['streams'] = {
\ 'STREAM_FILTER_READ': '',
\ 'STREAM_FILTER_WRITE': '',
\ 'STREAM_FILTER_ALL': '',
\ 'PHP_INT_MAX': '',
\ 'STREAM_CLIENT_CONNECT': '',
\ 'STREAM_CLIENT_ASYNC_CONNECT': '',
\ 'STREAM_CLIENT_PERSISTENT': '',
\ 'STREAM_CRYPTO_METHOD_ANY_CLIENT': '',
\ 'STREAM_CRYPTO_METHOD_TLS_CLIENT': '',
\ 'STREAM_CRYPTO_METHOD_ANY_SERVER': '',
\ 'STREAM_CRYPTO_METHOD_TLS_SERVER': '',
\ 'STREAM_PF_INET': '',
\ 'STREAM_PF_INET6': '',
\ 'STREAM_PF_UNIX': '',
\ 'STREAM_SOCK_DGRAM': '',
\ 'STREAM_SOCK_RAW': '',
\ 'STREAM_SOCK_RDM': '',
\ 'STREAM_SOCK_SEQPACKET': '',
\ 'STREAM_SOCK_STREAM': '',
\ 'STREAM_IPPROTO_ICMP': '',
\ 'STREAM_IPPROTO_IP': '',
\ 'STREAM_IPPROTO_RAW': '',
\ 'STREAM_IPPROTO_TCP': '',
\ 'STREAM_IPPROTO_UDP': '',
\ 'STREAM_OOB': '',
\ 'STREAM_PEEK': '',
\ 'AF_INET': '',
\ 'STREAM_SERVER_BIND': '',
\ 'STREAM_SHUT_RD': '',
\ 'STREAM_SHUT_WR': '',
\ 'STREAM_SHUT_RDWR': '',
\ 'STREAM_IS_URL': '',
\ 'PSFS_PASS_ON': '',
\ 'PSFS_FEED_ME': '',
\ 'PSFS_ERR_FATAL': '',
\ 'PSFS_FLAG_NORMAL': '',
\ 'PSFS_FLAG_FLUSH_INC': '',
\ 'PSFS_FLAG_FLUSH_CLOSE': '',
\ 'STREAM_USE_PATH': '',
\ 'STREAM_REPORT_ERRORS': '',
\ 'STREAM_SERVER_LISTEN': '',
\ 'STREAM_NOTIFY_RESOLVE': '',
\ 'STREAM_NOTIFY_CONNECT': '',
\ 'STREAM_NOTIFY_AUTH_REQUIRED': '',
\ 'STREAM_NOTIFY_SEVERITY_ERR': '',
\ 'STREAM_NOTIFY_MIME_TYPE_IS': '',
\ 'STREAM_NOTIFY_FILE_SIZE_IS': '',
\ 'STREAM_NOTIFY_REDIRECTED': '',
\ 'STREAM_NOTIFY_PROGRESS': '',
\ 'STREAM_NOTIFY_COMPLETED': '',
\ 'STREAM_NOTIFY_FAILURE': '',
\ 'STREAM_NOTIFY_AUTH_RESULT': '',
\ 'STREAM_NOTIFY_SEVERITY_INFO': '',
\ 'STREAM_NOTIFY_SEVERITY_WARN': '',
\ 'STREAM_CAST_FOR_SELECT': '',
\ 'STREAM_CAST_AS_STREAM': '',
\ 'STREAM_META_TOUCH': '',
\ 'STREAM_META_OWNER': '',
\ 'STREAM_META_OWNER_NAME': '',
\ 'STREAM_META_GROUP': '',
\ 'STREAM_META_GROUP_NAME': '',
\ 'STREAM_META_ACCESS': '',
\ 'STREAM_MKDIR_RECURSIVE': '',
\ 'LOCK_EX': '',
\ 'LOCK_UN': '',
\ 'LOCK_SH': '',
\ 'LOCK_NB': '',
\ 'SEEK_SET': '',
\ 'SEEK_CUR': '',
\ 'SEEK_END': '',
\ 'STREAM_OPTION_BLOCKING': '',
\ 'STREAM_OPTION_READ_TIMEOUT': '',
\ 'STREAM_OPTION_WRITE_BUFFER': '',
\ 'STREAM_BUFFER_NONE': '',
\ 'STREAM_BUFFER_FULL': '',
\ }
let g:phpcomplete_builtin['constants']['svn'] = {
\ 'SVN_NON_RECURSIVE': '',
\ 'SVN_IGNORE_EXTERNALS': '',
\ 'SVN_REVISION_HEAD': '',
\ 'SVN_REVISION_INITIAL': '',
\ 'SVN_OMIT_MESSAGES': '',
\ 'SVN_DISCOVER_CHANGED_PATHS': '',
\ 'SVN_STOP_ON_COPY': '',
\ 'SVN_AUTH_PARAM_DEFAULT_USERNAME': '',
\ 'SVN_AUTH_PARAM_DEFAULT_PASSWORD': '',
\ 'SVN_AUTH_PARAM_NON_INTERACTIVE': '',
\ 'SVN_AUTH_PARAM_DONT_STORE_PASSWORDS': '',
\ 'SVN_AUTH_PARAM_NO_AUTH_CACHE': '',
\ 'SVN_AUTH_PARAM_SSL_SERVER_FAILURES': '',
\ 'SVN_AUTH_PARAM_SSL_SERVER_CERT_INFO': '',
\ 'SVN_AUTH_PARAM_CONFIG': '',
\ 'SVN_AUTH_PARAM_SERVER_GROUP': '',
\ 'SVN_AUTH_PARAM_CONFIG_DIR': '',
\ 'PHP_SVN_AUTH_PARAM_IGNORE_SSL_VERIFY_ERRORS': '',
\ 'SVN_FS_CONFIG_FS_TYPE': '',
\ 'SVN_FS_TYPE_BDB': '',
\ 'SVN_FS_TYPE_FSFS': '',
\ 'SVN_PROP_REVISION_DATE': '',
\ 'SVN_PROP_REVISION_ORIG_DATE': '',
\ 'SVN_PROP_REVISION_AUTHOR': '',
\ 'SVN_PROP_REVISION_LOG': '',
\ 'SVN_WC_STATUS_NONE': '',
\ 'SVN_WC_STATUS_UNVERSIONED': '',
\ 'SVN_WC_STATUS_NORMAL': '',
\ 'SVN_WC_STATUS_ADDED': '',
\ 'SVN_WC_STATUS_MISSING': '',
\ 'SVN_WC_STATUS_DELETED': '',
\ 'SVN_WC_STATUS_REPLACED': '',
\ 'SVN_WC_STATUS_MODIFIED': '',
\ 'SVN_WC_STATUS_MERGED': '',
\ 'SVN_WC_STATUS_CONFLICTED': '',
\ 'SVN_WC_STATUS_IGNORED': '',
\ 'SVN_WC_STATUS_OBSTRUCTED': '',
\ 'SVN_WC_STATUS_EXTERNAL': '',
\ 'SVN_WC_STATUS_INCOMPLETE': '',
\ 'SVN_NODE_NONE': '',
\ 'SVN_NODE_FILE': '',
\ 'SVN_NODE_DIR': '',
\ 'SVN_NODE_UNKNOWN': '',
\ }
let g:phpcomplete_builtin['constants']['tokenizer'] = {
\ 'TOKEN_PARSE': '',
\ 'T_INLINE_HTML': '',
\ 'T_COMMENT': '',
\ 'T_STRING': '',
\ 'T_PUBLIC': '',
\ }
let g:phpcomplete_builtin['constants']['mnogosearch'] = {
\ 'UDM_LIMIT_URL': '',
\ 'UDM_LIMIT_TAG': '',
\ 'UDM_LIMIT_LANG': '',
\ 'UDM_LIMIT_CAT': '',
\ 'UDM_LIMIT_DATE': '',
\ 'UDM_FIELD_URL': '',
\ 'UDM_FIELD_CONTENT': '',
\ 'UDM_FIELD_CATEGORY': '',
\ 'UDM_FIELD_TITLE': '',
\ 'UDM_FIELD_KEYWORDS': '',
\ 'UDM_FIELD_DESC': '',
\ 'UDM_FIELD_TEXT': '',
\ 'UDM_FIELD_SIZE': '',
\ 'UDM_FIELD_URLID': '',
\ 'UDM_FIELD_RATING': '',
\ 'UDM_FIELD_MODIFIED': '',
\ 'UDM_FIELD_ORDER': '',
\ 'UDM_FIELD_CRC': '',
\ 'UDM_ISPELL_TYPE_SERVER': '',
\ 'UDM_ISPELL_TYPE_DB': '',
\ 'UDM_ISPELL_TYPE_AFFIX': '',
\ 'UDM_CONF_DIR': '',
\ 'UDM_ISPELL_TYPE_SPELL': '',
\ 'UDM_ISPELL_TYPE_TEXT': '',
\ 'UDM_PARAM_PAGE_NUM': '',
\ 'UDM_PARAM_PAGE_SIZE': '',
\ 'UDM_PARAM_SEARCH_MODE': '',
\ 'UDM_MODE_ALL': '',
\ 'UDM_MODE_ANY': '',
\ 'UDM_MODE_PHRASE': '',
\ 'UDM_MODE_BOOL': '',
\ 'UDM_PARAM_CACHE_MODE': '',
\ 'UDM_CACHE_ENABLED': '',
\ 'UDM_CACHE_DISABLED': '',
\ 'UDM_PARAM_TRACK_MODE': '',
\ 'UDM_TRACK_ENABLED': '',
\ 'UDM_TRACK_DISABLED': '',
\ 'UDM_PARAM_PHRASE_MODE': '',
\ 'UDM_PHRASE_ENABLED': '',
\ 'UDM_PHRASE_DISABLED': '',
\ 'UDM_PARAM_CHARSET': '',
\ 'UDM_PARAM_STOPFILE': '',
\ 'UDM_PARAM_STOPTABLE': '',
\ 'UDM_PARAM_WEIGHT_FACTOR': '',
\ 'UDM_PARAM_WORD_MATCH': '',
\ 'UDM_MATCH_BEGIN': '',
\ 'UDM_MATCH_END': '',
\ 'UDM_MATCH_WORD': '',
\ 'UDM_MATCH_SUBSTR': '',
\ 'UDM_PARAM_MIN_WORD_LEN': '',
\ 'UDM_PARAM_ISPELL_PREFIXES': '',
\ 'UDM_PREFIXES_ENABLED': '',
\ 'UDM_PREFIXES_DISABLED': '',
\ 'UDM_PARAM_CROSS_WORDS': '',
\ 'UDM_CROSS_WORDS_ENABLED': '',
\ 'UDM_CROSS_WORDS_DISABLED': '',
\ 'UDM_PARAM_VARDIR': '',
\ 'UDM_FIELD_DESCRIPTION': '',
\ 'UDM_FIELD_SCORE': '',
\ 'UDM_FIELD_LANG': '',
\ 'UDM_FIELD_CHARSET': '',
\ 'UDM_PARAM_LOCAL_CHARSET': '',
\ 'UDM_PARAM_BROWSER_CHARSET': '',
\ 'UDM_PARAM_STOP_TABLE': '',
\ 'UDM_PARAM_STOP_FILE': '',
\ 'UDM_PARAM_MAX_WORD_LEN': '',
\ 'UDM_PARAM_MAX_WORDLEN': '',
\ 'UDM_PARAM_MIN_WORDLEN': '',
\ 'UDM_PARAM_ISPELL_PREFIX': '',
\ 'UDM_PARAM_PREFIXES': '',
\ 'UDM_PARAM_PREFIX': '',
\ 'UDM_PARAM_CROSSWORDS': '',
\ 'UDM_PARAM_DATADIR': '',
\ 'UDM_PARAM_HLBEG': '',
\ 'UDM_PARAM_HLEND': '',
\ 'UDM_PARAM_SYNONYM': '',
\ 'UDM_PARAM_SEARCHD': '',
\ 'UDM_PARAM_QSTRING': '',
\ 'UDM_PARAM_REMOTE_ADDR': '',
\ 'UDM_PARAM_FOUND': '',
\ 'UDM_PARAM_NUM_ROWS': '',
\ 'UDM_PARAM_WORDINFO': '',
\ 'UDM_PARAM_WORD_INFO': '',
\ 'UDM_PARAM_SEARCHTIME': '',
\ 'UDM_PARAM_SEARCH_TIME': '',
\ 'UDM_PARAM_FIRST_DOC': '',
\ 'UDM_PARAM_LAST_DOC': '',
\ 'UDM_CROSSWORDS_ENABLED': '',
\ 'UDM_CROSSWORDS_DISABLED': '',
\ 'UDM_PREFIX_ENABLED': '',
\ 'UDM_ISPELL_PREFIXES_ENABLED': '',
\ 'UDM_ISPELL_PREFIX_ENABLED': '',
\ 'UDM_PREFIX_DISABLED': '',
\ 'UDM_ISPELL_PREFIXES_DISABLED': '',
\ 'UDM_ISPELL_PREFIX_DISABLED': '',
\ }
let g:phpcomplete_builtin['constants']['uopz'] = {
\ 'ZEND_ACC_FETCH': '',
\ 'ZEND_EXIT': '',
\ 'ZEND_NEW': '',
\ 'ZEND_THROW': '',
\ 'ZEND_FETCH_CLASS': '',
\ 'ZEND_ADD_TRAIT': '',
\ 'ZEND_ADD_INTERFACE': '',
\ 'ZEND_INSTANCEOF': '',
\ 'ZEND_USER_OPCODE_CONTINUE': '',
\ 'ZEND_USER_OPCODE_ENTER': '',
\ 'ZEND_USER_OPCODE_LEAVE': '',
\ 'ZEND_USER_OPCODE_DISPATCH': '',
\ 'ZEND_USER_OPCODE_DISPATCH_TO': '',
\ 'ZEND_USER_OPCODE_RETURN': '',
\ 'ZEND_ACC_PUBLIC': '',
\ 'ZEND_ACC_PROTECTED': '',
\ 'ZEND_ACC_PRIVATE': '',
\ 'ZEND_ACC_STATIC': '',
\ 'ZEND_ACC_FINAL': '',
\ 'ZEND_ACC_ABSTRACT': '',
\ 'ZEND_ACC_CLASS': '',
\ 'ZEND_ACC_INTERFACE': '',
\ 'ZEND_ACC_TRAIT': '',
\ }
let g:phpcomplete_builtin['constants']['win32service'] = {
\ 'WIN32_NO_ERROR': '',
\ 'WIN32_SERVICE_WIN32_OWN_PROCESS': '',
\ 'WIN32_SERVICE_AUTO_START': '',
\ 'WIN32_SERVER_ERROR_IGNORE': '',
\ 'WIN32_SC_ACTION_NONE': '',
\ 'WIN32_SC_ACTION_REBOOT': '',
\ 'WIN32_SC_ACTION_RUN_COMMAND': '',
\ 'WIN32_SERVICE_CONTROL_CONTINUE': '',
\ 'WIN32_SERVICE_CONTROL_INTERROGATE': '',
\ 'WIN32_SERVICE_CONTROL_PAUSE': '',
\ 'WIN32_SERVICE_CONTROL_PRESHUTDOWN': '',
\ 'WIN32_SERVICE_CONTROL_SHUTDOWN': '',
\ 'WIN32_SERVICE_CONTROL_STOP': '',
\ 'WIN32_ERROR_SERVICE_SPECIFIC_ERROR': '',
\ 'WIN32_SERVICE_RUNNING': '',
\ 'WIN32_SERVICE_STOPPED': '',
\ 'WIN32_SERVICE_STOP_PENDING': '',
\ 'WIN32_SERVICE_START_PENDING': '',
\ 'WIN32_SERVICE_CONTINUE_PENDING': '',
\ 'WIN32_SERVICE_PAUSE_PENDING': '',
\ 'WIN32_SERVICE_PAUSED': '',
\ 'WIN32_ABOVE_NORMAL_PRIORITY_CLASS': '',
\ 'WIN32_BELOW_NORMAL_PRIORITY_CLASS': '',
\ 'WIN32_HIGH_PRIORITY_CLASS': '',
\ 'WIN32_IDLE_PRIORITY_CLASS': '',
\ 'WIN32_NORMAL_PRIORITY_CLASS': '',
\ 'WIN32_REALTIME_PRIORITY_CLASS': '',
\ 'WIN32_SERVICE_ACCEPT_HARDWAREPROFILECHANGE': '',
\ 'WIN32_SERVICE_CONTROL_HARDWAREPROFILECHANGE': '',
\ 'WIN32_SERVICE_ACCEPT_NETBINDCHANGE': '',
\ 'WIN32_SERVICE_CONTROL_NETBINDADD': '',
\ 'WIN32_SERVICE_CONTROL_NETBINDREMOVE': '',
\ 'WIN32_SERVICE_CONTROL_NETBINDENABLE': '',
\ 'WIN32_SERVICE_CONTROL_NETBINDDISABLE': '',
\ 'WIN32_SERVICE_ACCEPT_PARAMCHANGE': '',
\ 'WIN32_SERVICE_CONTROL_PARAMCHANGE': '',
\ 'WIN32_SERVICE_ACCEPT_PAUSE_CONTINUE': '',
\ 'WIN32_SERVICE_ACCEPT_POWEREVENT': '',
\ 'WIN32_SERVICE_CONTROL_POWEREVENT': '',
\ 'WIN32_SERVICE_ACCEPT_PRESHUTDOWN': '',
\ 'WIN32_SERVICE_ACCEPT_SESSIONCHANGE': '',
\ 'WIN32_SERVICE_CONTROL_SESSIONCHANGE': '',
\ 'WIN32_SERVICE_ACCEPT_SHUTDOWN': '',
\ 'WIN32_SERVICE_ACCEPT_STOP': '',
\ 'WIN32_SERVICE_ACCEPT_TIMECHANGE': '',
\ 'WIN32_SERVICE_CONTROL_TIMECHANGE': '',
\ 'WIN32_SERVICE_ACCEPT_TRIGGEREVENT': '',
\ 'WIN32_SERVICE_CONTROL_TRIGGEREVENT': '',
\ 'WIN32_SERVICE_ERROR_IGNORE': '',
\ 'WIN32_SERVICE_ERROR_NORMAL': '',
\ 'WIN32_SERVICE_ERROR_SEVERE': '',
\ 'WIN32_SERVICE_ERROR_CRITICAL': '',
\ 'WIN32_ERROR_ACCESS_DENIED': '',
\ 'WIN32_ERROR_CIRCULAR_DEPENDENCY': '',
\ 'WIN32_ERROR_DATABASE_DOES_NOT_EXIST': '',
\ 'WIN32_ERROR_DEPENDENT_SERVICES_RUNNING': '',
\ 'WIN32_ERROR_DUPLICATE_SERVICE_NAME': '',
\ 'WIN32_ERROR_FAILED_SERVICE_CONTROLLER_CONNECT': '',
\ 'WIN32_ERROR_INSUFFICIENT_BUFFER': '',
\ 'WIN32_ERROR_INVALID_DATA': '',
\ 'WIN32_ERROR_INVALID_HANDLE': '',
\ 'WIN32_ERROR_INVALID_LEVEL': '',
\ 'WIN32_ERROR_INVALID_NAME': '',
\ 'WIN32_ERROR_INVALID_PARAMETER': '',
\ 'WIN32_ERROR_INVALID_SERVICE_ACCOUNT': '',
\ 'WIN32_ERROR_INVALID_SERVICE_CONTROL': '',
\ 'WIN32_ERROR_PATH_NOT_FOUND': '',
\ 'WIN32_ERROR_SERVICE_ALREADY_RUNNING': '',
\ 'WIN32_ERROR_SERVICE_CANNOT_ACCEPT_CTRL': '',
\ 'WIN32_ERROR_SERVICE_DATABASE_LOCKED': '',
\ 'WIN32_ERROR_SERVICE_DEPENDENCY_DELETED': '',
\ 'WIN32_ERROR_SERVICE_DEPENDENCY_FAIL': '',
\ 'WIN32_ERROR_SERVICE_DISABLED': '',
\ 'WIN32_ERROR_SERVICE_DOES_NOT_EXIST': '',
\ 'WIN32_ERROR_SERVICE_EXISTS': '',
\ 'WIN32_ERROR_SERVICE_LOGON_FAILED': '',
\ 'WIN32_ERROR_SERVICE_MARKED_FOR_DELETE': '',
\ 'WIN32_ERROR_SERVICE_NO_THREAD': '',
\ 'WIN32_ERROR_SERVICE_NOT_ACTIVE': '',
\ 'WIN32_ERROR_SERVICE_REQUEST_TIMEOUT': '',
\ 'WIN32_ERROR_SHUTDOWN_IN_PROGRESS': '',
\ 'WIN32_SC_ACTION_RESTART': '',
\ 'WIN32_SERVICE_CONTROL_DEVICEEVENT': '',
\ 'WIN32_SERVICE_RUNS_IN_SYSTEM_PROCESS': '',
\ 'WIN32_INFO_SERVICE': '',
\ 'WIN32_INFO_DISPLAY': '',
\ 'WIN32_INFO_USER': '',
\ 'WIN32_INFO_PASSWORD': '',
\ 'WIN32_INFO_PATH': '',
\ 'WIN32_INFO_PARAMS': '',
\ 'WIN32_INFO_DESCRIPTION': '',
\ 'WIN32_INFO_START_TYPE': '',
\ 'INFO_LOAD_ORDER': '',
\ 'INFO_SVC_TYPE': '',
\ 'INFO_ERROR_CONTROL': '',
\ 'INFO_DELAYED_START': '',
\ 'INFO_BASE_PRIORITY': '',
\ 'INFO_DEPENDENCIES': '',
\ 'INFO_RECOVERY_DELAY': '',
\ 'INFO_RECOVERY_ACTION_1': '',
\ 'INFO_RECOVERY_ACTION_2': '',
\ 'INFO_RECOVERY_ACTION_3': '',
\ 'INFO_RECOVERY_RESET_PERIOD': '',
\ 'INFO_RECOVERY_ENABLED': '',
\ 'INFO_RECOVERY_REBOOT_MSG': '',
\ 'INFO_RECOVERY_COMMAND': '',
\ 'WIN32_SERVICE_BOOT_START': '',
\ 'WIN32_SERVICE_SYSTEM_START': '',
\ 'WIN32_SERVICE_DEMAND_START': '',
\ 'WIN32_SERVICE_DISABLED': '',
\ 'WIN32_SERVICE_INTERACTIVE_PROCESS': '',
\ 'WIN32_SERVICE_WIN32_OWN_PROCESS_INTERACTIVE': '',
\ }
let g:phpcomplete_builtin['constants']['xattr'] = {
\ 'XATTR_DONTFOLLOW': '',
\ 'XATTR_ROOT': '',
\ 'XATTR_CREATE': '',
\ 'XATTR_REPLACE': '',
\ }
let g:phpcomplete_builtin['constants']['xdiff'] = {
\ 'XDIFF_PATCH_NORMAL': '',
\ 'XDIFF_PATCH_REVERSE': '',
\ 'XDIFF_PATCH_IGNORESPACE': '',
\ }
let g:phpcomplete_builtin['constants']['xhprof'] = {
\ 'XHPROF_FLAGS_MEMORY': '',
\ 'PHP_INI_ALL': '',
\ 'XHPROF_FLAGS_NO_BUILTINS': '',
\ 'XHPROF_FLAGS_CPU': '',
\ }
let g:phpcomplete_builtin['constants']['xml_parser'] = {
\ 'XML_OPTION_CASE_FOLDING': '',
\ 'XML_OPTION_SKIP_TAGSTART': '',
\ 'XML_OPTION_SKIP_WHITE': '',
\ 'XML_OPTION_TARGET_ENCODING': '',
\ 'XML_ERROR_EXTERNAL_ENTITY_HANDLING': '',
\ 'XML_ERROR_NONE': '',
\ 'XML_ERROR_NO_MEMORY': '',
\ 'XML_ERROR_SYNTAX': '',
\ 'XML_ERROR_NO_ELEMENTS': '',
\ 'XML_ERROR_INVALID_TOKEN': '',
\ 'XML_ERROR_UNCLOSED_TOKEN': '',
\ 'XML_ERROR_PARTIAL_CHAR': '',
\ 'XML_ERROR_TAG_MISMATCH': '',
\ 'XML_ERROR_DUPLICATE_ATTRIBUTE': '',
\ 'XML_ERROR_JUNK_AFTER_DOC_ELEMENT': '',
\ 'XML_ERROR_PARAM_ENTITY_REF': '',
\ 'XML_ERROR_UNDEFINED_ENTITY': '',
\ 'XML_ERROR_RECURSIVE_ENTITY_REF': '',
\ 'XML_ERROR_ASYNC_ENTITY': '',
\ 'XML_ERROR_BAD_CHAR_REF': '',
\ 'XML_ERROR_BINARY_ENTITY_REF': '',
\ 'XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF': '',
\ 'XML_ERROR_MISPLACED_XML_PI': '',
\ 'XML_ERROR_UNKNOWN_ENCODING': '',
\ 'XML_ERROR_INCORRECT_ENCODING': '',
\ 'XML_ERROR_UNCLOSED_CDATA_SECTION': '',
\ 'XML_SAX_IMPL': '',
\ }
let g:phpcomplete_builtin['constants']['yaml'] = {
\ 'YAML_ANY_ENCODING': '',
\ 'YAML_UTF8_ENCODING': '',
\ 'YAML_UTF16LE_ENCODING': '',
\ 'YAML_UTF16BE_ENCODING': '',
\ 'YAML_ANY_BREAK': '',
\ 'YAML_CR_BREAK': '',
\ 'YAML_LN_BREAK': '',
\ 'YAML_CRLN_BREAK': '',
\ 'YAML_ANY_SCALAR_STYLE': '',
\ 'YAML_PLAIN_SCALAR_STYLE': '',
\ 'YAML_SINGLE_QUOTED_SCALAR_STYLE': '',
\ 'YAML_DOUBLE_QUOTED_SCALAR_STYLE': '',
\ 'YAML_LITERAL_SCALAR_STYLE': '',
\ 'YAML_FOLDED_SCALAR_STYLE': '',
\ 'YAML_NULL_TAG': '',
\ 'YAML_BOOL_TAG': '',
\ 'YAML_STR_TAG': '',
\ 'YAML_INT_TAG': '',
\ 'YAML_FLOAT_TAG': '',
\ 'YAML_TIMESTAMP_TAG': '',
\ 'YAML_SEQ_TAG': '',
\ 'YAML_MAP_TAG': '',
\ 'YAML_PHP_TAG': '',
\ }
let g:phpcomplete_builtin['constants']['gearman'] = {
\ 'GEARMAN_SUCCESS': '',
\ 'GEARMAN_IO_WAIT': '',
\ 'GEARMAN_ERRNO': '',
\ 'GEARMAN_NO_ACTIVE_FDS': '',
\ 'GEARMAN_UNEXPECTED_PACKET': '',
\ 'GEARMAN_GETADDRINFO': '',
\ 'GEARMAN_NO_SERVERS': '',
\ 'GEARMAN_LOST_CONNECTION': '',
\ 'GEARMAN_MEMORY_ALLOCATION_FAILURE': '',
\ 'GEARMAN_SERVER_ERROR': '',
\ 'GEARMAN_WORK_DATA': '',
\ 'GEARMAN_WORK_WARNING': '',
\ 'GEARMAN_WORK_STATUS': '',
\ 'GEARMAN_WORK_EXCEPTION': '',
\ 'GEARMAN_WORK_FAIL': '',
\ 'GEARMAN_COULD_NOT_CONNECT': '',
\ 'GEARMAN_INVALID_FUNCTION_NAME': '',
\ 'GEARMAN_INVALID_WORKER_FUNCTION': '',
\ 'GEARMAN_NO_REGISTERED_FUNCTIONS': '',
\ 'GEARMAN_NO_JOBS': '',
\ 'GEARMAN_ECHO_DATA_CORRUPTION': '',
\ 'GEARMAN_NEED_WORKLOAD_FN': '',
\ 'GEARMAN_PAUSE': '',
\ 'GEARMAN_UNKNOWN_STATE': '',
\ 'GEARMAN_SEND_BUFFER_TOO_SMALL': '',
\ 'GEARMAN_TIMEOUT': '',
\ 'GEARMAN_CLIENT_GENERATE_UNIQUE': '',
\ 'GEARMAN_CLIENT_NON_BLOCKING': '',
\ 'GEARMAN_CLIENT_UNBUFFERED_RESULT': '',
\ 'GEARMAN_CLIENT_FREE_TASKS': '',
\ 'GEARMAN_WORKER_NON_BLOCKING': '',
\ 'GEARMAN_WORKER_GRAB_UNIQ': '',
\ 'GEARMAN_DEFAULT_TCP_HOST': '',
\ 'GEARMAN_DEFAULT_TCP_PORT': '',
\ 'GEARMAN_DEFAULT_SOCKET_TIMEOUT': '',
\ 'GEARMAN_DEFAULT_SOCKET_SEND_SIZE': '',
\ 'GEARMAN_DEFAULT_SOCKET_RECV_SIZE': '',
\ 'GEARMAN_MAX_ERROR_SIZE': '',
\ 'GEARMAN_PACKET_HEADER_SIZE': '',
\ 'GEARMAN_JOB_HANDLE_SIZE': '',
\ 'GEARMAN_OPTION_SIZE': '',
\ 'GEARMAN_UNIQUE_SIZE': '',
\ 'GEARMAN_MAX_COMMAND_ARGS': '',
\ 'GEARMAN_ARGS_BUFFER_SIZE': '',
\ 'GEARMAN_SEND_BUFFER_SIZE': '',
\ 'GEARMAN_RECV_BUFFER_SIZE': '',
\ 'GEARMAN_WORKER_WAIT_TIMEOUT': '',
\ }
let g:phpcomplete_builtin['constants']['geoip'] = {
\ 'GEOIP_COUNTRY_EDITION': '',
\ 'GEOIP_REGION_EDITION_REV0': '',
\ 'GEOIP_CITY_EDITION_REV0': '',
\ 'GEOIP_ORG_EDITION': '',
\ 'GEOIP_ISP_EDITION': '',
\ 'GEOIP_CITY_EDITION_REV1': '',
\ 'GEOIP_REGION_EDITION_REV1': '',
\ 'GEOIP_PROXY_EDITION': '',
\ 'GEOIP_ASNUM_EDITION': '',
\ 'GEOIP_NETSPEED_EDITION': '',
\ 'GEOIP_DOMAIN_EDITION': '',
\ 'GEOIP_UNKNOWN_SPEED': '',
\ 'GEOIP_DIALUP_SPEED': '',
\ 'GEOIP_CABLEDSL_SPEED': '',
\ 'GEOIP_CORPORATE_SPEED': '',
\ }
let g:phpcomplete_builtin['constants']['hyperwave_api'] = {
\ 'HW_API_CHECKIN_NORMAL': '',
\ 'HW_API_CHECKIN_RECURSIVE': '',
\ 'HW_API_CONTENT_ALLLINKS': '',
\ 'HW_API_CONTENT_REACHABLELINKS': '',
\ 'HW_API_CONTENT_PLAIN': '',
\ 'HW_API_INSERT_NORMAL': '',
\ 'HW_API_INSERT_FORCE_VERSION_CONTROL': '',
\ 'HW_API_INSERT_AUTOMATIC_CHECKOUT': '',
\ 'HW_API_INSERT_PLAIN': '',
\ 'HW_API_INSERT_KEEP_TIME_MODIFIED': '',
\ 'HW_API_INSERT_DELAY_INDEXING': '',
\ 'HW_API_LOCK_NORMAL': '',
\ 'HW_API_LOCK_RECURSIVE': '',
\ 'HW_API_LOCK_SESSION': '',
\ 'HW_API_REPLACE_NORMAL': '',
\ 'HW_API_REPLACE_FORCE_VERSION_CONTROL': '',
\ 'HW_API_REPLACE_AUTOMATIC_CHECKOUT': '',
\ 'HW_API_REPLACE_AUTOMATIC_CHECKIN': '',
\ 'HW_API_REPLACE_PLAIN': '',
\ 'HW_API_REPLACE_REVERT_IF_NOT_CHANGED': '',
\ 'HW_API_REPLACE_KEEP_TIME_MODIFIED': '',
\ }
let g:phpcomplete_builtin['constants']['iis'] = {
\ 'IIS_READ': '',
\ 'IIS_WRITE': '',
\ 'IIS_EXECUTE': '',
\ 'IIS_SCRIPT': '',
\ 'IIS_ANONYMOUS': '',
\ 'IIS_BASIC': '',
\ 'IIS_NTLM': '',
\ 'IIS_STARTING': '',
\ 'IIS_STOPPED': '',
\ 'IIS_PAUSED': '',
\ 'IIS_RUNNING': '',
\ }
let g:phpcomplete_builtin['constants']['imagemagick'] = {
\ 'COMPRESSION': '',
\ }
let g:phpcomplete_builtin['constants']['phpini_directives'] = {
\ 'PATH_SEPARATOR': '',
\ 'PHP_INI_SYSTEM': '',
\ }
let g:phpcomplete_builtin['constants']['mhash'] = {
\ 'MHASH_TIGER': '',
\ 'MHASH_ADLER32': '',
\ 'MHASH_CRC32': '',
\ 'MHASH_CRC32B': '',
\ 'MHASH_GOST': '',
\ 'MHASH_HAVAL128': '',
\ 'MHASH_HAVAL160': '',
\ 'MHASH_HAVAL192': '',
\ 'MHASH_HAVAL224': '',
\ 'MHASH_HAVAL256': '',
\ 'MHASH_MD2': '',
\ 'MHASH_MD4': '',
\ 'MHASH_MD5': '',
\ 'MHASH_RIPEMD128': '',
\ 'MHASH_RIPEMD256': '',
\ 'MHASH_RIPEMD320': '',
\ 'MHASH_SHA1': '',
\ 'MHASH_SHA192': '',
\ 'MHASH_SHA224': '',
\ 'MHASH_SHA256': '',
\ 'MHASH_SHA384': '',
\ 'MHASH_SHA512': '',
\ 'MHASH_SNEFRU128': '',
\ 'MHASH_SNEFRU256': '',
\ 'MHASH_TIGER128': '',
\ 'MHASH_TIGER160': '',
\ 'MHASH_WHIRLPOOL': '',
\ }
let g:phpcomplete_builtin['constants']['types'] = {
\ 'NAN': '',
\ 'PHP_INT_SIZE': '',
\ 'PHP_INT_MAX': '',
\ 'PHP_INT_MIN': '',
\ }
let g:phpcomplete_builtin['constants']['luasandbox'] = {
\ 'CLOCK_THREAD_CPUTIME_ID': '',
\ 'NAN': '',
\ }
let g:phpcomplete_builtin['constants']['mailparse'] = {
\ 'MAILPARSE_EXTRACT_OUTPUT': '',
\ 'MAILPARSE_EXTRACT_STREAM': '',
\ 'MAILPARSE_EXTRACT_RETURN': '',
\ }
let g:phpcomplete_builtin['constants']['mcve'] = {
\ 'M_PENDING': '',
\ 'M_DONE': '',
\ 'M_ERROR': '',
\ 'M_FAIL': '',
\ 'M_SUCCESS': '',
\ }
let g:phpcomplete_builtin['constants']['memcache'] = {
\ 'MEMCACHE_COMPRESSED': '',
\ 'MEMCACHE_HAVE_SESSION': '',
\ 'MEMCACHE_USER1': '',
\ 'MEMCACHE_USER2': '',
\ 'MEMCACHE_USER3': '',
\ 'MEMCACHE_USER4': '',
\ }
let g:phpcomplete_builtin['constants']['migrating_from_php_4_to_php_50x'] = {
\ 'DBX_RESULT_UNBUFFERED': '',
\ 'PATH_TRANSLATED': '',
\ 'SCRIPT_FILENAME': '',
\ 'T_ML_COMMENT': '',
\ 'T_COMMENT': '',
\ 'T_DOC_COMMENT': '',
\ }
let g:phpcomplete_builtin['constants']['migrating_from_php_50x_to_php_51x'] = {
\ 'PDO_CLASS_CONSTANT': '',
\ }
let g:phpcomplete_builtin['constants']['migrating_from_php_51x_to_php_52x'] = {
\ 'M_EULER': '',
\ 'M_LNPI': '',
\ 'M_SQRT3': '',
\ 'M_SQRTPI': '',
\ 'PATHINFO_FILENAME': '',
\ 'PREG_BACKTRACK_LIMIT_ERROR': '',
\ 'PREG_BAD_UTF8_ERROR': '',
\ 'PREG_INTERNAL_ERROR': '',
\ 'PREG_NO_ERROR': '',
\ 'PREG_RECURSION_LIMIT_ERROR': '',
\ 'UPLOAD_ERR_EXTENSION': '',
\ 'STREAM_SHUT_RD': '',
\ 'STREAM_SHUT_WR': '',
\ 'STREAM_SHUT_RDWR': '',
\ 'CURLE_FILESIZE_EXCEEDED': '',
\ 'CURLE_FTP_SSL_FAILED': '',
\ 'CURLE_LDAP_INVALID_URL': '',
\ 'CURLFTPAUTH_DEFAULT': '',
\ 'CURLFTPAUTH_SSL': '',
\ 'CURLFTPAUTH_TLS': '',
\ 'CURLFTPSSL_ALL': '',
\ 'CURLFTPSSL_CONTROL': '',
\ 'CURLFTPSSL_NONE': '',
\ 'CURLFTPSSL_TRY': '',
\ 'CURLOPT_FTP_SSL': '',
\ 'CURLOPT_FTPSSLAUTH': '',
\ 'CURLOPT_TCP_NODELAY': '',
\ 'CURLOPT_TIMEOUT_MS': '',
\ 'CURLOPT_CONNECTTIMEOUT_MS': '',
\ 'GMP_VERSION': '',
\ 'SWFTEXTFIELD_USEFONT': '',
\ 'SWFTEXTFIELD_AUTOSIZE': '',
\ 'SWF_SOUND_NOT_COMPRESSED': '',
\ 'SWF_SOUND_ADPCM_COMPRESSED': '',
\ 'SWF_SOUND_MP3_COMPRESSED': '',
\ 'SWF_SOUND_NOT_COMPRESSED_LE': '',
\ 'SWF_SOUND_NELLY_COMPRESSED': '',
\ 'SWF_SOUND_5KHZ': '',
\ 'SWF_SOUND_11KHZ': '',
\ 'SWF_SOUND_22KHZ': '',
\ 'SWF_SOUND_44KHZ': '',
\ 'SWF_SOUND_8BITS': '',
\ 'SWF_SOUND_16BITS': '',
\ 'SWF_SOUND_MONO': '',
\ 'SWF_SOUND_STEREO': '',
\ 'OPENSSL_VERSION_NUMBER': '',
\ 'OPENSSL_VERSION_TEXT': '',
\ 'SNMP_OID_OUTPUT_FULL': '',
\ 'SNMP_OID_OUTPUT_NUMERIC': '',
\ 'MSG_EAGAIN': '',
\ 'MSG_ENOMSG': '',
\ }
let g:phpcomplete_builtin['constants']['migrating_from_php_52x_to_php_53x'] = {
\ 'INI_SCANNER_NORMAL': '',
\ 'INI_SCANNER_RAW': '',
\ 'PHP_MAXPATHLEN': '',
\ 'PHP_WINDOWS_NT_DOMAIN_CONTROLLER': '',
\ 'PHP_WINDOWS_NT_SERVER': '',
\ 'PHP_WINDOWS_NT_WORKSTATION': '',
\ 'PHP_WINDOWS_VERSION_BUILD': '',
\ 'PHP_WINDOWS_VERSION_MAJOR': '',
\ 'PHP_WINDOWS_VERSION_MINOR': '',
\ 'PHP_WINDOWS_VERSION_PLATFORM': '',
\ 'PHP_WINDOWS_VERSION_PRODUCTTYPE': '',
\ 'PHP_WINDOWS_VERSION_SP_MAJOR': '',
\ 'PHP_WINDOWS_VERSION_SP_MINOR': '',
\ 'PHP_WINDOWS_VERSION_SUITEMASK': '',
\ 'CURLOPT_PROGRESSFUNCTION': '',
\ 'IMG_FILTER_PIXELATE': '',
\ 'JSON_ERROR_CTRL_CHAR': '',
\ 'JSON_ERROR_DEPTH': '',
\ 'JSON_ERROR_NONE': '',
\ 'JSON_ERROR_STATE_MISMATCH': '',
\ 'JSON_ERROR_SYNTAX': '',
\ 'JSON_FORCE_OBJECT': '',
\ 'JSON_HEX_TAG': '',
\ 'JSON_HEX_AMP': '',
\ 'JSON_HEX_APOS': '',
\ 'JSON_HEX_QUOT': '',
\ 'LDAP_OPT_NETWORK_TIMEOUT': '',
\ 'LIBXML_LOADED_VERSION': '',
\ 'PREG_BAD_UTF8_OFFSET_ERROR': '',
\ 'BUS_ADRALN': '',
\ 'BUS_ADRERR': '',
\ 'BUS_OBJERR': '',
\ 'CLD_CONTIUNED': '',
\ 'CLD_DUMPED': '',
\ 'CLD_EXITED': '',
\ 'CLD_KILLED': '',
\ 'CLD_STOPPED': '',
\ 'CLD_TRAPPED': '',
\ 'FPE_FLTDIV': '',
\ 'FPE_FLTINV': '',
\ 'FPE_FLTOVF': '',
\ 'FPE_FLTRES': '',
\ 'FPE_FLTSUB': '',
\ 'FPE_FLTUND': '',
\ 'FPE_INTDIV': '',
\ 'FPE_INTOVF': '',
\ 'ILL_BADSTK': '',
\ 'ILL_COPROC': '',
\ 'ILL_ILLADR': '',
\ 'ILL_ILLOPC': '',
\ 'ILL_ILLOPN': '',
\ 'ILL_ILLTRP': '',
\ 'ILL_PRVOPC': '',
\ 'ILL_PRVREG': '',
\ 'POLL_ERR': '',
\ 'POLL_HUP': '',
\ 'POLL_IN': '',
\ 'POLL_MSG': '',
\ 'POLL_OUT': '',
\ 'POLL_PRI': '',
\ 'SEGV_ACCERR': '',
\ 'SEGV_MAPERR': '',
\ 'SI_ASYNCIO': '',
\ 'SI_KERNEL': '',
\ 'SI_MESGQ': '',
\ 'SI_NOINFO': '',
\ 'SI_QUEUE': '',
\ 'SI_SIGIO': '',
\ 'SI_TIMER': '',
\ 'SI_TKILL': '',
\ 'SI_USER': '',
\ 'SIG_BLOCK': '',
\ 'SIG_SETMASK': '',
\ 'SIG_UNBLOCK': '',
\ 'TRAP_BRKPT': '',
\ 'TRAP_TRACE': '',
\ 'O_NONBLOCK': '',
\ }
let g:phpcomplete_builtin['constants']['migrating_from_php_53x_to_php_54x'] = {
\ 'ENT_DISALLOWED': '',
\ 'ENT_HTML401': '',
\ 'ENT_HTML5': '',
\ 'ENT_SUBSTITUTE': '',
\ 'ENT_XML1': '',
\ 'ENT_XHTML': '',
\ 'IPPROTO_IP': '',
\ 'IPPROTO_IPV6': '',
\ 'IPV6_MULTICAST_HOPS': '',
\ 'IPV6_MULTICAST_IF': '',
\ 'IPV6_MULTICAST_LOOP': '',
\ 'IP_MULTICAST_IF': '',
\ 'IP_MULTICAST_LOOP': '',
\ 'IP_MULTICAST_TTL': '',
\ 'MCAST_JOIN_GROUP': '',
\ 'MCAST_LEAVE_GROUP': '',
\ 'MCAST_BLOCK_SOURCE': '',
\ 'MCAST_UNBLOCK_SOURCE': '',
\ 'MCAST_JOIN_SOURCE_GROUP': '',
\ 'MCAST_LEAVE_SOURCE_GROUP': '',
\ 'CURLOPT_MAX_RECV_SPEED_LARGE': '',
\ 'CURLOPT_MAX_SEND_SPEED_LARGE': '',
\ 'LIBXML_HTML_NODEFDTD': '',
\ 'LIBXML_HTML_NOIMPLIED': '',
\ 'LIBXML_PEDANTIC': '',
\ 'OPENSSL_CIPHER_AES_128_CBC': '',
\ 'OPENSSL_CIPHER_AES_192_CBC': '',
\ 'OPENSSL_CIPHER_AES_256_CBC': '',
\ 'OPENSSL_RAW_DATA': '',
\ 'OPENSSL_ZERO_PADDING': '',
\ 'PHP_OUTPUT_HANDLER_CLEAN': '',
\ 'PHP_OUTPUT_HANDLER_CLEANABLE': '',
\ 'PHP_OUTPUT_HANDLER_DISABLED': '',
\ 'PHP_OUTPUT_HANDLER_FINAL': '',
\ 'PHP_OUTPUT_HANDLER_FLUSH': '',
\ 'PHP_OUTPUT_HANDLER_FLUSHABLE': '',
\ 'PHP_OUTPUT_HANDLER_REMOVABLE': '',
\ 'PHP_OUTPUT_HANDLER_STARTED': '',
\ 'PHP_OUTPUT_HANDLER_STDFLAGS': '',
\ 'PHP_OUTPUT_HANDLER_WRITE': '',
\ 'PHP_SESSION_ACTIVE': '',
\ 'PHP_SESSION_DISABLED': '',
\ 'PHP_SESSION_NONE': '',
\ 'STREAM_META_ACCESS': '',
\ 'STREAM_META_GROUP': '',
\ 'STREAM_META_GROUP_NAME': '',
\ 'STREAM_META_OWNER': '',
\ 'STREAM_META_OWNER_NAME': '',
\ 'STREAM_META_TOUCH': '',
\ 'ZLIB_ENCODING_DEFLATE': '',
\ 'ZLIB_ENCODING_GZIP': '',
\ 'ZLIB_ENCODING_RAW': '',
\ 'U_IDNA_DOMAIN_NAME_TOO_LONG_ERROR': '',
\ 'IDNA_CHECK_BIDI': '',
\ 'IDNA_CHECK_CONTEXTJ': '',
\ 'IDNA_NONTRANSITIONAL_TO_ASCII': '',
\ 'IDNA_NONTRANSITIONAL_TO_UNICODE': '',
\ 'INTL_IDNA_VARIANT_2003': '',
\ 'INTL_IDNA_VARIANT_UTS46': '',
\ 'IDNA_ERROR_EMPTY_LABEL': '',
\ 'IDNA_ERROR_LABEL_TOO_LONG': '',
\ 'IDNA_ERROR_DOMAIN_NAME_TOO_LONG': '',
\ 'IDNA_ERROR_LEADING_HYPHEN': '',
\ 'IDNA_ERROR_TRAILING_HYPHEN': '',
\ 'IDNA_ERROR_HYPHEN_3_4': '',
\ 'IDNA_ERROR_LEADING_COMBINING_MARK': '',
\ 'IDNA_ERROR_DISALLOWED': '',
\ 'IDNA_ERROR_PUNYCODE': '',
\ 'IDNA_ERROR_LABEL_HAS_DOT': '',
\ 'IDNA_ERROR_INVALID_ACE_LABEL': '',
\ 'IDNA_ERROR_BIDI': '',
\ 'IDNA_ERROR_CONTEXTJ': '',
\ 'JSON_PRETTY_PRINT': '',
\ 'JSON_UNESCAPED_SLASHES': '',
\ 'JSON_NUMERIC_CHECK': '',
\ 'JSON_UNESCAPED_UNICODE': '',
\ 'JSON_BIGINT_AS_STRING': '',
\ }
let g:phpcomplete_builtin['constants']['migrating_from_php_54x_to_php_55x'] = {
\ 'IMG_AFFINE_TRANSLATE': '',
\ 'IMG_AFFINE_SCALE': '',
\ 'IMG_AFFINE_ROTATE': '',
\ 'IMG_AFFINE_SHEAR_HORIZONTAL': '',
\ 'IMG_AFFINE_SHEAR_VERTICAL': '',
\ 'IMG_CROP_DEFAULT': '',
\ 'IMG_CROP_TRANSPARENT': '',
\ 'IMG_CROP_BLACK': '',
\ 'IMG_CROP_WHITE': '',
\ 'IMG_CROP_SIDES': '',
\ 'IMG_FLIP_BOTH': '',
\ 'IMG_FLIP_HORIZONTAL': '',
\ 'IMG_FLIP_VERTICAL': '',
\ 'IMG_BELL': '',
\ 'IMG_BESSEL': '',
\ 'IMG_BICUBIC': '',
\ 'IMG_BICUBIC_FIXED': '',
\ 'IMG_BLACKMAN': '',
\ 'IMG_BOX': '',
\ 'IMG_BSPLINE': '',
\ 'IMG_CATMULLROM': '',
\ 'IMG_GAUSSIAN': '',
\ 'IMG_GENERALIZED_CUBIC': '',
\ 'IMG_HERMITE': '',
\ 'IMG_HAMMING': '',
\ 'IMG_HANNING': '',
\ 'IMG_MITCHELL': '',
\ 'IMG_POWER': '',
\ 'IMG_QUADRATIC': '',
\ 'IMG_SINC': '',
\ 'IMG_NEAREST_NEIGHBOUR': '',
\ 'IMG_WEIGHTED4': '',
\ 'IMG_TRIANGLE': '',
\ 'JSON_ERROR_RECURSION': '',
\ 'JSON_ERROR_INF_OR_NAN': '',
\ 'JSON_ERROR_UNSUPPORTED_TYPE': '',
\ 'MYSQLI_SERVER_PUBLIC_KEY': '',
\ }
let g:phpcomplete_builtin['constants']['migrating_from_php_55x_to_php_56x'] = {
\ 'CURLOPT_SAFE_UPLOAD': '',
\ 'MCRYPT_DEV_URANDOM': '',
\ 'MCRYPT_DEV_RANDOM': '',
\ 'IMG_WEBP': '',
\ 'LDAP_ESCAPE_DN': '',
\ 'LDAP_ESCAPE_FILTER': '',
\ 'OPENSSL_DEFAULT_STREAM_CIPHERS': '',
\ 'STREAM_CRYPTO_METHOD_ANY_CLIENT': '',
\ 'STREAM_CRYPTO_METHOD_ANY_SERVER': '',
\ 'PGSQL_CONNECT_ASYNC': '',
\ 'PGSQL_CONNECTION_AUTH_OK': '',
\ 'PGSQL_CONNECTION_AWAITING_RESPONSE': '',
\ 'PGSQL_CONNECTION_MADE': '',
\ 'PGSQL_CONNECTION_SETENV': '',
\ 'PGSQL_CONNECTION_SSL_STARTUP': '',
\ 'PGSQL_CONNECTION_STARTED': '',
\ 'PGSQL_DML_ESCAPE': '',
\ 'PGSQL_POLLING_ACTIVE': '',
\ 'PGSQL_POLLING_FAILED': '',
\ 'PGSQL_POLLING_OK': '',
\ 'PGSQL_POLLING_READING': '',
\ 'PGSQL_POLLING_WRITING': '',
\ 'CURLOPT_CLOSEPOLICY': '',
\ 'CURLCLOSEPOLICY_CALLBACK': '',
\ 'CURLCLOSEPOLICY_LEAST_RECENTLY_USED': '',
\ 'CURLCLOSEPOLICY_LEAST_TRAFFIC': '',
\ 'CURLCLOSEPOLICY_OLDEST': '',
\ 'CURLCLOSEPOLICY_SLOWEST': '',
\ 'STREAM_CRYPTO_METHOD_TLS_CLIENT': '',
\ 'STREAM_CRYPTO_METHOD_TLS_SERVER': '',
\ }
let g:phpcomplete_builtin['constants']['migrating_from_php_56x_to_php_70x'] = {
\ 'PREG_REPLACE_EVAL': '',
\ 'PHP_INT_MIN': '',
\ 'IMG_WEBP': '',
\ 'JSON_ERROR_INVALID_PROPERTY_NAME': '',
\ 'JSON_ERROR_UTF16': '',
\ 'LIBXML_BIGLINES': '',
\ 'PREG_JIT_STACKLIMIT_ERROR': '',
\ 'POSIX_RLIMIT_AS': '',
\ 'POSIX_RLIMIT_CORE': '',
\ 'POSIX_RLIMIT_CPU': '',
\ 'POSIX_RLIMIT_DATA': '',
\ 'POSIX_RLIMIT_FSIZE': '',
\ 'POSIX_RLIMIT_LOCKS': '',
\ 'POSIX_RLIMIT_MEMLOCK': '',
\ 'POSIX_RLIMIT_MSGQUEUE': '',
\ 'POSIX_RLIMIT_NICE': '',
\ 'POSIX_RLIMIT_NOFILE': '',
\ 'POSIX_RLIMIT_NPROC': '',
\ 'POSIX_RLIMIT_RSS': '',
\ 'POSIX_RLIMIT_RTPRIO': '',
\ 'POSIX_RLIMIT_RTTIME': '',
\ 'POSIX_RLIMIT_SIGPENDING': '',
\ 'POSIX_RLIMIT_STACK': '',
\ 'POSIX_RLIMIT_INFINITY': '',
\ 'ZLIB_ENCODING_RAW': '',
\ 'ZLIB_ENCODING_DEFLATE': '',
\ 'ZLIB_ENCODING_GZIP': '',
\ 'ZLIB_FILTERED': '',
\ 'ZLIB_HUFFMAN_ONLY': '',
\ 'ZLIB_FIXED': '',
\ 'ZLIB_RLE': '',
\ 'ZLIB_DEFAULT_STRATEGY': '',
\ 'ZLIB_BLOCK': '',
\ 'ZLIB_FINISH': '',
\ 'ZLIB_FULL_FLUSH': '',
\ 'ZLIB_NO_FLUSH': '',
\ 'ZLIB_PARTIAL_FLUSH': '',
\ 'ZLIB_SYNC_FLUSH': '',
\ }
let g:phpcomplete_builtin['constants']['migrating_from_php_70x_to_php_71x'] = {
\ 'JSON_UNESCAPED_LINE_TERMINATORS': '',
\ 'JSON_UNESCAPED_UNICODE': '',
\ 'PGSQL_NOTICE_LAST': '',
\ 'PGSQL_NOTICE_ALL': '',
\ 'PGSQL_NOTICE_CLEAR': '',
\ 'PHP_FD_SETSIZE': '',
\ 'CURLMOPT_PUSHFUNCTION': '',
\ 'CURL_PUSH_OK': '',
\ 'CURL_PUSH_DENY': '',
\ 'FILTER_FLAG_EMAIL_UNICODE': '',
\ 'IMAGETYPE_WEBP': '',
\ 'LDAP_OPT_X_SASL_NOCANON': '',
\ 'LDAP_OPT_X_SASL_USERNAME': '',
\ 'LDAP_OPT_X_TLS_CACERTDIR': '',
\ 'LDAP_OPT_X_TLS_CACERTFILE': '',
\ 'LDAP_OPT_X_TLS_CERTFILE': '',
\ 'LDAP_OPT_X_TLS_CIPHER_SUITE': '',
\ 'LDAP_OPT_X_TLS_KEYFILE': '',
\ 'LDAP_OPT_X_TLS_RANDOM_FILE': '',
\ 'LDAP_OPT_X_TLS_CRLCHECK': '',
\ 'LDAP_OPT_X_TLS_CRL_NONE': '',
\ 'LDAP_OPT_X_TLS_CRL_PEER': '',
\ 'LDAP_OPT_X_TLS_CRL_ALL': '',
\ 'LDAP_OPT_X_TLS_DHFILE': '',
\ 'LDAP_OPT_X_TLS_CRLFILE': '',
\ 'LDAP_OPT_X_TLS_PROTOCOL_MIN': '',
\ 'LDAP_OPT_X_TLS_PROTOCOL_SSL2': '',
\ 'LDAP_OPT_X_TLS_PROTOCOL_SSL3': '',
\ 'LDAP_OPT_X_TLS_PROTOCOL_TLS1_0': '',
\ 'LDAP_OPT_X_TLS_PROTOCOL_TLS1_1': '',
\ 'LDAP_OPT_X_TLS_PROTOCOL_TLS1_2': '',
\ 'LDAP_OPT_X_TLS_PACKAGE': '',
\ 'LDAP_OPT_X_KEEPALIVE_IDLE': '',
\ 'LDAP_OPT_X_KEEPALIVE_PROBES': '',
\ 'LDAP_OPT_X_KEEPALIVE_INTERVAL': '',
\ 'MT_RAND_PHP': '',
\ }
let g:phpcomplete_builtin['constants']['migrating_from_php_71x_to_php_72x'] = {
\ 'PHP_FLOAT_DIG': '',
\ 'PHP_FLOAT_EPSILON': '',
\ 'PHP_FLOAT_MIN': '',
\ 'PHP_FLOAT_MAX': '',
\ 'PHP_OS_FAMILY': '',
\ 'FILEINFO_EXTENSION': '',
\ 'JSON_INVALID_UTF8_IGNORE': '',
\ 'JSON_INVALID_UTF8_SUBSTITUTE': '',
\ 'IMG_EFFECT_MULTIPLY': '',
\ 'IMG_BMP': '',
\ 'LDAP_EXOP_START_TLS': '',
\ 'LDAP_EXOP_MODIFY_PASSWD': '',
\ 'LDAP_EXOP_REFRESH': '',
\ 'LDAP_EXOP_WHO_AM_I': '',
\ 'LDAP_EXOP_TURN': '',
\ 'PASSWORD_ARGON2I': '',
\ 'PASSWORD_ARGON2_DEFAULT_MEMORY_COST': '',
\ 'PASSWORD_ARGON2_DEFAULT_TIME_COST': '',
\ 'PASSWORD_ARGON2_DEFAULT_THREADS': '',
\ 'SODIUM_LIBRARY_VERSION': '',
\ 'SODIUM_LIBRARY_MAJOR_VERSION': '',
\ 'SODIUM_LIBRARY_MINOR_VERSION': '',
\ 'SODIUM_CRYPTO_AEAD_AES256GCM_KEYBYTES': '',
\ 'SODIUM_CRYPTO_AEAD_AES256GCM_NSECBYTES': '',
\ 'SODIUM_CRYPTO_AEAD_AES256GCM_NPUBBYTES': '',
\ 'SODIUM_CRYPTO_AEAD_AES256GCM_ABYTES': '',
\ 'SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_KEYBYTES': '',
\ 'SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_NSECBYTES': '',
\ 'SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_NPUBBYTES': '',
\ 'SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_ABYTES': '',
\ 'SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_IETF_KEYBYTES': '',
\ 'SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_IETF_NSECBYTES': '',
\ 'SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_IETF_NPUBBYTES': '',
\ 'SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_IETF_ABYTES': '',
\ 'SODIUM_CRYPTO_AUTH_BYTES': '',
\ 'SODIUM_CRYPTO_AUTH_KEYBYTES': '',
\ 'SODIUM_CRYPTO_BOX_SEALBYTES': '',
\ 'SODIUM_CRYPTO_BOX_SECRETKEYBYTES': '',
\ 'SODIUM_CRYPTO_BOX_PUBLICKEYBYTES': '',
\ 'SODIUM_CRYPTO_BOX_KEYPAIRBYTES': '',
\ 'SODIUM_CRYPTO_BOX_MACBYTES': '',
\ 'SODIUM_CRYPTO_BOX_NONCEBYTES': '',
\ 'SODIUM_CRYPTO_BOX_SEEDBYTES': '',
\ 'SODIUM_CRYPTO_KDF_BYTES_MIN': '',
\ 'SODIUM_CRYPTO_KDF_BYTES_MAX': '',
\ 'SODIUM_CRYPTO_KDF_CONTEXTBYTES': '',
\ 'SODIUM_CRYPTO_KDF_KEYBYTES': '',
\ 'SODIUM_CRYPTO_KX_SEEDBYTES': '',
\ 'SODIUM_CRYPTO_KX_SESSIONKEYBYTES': '',
\ 'SODIUM_CRYPTO_KX_PUBLICKEYBYTES': '',
\ 'SODIUM_CRYPTO_KX_SECRETKEYBYTES': '',
\ 'SODIUM_CRYPTO_KX_KEYPAIRBYTES': '',
\ 'SODIUM_CRYPTO_GENERICHASH_BYTES': '',
\ 'SODIUM_CRYPTO_GENERICHASH_BYTES_MIN': '',
\ 'SODIUM_CRYPTO_GENERICHASH_BYTES_MAX': '',
\ 'SODIUM_CRYPTO_GENERICHASH_KEYBYTES': '',
\ 'SODIUM_CRYPTO_GENERICHASH_KEYBYTES_MIN': '',
\ 'SODIUM_CRYPTO_GENERICHASH_KEYBYTES_MAX': '',
\ 'SODIUM_CRYPTO_PWHASH_ALG_ARGON2I13': '',
\ 'SODIUM_CRYPTO_PWHASH_ALG_DEFAULT': '',
\ 'SODIUM_CRYPTO_PWHASH_SALTBYTES': '',
\ 'SODIUM_CRYPTO_PWHASH_STRPREFIX': '',
\ 'SODIUM_CRYPTO_PWHASH_OPSLIMIT_INTERACTIVE': '',
\ 'SODIUM_CRYPTO_PWHASH_MEMLIMIT_INTERACTIVE': '',
\ 'SODIUM_CRYPTO_PWHASH_OPSLIMIT_MODERATE': '',
\ 'SODIUM_CRYPTO_PWHASH_MEMLIMIT_MODERATE': '',
\ 'SODIUM_CRYPTO_PWHASH_OPSLIMIT_SENSITIVE': '',
\ 'SODIUM_CRYPTO_PWHASH_MEMLIMIT_SENSITIVE': '',
\ 'SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_SALTBYTES': '',
\ 'SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_STRPREFIX': '',
\ 'SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_OPSLIMIT_INTERACTIVE': '',
\ 'SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_MEMLIMIT_INTERACTIVE': '',
\ 'SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_OPSLIMIT_SENSITIVE': '',
\ 'SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_MEMLIMIT_SENSITIVE': '',
\ 'SODIUM_CRYPTO_SCALARMULT_BYTES': '',
\ 'SODIUM_CRYPTO_SCALARMULT_SCALARBYTES': '',
\ 'SODIUM_CRYPTO_SHORTHASH_BYTES': '',
\ 'SODIUM_CRYPTO_SHORTHASH_KEYBYTES': '',
\ 'SODIUM_CRYPTO_SECRETBOX_KEYBYTES': '',
\ 'SODIUM_CRYPTO_SECRETBOX_MACBYTES': '',
\ 'SODIUM_CRYPTO_SECRETBOX_NONCEBYTES': '',
\ 'SODIUM_CRYPTO_SIGN_BYTES': '',
\ 'SODIUM_CRYPTO_SIGN_SEEDBYTES': '',
\ 'SODIUM_CRYPTO_SIGN_PUBLICKEYBYTES': '',
\ 'SODIUM_CRYPTO_SIGN_SECRETKEYBYTES': '',
\ 'SODIUM_CRYPTO_SIGN_KEYPAIRBYTES': '',
\ 'SODIUM_CRYPTO_STREAM_NONCEBYTES': '',
\ 'SODIUM_CRYPTO_STREAM_KEYBYTES': '',
\ 'INTL_IDNA_VARIANT_2003': '',
\ 'INTL_IDNA_VARIANT_UTS46': '',
\ 'SORT_STRING': '',
\ 'HASH_HMAC': '',
\ 'JSON_OBJECT_AS_ARRAY': '',
\ }
let g:phpcomplete_builtin['constants']['migrating_from_php_72x_to_php_73x'] = {
\ 'PASSWORD_ARGON2ID': '',
\ 'CURLAUTH_BEARER': '',
\ 'CURLAUTH_GSSAPI': '',
\ 'CURLE_WEIRD_SERVER_REPLY': '',
\ 'CURLINFO_APPCONNECT_TIME_T': '',
\ 'CURLINFO_CONNECT_TIME_T': '',
\ 'CURLINFO_CONTENT_LENGTH_DOWNLOAD_T': '',
\ 'CURLINFO_CONTENT_LENGTH_UPLOAD_T': '',
\ 'CURLINFO_FILETIME_T': '',
\ 'CURLINFO_HTTP_VERSION': '',
\ 'CURLINFO_NAMELOOKUP_TIME_T': '',
\ 'CURLINFO_PRETRANSFER_TIME_T': '',
\ 'CURLINFO_PROTOCOL': '',
\ 'CURLINFO_PROXY_SSL_VERIFYRESULT': '',
\ 'CURLINFO_REDIRECT_TIME_T': '',
\ 'CURLINFO_SCHEME': '',
\ 'CURLINFO_SIZE_DOWNLOAD_T': '',
\ 'CURLINFO_SIZE_UPLOAD_T': '',
\ 'CURLINFO_SPEED_DOWNLOAD_T': '',
\ 'CURLINFO_SPEED_UPLOAD_T': '',
\ 'CURLINFO_STARTTRANSFER_TIME_T': '',
\ 'CURLINFO_TOTAL_TIME_T': '',
\ 'CURL_LOCK_DATA_CONNECT': '',
\ 'CURL_LOCK_DATA_PSL': '',
\ 'CURL_MAX_READ_SIZE': '',
\ 'CURLOPT_ABSTRACT_UNIX_SOCKET': '',
\ 'CURLOPT_DISALLOW_USERNAME_IN_URL': '',
\ 'CURLOPT_DNS_SHUFFLE_ADDRESSES': '',
\ 'CURLOPT_HAPPY_EYEBALLS_TIMEOUT_MS': '',
\ 'CURLOPT_HAPROXYPROTOCOL': '',
\ 'CURLOPT_KEEP_SENDING_ON_ERROR': '',
\ 'CURLOPT_PRE_PROXY': '',
\ 'CURLOPT_PROXY_CAINFO': '',
\ 'CURLOPT_PROXY_CAPATH': '',
\ 'CURLOPT_PROXY_CRLFILE': '',
\ 'CURLOPT_PROXY_KEYPASSWD': '',
\ 'CURLOPT_PROXY_PINNEDPUBLICKEY': '',
\ 'CURLOPT_PROXY_SSLCERT': '',
\ 'CURLOPT_PROXY_SSLCERTTYPE': '',
\ 'CURLOPT_PROXY_SSL_CIPHER_LIST': '',
\ 'CURLOPT_PROXY_SSLKEY': '',
\ 'CURLOPT_PROXY_SSLKEYTYPE': '',
\ 'CURLOPT_PROXY_SSL_OPTIONS': '',
\ 'CURLOPT_PROXY_SSL_VERIFYHOST': '',
\ 'CURLOPT_PROXY_SSL_VERIFYPEER': '',
\ 'CURLOPT_PROXY_SSLVERSION': '',
\ 'CURLOPT_PROXY_TLS13_CIPHERS': '',
\ 'CURLOPT_PROXY_TLSAUTH_PASSWORD': '',
\ 'CURLOPT_PROXY_TLSAUTH_TYPE': '',
\ 'CURLOPT_PROXY_TLSAUTH_USERNAME': '',
\ 'CURLOPT_REQUEST_TARGET': '',
\ 'CURLOPT_SOCKS5_AUTH': '',
\ 'CURLOPT_SSH_COMPRESSION': '',
\ 'CURLOPT_SUPPRESS_CONNECT_HEADERS': '',
\ 'CURLOPT_TIMEVALUE_LARGE': '',
\ 'CURLOPT_TLS13_CIPHERS': '',
\ 'CURLPROXY_HTTPS': '',
\ 'CURLSSH_AUTH_GSSAPI': '',
\ 'CURL_SSLVERSION_MAX_DEFAULT': '',
\ 'CURL_SSLVERSION_MAX_NONE': '',
\ 'CURL_VERSION_ALTSVC': '',
\ 'CURL_VERSION_ASYNCHDNS': '',
\ 'CURL_VERSION_BROTLI': '',
\ 'CURL_VERSION_CONV': '',
\ 'CURL_VERSION_CURLDEBUG': '',
\ 'CURL_VERSION_DEBUG': '',
\ 'CURL_VERSION_GSSAPI': '',
\ 'CURL_VERSION_GSSNEGOTIATE': '',
\ 'CURL_VERSION_HTTPS_PROXY': '',
\ 'CURL_VERSION_IDN': '',
\ 'CURL_VERSION_LARGEFILE': '',
\ 'CURL_VERSION_MULTI_SSL': '',
\ 'CURL_VERSION_NTLM': '',
\ 'CURL_VERSION_NTLM_WB': '',
\ 'CURL_VERSION_PSL': '',
\ 'CURL_VERSION_SPNEGO': '',
\ 'CURL_VERSION_SSPI': '',
\ 'CURL_VERSION_TLSAUTH_SRP': '',
\ 'FILTER_SANITIZE_ADD_SLASHES': '',
\ 'JSON_THROW_ON_ERROR': '',
\ 'LDAP_CONTROL_ASSERT': '',
\ 'LDAP_CONTROL_MANAGEDSAIT': '',
\ 'LDAP_CONTROL_PROXY_AUTHZ': '',
\ 'LDAP_CONTROL_SUBENTRIES': '',
\ 'LDAP_CONTROL_VALUESRETURNFILTER': '',
\ 'LDAP_CONTROL_PRE_READ': '',
\ 'LDAP_CONTROL_POST_READ': '',
\ 'LDAP_CONTROL_SORTREQUEST': '',
\ 'LDAP_CONTROL_SORTRESPONSE': '',
\ 'LDAP_CONTROL_PAGEDRESULTS': '',
\ 'LDAP_CONTROL_AUTHZID_REQUEST': '',
\ 'LDAP_CONTROL_AUTHZID_RESPONSE': '',
\ 'LDAP_CONTROL_SYNC': '',
\ 'LDAP_CONTROL_SYNC_STATE': '',
\ 'LDAP_CONTROL_SYNC_DONE': '',
\ 'LDAP_CONTROL_DONTUSECOPY': '',
\ 'LDAP_CONTROL_PASSWORDPOLICYREQUEST': '',
\ 'LDAP_CONTROL_PASSWORDPOLICYRESPONSE': '',
\ 'LDAP_CONTROL_X_INCREMENTAL_VALUES': '',
\ 'LDAP_CONTROL_X_DOMAIN_SCOPE': '',
\ 'LDAP_CONTROL_X_PERMISSIVE_MODIFY': '',
\ 'LDAP_CONTROL_X_SEARCH_OPTIONS': '',
\ 'LDAP_CONTROL_X_TREE_DELETE': '',
\ 'LDAP_CONTROL_X_EXTENDED_DN': '',
\ 'LDAP_CONTROL_VLVREQUEST': '',
\ 'LDAP_CONTROL_VLVRESPONSE': '',
\ 'MB_CASE_FOLD': '',
\ 'MB_CASE_LOWER_SIMPLE': '',
\ 'MB_CASE_UPPER_SIMPLE': '',
\ 'MB_CASE_TITLE_SIMPLE': '',
\ 'MB_CASE_FOLD_SIMPLE': '',
\ 'PGSQL_DIAG_SCHEMA_NAME': '',
\ 'PGSQL_DIAG_TABLE_NAME': '',
\ 'PGSQL_DIAG_COLUMN_NAME': '',
\ 'PGSQL_DIAG_DATATYPE_NAME': '',
\ 'PGSQL_DIAG_CONSTRAINT_NAME': '',
\ 'PGSQL_DIAG_SEVERITY_NONLOCALIZED': '',
\ 'FILTER_FLAG_SCHEME_REQUIRED': '',
\ 'FILTER_FLAG_HOST_REQUIRED': '',
\ 'FILTER_VALIDATE_URL': '',
\ 'TOKEN_PARSE': '',
\ 'LDAP_OPT_SERVER_CONTROLS': '',
\ 'LDAP_OPT_CLIENT_CONTROLS': '',
\ 'MB_CASE_LOWER': '',
\ 'MB_CASE_UPPER': '',
\ 'MB_CASE_TITLE': '',
\ 'PHPDBG_FILE': '',
\ 'PHPDBG_METHOD': '',
\ 'PHPDBG_LINENO': '',
\ 'PHPDBG_FUNC': '',
\ 'FILTER_VALIDATE_FLOAT': '',
\ 'FILTER_SANITIZE_MAGIC_QUOTES': '',
\ 'JSON_PARTIAL_OUTPUT_ON_ERROR': '',
\ }
let g:phpcomplete_builtin['constants']['ming'] = {
\ 'MING_NEW': '',
\ 'MING_ZLIB': '',
\ 'SWFBUTTON_HIT': '',
\ 'SWFBUTTON_DOWN': '',
\ 'SWFBUTTON_OVER': '',
\ 'SWFBUTTON_UP': '',
\ 'SWFBUTTON_MOUSEUPOUTSIDE': '',
\ 'SWFBUTTON_DRAGOVER': '',
\ 'SWFBUTTON_DRAGOUT': '',
\ 'SWFBUTTON_MOUSEUP': '',
\ 'SWFBUTTON_MOUSEDOWN': '',
\ 'SWFBUTTON_MOUSEOUT': '',
\ 'SWFBUTTON_MOUSEOVER': '',
\ 'SWFFILL_RADIAL_GRADIENT': '',
\ 'SWFFILL_LINEAR_GRADIENT': '',
\ 'SWFFILL_TILED_BITMAP': '',
\ 'SWFFILL_CLIPPED_BITMAP': '',
\ 'SWFTEXTFIELD_HASLENGTH': '',
\ 'SWFTEXTFIELD_NOEDIT': '',
\ 'SWFTEXTFIELD_PASSWORD': '',
\ 'SWFTEXTFIELD_MULTILINE': '',
\ 'SWFTEXTFIELD_WORDWRAP': '',
\ 'SWFTEXTFIELD_DRAWBOX': '',
\ 'SWFTEXTFIELD_NOSELECT': '',
\ 'SWFTEXTFIELD_HTML': '',
\ 'SWFTEXTFIELD_ALIGN_LEFT': '',
\ 'SWFTEXTFIELD_ALIGN_RIGHT': '',
\ 'SWFTEXTFIELD_ALIGN_CENTER': '',
\ 'SWFTEXTFIELD_ALIGN_JUSTIFY': '',
\ 'SWFACTION_ONLOAD': '',
\ 'SWFACTION_ENTERFRAME': '',
\ 'SWFACTION_UNLOAD': '',
\ 'SWFACTION_MOUSEMOVE': '',
\ 'SWFACTION_MOUSEDOWN': '',
\ 'SWFACTION_MOUSEUP': '',
\ 'SWFACTION_KEYDOWN': '',
\ 'SWFACTION_KEYUP': '',
\ 'SWFACTION_DATA': '',
\ }
let g:phpcomplete_builtin['constants']['mongo'] = {
\ 'MONGO_STREAMS': '',
\ 'MONGO_SUPPORTS_STREAMS': '',
\ 'MONGO_SUPPORTS_SSL': '',
\ 'MONGO_SUPPORTS_AUTH_MECHANISM_MONGODB_CR': '',
\ 'MONGO_SUPPORTS_AUTH_MECHANISM_MONGODB_X509': '',
\ 'MONGO_SUPPORTS_AUTH_MECHANISM_GSSAPI': '',
\ 'MONGO_SUPPORTS_AUTH_MECHANISM_PLAIN': '',
\ 'MONGO_STREAM_NOTIFY_TYPE_IO_INIT': '',
\ 'MONGO_STREAM_NOTIFY_TYPE_LOG': '',
\ 'MONGO_STREAM_NOTIFY_IO_READ': '',
\ 'MONGO_STREAM_NOTIFY_IO_WRITE': '',
\ 'MONGO_STREAM_NOTIFY_IO_PROGRESS': '',
\ 'MONGO_STREAM_NOTIFY_IO_COMPLETED': '',
\ 'MONGO_STREAM_NOTIFY_LOG_INSERT': '',
\ 'MONGO_STREAM_NOTIFY_LOG_QUERY': '',
\ 'MONGO_STREAM_NOTIFY_LOG_UPDATE': '',
\ 'MONGO_STREAM_NOTIFY_LOG_DELETE': '',
\ 'MONGO_STREAM_NOTIFY_LOG_GETMORE': '',
\ 'MONGO_STREAM_NOTIFY_LOG_KILLCURSOR': '',
\ 'MONGO_STREAM_NOTIFY_LOG_BATCHINSERT': '',
\ 'MONGO_STREAM_NOTIFY_LOG_RESPONSE_HEADER': '',
\ 'MONGO_STREAM_NOTIFY_LOG_WRITE_REPLY': '',
\ 'MONGO_STREAM_NOTIFY_LOG_CMD_INSERT': '',
\ 'MONGO_STREAM_NOTIFY_LOG_CMD_UPDATE': '',
\ 'MONGO_STREAM_NOTIFY_LOG_CMD_DELETE': '',
\ 'MONGO_STREAM_NOTIFY_LOG_WRITE_BATCH': '',
\ }
let g:phpcomplete_builtin['constants']['mysqlnd_memcache'] = {
\ 'PHP_INI_SYSTEM': '',
\ 'MYSQLND_MEMCACHE_DEFAULT_REGEXP': '',
\ 'MYSQLND_MEMCACHE_VERSION': '',
\ 'MYSQLND_MEMCACHE_VERSION_ID': '',
\ }
let g:phpcomplete_builtin['constants']['mysqlnd_mux'] = {
\ 'MYSQLND_MUX_VERSION': '',
\ 'MYSQLND_MUX_VERSION_ID': '',
\ }
let g:phpcomplete_builtin['constants']['mysqlnd_uh'] = {
\ 'MYSQLND_UH_VERSION_STR': '',
\ 'MYSQLND_UH_VERSION': '',
\ 'MYSQLND_UH_VERSION_ID': '',
\ 'MYSQLND_UH_MYSQLND_COM_SLEEP': '',
\ 'MYSQLND_UH_MYSQLND_COM_QUIT': '',
\ 'MYSQLND_UH_MYSQLND_COM_INIT_DB': '',
\ 'MYSQLND_UH_MYSQLND_COM_QUERY': '',
\ 'MYSQLND_UH_MYSQLND_COM_FIELD_LIST': '',
\ 'MYSQLND_UH_MYSQLND_COM_CREATE_DB': '',
\ 'MYSQLND_UH_MYSQLND_COM_DROP_DB': '',
\ 'MYSQLND_UH_MYSQLND_COM_REFRESH': '',
\ 'MYSQLND_UH_MYSQLND_COM_SHUTDOWN': '',
\ 'MYSQLND_UH_MYSQLND_COM_STATISTICS': '',
\ 'MYSQLND_UH_MYSQLND_COM_PROCESS_INFO': '',
\ 'MYSQLND_UH_MYSQLND_COM_CONNECT': '',
\ 'MYSQLND_UH_MYSQLND_COM_PROCESS_KILL': '',
\ 'MYSQLND_UH_MYSQLND_COM_DEBUG': '',
\ 'MYSQLND_UH_MYSQLND_COM_PING': '',
\ 'MYSQLND_UH_MYSQLND_COM_TIME': '',
\ 'MYSQLND_UH_MYSQLND_COM_DELAYED_INSERT': '',
\ 'MYSQLND_UH_MYSQLND_COM_CHANGE_USER': '',
\ 'MYSQLND_UH_MYSQLND_COM_BINLOG_DUMP': '',
\ 'MYSQLND_UH_MYSQLND_COM_TABLE_DUMP': '',
\ 'MYSQLND_UH_MYSQLND_COM_CONNECT_OUT': '',
\ 'MYSQLND_UH_MYSQLND_COM_REGISTER_SLAVED': '',
\ 'MYSQLND_UH_MYSQLND_COM_STMT_PREPARE': '',
\ 'MYSQLND_UH_MYSQLND_COM_STMT_EXECUTE': '',
\ 'MYSQLND_UH_MYSQLND_COM_STMT_SEND_LONG_DATA': '',
\ 'MYSQLND_UH_MYSQLND_COM_STMT_CLOSE': '',
\ 'MYSQLND_UH_MYSQLND_COM_STMT_RESET': '',
\ 'MYSQLND_UH_MYSQLND_COM_SET_OPTION': '',
\ 'MYSQLND_UH_MYSQLND_COM_STMT_FETCH': '',
\ 'MYSQLND_UH_MYSQLND_COM_DAEMON': '',
\ 'MYSQLND_UH_MYSQLND_COM_END': '',
\ 'MYSQLND_UH_MYSQLND_PROT_GREET_PACKET': '',
\ 'MYSQLND_UH_MYSQLND_PROT_AUTH_PACKET': '',
\ 'MYSQLND_UH_MYSQLND_PROT_OK_PACKET': '',
\ 'MYSQLND_UH_MYSQLND_PROT_EOF_PACKET': '',
\ 'MYSQLND_UH_MYSQLND_PROT_CMD_PACKET': '',
\ 'MYSQLND_UH_MYSQLND_PROT_RSET_HEADER_PACKET': '',
\ 'MYSQLND_UH_MYSQLND_PROT_RSET_FLD_PACKET': '',
\ 'MYSQLND_UH_MYSQLND_PROT_ROW_PACKET': '',
\ 'MYSQLND_UH_MYSQLND_PROT_STATS_PACKET': '',
\ 'MYSQLND_UH_MYSQLND_PREPARE_RESP_PACKET': '',
\ 'MYSQLND_UH_MYSQLND_CHG_USER_RESP_PACKET': '',
\ 'MYSQLND_UH_MYSQLND_PROT_LAST': '',
\ 'MYSQLND_UH_MYSQLND_CLOSE_EXPLICIT': '',
\ 'MYSQLND_UH_MYSQLND_CLOSE_IMPLICIT': '',
\ 'MYSQLND_UH_MYSQLND_CLOSE_DISCONNECTED': '',
\ 'MYSQLND_UH_MYSQLND_CLOSE_LAST': '',
\ 'MYSQLND_UH_SERVER_OPTION_MULTI_STATEMENTS_ON': '',
\ 'MYSQLND_UH_SERVER_OPTION_MULTI_STATEMENTS_OFF': '',
\ 'MYSQLND_UH_MYSQLND_OPTION_OPT_CONNECT_TIMEOUT': '',
\ 'MYSQLND_UH_MYSQLND_OPTION_OPT_COMPRESS': '',
\ 'MYSQLND_UH_MYSQLND_OPTION_OPT_NAMED_PIPE': '',
\ 'MYSQLND_UH_MYSQLND_OPTION_INIT_COMMAND': '',
\ 'MYSQLND_UH_MYSQLND_READ_DEFAULT_FILE': '',
\ 'MYSQLND_UH_MYSQLND_READ_DEFAULT_GROUP': '',
\ 'MYSQLND_UH_MYSQLND_SET_CHARSET_DIR': '',
\ 'MYSQLND_UH_MYSQLND_SET_CHARSET_NAME': '',
\ 'MYSQLND_UH_MYSQLND_OPT_LOCAL_INFILE': '',
\ 'MYSQLND_UH_MYSQLND_OPT_PROTOCOL': '',
\ 'MYSQLND_UH_MYSQLND_SHARED_MEMORY_BASE_NAME': '',
\ 'MYSQLND_UH_MYSQLND_OPT_READ_TIMEOUT': '',
\ 'MYSQLND_UH_MYSQLND_OPT_WRITE_TIMEOUT': '',
\ 'MYSQLND_UH_MYSQLND_OPT_USE_RESULT': '',
\ 'MYSQLND_UH_MYSQLND_OPT_USE_REMOTE_CONNECTION': '',
\ 'MYSQLND_UH_MYSQLND_OPT_USE_EMBEDDED_CONNECTION': '',
\ 'MYSQLND_UH_MYSQLND_OPT_GUESS_CONNECTION': '',
\ 'MYSQLND_UH_MYSQLND_SET_CLIENT_IP': '',
\ 'MYSQLND_UH_MYSQLND_SECURE_AUTH': '',
\ 'MYSQLND_UH_MYSQLND_REPORT_DATA_TRUNCATION': '',
\ 'MYSQLND_UH_MYSQLND_OPT_RECONNECT': '',
\ 'MYSQLND_UH_MYSQLND_OPT_SSL_VERIFY_SERVER_CERT': '',
\ 'MYSQLND_UH_MYSQLND_OPT_NET_CMD_BUFFER_SIZE': '',
\ 'MYSQLND_UH_MYSQLND_OPT_NET_READ_BUFFER_SIZE': '',
\ 'MYSQLND_UH_MYSQLND_OPT_SSL_KEY': '',
\ 'MYSQLND_UH_MYSQLND_OPT_SSL_CERT': '',
\ 'MYSQLND_UH_MYSQLND_OPT_SSL_CA': '',
\ 'MYSQLND_UH_MYSQLND_OPT_SSL_CAPATH': '',
\ 'MYSQLND_UH_MYSQLND_OPT_SSL_CIPHER': '',
\ 'MYSQLND_UH_MYSQLND_OPT_SSL_PASSPHRASE': '',
\ 'MYSQLND_UH_SERVER_OPTION_PLUGIN_DIR': '',
\ 'MYSQLND_UH_SERVER_OPTION_DEFAULT_AUTH': '',
\ 'MYSQLND_UH_SERVER_OPTION_SET_CLIENT_IP': '',
\ 'MYSQLND_UH_MYSQLND_OPT_MAX_ALLOWED_PACKET': '',
\ 'MYSQLND_UH_MYSQLND_OPT_AUTH_PROTOCOL': '',
\ 'MYSQLND_UH_MYSQLND_OPT_INT_AND_FLOAT_NATIVE': '',
\ }
let g:phpcomplete_builtin['constants']['mysqlnd'] = {
\ 'PHP_INI_SYSTEM': '',
\ }
let g:phpcomplete_builtin['constants']['gopher'] = {
\ 'GOPHER_DOCUMENT': '',
\ 'GOPHER_DIRECTORY': '',
\ 'GOPHER_BINHEX': '',
\ 'GOPHER_DOSBINARY': '',
\ 'GOPHER_UUENCODED': '',
\ 'GOPHER_BINARY': '',
\ 'GOPHER_INFO': '',
\ 'GOPHER_HTTP': '',
\ 'GOPHER_UNKNOWN': '',
\ }
let g:phpcomplete_builtin['constants']['yp_nis'] = {
\ 'YPERR_ACCESS': '',
\ 'YPERR_BADARGS': '',
\ 'YPERR_BADDB': '',
\ 'YPERR_BUSY': '',
\ 'YPERR_DOMAIN': '',
\ 'YPERR_KEY': '',
\ 'YPERR_MAP': '',
\ 'YPERR_NODOM': '',
\ 'YPERR_NOMORE': '',
\ 'YPERR_PMAP': '',
\ 'YPERR_RESRC': '',
\ 'YPERR_RPC': '',
\ 'YPERR_YPBIND': '',
\ 'YPERR_YPERR': '',
\ 'YPERR_YPSERV': '',
\ 'YPERR_VERS': '',
\ }
let g:phpcomplete_builtin['constants']['oggvorbis'] = {
\ 'OGGVORBIS_PCM_U8': '',
\ 'OGGVORBIS_PCM_S8': '',
\ 'OGGVORBIS_PCM_U16_LE': '',
\ 'OGGVORBIS_PCM_U16_BE': '',
\ 'OGGVORBIS_PCM_S16_LE': '',
\ 'OGGVORBIS_PCM_S16_BE': '',
\ }
let g:phpcomplete_builtin['constants']['pdo'] = {
\ 'PDO_PARAM_BOOL': '',
\ }
let g:phpcomplete_builtin['constants']['phdfs'] = {
\ 'O_WRONLY': '',
\ 'O_CREAT': '',
\ 'O_APPEND': '',
\ }
let g:phpcomplete_builtin['constants']['phpdbg'] = {
\ 'PHPDBG_VERSION': '',
\ 'PHPDBG_FILE': '',
\ 'PHPDBG_METHOD': '',
\ 'PHPDBG_LINENO': '',
\ 'PHPDBG_FUNC': '',
\ 'PHPDBG_COLOR_PROMPT': '',
\ 'PHPDBG_COLOR_NOTICE': '',
\ 'PHPDBG_COLOR_ERROR': '',
\ }
let g:phpcomplete_builtin['constants']['pthreads'] = {
\ 'PTHREADS_INHERIT_ALL': '',
\ 'PTHREADS_INHERIT_NONE': '',
\ 'PTHREADS_INHERIT_INI': '',
\ 'PTHREADS_INHERIT_CONSTANTS': '',
\ 'PTHREADS_INHERIT_CLASSES': '',
\ 'PTHREADS_INHERIT_FUNCTIONS': '',
\ 'PTHREADS_INHERIT_INCLUDES': '',
\ 'PTHREADS_INHERIT_COMMENTS': '',
\ 'PTHREADS_ALLOW_HEADERS': '',
\ }
let g:phpcomplete_builtin['constants']['readline'] = {
\ 'READLINE_LIB': '',
\ }
let g:phpcomplete_builtin['constants']['mysql_pdo'] = {
\ 'MYSQL_READ_DEFAULT_FILE': '',
\ }
let g:phpcomplete_builtin['constants']['odbc_and_db2_pdo'] = {
\ 'SAMPLE': '',
\ }
let g:phpcomplete_builtin['constants']['reflection'] = {
\ 'DEBUG_BACKTRACE_PROVIDE_OBJECT': '',
\ 'DEBUG_BACKTRACE_IGNORE_ARGS': '',
\ }
let g:phpcomplete_builtin['constants']['list_of_reserved_words'] = {
\ 'PHP_VERSION': '',
\ 'PHP_MAJOR_VERSION': '',
\ 'PHP_MINOR_VERSION': '',
\ 'PHP_RELEASE_VERSION': '',
\ 'PHP_VERSION_ID': '',
\ 'PHP_EXTRA_VERSION': '',
\ 'PHP_ZTS': '',
\ 'PHP_DEBUG': '',
\ 'PHP_MAXPATHLEN': '',
\ 'PHP_OS': '',
\ 'PHP_OS_FAMILY': '',
\ 'PHP_SAPI': '',
\ 'PHP_EOL': '',
\ 'PHP_INT_MAX': '',
\ 'PHP_INT_MIN': '',
\ 'PHP_INT_SIZE': '',
\ 'PHP_FLOAT_DIG': '',
\ 'PHP_FLOAT_EPSILON': '',
\ 'PHP_FLOAT_MIN': '',
\ 'PHP_FLOAT_MAX': '',
\ 'DEFAULT_INCLUDE_PATH': '',
\ 'PEAR_INSTALL_DIR': '',
\ 'PEAR_EXTENSION_DIR': '',
\ 'PHP_EXTENSION_DIR': '',
\ 'PHP_PREFIX': '',
\ 'PHP_BINDIR': '',
\ 'PHP_BINARY': '',
\ 'PHP_MANDIR': '',
\ 'PHP_LIBDIR': '',
\ 'PHP_DATADIR': '',
\ 'PHP_SYSCONFDIR': '',
\ 'PHP_LOCALSTATEDIR': '',
\ 'PHP_CONFIG_FILE_PATH': '',
\ 'PHP_CONFIG_FILE_SCAN_DIR': '',
\ 'PHP_SHLIB_SUFFIX': '',
\ 'PHP_FD_SETSIZE': '',
\ }
let g:phpcomplete_builtin['constants']['rpm_reader'] = {
\ 'RPMREADER_MINIMUM': '',
\ 'RPMREADER_NAME': '',
\ 'RPMREADER_VERSION': '',
\ 'RPMREADER_RELEASE': '',
\ 'RPMREADER_EPOCH': '',
\ 'RPMREADER_SERIAL': '',
\ 'RPMREADER_SUMMARY': '',
\ 'RPMREADER_DESCRIPTION': '',
\ 'RPMREADER_BUILDTIME': '',
\ 'RPMREADER_BUILDHOST': '',
\ 'RPMREADER_INSTALLTIME': '',
\ 'RPMREADER_SIZE': '',
\ 'RPMREADER_DISTRIBUTION': '',
\ 'RPMREADER_VENDOR': '',
\ 'RPMREADER_GIF': '',
\ 'RPMREADER_XPM': '',
\ 'RPMREADER_LICENSE': '',
\ 'RPMREADER_COPYRIGHT': '',
\ 'RPMREADER_PACKAGER': '',
\ 'RPMREADER_GROUP': '',
\ 'RPMREADER_SOURCE': '',
\ 'RPMREADER_PATCH': '',
\ 'RPMREADER_URL': '',
\ 'RPMREADER_OS': '',
\ 'RPMREADER_ARCH': '',
\ 'RPMREADER_PREIN': '',
\ 'RPMREADER_POSTIN': '',
\ 'RPMREADER_PREUN': '',
\ 'RPMREADER_POSTUN': '',
\ 'RPMREADER_OLDFILENAMES': '',
\ 'RPMREADER_FILESIZES': '',
\ 'RPMREADER_FILESTATES': '',
\ 'RPMREADER_FILEMODES': '',
\ 'RPMREADER_FILERDEVS': '',
\ 'RPMREADER_FILEMTIMES': '',
\ 'RPMREADER_FILEMD5S': '',
\ 'RPMREADER_FILELINKTOS': '',
\ 'RPMREADER_FILEFLAGS': '',
\ 'RPMREADER_FILEUSERNAME': '',
\ 'RPMREADER_FILEGROUPNAME': '',
\ 'RPMREADER_ICON': '',
\ 'RPMREADER_SOURCERPM': '',
\ 'RPMREADER_FILEVERIFYFLAGS': '',
\ 'RPMREADER_ARCHIVESIZE': '',
\ 'RPMREADER_PROVIDENAME': '',
\ 'RPMREADER_PROVIDES': '',
\ 'RPMREADER_REQUIREFLAGS': '',
\ 'RPMREADER_REQUIRENAME': '',
\ 'RPMREADER_REQUIREVERSION': '',
\ 'RPMREADER_CONFLICTFLAGS': '',
\ 'RPMREADER_CONFLICTNAME': '',
\ 'RPMREADER_CONFLICTVERSION': '',
\ 'RPMREADER_EXCLUDEARCH': '',
\ 'RPMREADER_EXCLUDEOS': '',
\ 'RPMREADER_EXCLUSIVEARCH': '',
\ 'RPMREADER_EXCLUSIVEOS': '',
\ 'RPMREADER_RPMVERSION': '',
\ 'RPMREADER_TRIGGERSCRIPTS': '',
\ 'RPMREADER_TRIGGERNAME': '',
\ 'RPMREADER_TRIGGERVERSION': '',
\ 'RPMREADER_TRIGGERFLAGS': '',
\ 'RPMREADER_TRIGGERINDEX': '',
\ 'RPMREADER_VERIFYSCRIPT': '',
\ 'RPMREADER_CHANGELOGTIME': '',
\ 'RPMREADER_CHANGELOGNAME': '',
\ 'RPMREADER_CHANGELOGTEXT': '',
\ 'RPMREADER_PREINPROG': '',
\ 'RPMREADER_POSTINPROG': '',
\ 'RPMREADER_PREUNPROG': '',
\ 'RPMREADER_POSTUNPROG': '',
\ 'RPMREADER_BUILDARCHS': '',
\ 'RPMREADER_OBSOLETENAME': '',
\ 'RPMREADER_OBSOLETES': '',
\ 'RPMREADER_VERIFYSCRIPTPROG': '',
\ 'RPMREADER_TRIGGERSCRIPTPROG': '',
\ 'RPMREADER_COOKIE': '',
\ 'RPMREADER_FILEDEVICES': '',
\ 'RPMREADER_FILEINODES': '',
\ 'RPMREADER_FILELANGS': '',
\ 'RPMREADER_PREFIXES': '',
\ 'RPMREADER_INSTPREFIXES': '',
\ 'RPMREADER_PROVIDEFLAGS': '',
\ 'RPMREADER_PROVIDEVERSION': '',
\ 'RPMREADER_OBSOLETEFLAGS': '',
\ 'RPMREADER_OBSOLETEVERSION': '',
\ 'RPMREADER_DIRINDEXES': '',
\ 'RPMREADER_BASENAMES': '',
\ 'RPMREADER_DIRNAMES': '',
\ 'RPMREADER_OPTFLAGS': '',
\ 'RPMREADER_DISTURL': '',
\ 'RPMREADER_PAYLOADFORMAT': '',
\ 'RPMREADER_PAYLOADCOMPRESSOR': '',
\ 'RPMREADER_PAYLOADFLAGS': '',
\ 'RPMREADER_INSTALLCOLOR': '',
\ 'RPMREADER_INSTALLTID': '',
\ 'RPMREADER_REMOVETID': '',
\ 'RPMREADER_RHNPLATFORM': '',
\ 'RPMREADER_PLATFORM': '',
\ 'RPMREADER_PATCHESNAME': '',
\ 'RPMREADER_PATCHESFLAGS': '',
\ 'RPMREADER_PATCHESVERSION': '',
\ 'RPMREADER_CACHECTIME': '',
\ 'RPMREADER_CACHEPKGPATH': '',
\ 'RPMREADER_CACHEPKGSIZE': '',
\ 'RPMREADER_CACHEPKGMTIME': '',
\ 'RPMREADER_FILECOLORS': '',
\ 'RPMREADER_FILECLASS': '',
\ 'RPMREADER_CLASSDICT': '',
\ 'RPMREADER_FILEDEPENDSX': '',
\ 'RPMREADER_FILEDEPENDSN': '',
\ 'RPMREADER_DEPENDSDICT': '',
\ 'RPMREADER_SOURCEPKGID': '',
\ 'RPMREADER_FILECONTEXTS': '',
\ 'RPMREADER_FSCONTEXTS': '',
\ 'RPMREADER_RECONTEXTS': '',
\ 'RPMREADER_POLICIES': '',
\ 'RPMREADER_MAXIMUM': '',
\ }
let g:phpcomplete_builtin['constants']['sam'] = {
\ 'SAM_AUTO': '',
\ 'SAM_BOOLEAN': '',
\ 'SAM_BUS': '',
\ 'SAM_BYTE': '',
\ 'SAM_BYTES': '',
\ 'SAM_CORRELID': '',
\ 'SAM_DELIVERYMODE': '',
\ 'SAM_DOUBLE': '',
\ 'SAM_ENDPOINTS': '',
\ 'SAM_FLOAT': '',
\ 'SAM_HOST': '',
\ 'SAM_INT': '',
\ 'SAM_LONG': '',
\ 'SAM_MANUAL': '',
\ 'SAM_MESSAGEID': '',
\ 'SAM_MQTT': '',
\ 'SAM_MQTT_CLEANSTART': '',
\ 'SAM_NON_PERSISTENT': '',
\ 'SAM_PASSWORD': '',
\ 'SAM_PERSISTENT': '',
\ 'SAM_PORT': '',
\ 'SAM_PRIORITY': '',
\ 'SAM_REPLY_TO': '',
\ 'SAM_RTT': '',
\ 'SAM_STRING': '',
\ 'SAM_TARGETCHAIN': '',
\ 'SAM_TEXT': '',
\ 'SAM_TIMETOLIVE': '',
\ 'SAM_TRANSACTIONS': '',
\ 'SAM_USERID': '',
\ 'SAM_WAIT': '',
\ 'SAM_WMQ': '',
\ 'SAM_WMQ_BINDINGS': '',
\ 'SAM_WMQ_CLIENT': '',
\ 'SAM_WMQ_TARGET_CLIENT': '',
\ 'SAM_WPM': '',
\ 'SAM_TYPE': '',
\ }
let g:phpcomplete_builtin['constants']['seaslog'] = {
\ 'SEASLOG_VERSION': '',
\ 'SEASLOG_AUTHOR': '',
\ 'SEASLOG_ALL': '',
\ 'SEASLOG_DEBUG': '',
\ 'SEASLOG_INFO': '',
\ 'SEASLOG_NOTICE': '',
\ 'SEASLOG_WARNING': '',
\ 'SEASLOG_ERROR': '',
\ 'SEASLOG_CRITICAL': '',
\ 'SEASLOG_ALERT': '',
\ 'SEASLOG_EMERGENCY': '',
\ 'SEASLOG_DETAIL_ORDER_ASC': '',
\ 'SEASLOG_DETAIL_ORDER_DESC': '',
\ 'SEASLOG_APPENDER_FILE': '',
\ 'SEASLOG_APPENDER_TCP': '',
\ 'SEASLOG_APPENDER_UDP': '',
\ 'SEASLOG_CLOSE_LOGGER_STREAM_MOD_ALL': '',
\ 'SEASLOG_CLOSE_LOGGER_STREAM_MOD_ASSIGN': '',
\ 'SEASLOG_REQUEST_VARIABLE_DOMAIN_PORT': '',
\ 'SEASLOG_REQUEST_VARIABLE_REQUEST_URI': '',
\ 'SEASLOG_REQUEST_VARIABLE_REQUEST_METHOD': '',
\ 'SEASLOG_REQUEST_VARIABLE_CLIENT_IP': '',
\ }
let g:phpcomplete_builtin['constants']['soap'] = {
\ 'WSDL_CACHE_NONE': '',
\ 'WSDL_CACHE_DISK': '',
\ 'WSDL_CACHE_MEMORY': '',
\ 'WSDL_CACHE_BOTH': '',
\ 'SOAP_1_1': '',
\ 'SOAP_1_2': '',
\ 'SOAP_PERSISTENCE_SESSION': '',
\ 'SOAP_PERSISTENCE_REQUEST': '',
\ 'SOAP_FUNCTIONS_ALL': '',
\ 'SOAP_ENCODED': '',
\ 'SOAP_LITERAL': '',
\ 'SOAP_RPC': '',
\ 'SOAP_DOCUMENT': '',
\ 'SOAP_ACTOR_NEXT': '',
\ 'SOAP_ACTOR_NONE': '',
\ 'SOAP_ACTOR_UNLIMATERECEIVER': '',
\ 'SOAP_COMPRESSION_ACCEPT': '',
\ 'SOAP_COMPRESSION_GZIP': '',
\ 'SOAP_COMPRESSION_DEFLATE': '',
\ 'SOAP_AUTHENTICATION_BASIC': '',
\ 'SOAP_AUTHENTICATION_DIGEST': '',
\ 'SOAP_SSL_METHOD_TLS': '',
\ 'UNKNOWN_TYPE': '',
\ 'XSD_STRING': '',
\ 'XSD_BOOLEAN': '',
\ 'XSD_DECIMAL': '',
\ 'XSD_FLOAT': '',
\ 'XSD_DOUBLE': '',
\ 'XSD_DURATION': '',
\ 'XSD_DATETIME': '',
\ 'XSD_TIME': '',
\ 'XSD_DATE': '',
\ 'XSD_GYEARMONTH': '',
\ 'XSD_GYEAR': '',
\ 'XSD_GMONTHDAY': '',
\ 'XSD_GDAY': '',
\ 'XSD_GMONTH': '',
\ 'XSD_HEXBINARY': '',
\ 'XSD_BASE64BINARY': '',
\ 'XSD_ANYURI': '',
\ 'XSD_QNAME': '',
\ 'XSD_NOTATION': '',
\ 'XSD_NORMALIZEDSTRING': '',
\ 'XSD_TOKEN': '',
\ 'XSD_LANGUAGE': '',
\ 'XSD_NMTOKEN': '',
\ 'XSD_NAME': '',
\ 'XSD_NCNAME': '',
\ 'XSD_ID': '',
\ 'XSD_IDREF': '',
\ 'XSD_IDREFS': '',
\ 'XSD_ENTITY': '',
\ 'XSD_ENTITIES': '',
\ 'XSD_INTEGER': '',
\ 'XSD_NONPOSITIVEINTEGER': '',
\ 'XSD_NEGATIVEINTEGER': '',
\ 'XSD_LONG': '',
\ 'XSD_INT': '',
\ 'XSD_SHORT': '',
\ 'XSD_BYTE': '',
\ 'XSD_NONNEGATIVEINTEGER': '',
\ 'XSD_UNSIGNEDLONG': '',
\ 'XSD_UNSIGNEDINT': '',
\ 'XSD_UNSIGNEDSHORT': '',
\ 'XSD_UNSIGNEDBYTE': '',
\ 'XSD_POSITIVEINTEGER': '',
\ 'XSD_NMTOKENS': '',
\ 'XSD_ANYTYPE': '',
\ 'XSD_ANYXML': '',
\ 'APACHE_MAP': '',
\ 'SOAP_ENC_OBJECT': '',
\ 'SOAP_ENC_ARRAY': '',
\ 'XSD_1999_TIMEINSTANT': '',
\ 'XSD_NAMESPACE': '',
\ 'XSD_1999_NAMESPACE': '',
\ 'SOAP_SINGLE_ELEMENT_ARRAYS': '',
\ 'SOAP_WAIT_ONE_WAY_CALLS': '',
\ 'SOAP_USE_XSI_ARRAY_TYPE': '',
\ }
let g:phpcomplete_builtin['constants']['solr'] = {
\ 'SOLR_MAJOR_VERSION': '',
\ 'SOLR_MINOR_VERSION': '',
\ 'SOLR_PATCH_VERSION': '',
\ 'SOLR_EXTENSION_VERSION': '',
\ }
let g:phpcomplete_builtin['constants']['sphinx'] = {
\ 'SEARCHD_OK': '',
\ 'SEARCHD_ERROR': '',
\ 'SEARCHD_RETRY': '',
\ 'SEARCHD_WARNING': '',
\ 'SPH_MATCH_ALL': '',
\ 'SPH_MATCH_ANY': '',
\ 'SPH_MATCH_PHRASE': '',
\ 'SPH_MATCH_BOOLEAN': '',
\ 'SPH_MATCH_EXTENDED': '',
\ 'SPH_MATCH_FULLSCAN': '',
\ 'SPH_MATCH_EXTENDED2': '',
\ 'SPH_RANK_PROXIMITY_BM25': '',
\ 'SPH_RANK_BM25': '',
\ 'SPH_RANK_NONE': '',
\ 'SPH_RANK_WORDCOUNT': '',
\ 'SPH_SORT_RELEVANCE': '',
\ 'SPH_SORT_ATTR_DESC': '',
\ 'SPH_SORT_ATTR_ASC': '',
\ 'SPH_SORT_TIME_SEGMENTS': '',
\ 'SPH_SORT_EXTENDED': '',
\ 'SPH_SORT_EXPR': '',
\ 'SPH_FILTER_VALUES': '',
\ 'SPH_FILTER_RANGE': '',
\ 'SPH_FILTER_FLOATRANGE': '',
\ 'SPH_ATTR_INTEGER': '',
\ 'SPH_ATTR_TIMESTAMP': '',
\ 'SPH_ATTR_ORDINAL': '',
\ 'SPH_ATTR_BOOL': '',
\ 'SPH_ATTR_FLOAT': '',
\ 'SPH_ATTR_MULTI': '',
\ 'SPH_GROUPBY_DAY': '',
\ 'SPH_GROUPBY_WEEK': '',
\ 'SPH_GROUPBY_MONTH': '',
\ 'SPH_GROUPBY_YEAR': '',
\ 'SPH_GROUPBY_ATTR': '',
\ 'SPH_GROUPBY_ATTRPAIR': '',
\ }
let g:phpcomplete_builtin['constants']['sqlite3'] = {
\ 'SQLITE3_ASSOC': '',
\ 'SQLITE3_NUM': '',
\ 'SQLITE3_BOTH': '',
\ 'SQLITE3_INTEGER': '',
\ 'SQLITE3_FLOAT': '',
\ 'SQLITE3_TEXT': '',
\ 'SQLITE3_BLOB': '',
\ 'SQLITE3_NULL': '',
\ 'SQLITE3_OPEN_READONLY': '',
\ 'SQLITE3_OPEN_READWRITE': '',
\ 'SQLITE3_OPEN_CREATE': '',
\ 'SQLITE3_DETERMINISTIC': '',
\ 'PHP_INT_MIN': '',
\ 'PHP_INT_MAX': '',
\ }
let g:phpcomplete_builtin['constants']['swoole'] = {
\ 'SWOOLE_BASE': '',
\ 'SWOOLE_THREAD': '',
\ 'SWOOLE_PROCESS': '',
\ 'SWOOLE_IPC_UNSOCK': '',
\ 'SWOOLE_IPC_MSGQUEUE': '',
\ 'SWOOLE_IPC_PREEMPTIVE': '',
\ 'SWOOLE_SOCK_TCP': '',
\ 'SWOOLE_SOCK_TCP6': '',
\ 'SWOOLE_SOCK_UDP': '',
\ 'SWOOLE_SOCK_UDP6': '',
\ 'SWOOLE_SOCK_UNIX_DGRAM': '',
\ 'SWOOLE_SOCK_UNIX_STREAM': '',
\ 'SWOOLE_TCP': '',
\ 'SWOOLE_TCP6': '',
\ 'SWOOLE_UDP': '',
\ 'SWOOLE_UDP6': '',
\ 'SWOOLE_UNIX_DGRAM': '',
\ 'SWOOLE_UNIX_STREAM': '',
\ 'SWOOLE_SOCK_SYNC': '',
\ 'SWOOLE_SOCK_ASYNC': '',
\ 'SWOOLE_SYNC': '',
\ 'SWOOLE_ASYNC': '',
\ 'SWOOLE_KEEP': '',
\ 'SWOOLE_EVENT_READ': '',
\ 'SWOOLE_EVENT_WRITE': '',
\ 'SWOOLE_VERSION': '',
\ 'SWOOLE_AIO_BASE': '',
\ 'SWOOLE_AIO_LINUX': '',
\ 'SWOOLE_FILELOCK': '',
\ 'SWOOLE_MUTEX': '',
\ 'SWOOLE_SEM': '',
\ 'SWOOLE_RWLOCK': '',
\ 'WEBSOCKET_OPCODE_TEXT': '',
\ 'WEBSOCKET_OPCODE_BINARY': '',
\ 'WEBSOCKET_OPCODE_PING': '',
\ 'WEBSOCKET_STATUS_CONNECTION': '',
\ 'WEBSOCKET_STATUS_HANDSHAKE': '',
\ 'WEBSOCKET_STATUS_FRAME': '',
\ 'WEBSOCKET_STATUS_ACTIVE': '',
\ 'SWOOLE_FAST_PACK': '',
\ }
let g:phpcomplete_builtin['constants']['list_of_parser_tokens'] = {
\ 'T_FILE': '',
\ 'T_TRAIT': '',
\ 'T_ABSTRACT': '',
\ 'T_AND_EQUAL': '',
\ 'T_ARRAY': '',
\ 'T_ARRAY_CAST': '',
\ 'T_AS': '',
\ 'T_BAD_CHARACTER': '',
\ 'T_BOOLEAN_AND': '',
\ 'T_BOOLEAN_OR': '',
\ 'T_BOOL_CAST': '',
\ 'T_BREAK': '',
\ 'T_CALLABLE': '',
\ 'T_CASE': '',
\ 'T_CATCH': '',
\ 'T_CHARACTER': '',
\ 'T_CLASS': '',
\ 'T_CLASS_C': '',
\ 'T_CLONE': '',
\ 'T_CLOSE_TAG': '',
\ 'T_COALESCE': '',
\ 'T_COMMENT': '',
\ 'T_CONCAT_EQUAL': '',
\ 'T_CONST': '',
\ 'T_CONSTANT_ENCAPSED_STRING': '',
\ 'T_CONTINUE': '',
\ 'T_CURLY_OPEN': '',
\ 'T_DEC': '',
\ 'T_DECLARE': '',
\ 'T_DEFAULT': '',
\ 'T_DIR': '',
\ 'T_DIV_EQUAL': '',
\ 'T_DNUMBER': '',
\ 'T_DOC_COMMENT': '',
\ 'T_DO': '',
\ 'T_DOLLAR_OPEN_CURLY_BRACES': '',
\ 'T_DOUBLE_ARROW': '',
\ 'T_DOUBLE_CAST': '',
\ 'T_DOUBLE_COLON': '',
\ 'T_PAAMAYIM_NEKUDOTAYIM': '',
\ 'T_ECHO': '',
\ 'T_ELLIPSIS': '',
\ 'T_ELSE': '',
\ 'T_ELSEIF': '',
\ 'T_EMPTY': '',
\ 'T_ENCAPSED_AND_WHITESPACE': '',
\ 'T_ENDDECLARE': '',
\ 'T_ENDFOR': '',
\ 'T_ENDFOREACH': '',
\ 'T_ENDIF': '',
\ 'T_ENDSWITCH': '',
\ 'T_ENDWHILE': '',
\ 'T_END_HEREDOC': '',
\ 'T_EVAL': '',
\ 'T_EXIT': '',
\ 'T_EXTENDS': '',
\ 'T_FINAL': '',
\ 'T_FINALLY': '',
\ 'T_FOR': '',
\ 'T_FOREACH': '',
\ 'T_FUNCTION': '',
\ 'T_FUNC_C': '',
\ 'T_GLOBAL': '',
\ 'T_GOTO': '',
\ 'T_HALT_COMPILER': '',
\ 'T_IF': '',
\ 'T_IMPLEMENTS': '',
\ 'T_INC': '',
\ 'T_INCLUDE': '',
\ 'T_INCLUDE_ONCE': '',
\ 'T_INLINE_HTML': '',
\ 'T_INSTANCEOF': '',
\ 'T_INSTEADOF': '',
\ 'T_INT_CAST': '',
\ 'T_INTERFACE': '',
\ 'T_ISSET': '',
\ 'T_IS_EQUAL': '',
\ 'T_IS_GREATER_OR_EQUAL': '',
\ 'T_IS_IDENTICAL': '',
\ 'T_IS_NOT_EQUAL': '',
\ 'T_IS_NOT_IDENTICAL': '',
\ 'T_IS_SMALLER_OR_EQUAL': '',
\ 'T_SPACESHIP': '',
\ 'T_LINE': '',
\ 'T_LIST': '',
\ 'T_LNUMBER': '',
\ 'T_LOGICAL_AND': '',
\ 'T_LOGICAL_OR': '',
\ 'T_LOGICAL_XOR': '',
\ 'T_METHOD_C': '',
\ 'T_MINUS_EQUAL': '',
\ 'T_MOD_EQUAL': '',
\ 'T_MUL_EQUAL': '',
\ 'T_NAMESPACE': '',
\ 'T_NS_C': '',
\ 'T_NS_SEPARATOR': '',
\ 'T_NEW': '',
\ 'T_NUM_STRING': '',
\ 'T_OBJECT_CAST': '',
\ 'T_OBJECT_OPERATOR': '',
\ 'T_OPEN_TAG': '',
\ 'T_OPEN_TAG_WITH_ECHO': '',
\ 'T_OR_EQUAL': '',
\ 'T_PLUS_EQUAL': '',
\ 'T_POW': '',
\ 'T_POW_EQUAL': '',
\ 'T_PRINT': '',
\ 'T_PRIVATE': '',
\ 'T_PUBLIC': '',
\ 'T_PROTECTED': '',
\ 'T_REQUIRE': '',
\ 'T_REQUIRE_ONCE': '',
\ 'T_RETURN': '',
\ 'T_SL': '',
\ 'T_SL_EQUAL': '',
\ 'T_SR': '',
\ 'T_SR_EQUAL': '',
\ 'T_START_HEREDOC': '',
\ 'T_STATIC': '',
\ 'T_STRING': '',
\ 'T_STRING_CAST': '',
\ 'T_STRING_VARNAME': '',
\ 'T_SWITCH': '',
\ 'T_THROW': '',
\ 'T_TRAIT_C': '',
\ 'T_TRY': '',
\ 'T_UNSET': '',
\ 'T_UNSET_CAST': '',
\ 'T_USE': '',
\ 'T_VAR': '',
\ 'T_VARIABLE': '',
\ 'T_WHILE': '',
\ 'T_WHITESPACE': '',
\ 'T_XOR_EQUAL': '',
\ 'T_YIELD': '',
\ 'T_YIELD_FROM': '',
\ }
let g:phpcomplete_builtin['constants']['trader'] = {
\ 'TRADER_MA_TYPE_SMA': '',
\ 'TRADER_MA_TYPE_EMA': '',
\ 'TRADER_MA_TYPE_WMA': '',
\ 'TRADER_MA_TYPE_DEMA': '',
\ 'TRADER_MA_TYPE_TEMA': '',
\ 'TRADER_MA_TYPE_TRIMA': '',
\ 'TRADER_MA_TYPE_KAMA': '',
\ 'TRADER_MA_TYPE_MAMA': '',
\ 'TRADER_MA_TYPE_T3': '',
\ 'TRADER_REAL_MIN': '',
\ 'TRADER_REAL_MAX': '',
\ 'TRADER_FUNC_UNST_ADX': '',
\ 'TRADER_FUNC_UNST_ADXR': '',
\ 'TRADER_FUNC_UNST_ATR': '',
\ 'TRADER_FUNC_UNST_CMO': '',
\ 'TRADER_FUNC_UNST_DX': '',
\ 'TRADER_FUNC_UNST_EMA': '',
\ 'TRADER_FUNC_UNST_HT_DCPERIOD': '',
\ 'TRADER_FUNC_UNST_HT_DCPHASE': '',
\ 'TRADER_FUNC_UNST_HT_PHASOR': '',
\ 'TRADER_FUNC_UNST_HT_SINE': '',
\ 'TRADER_FUNC_UNST_HT_TRENDLINE': '',
\ 'TRADER_FUNC_UNST_HT_TRENDMODE': '',
\ 'TRADER_FUNC_UNST_KAMA': '',
\ 'TRADER_FUNC_UNST_MAMA': '',
\ 'TRADER_FUNC_UNST_MFI': '',
\ 'TRADER_FUNC_UNST_MINUS_DI': '',
\ 'TRADER_FUNC_UNST_MINUS_DM': '',
\ 'TRADER_FUNC_UNST_NATR': '',
\ 'TRADER_FUNC_UNST_PLUS_DI': '',
\ 'TRADER_FUNC_UNST_PLUS_DM': '',
\ 'TRADER_FUNC_UNST_RSI': '',
\ 'TRADER_FUNC_UNST_STOCHRSI': '',
\ 'TRADER_FUNC_UNST_T3': '',
\ 'TRADER_FUNC_UNST_ALL': '',
\ 'TRADER_FUNC_UNST_NONE': '',
\ 'TRADER_COMPATIBILITY_DEFAULT': '',
\ 'TRADER_COMPATIBILITY_METASTOCK': '',
\ 'TRADER_ERR_SUCCESS': '',
\ 'TRADER_ERR_LIB_NOT_INITIALIZE': '',
\ 'TRADER_ERR_BAD_PARAM': '',
\ 'TRADER_ERR_ALLOC_ERR': '',
\ 'TRADER_ERR_GROUP_NOT_FOUND': '',
\ 'TRADER_ERR_FUNC_NOT_FOUND': '',
\ 'TRADER_ERR_INVALID_HANDLE': '',
\ 'TRADER_ERR_INVALID_PARAM_HOLDER': '',
\ 'TRADER_ERR_INVALID_PARAM_HOLDER_TYPE': '',
\ 'TRADER_ERR_INVALID_PARAM_FUNCTION': '',
\ 'TRADER_ERR_INPUT_NOT_ALL_INITIALIZE': '',
\ 'TRADER_ERR_OUTPUT_NOT_ALL_INITIALIZE': '',
\ 'TRADER_ERR_OUT_OF_RANGE_START_INDEX': '',
\ 'TRADER_ERR_OUT_OF_RANGE_END_INDEX': '',
\ 'TRADER_ERR_INVALID_LIST_TYPE': '',
\ 'TRADER_ERR_BAD_OBJECT': '',
\ 'TRADER_ERR_NOT_SUPPORTED': '',
\ 'TRADER_ERR_INTERNAL_ERROR': '',
\ 'TRADER_ERR_UNKNOWN_ERROR': '',
\ }
let g:phpcomplete_builtin['constants']['php_type_comparison_tables'] = {
\ 'NAN': '',
\ }
let g:phpcomplete_builtin['constants']['varnish'] = {
\ 'VARNISH_STATUS_SYNTAX': '',
\ 'VARNISH_STATUS_UNKNOWN': '',
\ 'VARNISH_STATUS_UNIMPL': '',
\ 'VARNISH_STATUS_TOOFEW': '',
\ 'VARNISH_STATUS_TOOMANY': '',
\ 'VARNISH_STATUS_PARAM': '',
\ 'VARNISH_STATUS_AUTH': '',
\ 'VARNISH_STATUS_OK': '',
\ 'VARNISH_STATUS_CANT': '',
\ 'VARNISH_STATUS_COMMS': '',
\ 'VARNISH_STATUS_CLOSE': '',
\ 'VARNISH_CONFIG_IDENT': '',
\ 'VARNISH_CONFIG_HOST': '',
\ 'VARNISH_CONFIG_PORT': '',
\ 'VARNISH_CONFIG_TIMEOUT': '',
\ 'VARNISH_CONFIG_SECRET': '',
\ 'VARNISH_CONFIG_COMPAT': '',
\ 'VARNISH_COMPAT_2': '',
\ 'VARNISH_COMPAT_3': '',
\ }
let g:phpcomplete_builtin['constants']['supported_protocols_and_wrappers'] = {
\ 'OGGVORBIS_PCM_U8': '',
\ 'OGGVORBIS_PCM_S8': '',
\ 'OGGVORBIS_PCM_U16_BE': '',
\ 'OGGVORBIS_PCM_S16_BE': '',
\ 'OGGVORBIS_PCM_U16_LE': '',
\ 'OGGVORBIS_PCM_S16_LE': '',
\ 'STDIN': '',
\ 'STDOUT': '',
\ 'STDERR': '',
\ 'SSH2_TERM_UNIT_CHARS': '',
\ }
let g:phpcomplete_builtin['constants']['xsl'] = {
\ 'XSL_CLONE_AUTO': '',
\ 'XSL_CLONE_NEVER': '',
\ 'XSL_CLONE_ALWAYS': '',
\ 'LIBXSLT_VERSION': '',
\ 'LIBXSLT_DOTTED_VERSION': '',
\ 'LIBEXSLT_VERSION': '',
\ 'LIBEXSLT_DOTTED_VERSION': '',
\ 'XSL_SECPREF_NONE': '',
\ 'XSL_SECPREF_READ_FILE': '',
\ 'XSL_SECPREF_WRITE_FILE': '',
\ 'XSL_SECPREF_CREATE_DIRECTORY': '',
\ 'XSL_SECPREF_READ_NETWORK': '',
\ 'XSL_SECPREF_WRITE_NETWORK': '',
\ 'XSL_SECPREF_DEFAULT': '',
\ }
let g:phpcomplete_builtin['constants']['yaf'] = {
\ 'YAF_VERSION': '',
\ 'YAF_ENVIRON': '',
\ 'YAF_ERR_STARTUP_FAILED': '',
\ 'YAF_ERR_ROUTE_FAILED': '',
\ 'YAF_ERR_DISPATCH_FAILED': '',
\ 'YAF_ERR_AUTOLOAD_FAILED': '',
\ 'YAF_ERR_NOTFOUND_MODULE': '',
\ 'YAF_ERR_NOTFOUND_CONTROLLER': '',
\ 'YAF_ERR_NOTFOUND_ACTION': '',
\ 'YAF_ERR_NOTFOUND_VIEW': '',
\ 'YAF_ERR_CALL_FAILED': '',
\ 'YAF_ERR_TYPE_ERROR': '',
\ }
let g:phpcomplete_builtin['constants']['yar'] = {
\ 'YAR_VERSION': '',
\ 'YAR_CLIENT_PROTOCOL_HTTP': '',
\ 'YAR_OPT_PACKAGER': '',
\ 'YAR_OPT_TIMEOUT': '',
\ 'YAR_OPT_CONNECT_TIMEOUT': '',
\ 'YAR_OPT_HEADER': '',
\ 'YAR_PACKAGER_PHP': '',
\ 'YAR_PACKAGER_JSON': '',
\ 'YAR_ERR_OKEY': '',
\ 'YAR_ERR_OUTPUT': '',
\ 'YAR_ERR_TRANSPORT': '',
\ 'YAR_ERR_REQUEST': '',
\ 'YAR_ERR_PROTOCOL': '',
\ 'YAR_ERR_PACKAGER': '',
\ 'YAR_ERR_EXCEPTION': '',
\ }
